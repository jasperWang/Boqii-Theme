android.net.http.SslError -> android.a.a.a:
    int mErrors -> a
    android.net.http.SslCertificate mCertificate -> b
    int getPrimaryError() -> a
    java.lang.String toString() -> toString
android.support.v13.dreams.BasicDream -> android.support.v13.dreams.BasicDream:
    android.view.View mView -> a
    boolean mPlugged -> b
    android.content.BroadcastReceiver mPowerIntentReceiver -> c
    void onStart() -> onStart
    void onPause() -> onPause
    void onStop() -> onStop
    void setContentView(android.view.View) -> setContentView
    void onDraw$262b7b90() -> a
    void onUserInteraction() -> onUserInteraction
    boolean access$000(android.support.v13.dreams.BasicDream) -> a
    boolean access$002(android.support.v13.dreams.BasicDream,boolean) -> a
android.support.v13.dreams.BasicDream$1 -> android.support.v13.dreams.a:
    android.support.v13.dreams.BasicDream this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
android.support.v13.dreams.BasicDream$BasicDreamView -> android.support.v13.dreams.b:
    android.support.v13.dreams.BasicDream this$0 -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void onDraw(android.graphics.Canvas) -> onDraw
android.support.v4.app.BackStackRecord -> android.support.v4.app.a:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    void dump$ec96877(java.lang.String,java.io.PrintWriter) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    void bumpBackStackNesting(int) -> a
    void run() -> run
    void popFromBackStack$1385ff() -> a
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.b:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.c:
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    java.util.HashMap sClassMap -> L
    int mState -> a
    android.view.View mAnimatingAway -> b
    int mStateAfterAnimating -> c
    android.os.Bundle mSavedFragmentState -> d
    android.util.SparseArray mSavedViewState -> e
    int mIndex -> f
    java.lang.String mWho -> g
    android.os.Bundle mArguments -> h
    android.support.v4.app.Fragment mTarget -> i
    int mTargetIndex -> j
    int mTargetRequestCode -> k
    boolean mAdded -> l
    boolean mRemoving -> m
    boolean mResumed -> n
    boolean mFromLayout -> o
    boolean mInLayout -> p
    boolean mRestored -> q
    int mBackStackNesting -> r
    android.support.v4.app.FragmentManager mFragmentManager -> s
    android.support.v4.app.FragmentActivity mActivity -> t
    int mFragmentId -> u
    int mContainerId -> v
    java.lang.String mTag -> w
    boolean mHidden -> x
    boolean mDetached -> y
    boolean mRetainInstance -> z
    boolean mRetaining -> A
    boolean mHasMenu -> B
    boolean mMenuVisible -> C
    boolean mCalled -> D
    int mNextAnim -> E
    android.view.ViewGroup mContainer -> F
    android.view.View mView -> G
    android.view.View mInnerView -> H
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> I
    boolean mLoadersStarted -> J
    boolean mCheckedForLoaderManager -> K
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    void restoreViewState() -> a
    void setIndex(int) -> a
    boolean isInBackStack() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void onHiddenChanged$1385ff() -> c
    void onActivityResult$6eb84b52() -> d
    android.view.LayoutInflater getLayoutInflater$2ee30c11() -> e
    void onInflate$423a76cd() -> f
    void onAttach$63a22f9() -> g
    android.view.animation.Animation onCreateAnimation$24236ca7() -> h
    void onCreate$79e5e33f() -> i
    android.view.View onCreateView$469ccb8a() -> j
    void onViewCreated$65f1d89() -> k
    void onActivityCreated$79e5e33f() -> l
    void onResume() -> m
    void onSaveInstanceState$79e5e33f() -> n
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> o
    void onLowMemory() -> onLowMemory
    void onDestroy() -> p
    void initState() -> q
    void onDetach() -> r
    void onCreateOptionsMenu$761f6f96() -> s
    void onPrepareOptionsMenu$1eec55bd() -> t
    void onDestroyOptionsMenu() -> u
    boolean onOptionsItemSelected$1b88ab4c() -> v
    void onOptionsMenuClosed$1eec55bd() -> w
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected$1b88ab4c() -> x
    void dump$ec96877$79f041d6(java.lang.String,java.io.PrintWriter) -> a
    void performStart() -> y
    void performStop() -> z
    void performReallyStop() -> A
    void performDestroyView() -> B
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.d:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.e:
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.FragmentActivity:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    boolean mCreated -> c
    boolean mResumed -> d
    boolean mStopped -> e
    boolean mReallyStopped -> f
    boolean mRetaining -> g
    boolean mOptionsMenuInvalidated -> h
    boolean mCheckedForLoaderManager -> i
    boolean mLoadersStarted -> j
    android.support.v4.app.HCSparseArray mAllLoaderManagers -> k
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> l
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    void supportInvalidateOptionsMenu() -> a
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    void doReallyStop(boolean) -> a
    void onAttachFragment$65850823() -> b
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragmentIndex(int) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager$3d2266e4(int) -> b
android.support.v4.app.FragmentActivity$1 -> android.support.v4.app.f:
    android.support.v4.app.FragmentActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.g:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.h:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    java.util.HashMap children -> c
    java.util.ArrayList fragments -> d
    android.support.v4.app.HCSparseArray loaders -> e
android.support.v4.app.FragmentManager -> android.support.v4.app.i:
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.j:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    boolean mNeedMenuInvalidate -> p
    boolean mStateSaved -> q
    boolean mDestroyed -> r
    java.lang.String mNoTransactionsBecause -> s
    android.os.Bundle mStateBundle -> t
    android.util.SparseArray mStateArray -> u
    java.lang.Runnable mExecCommit -> v
    android.view.animation.Interpolator DECELERATE_QUINT -> w
    android.view.animation.Interpolator DECELERATE_CUBIC -> x
    android.view.animation.Interpolator ACCELERATE_QUINT -> y
    android.view.animation.Interpolator ACCELERATE_CUBIC -> z
    boolean popBackStackImmediate() -> a
    java.lang.String toString() -> toString
    void dump$ec96877(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter) -> a
    android.view.animation.Animation makeOpenCloseAnimation$376f30fd(float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation$424ea1bd(float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int) -> a
    void moveToState(android.support.v4.app.Fragment) -> a
    void moveToState$2563266(int) -> d
    void moveToState(int,int,int,boolean) -> a
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> b
    void reportBackStackChanged() -> t
    void addBackStackState(android.support.v4.app.BackStackRecord) -> a
    java.util.ArrayList retainNonConfig() -> c
    void saveFragmentViewState(android.support.v4.app.Fragment) -> b
    android.os.Parcelable saveAllState() -> d
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity) -> a
    void noteStateNotSaved() -> e
    void dispatchCreate() -> f
    void dispatchActivityCreated() -> g
    void dispatchStart() -> h
    void dispatchResume() -> i
    void dispatchPause() -> j
    void dispatchStop() -> k
    void dispatchReallyStop() -> l
    void dispatchDestroy() -> m
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> n
    boolean dispatchCreateOptionsMenu$761f6f92() -> o
    boolean dispatchPrepareOptionsMenu$1eec55b9() -> p
    boolean dispatchOptionsItemSelected$1b88ab4c() -> q
    boolean dispatchContextItemSelected$1b88ab4c() -> r
    void dispatchOptionsMenuClosed$1eec55bd() -> s
    int reverseTransit(int) -> c
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.k:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.l:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.m:
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.n:
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTransaction -> android.support.v4.app.o:
android.support.v4.app.HCSparseArray -> android.support.v4.app.p:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    java.lang.Object get(int) -> a
    void remove(int) -> b
    void removeAt(int) -> c
    void gc() -> c
    int size() -> a
    int keyAt(int) -> d
    java.lang.Object valueAt(int) -> e
    void clear() -> b
    int binarySearch$76412d8d(int[],int,int) -> a
android.support.v4.app.LoaderManager -> android.support.v4.app.q:
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.r:
    android.support.v4.content.Loader onCreateLoader$e57f803() -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.s:
    boolean DEBUG -> a
    android.support.v4.app.HCSparseArray mLoaders -> b
    android.support.v4.app.HCSparseArray mInactiveLoaders -> c
    android.support.v4.app.FragmentActivity mActivity -> d
    boolean mStarted -> e
    boolean mRetaining -> f
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> a
    void doStop() -> b
    void doRetain() -> c
    void finishRetain() -> d
    void doReportNextStart() -> e
    void doReportStart() -> f
    void doDestroy() -> g
    java.lang.String toString() -> toString
    void dump$ec96877$79f041d6(java.lang.String,java.io.PrintWriter) -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.t:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void stop() -> a
    void destroy() -> b
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump$ec96877$79f041d6(java.lang.String,java.io.PrintWriter) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.u:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.v:
android.support.v4.content.Loader -> android.support.v4.a.a:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void stopLoading() -> b
    void reset() -> c
    java.lang.String toString() -> toString
    void dump$ec96877(java.lang.String,java.io.PrintWriter) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.b:
android.support.v4.os.ParcelableCompat -> android.support.v4.b.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.b.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.b.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.b.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.util.DebugUtils -> android.support.v4.c.a:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.c.b:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.LruCache -> android.support.v4.c.c:
    java.util.LinkedHashMap map -> a
    int size -> b
    int maxSize -> c
    int putCount -> d
    int evictionCount -> e
    int hitCount -> f
    int missCount -> g
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    void trimToSize(int) -> a
    void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    int safeSizeOf(java.lang.Object,java.lang.Object) -> b
    int sizeOf$2838e5a0(java.lang.Object) -> b
    java.lang.String toString() -> toString
android.support.v4.view.KeyEventCompat -> android.support.v4.view.a:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers$79c6ddc0(android.view.KeyEvent) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> b
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.b:
    int metaStateFilterDirectionalModifiers$2e71581f(int,int,int,int) -> a
    int normalizeMetaState(int) -> c
    boolean metaStateHasModifiers$255f299(int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.c:
    boolean metaStateHasModifiers$255f299(int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.d:
    boolean metaStateHasModifiers$255f299(int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.MotionEventCompat -> android.support.v4.view.e:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionIndex(android.view.MotionEvent) -> a
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.f:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.g:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.h:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.PagerAdapter -> android.support.v4.view.i:
    android.support.v4.view.PagerAdapter$DataSetObserver mObserver -> a
    int getCount() -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem$7e55ba3e(android.view.View,int) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    void setDataSetObserver(android.support.v4.view.PagerAdapter$DataSetObserver) -> a
android.support.v4.view.PagerAdapter$DataSetObserver -> android.support.v4.view.j:
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.k:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.l:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.m:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.n:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.ViewCompat -> android.support.v4.view.o:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.p:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.q:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.r:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.s:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewConfigurationCompat -> android.support.v4.view.t:
    android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl IMPL -> a
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$BaseViewConfigurationVersionImpl -> android.support.v4.view.u:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$FroyoViewConfigurationVersionImpl -> android.support.v4.view.v:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl -> android.support.v4.view.w:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    java.util.Comparator COMPARATOR -> a
    android.view.animation.Interpolator sInterpolator -> b
    java.util.ArrayList mItems -> c
    android.support.v4.view.PagerAdapter mAdapter -> d
    int mCurItem -> e
    int mRestoredCurItem -> f
    android.os.Parcelable mRestoredAdapterState -> g
    java.lang.ClassLoader mRestoredClassLoader -> h
    android.widget.Scroller mScroller -> i
    android.support.v4.view.PagerAdapter$DataSetObserver mObserver -> j
    int mPageMargin -> k
    android.graphics.drawable.Drawable mMarginDrawable -> l
    int mChildWidthMeasureSpec -> m
    int mChildHeightMeasureSpec -> n
    boolean mInLayout -> o
    boolean mScrollingCacheEnabled -> p
    boolean mPopulatePending -> q
    boolean mScrolling -> r
    int mOffscreenPageLimit -> s
    boolean mIsBeingDragged -> t
    boolean mIsUnableToDrag -> u
    int mTouchSlop -> v
    float mInitialMotionX -> w
    float mLastMotionX -> x
    float mLastMotionY -> y
    int mActivePointerId -> z
    android.view.VelocityTracker mVelocityTracker -> A
    int mMinimumVelocity -> B
    int mMaximumVelocity -> C
    float mBaseLineFlingVelocity -> D
    float mFlingVelocityInfluence -> E
    boolean mFakeDragging -> F
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> G
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> H
    boolean mFirstLayout -> I
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> J
    int mScrollState -> K
    void initViewPager() -> a
    void setScrollState(int) -> b
    void setAdapter(android.support.v4.view.PagerAdapter) -> a
    void setCurrentItem(int) -> a
    void setCurrentItem$2563266(int) -> c
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> a
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    void addNewItem(int,int) -> a
    void populate() -> b
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    void completeScroll() -> c
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> d
    void setScrollingCacheEnabled(boolean) -> a
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean arrowScroll(int) -> d
    boolean pageLeft() -> e
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
android.support.v4.view.ViewPager$1 -> android.support.v4.view.x:
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.y:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$DataSetObserver -> android.support.v4.view.z:
    android.support.v4.view.ViewPager this$0 -> a
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.aa:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.ab:
    void onPageSelected(int) -> a
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.ac:
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.d.a:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.d.b:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.d.c:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.d.d:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.webkit.WebViewClient -> android.webkit.WebViewClient:
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
    void onLoadResource(android.webkit.WebView,java.lang.String) -> onLoadResource
    void onTooManyRedirects(android.webkit.WebView,android.os.Message,android.os.Message) -> onTooManyRedirects
    void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String) -> onReceivedError
    void onFormResubmission(android.webkit.WebView,android.os.Message,android.os.Message) -> onFormResubmission
    void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean) -> doUpdateVisitedHistory
    void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError) -> onReceivedSslError
    void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String) -> onReceivedHttpAuthRequest
    boolean shouldOverrideKeyEvent(android.webkit.WebView,android.view.KeyEvent) -> shouldOverrideKeyEvent
    void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent) -> onUnhandledKeyEvent
    void onScaleChanged(android.webkit.WebView,float,float) -> onScaleChanged
com.alipay.android.app.IAliPay -> com.alipay.android.app.IAliPay:
    java.lang.String Pay(java.lang.String,java.lang.String,java.lang.String) -> Pay
    java.lang.String test() -> test
    void registerCallback(com.alipay.android.app.IRemoteServiceCallback) -> registerCallback
    void unregisterCallback(com.alipay.android.app.IRemoteServiceCallback) -> unregisterCallback
com.alipay.android.app.IAliPay$Stub -> com.alipay.android.app.IAliPay$Stub:
    java.lang.String DESCRIPTOR -> DESCRIPTOR
    int TRANSACTION_Pay -> TRANSACTION_Pay
    int TRANSACTION_test -> TRANSACTION_test
    int TRANSACTION_registerCallback -> TRANSACTION_registerCallback
    int TRANSACTION_unregisterCallback -> TRANSACTION_unregisterCallback
    com.alipay.android.app.IAliPay asInterface(android.os.IBinder) -> asInterface
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.alipay.android.app.IAliPay$Stub$Proxy -> com.alipay.android.app.IAliPay$Stub$Proxy:
    android.os.IBinder mRemote -> mRemote
    android.os.IBinder asBinder() -> asBinder
    java.lang.String getInterfaceDescriptor() -> getInterfaceDescriptor
    java.lang.String Pay(java.lang.String,java.lang.String,java.lang.String) -> Pay
    java.lang.String test() -> test
    void registerCallback(com.alipay.android.app.IRemoteServiceCallback) -> registerCallback
    void unregisterCallback(com.alipay.android.app.IRemoteServiceCallback) -> unregisterCallback
com.alipay.android.app.IAlixPay -> com.alipay.android.app.IAlixPay:
    java.lang.String Pay(java.lang.String) -> Pay
    java.lang.String test() -> test
    void registerCallback(com.alipay.android.app.IRemoteServiceCallback) -> registerCallback
    void unregisterCallback(com.alipay.android.app.IRemoteServiceCallback) -> unregisterCallback
com.alipay.android.app.IAlixPay$Stub -> com.alipay.android.app.IAlixPay$Stub:
    java.lang.String DESCRIPTOR -> DESCRIPTOR
    int TRANSACTION_Pay -> TRANSACTION_Pay
    int TRANSACTION_test -> TRANSACTION_test
    int TRANSACTION_registerCallback -> TRANSACTION_registerCallback
    int TRANSACTION_unregisterCallback -> TRANSACTION_unregisterCallback
    com.alipay.android.app.IAlixPay asInterface(android.os.IBinder) -> asInterface
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.alipay.android.app.IAlixPay$Stub$Proxy -> com.alipay.android.app.IAlixPay$Stub$Proxy:
    android.os.IBinder mRemote -> mRemote
    android.os.IBinder asBinder() -> asBinder
    java.lang.String getInterfaceDescriptor() -> getInterfaceDescriptor
    java.lang.String Pay(java.lang.String) -> Pay
    java.lang.String test() -> test
    void registerCallback(com.alipay.android.app.IRemoteServiceCallback) -> registerCallback
    void unregisterCallback(com.alipay.android.app.IRemoteServiceCallback) -> unregisterCallback
com.alipay.android.app.IRemoteServiceCallback -> com.alipay.android.app.IRemoteServiceCallback:
    void startActivity(java.lang.String,java.lang.String,int,android.os.Bundle) -> startActivity
com.alipay.android.app.IRemoteServiceCallback$Stub -> com.alipay.android.app.IRemoteServiceCallback$Stub:
    java.lang.String DESCRIPTOR -> DESCRIPTOR
    int TRANSACTION_startActivity -> TRANSACTION_startActivity
    com.alipay.android.app.IRemoteServiceCallback asInterface(android.os.IBinder) -> asInterface
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.alipay.android.app.IRemoteServiceCallback$Stub$Proxy -> com.alipay.android.app.IRemoteServiceCallback$Stub$Proxy:
    android.os.IBinder mRemote -> mRemote
    android.os.IBinder asBinder() -> asBinder
    java.lang.String getInterfaceDescriptor() -> getInterfaceDescriptor
    void startActivity(java.lang.String,java.lang.String,int,android.os.Bundle) -> startActivity
com.amap.mapapi.busline.BusLineItem -> com.amap.mapapi.busline.BusLineItem:
    float a -> a
    java.lang.String b -> b
    int c -> c
    java.lang.String d -> d
    int e -> e
    float f -> f
    java.util.ArrayList g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    java.lang.String j -> j
    java.lang.String k -> k
    java.lang.String l -> l
    java.lang.String m -> m
    java.lang.String n -> n
    float o -> o
    float p -> p
    boolean q -> q
    boolean r -> r
    boolean s -> s
    boolean t -> t
    boolean u -> u
    int v -> v
    boolean w -> w
    java.lang.String x -> x
    java.lang.String y -> y
    boolean z -> z
    java.util.ArrayList A -> A
    com.amap.mapapi.core.GeoPoint B -> B
    com.amap.mapapi.core.GeoPoint C -> C
    void a() -> a
    com.amap.mapapi.core.GeoPoint getLowerLeftPoint() -> getLowerLeftPoint
    com.amap.mapapi.core.GeoPoint getUpperRightPoint() -> getUpperRightPoint
    float getmLength() -> getmLength
    void setmLength(float) -> setmLength
    java.lang.String getmName() -> getmName
    void setmName(java.lang.String) -> setmName
    int getmType() -> getmType
    void setmType(int) -> setmType
    java.lang.String getmDescription() -> getmDescription
    void setmDescription(java.lang.String) -> setmDescription
    int getmStatus() -> getmStatus
    void setmStatus(int) -> setmStatus
    float getmSpeed() -> getmSpeed
    void setmSpeed(float) -> setmSpeed
    java.util.ArrayList getmXys() -> getmXys
    void setmXys(java.util.ArrayList) -> setmXys
    java.lang.String getmLineId() -> getmLineId
    void setmLineId(java.lang.String) -> setmLineId
    java.lang.String getmKeyName() -> getmKeyName
    void setmKeyName(java.lang.String) -> setmKeyName
    java.lang.String getmFrontName() -> getmFrontName
    void setmFrontName(java.lang.String) -> setmFrontName
    java.lang.String getmTerminalName() -> getmTerminalName
    void setmTerminalName(java.lang.String) -> setmTerminalName
    java.lang.String getmStartTime() -> getmStartTime
    void setmStartTime(java.lang.String) -> setmStartTime
    java.lang.String getmEndTime() -> getmEndTime
    void setmEndTime(java.lang.String) -> setmEndTime
    java.lang.String getmCompany() -> getmCompany
    void setmCompany(java.lang.String) -> setmCompany
    float getmBasicPrice() -> getmBasicPrice
    void setmBasicPrice(float) -> setmBasicPrice
    float getmTotalPrice() -> getmTotalPrice
    void setmTotalPrice(float) -> setmTotalPrice
    boolean getmCommunicationTicket() -> getmCommunicationTicket
    void setmCommunicationTicket(boolean) -> setmCommunicationTicket
    boolean getmAuto() -> getmAuto
    void setmAuto(boolean) -> setmAuto
    boolean ismIcCard() -> ismIcCard
    void setmIcCard(boolean) -> setmIcCard
    boolean ismLoop() -> ismLoop
    void setmLoop(boolean) -> setmLoop
    boolean ismDoubleDeck() -> ismDoubleDeck
    void setmDoubleDeck(boolean) -> setmDoubleDeck
    int getmDataSource() -> getmDataSource
    void setmDataSource(int) -> setmDataSource
    boolean getmAir() -> getmAir
    void setmAir(boolean) -> setmAir
    java.lang.String getmFrontSpell() -> getmFrontSpell
    void setmFrontSpell(java.lang.String) -> setmFrontSpell
    java.lang.String getmTerminalSpell() -> getmTerminalSpell
    void setmTerminalSpell(java.lang.String) -> setmTerminalSpell
    boolean ismExpressWay() -> ismExpressWay
    void setmExpressWay(boolean) -> setmExpressWay
    java.util.ArrayList getmStations() -> getmStations
    void setmStations(java.util.ArrayList) -> setmStations
    java.lang.String toString() -> toString
com.amap.mapapi.busline.BusPagedResult -> com.amap.mapapi.busline.BusPagedResult:
    int a -> a
    java.util.ArrayList b -> b
    com.amap.mapapi.busline.a c -> c
    com.amap.mapapi.busline.BusPagedResult a(com.amap.mapapi.busline.a,java.util.ArrayList) -> a
    int a(int) -> a
    void a(java.util.ArrayList) -> a
    int getPageCount() -> getPageCount
    com.amap.mapapi.busline.BusQuery getQuery() -> getQuery
    boolean b(int) -> b
    java.util.List getPageLocal(int) -> getPageLocal
    java.util.List getPage(int) -> getPage
com.amap.mapapi.busline.BusQuery -> com.amap.mapapi.busline.BusQuery:
    java.lang.String a -> a
    com.amap.mapapi.busline.BusQuery$SearchType b -> b
    java.lang.String c -> c
    boolean a() -> a
    java.lang.String getQueryString() -> getQueryString
    com.amap.mapapi.busline.BusQuery$SearchType getCategory() -> getCategory
    java.lang.String getCity() -> getCity
com.amap.mapapi.busline.BusQuery$SearchType -> com.amap.mapapi.busline.BusQuery$SearchType:
    com.amap.mapapi.busline.BusQuery$SearchType BY_ID -> BY_ID
    com.amap.mapapi.busline.BusQuery$SearchType BY_LINE_NAME -> BY_LINE_NAME
    com.amap.mapapi.busline.BusQuery$SearchType BY_STATION_NAME -> BY_STATION_NAME
    com.amap.mapapi.busline.BusQuery$SearchType[] a -> a
    com.amap.mapapi.busline.BusQuery$SearchType[] values() -> values
    com.amap.mapapi.busline.BusQuery$SearchType valueOf(java.lang.String) -> valueOf
com.amap.mapapi.busline.BusSearch -> com.amap.mapapi.busline.BusSearch:
    android.content.Context a -> a
    com.amap.mapapi.busline.BusQuery b -> b
    int c -> c
    com.amap.mapapi.busline.BusPagedResult searchBusLine() -> searchBusLine
    void setPageSize(int) -> setPageSize
    void setQuery(com.amap.mapapi.busline.BusQuery) -> setQuery
    com.amap.mapapi.busline.BusQuery getQuery() -> getQuery
com.amap.mapapi.busline.BusStationItem -> com.amap.mapapi.busline.BusStationItem:
    java.lang.String a -> a
    com.amap.mapapi.core.GeoPoint b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    int e -> e
    java.lang.String getmName() -> getmName
    void setmName(java.lang.String) -> setmName
    com.amap.mapapi.core.GeoPoint getmCoord() -> getmCoord
    void setmCoord(com.amap.mapapi.core.GeoPoint) -> setmCoord
    java.lang.String getmSpell() -> getmSpell
    void setmSpell(java.lang.String) -> setmSpell
    java.lang.String getmCode() -> getmCode
    void setmCode(java.lang.String) -> setmCode
    int getmStationNum() -> getmStationNum
    void setmStationNum(int) -> setmStationNum
    java.lang.String toString() -> toString
com.amap.mapapi.busline.a -> com.amap.mapapi.busline.a:
    int i -> i
    int j -> j
    int k -> k
    void a(int) -> a
    void b(int) -> b
    int a() -> a
    com.amap.mapapi.busline.BusQuery b() -> b
    int c() -> c
    java.util.ArrayList a(java.lang.String) -> a
    boolean b(java.lang.String) -> b
    byte[] d() -> d
    java.lang.String e() -> e
    java.util.ArrayList a(java.io.InputStream) -> a
    java.lang.Object b(java.io.InputStream) -> b
com.amap.mapapi.core.AMapException -> com.amap.mapapi.core.AMapException:
    java.lang.String ERROR_IO -> ERROR_IO
    java.lang.String ERROR_SOCKET -> ERROR_SOCKET
    java.lang.String ERROR_SOCKE_TIME_OUT -> ERROR_SOCKE_TIME_OUT
    java.lang.String ERROR_INVALID_PARAMETER -> ERROR_INVALID_PARAMETER
    java.lang.String ERROR_NULL_PARAMETER -> ERROR_NULL_PARAMETER
    java.lang.String ERROR_URL -> ERROR_URL
    java.lang.String ERROR_UNKNOW_HOST -> ERROR_UNKNOW_HOST
    java.lang.String ERROR_UNKNOW_SERVICE -> ERROR_UNKNOW_SERVICE
    java.lang.String ERROR_PROTOCOL -> ERROR_PROTOCOL
    java.lang.String ERROR_CONNECTION -> ERROR_CONNECTION
    java.lang.String ERROR_UNKNOWN -> ERROR_UNKNOWN
    java.lang.String a -> a
    java.lang.String getErrorMessage() -> getErrorMessage
com.amap.mapapi.core.CoordinateConvert -> com.amap.mapapi.core.CoordinateConvert:
    com.amap.mapapi.core.GeoPoint fromGpsToAMap(double,double) -> fromGpsToAMap
    double[] fromSeveralGpsToAMap(java.lang.String) -> fromSeveralGpsToAMap
    double[] fromSeveralGpsToAMap(double[]) -> fromSeveralGpsToAMap
com.amap.mapapi.core.GeoPoint -> com.amap.mapapi.core.GeoPoint:
    double[] a -> a
    double[] b -> b
    com.amap.mapapi.core.GeoPoint$a[] c -> c
    long d -> d
    long e -> e
    double f -> f
    double g -> g
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void a(double) -> a
    void b(double) -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int getLongitudeE6() -> getLongitudeE6
    int getLatitudeE6() -> getLatitudeE6
    long a() -> a
    long b() -> b
    double c() -> c
    double d() -> d
    com.amap.mapapi.core.GeoPoint e() -> e
    java.lang.String f() -> f
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.amap.mapapi.core.GeoPoint$EnumMapProjection -> com.amap.mapapi.core.GeoPoint$EnumMapProjection:
    com.amap.mapapi.core.GeoPoint$EnumMapProjection projection_900913 -> projection_900913
    com.amap.mapapi.core.GeoPoint$EnumMapProjection projection_custBeijing54 -> projection_custBeijing54
    com.amap.mapapi.core.GeoPoint$EnumMapProjection[] $VALUES -> $VALUES
    com.amap.mapapi.core.GeoPoint$EnumMapProjection[] values() -> values
    com.amap.mapapi.core.GeoPoint$EnumMapProjection valueOf(java.lang.String) -> valueOf
com.amap.mapapi.core.GeoPoint$a -> com.amap.mapapi.core.GeoPoint$a:
    int a -> a
    int b -> b
com.amap.mapapi.core.GeoPoint$b -> com.amap.mapapi.core.GeoPoint$b:
    double a -> a
    double b -> b
com.amap.mapapi.core.OverlayItem -> com.amap.mapapi.core.OverlayItem:
    com.amap.mapapi.core.GeoPoint mPoint -> mPoint
    java.lang.String mTitle -> mTitle
    java.lang.String mSnippet -> mSnippet
    android.graphics.drawable.Drawable mMarker -> mMarker
    int ITEM_STATE_FOCUSED_MASK -> ITEM_STATE_FOCUSED_MASK
    int ITEM_STATE_SELECTED_MASK -> ITEM_STATE_SELECTED_MASK
    int ITEM_STATE_PRESSED_MASK -> ITEM_STATE_PRESSED_MASK
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    android.graphics.drawable.Drawable getmMarker() -> getmMarker
    void setMarker(android.graphics.drawable.Drawable) -> setMarker
    android.graphics.drawable.Drawable getMarker(int) -> getMarker
    void setState(android.graphics.drawable.Drawable,int) -> setState
    int[] a(int) -> a
    java.lang.String getTitle() -> getTitle
    java.lang.String getSnippet() -> getSnippet
    com.amap.mapapi.core.GeoPoint getPoint() -> getPoint
    java.lang.String routableAddress() -> routableAddress
com.amap.mapapi.core.PoiItem -> com.amap.mapapi.core.PoiItem:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String DesSplit -> DesSplit
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String getTypeDes() -> getTypeDes
    void setTypeDes(java.lang.String) -> setTypeDes
    java.lang.String getXmlNode() -> getXmlNode
    void setXmlNode(java.lang.String) -> setXmlNode
    java.lang.String getTel() -> getTel
    void setTel(java.lang.String) -> setTel
    java.lang.String getAdCode() -> getAdCode
    void setAdCode(java.lang.String) -> setAdCode
    java.lang.String getPoiId() -> getPoiId
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String getTypeCode() -> getTypeCode
    void setTypeCode(java.lang.String) -> setTypeCode
com.amap.mapapi.core.a -> com.amap.mapapi.core.a:
    com.amap.mapapi.core.a a -> a
    java.lang.String b -> b
    android.content.Context c -> c
    android.telephony.TelephonyManager d -> d
    android.net.ConnectivityManager e -> e
    java.lang.String f -> f
    com.amap.mapapi.core.a a(android.content.Context) -> a
    java.lang.String a() -> a
    java.lang.String b() -> b
    java.lang.String c() -> c
    java.lang.String d() -> d
    java.lang.String e() -> e
    java.lang.String f() -> f
com.amap.mapapi.core.b -> com.amap.mapapi.core.b:
    int a -> a
    int b -> b
    int c -> c
    int d -> d
    int e -> e
    int f -> f
    com.amap.mapapi.core.m g -> g
    com.amap.mapapi.core.GeoPoint$EnumMapProjection h -> h
    int i -> i
    int j -> j
    java.lang.String k -> k
    java.lang.String l -> l
    boolean m -> m
    boolean n -> n
    boolean o -> o
com.amap.mapapi.core.b$a -> com.amap.mapapi.core.b$a:
    com.amap.mapapi.core.b$a a -> a
    com.amap.mapapi.core.b$a b -> b
    com.amap.mapapi.core.b$a c -> c
    com.amap.mapapi.core.b$a d -> d
    com.amap.mapapi.core.b$a e -> e
    com.amap.mapapi.core.b$a f -> f
    com.amap.mapapi.core.b$a g -> g
    com.amap.mapapi.core.b$a h -> h
    com.amap.mapapi.core.b$a i -> i
    com.amap.mapapi.core.b$a j -> j
    com.amap.mapapi.core.b$a k -> k
    com.amap.mapapi.core.b$a l -> l
    com.amap.mapapi.core.b$a m -> m
    com.amap.mapapi.core.b$a[] n -> n
    com.amap.mapapi.core.b$a[] values() -> values
    com.amap.mapapi.core.b$a valueOf(java.lang.String) -> valueOf
com.amap.mapapi.core.c -> com.amap.mapapi.core.c:
    int a(byte[],int) -> a
    short b(byte[],int) -> b
    void a(byte[],int,byte[],int,int) -> a
com.amap.mapapi.core.d -> com.amap.mapapi.core.d:
    java.lang.String c -> c
    boolean a -> a
    float[] b -> b
    boolean a(java.lang.String) -> a
    long a() -> a
    int a(int) -> a
    int b(int) -> b
    java.lang.String a(android.content.Context) -> a
    java.net.Proxy b(android.content.Context) -> b
    long a(double) -> a
    double a(long) -> a
    android.location.Address b() -> b
    java.lang.String c(int) -> c
    java.lang.String c() -> c
    android.text.Spanned b(java.lang.String) -> b
    java.lang.String a(java.lang.String,java.lang.String) -> a
    boolean c(android.content.Context) -> c
    android.location.Location d(android.content.Context) -> d
    void a(android.content.Context,android.location.Location) -> a
    boolean a(double,double) -> a
com.amap.mapapi.core.e -> com.amap.mapapi.core.e:
    com.amap.mapapi.core.GeoPoint a(android.os.Parcel) -> a
    com.amap.mapapi.core.GeoPoint[] a(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.amap.mapapi.core.f -> com.amap.mapapi.core.f:
    java.net.HttpURLConnection a(java.lang.String,java.net.Proxy) -> a
    java.net.HttpURLConnection a(java.lang.String,byte[],java.net.Proxy) -> a
com.amap.mapapi.core.g -> com.amap.mapapi.core.g:
    void a(java.lang.Object) -> a
    void b(java.lang.Object) -> b
com.amap.mapapi.core.h -> com.amap.mapapi.core.h:
    com.amap.mapapi.core.GeoPoint$b i -> i
    com.amap.mapapi.core.GeoPoint$b a() -> a
    java.lang.String e() -> e
    com.amap.mapapi.core.GeoPoint$b a(java.io.InputStream) -> a
    byte[] d() -> d
    java.lang.Object b(java.io.InputStream) -> b
com.amap.mapapi.core.i -> com.amap.mapapi.core.i:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    com.amap.mapapi.core.i g -> g
    com.amap.mapapi.core.i a() -> a
    java.lang.String b() -> b
    java.lang.String c() -> c
    java.lang.String d() -> d
    java.lang.String e() -> e
    void a(java.lang.String) -> a
    void b(java.lang.String) -> b
    java.lang.String f() -> f
    void c(java.lang.String) -> c
    void d(java.lang.String) -> d
    void e(java.lang.String) -> e
    void f(java.lang.String) -> f
com.amap.mapapi.core.j -> com.amap.mapapi.core.j:
    com.amap.mapapi.core.OverlayItem a(android.os.Parcel) -> a
    com.amap.mapapi.core.OverlayItem[] a(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.amap.mapapi.core.k -> com.amap.mapapi.core.k:
    com.amap.mapapi.core.PoiItem a(android.os.Parcel) -> a
    com.amap.mapapi.core.PoiItem[] a(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.amap.mapapi.core.l -> com.amap.mapapi.core.l:
    java.net.Proxy a -> a
    java.lang.Object b -> b
    int c -> c
    int d -> d
    int e -> e
    int f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    byte[] d() -> d
    java.lang.Object b(java.io.InputStream) -> b
    java.lang.String e() -> e
    byte[] f() -> f
    java.lang.Object g() -> g
    java.lang.Object a() -> a
    java.io.InputStream a(java.net.HttpURLConnection) -> a
    java.lang.Object a(java.io.InputStream) -> a
    java.lang.Object h() -> h
com.amap.mapapi.core.m -> com.amap.mapapi.core.m:
    android.content.Context a -> a
    java.lang.String[] b -> b
    java.lang.String[] c -> c
    java.lang.String[] d -> d
    android.graphics.Bitmap[] e -> e
    void a() -> a
    android.graphics.Bitmap a(int) -> a
    android.graphics.Bitmap a(android.content.Context,java.lang.String) -> a
    android.graphics.drawable.Drawable b(android.content.Context,java.lang.String) -> b
    android.graphics.drawable.NinePatchDrawable a(android.content.Context,java.lang.String,byte[],android.graphics.Rect) -> a
    void b() -> b
com.amap.mapapi.core.n -> com.amap.mapapi.core.n:
    byte[] a(android.content.Context,java.lang.String) -> a
com.amap.mapapi.core.o -> com.amap.mapapi.core.o:
    java.lang.String i -> i
    java.lang.String j -> j
    java.lang.String k -> k
    int l -> l
    java.util.ArrayList m -> m
    java.util.ArrayList n -> n
    java.util.ArrayList o -> o
    boolean p -> p
    boolean q -> q
    boolean r -> r
    java.util.ArrayList b(java.util.ArrayList) -> b
    void a(java.util.ArrayList,java.util.ArrayList) -> a
    void a(java.util.ArrayList) -> a
    java.lang.String e() -> e
    java.lang.String a(org.json.JSONObject) -> a
    void a(org.json.JSONObject,java.lang.String) -> a
    java.util.ArrayList a(java.io.InputStream) -> a
    byte[] d() -> d
    java.lang.Object b(java.io.InputStream) -> b
com.amap.mapapi.core.p -> com.amap.mapapi.core.p:
    double a -> a
    double b -> b
    int c -> c
    boolean d -> d
com.amap.mapapi.core.q -> com.amap.mapapi.core.q:
    android.graphics.drawable.Drawable a -> a
    android.graphics.drawable.Drawable b -> b
    android.graphics.drawable.Drawable c -> c
    android.graphics.drawable.Drawable d -> d
    android.graphics.drawable.Drawable e -> e
    android.graphics.drawable.Drawable f -> f
    android.graphics.drawable.Drawable g -> g
    android.graphics.drawable.Drawable h -> h
    android.graphics.drawable.Drawable i -> i
    android.graphics.drawable.Drawable j -> j
    android.graphics.Paint k -> k
    android.graphics.Paint l -> l
    android.graphics.Paint m -> m
    boolean n -> n
    void a(android.content.Context) -> a
    android.graphics.drawable.Drawable b(android.content.Context) -> b
    void a() -> a
    void a(android.content.Context,int) -> a
com.amap.mapapi.core.r -> com.amap.mapapi.core.r:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
com.amap.mapapi.core.s -> com.amap.mapapi.core.s:
    java.util.LinkedList a -> a
    void c(java.lang.Object) -> c
    void add(int,java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(int,java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.lang.Object remove(int) -> remove
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.lang.Object set(int,java.lang.Object) -> set
    int size() -> size
    java.util.List subList(int,int) -> subList
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean add(java.lang.Object) -> add
com.amap.mapapi.core.t -> com.amap.mapapi.core.t:
    void a(java.util.zip.ZipInputStream,java.io.File) -> a
    void a(java.lang.String,java.lang.String) -> a
com.amap.mapapi.geocoder.Geocoder -> com.amap.mapapi.geocoder.Geocoder:
    java.lang.String a -> a
    android.content.Context b -> b
    java.lang.String Street_Road -> Street_Road
    java.lang.String POI -> POI
    java.lang.String Cross -> Cross
    void a(android.content.Context,java.lang.String) -> a
    java.util.List getFromLocation(double,double,int) -> getFromLocation
    java.util.List getFromRawGpsLocation(double,double,int) -> getFromRawGpsLocation
    java.util.List a(double,double,int,boolean) -> a
    java.util.List getFromLocationName(java.lang.String,int,double,double,double,double) -> getFromLocationName
    java.util.List a(java.util.List,double,double,double,double,int) -> a
    java.util.List getFromLocationName(java.lang.String,int) -> getFromLocationName
com.amap.mapapi.geocoder.a -> com.amap.mapapi.geocoder.a:
    int i -> i
    java.util.ArrayList a(java.io.InputStream) -> a
    java.lang.String e() -> e
    byte[] d() -> d
    java.lang.Object b(java.io.InputStream) -> b
com.amap.mapapi.geocoder.b -> com.amap.mapapi.geocoder.b:
    java.lang.String a -> a
    int b -> b
com.amap.mapapi.location.LocationManagerProxy -> com.amap.mapapi.location.LocationManagerProxy:
    java.lang.String GPS_PROVIDER -> GPS_PROVIDER
    java.lang.String NETWORK_PROVIDER -> NETWORK_PROVIDER
    java.lang.String KEY_LOCATION_CHANGED -> KEY_LOCATION_CHANGED
    java.lang.String KEY_PROVIDER_ENABLED -> KEY_PROVIDER_ENABLED
    java.lang.String KEY_PROXIMITY_ENTERING -> KEY_PROXIMITY_ENTERING
    java.lang.String KEY_STATUS_CHANGED -> KEY_STATUS_CHANGED
    android.location.LocationManager a -> a
    com.amap.mapapi.location.LocationManagerProxy b -> b
    com.amap.mapapi.location.a c -> c
    android.content.Context d -> d
    com.amap.mapapi.location.c e -> e
    com.amap.mapapi.location.LocationManagerProxy$b f -> f
    java.util.ArrayList g -> g
    java.util.Hashtable h -> h
    java.lang.String i -> i
    double j -> j
    double k -> k
    boolean l -> l
    long m -> m
    double n -> n
    com.amap.mapapi.location.c o -> o
    com.amap.mapapi.location.LocationManagerProxy$a p -> p
    java.util.ArrayList q -> q
    java.lang.Thread r -> r
    void a(android.content.Context) -> a
    com.amap.mapapi.location.LocationManagerProxy getInstance(android.app.Activity) -> getInstance
    com.amap.mapapi.location.LocationManagerProxy getInstance(android.content.Context) -> getInstance
    void addProximityAlert(double,double,float,long,android.app.PendingIntent) -> addProximityAlert
    void removeProximityAlert(android.app.PendingIntent) -> removeProximityAlert
    android.location.Location getLastKnownLocation(java.lang.String) -> getLastKnownLocation
    void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener) -> requestLocationUpdates
    void removeUpdates(android.location.LocationListener) -> removeUpdates
    void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent) -> requestLocationUpdates
    void removeUpdates(android.app.PendingIntent) -> removeUpdates
    java.util.List getAllProviders() -> getAllProviders
    java.util.List getProviders(boolean) -> getProviders
    java.util.List getProviders(android.location.Criteria,boolean) -> getProviders
    java.lang.String getBestProvider(android.location.Criteria,boolean) -> getBestProvider
    boolean isProviderEnabled(java.lang.String) -> isProviderEnabled
    com.amap.mapapi.location.LocationProviderProxy getProvider(java.lang.String) -> getProvider
    android.location.GpsStatus getGpsStatus(android.location.GpsStatus) -> getGpsStatus
    void removeGpsStatusListener(android.location.GpsStatus$Listener) -> removeGpsStatusListener
    boolean addGpsStatusListener(android.location.GpsStatus$Listener) -> addGpsStatusListener
    void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int) -> addTestProvider
    void clearTestProviderEnabled(java.lang.String) -> clearTestProviderEnabled
    void clearTestProviderLocation(java.lang.String) -> clearTestProviderLocation
    void clearTestProviderStatus(java.lang.String) -> clearTestProviderStatus
    void destory() -> destory
    java.util.ArrayList a(com.amap.mapapi.location.LocationManagerProxy) -> a
    android.content.Context b(com.amap.mapapi.location.LocationManagerProxy) -> b
    boolean c(com.amap.mapapi.location.LocationManagerProxy) -> c
    java.util.ArrayList d(com.amap.mapapi.location.LocationManagerProxy) -> d
    double e(com.amap.mapapi.location.LocationManagerProxy) -> e
    double f(com.amap.mapapi.location.LocationManagerProxy) -> f
    long g(com.amap.mapapi.location.LocationManagerProxy) -> g
    double h(com.amap.mapapi.location.LocationManagerProxy) -> h
com.amap.mapapi.location.LocationManagerProxy$a -> com.amap.mapapi.location.LocationManagerProxy$a:
    com.amap.mapapi.location.LocationManagerProxy a -> a
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
com.amap.mapapi.location.LocationManagerProxy$b -> com.amap.mapapi.location.LocationManagerProxy$b:
    com.amap.mapapi.location.LocationManagerProxy a -> a
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
com.amap.mapapi.location.LocationProviderProxy -> com.amap.mapapi.location.LocationProviderProxy:
    int AVAILABLE -> AVAILABLE
    int OUT_OF_SERVICE -> OUT_OF_SERVICE
    int TEMPORARILY_UNAVAILABLE -> TEMPORARILY_UNAVAILABLE
    java.lang.String MapABCNetwork -> MapABCNetwork
    android.location.LocationManager a -> a
    java.lang.String b -> b
    com.amap.mapapi.location.LocationProviderProxy a(android.location.LocationManager,java.lang.String) -> a
    android.location.LocationProvider a() -> a
    int getAccuracy() -> getAccuracy
    java.lang.String getName() -> getName
    int getPowerRequirement() -> getPowerRequirement
    boolean hasMonetaryCost() -> hasMonetaryCost
    boolean meetsCriteria(android.location.Criteria) -> meetsCriteria
    boolean requiresCell() -> requiresCell
    boolean requiresNetwork() -> requiresNetwork
    boolean requiresSatellite() -> requiresSatellite
    boolean supportsAltitude() -> supportsAltitude
    boolean supportsBearing() -> supportsBearing
    boolean supportsSpeed() -> supportsSpeed
com.amap.mapapi.location.a -> com.amap.mapapi.location.a:
    com.autonavi.aps.api.IAPS a -> a
    com.amap.mapapi.location.a b -> b
    com.amap.mapapi.location.a$a c -> c
    boolean d -> d
    java.lang.Thread e -> e
    int f -> f
    int g -> g
    int h -> h
    java.util.ArrayList i -> i
    android.location.Location j -> j
    android.content.Context k -> k
    android.location.LocationManager l -> l
    boolean m -> m
    android.location.Location n -> n
    float o -> o
    long p -> p
    long q -> q
    long r -> r
    android.location.LocationListener s -> s
    com.amap.mapapi.location.a a(android.content.Context,android.location.LocationManager) -> a
    void a() -> a
    void a(long,float,android.location.LocationListener) -> a
    void a(android.location.LocationListener) -> a
    android.location.Location b() -> b
    void run() -> run
    android.location.Location a(android.location.Location) -> a
    android.location.Location a(com.autonavi.aps.api.Location) -> a
    int c() -> c
    java.util.ArrayList a(com.amap.mapapi.location.a) -> a
    int d() -> d
    int e() -> e
    android.location.LocationManager b(com.amap.mapapi.location.a) -> b
    android.location.LocationListener c(com.amap.mapapi.location.a) -> c
    android.location.Location a(com.amap.mapapi.location.a,android.location.Location) -> a
    long a(long) -> a
com.amap.mapapi.location.a$a -> com.amap.mapapi.location.a$a:
    com.amap.mapapi.location.a a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.amap.mapapi.location.a$b -> com.amap.mapapi.location.a$b:
    long a -> a
    float b -> b
    android.location.LocationListener c -> c
    long d -> d
    boolean e -> e
    android.location.Location f -> f
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.amap.mapapi.location.b -> com.amap.mapapi.location.b:
    com.amap.mapapi.location.a a -> a
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
com.amap.mapapi.location.c -> com.amap.mapapi.location.c:
    com.amap.mapapi.location.LocationManagerProxy a -> a
    android.location.LocationListener b -> b
    boolean a(android.location.LocationListener,long,float,java.lang.String) -> a
    boolean a(android.location.LocationListener,long,float) -> a
    void a() -> a
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
com.amap.mapapi.map.ItemizedOverlay -> com.amap.mapapi.map.ItemizedOverlay:
    boolean a -> a
    android.graphics.drawable.Drawable b -> b
    android.graphics.drawable.Drawable c -> c
    int d -> d
    com.amap.mapapi.map.ItemizedOverlay$b e -> e
    com.amap.mapapi.map.ItemizedOverlay$OnFocusChangeListener f -> f
    int g -> g
    int h -> h
    android.graphics.drawable.Drawable boundCenterBottom(android.graphics.drawable.Drawable) -> boundCenterBottom
    android.graphics.drawable.Drawable boundCenter(android.graphics.drawable.Drawable) -> boundCenter
    android.graphics.drawable.Drawable a(android.graphics.drawable.Drawable,com.amap.mapapi.map.ItemizedOverlay$a) -> a
    com.amap.mapapi.core.OverlayItem createItem(int) -> createItem
    int size() -> size
    void populate() -> populate
    com.amap.mapapi.core.GeoPoint getCenter() -> getCenter
    int getIndexToDraw(int) -> getIndexToDraw
    com.amap.mapapi.core.OverlayItem getItem(int) -> getItem
    int getLatSpanE6() -> getLatSpanE6
    int getLonSpanE6() -> getLonSpanE6
    void setOnFocusChangeListener(com.amap.mapapi.map.ItemizedOverlay$OnFocusChangeListener) -> setOnFocusChangeListener
    void setDrawFocusedItem(boolean) -> setDrawFocusedItem
    int getLastFocusedIndex() -> getLastFocusedIndex
    void setLastFocusedIndex(int) -> setLastFocusedIndex
    com.amap.mapapi.core.OverlayItem getFocus() -> getFocus
    void setFocus(com.amap.mapapi.core.OverlayItem) -> setFocus
    com.amap.mapapi.core.OverlayItem nextFocus(boolean) -> nextFocus
    com.amap.mapapi.core.OverlayItem a(int) -> a
    com.amap.mapapi.core.OverlayItem b(int) -> b
    boolean onTap(com.amap.mapapi.core.GeoPoint,com.amap.mapapi.map.MapView) -> onTap
    boolean hitTest(com.amap.mapapi.core.OverlayItem,android.graphics.drawable.Drawable,int,int) -> hitTest
    boolean onKeyUp(int,android.view.KeyEvent,com.amap.mapapi.map.MapView) -> onKeyUp
    boolean onTrackballEvent(android.view.MotionEvent,com.amap.mapapi.map.MapView) -> onTrackballEvent
    boolean onTouchEvent(android.view.MotionEvent,com.amap.mapapi.map.MapView) -> onTouchEvent
    boolean onTap(int) -> onTap
    boolean onSnapToItem(int,int,android.graphics.Point,com.amap.mapapi.map.MapView) -> onSnapToItem
    void draw(android.graphics.Canvas,com.amap.mapapi.map.MapView,boolean) -> draw
    void a(android.graphics.Canvas,com.amap.mapapi.map.MapView,boolean,com.amap.mapapi.core.OverlayItem,int) -> a
    android.graphics.drawable.Drawable getDefaultMarker() -> getDefaultMarker
    android.graphics.drawable.Drawable a(com.amap.mapapi.map.ItemizedOverlay) -> a
com.amap.mapapi.map.ItemizedOverlay$OnFocusChangeListener -> com.amap.mapapi.map.ItemizedOverlay$OnFocusChangeListener:
    void onFocusChanged(com.amap.mapapi.map.ItemizedOverlay,com.amap.mapapi.core.OverlayItem) -> onFocusChanged
com.amap.mapapi.map.ItemizedOverlay$a -> com.amap.mapapi.map.ItemizedOverlay$a:
    com.amap.mapapi.map.ItemizedOverlay$a a -> a
    com.amap.mapapi.map.ItemizedOverlay$a b -> b
    com.amap.mapapi.map.ItemizedOverlay$a c -> c
    com.amap.mapapi.map.ItemizedOverlay$a[] d -> d
    com.amap.mapapi.map.ItemizedOverlay$a[] values() -> values
    com.amap.mapapi.map.ItemizedOverlay$a valueOf(java.lang.String) -> valueOf
com.amap.mapapi.map.ItemizedOverlay$b -> com.amap.mapapi.map.ItemizedOverlay$b:
    java.util.ArrayList b -> b
    java.util.ArrayList c -> c
    com.amap.mapapi.map.ItemizedOverlay a -> a
    int a() -> a
    int a(java.lang.Integer,java.lang.Integer) -> a
    int a(com.amap.mapapi.core.OverlayItem) -> a
    com.amap.mapapi.core.OverlayItem a(int) -> a
    int b(int) -> b
    int a(boolean) -> a
    boolean a(com.amap.mapapi.core.GeoPoint,com.amap.mapapi.map.MapView) -> a
    double a(com.amap.mapapi.core.OverlayItem,com.amap.mapapi.map.Projection,android.graphics.Point,int) -> a
    com.amap.mapapi.core.GeoPoint$a a(com.amap.mapapi.core.OverlayItem,com.amap.mapapi.map.Projection,android.graphics.Point) -> a
    boolean b(com.amap.mapapi.core.OverlayItem,com.amap.mapapi.map.Projection,android.graphics.Point,int) -> b
    int compare(java.lang.Object,java.lang.Object) -> compare
com.amap.mapapi.map.MapActivity -> com.amap.mapapi.map.MapActivity:
    java.lang.String b -> b
    java.util.Timer c -> c
    android.os.Handler d -> d
    java.util.TimerTask e -> e
    java.util.ArrayList f -> f
    int g -> g
    int MAP_MODE_VECTOR -> MAP_MODE_VECTOR
    int MAP_MODE_BITMAP -> MAP_MODE_BITMAP
    boolean a -> a
    void setMapMode(int) -> setMapMode
    void setCachInInstalledPackaget(boolean) -> setCachInInstalledPackaget
    int getMapMode() -> getMapMode
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onPause() -> onPause
    void onResume() -> onResume
    void onRestart() -> onRestart
    void onStop() -> onStop
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void a(com.amap.mapapi.map.MapView,android.content.Context,java.lang.String,java.lang.String) -> a
    java.lang.String getMapApiKey() -> getMapApiKey
    boolean isLocationDisplayed() -> isLocationDisplayed
    boolean isRouteDisplayed() -> isRouteDisplayed
    java.util.ArrayList a(com.amap.mapapi.map.MapActivity) -> a
    android.os.Handler b(com.amap.mapapi.map.MapActivity) -> b
com.amap.mapapi.map.MapController -> com.amap.mapapi.map.MapController:
    int a -> a
    int b -> b
    com.amap.mapapi.map.ah c -> c
    boolean d -> d
    com.amap.mapapi.map.MapController$b e -> e
    com.amap.mapapi.map.MapController$a f -> f
    int getReqLatSpan() -> getReqLatSpan
    int getReqLngSpan() -> getReqLngSpan
    void setReqLatSpan(int) -> setReqLatSpan
    void setReqLngSpan(int) -> setReqLngSpan
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
    void setCenter(com.amap.mapapi.core.GeoPoint) -> setCenter
    int setZoom(int) -> setZoom
    void zoomToSpan(int,int) -> zoomToSpan
    void setFitView(java.util.List) -> setFitView
    float calculateDistance(com.amap.mapapi.core.GeoPoint,com.amap.mapapi.core.GeoPoint) -> calculateDistance
    int a(float) -> a
    boolean zoomIn() -> zoomIn
    boolean a(int) -> a
    boolean b(int) -> b
    boolean zoomOut() -> zoomOut
    boolean zoomInFixing(int,int) -> zoomInFixing
    boolean zoomOutFixing(int,int) -> zoomOutFixing
    void animateTo(com.amap.mapapi.core.GeoPoint) -> animateTo
    void animateTo(com.amap.mapapi.core.GeoPoint,android.os.Message) -> animateTo
    void animateTo(com.amap.mapapi.core.GeoPoint,java.lang.Runnable) -> animateTo
    void stopAnimation(boolean) -> stopAnimation
    void scrollBy(int,int) -> scrollBy
    void stopPanning() -> stopPanning
    void zoomAnimationAtLevel(int,int,int,boolean,boolean) -> zoomAnimationAtLevel
    boolean a(int,int,boolean,boolean,int) -> a
    boolean a(int,int,boolean,boolean) -> a
    boolean a() -> a
    com.amap.mapapi.map.ah a(com.amap.mapapi.map.MapController) -> a
com.amap.mapapi.map.MapController$a -> com.amap.mapapi.map.MapController$a:
    com.amap.mapapi.map.az b -> b
    android.os.Message c -> c
    java.lang.Runnable d -> d
    com.amap.mapapi.map.MapController a -> a
    void a(com.amap.mapapi.core.GeoPoint,android.os.Message,java.lang.Runnable) -> a
    com.amap.mapapi.map.az b(com.amap.mapapi.core.GeoPoint) -> b
    void c() -> c
    void a() -> a
    void a(com.amap.mapapi.core.GeoPoint) -> a
    void b() -> b
com.amap.mapapi.map.MapController$b -> com.amap.mapapi.map.MapController$b:
    java.util.LinkedList b -> b
    boolean c -> c
    com.amap.mapapi.map.bh d -> d
    com.amap.mapapi.map.MapController a -> a
    void a() -> a
    void a(int,int,int,boolean,boolean) -> a
    void a(int,int,int,boolean) -> a
    void b(int,int,int,boolean) -> b
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    com.amap.mapapi.map.bh a(com.amap.mapapi.map.MapController$b) -> a
com.amap.mapapi.map.MapView -> com.amap.mapapi.map.MapView:
    com.amap.mapapi.map.MapActivity k -> k
    com.amap.mapapi.map.ah l -> l
    com.amap.mapapi.map.MapView$c m -> m
    com.amap.mapapi.map.MapController n -> n
    com.amap.mapapi.map.MapView$g o -> o
    boolean p -> p
    com.amap.mapapi.map.MapView$e mRouteCtrl -> mRouteCtrl
    com.amap.mapapi.map.v q -> q
    int[] r -> r
    boolean s -> s
    com.amap.mapapi.map.ax t -> t
    com.amap.mapapi.map.ax$a u -> u
    com.mapabc.minimap.map.vmap.NativeMap a -> a
    android.graphics.Bitmap b -> b
    boolean VMapMode -> VMapMode
    boolean VisInited -> VisInited
    int[] c -> c
    boolean v -> v
    com.amap.mapapi.map.ZoomButtonsController d -> d
    boolean e -> e
    int w -> w
    com.amap.mapapi.map.MapView$d x -> x
    com.mapabc.minimap.map.vmap.NativeMapEngine f -> f
    java.nio.ByteBuffer g -> g
    android.graphics.Bitmap h -> h
    com.amap.mapapi.map.n i -> i
    com.amap.mapapi.map.al j -> j
    com.amap.mapapi.map.au tileDownloadCtrl -> tileDownloadCtrl
    int width -> width
    int height -> height
    int centerX -> centerX
    int centerY -> centerY
    int mapLevel -> mapLevel
    int mapAngle -> mapAngle
    android.content.Context y -> y
    boolean isInited -> isInited
    boolean bfirstDrawed -> bfirstDrawed
    com.amap.mapapi.map.ZoomButtonsController getZoomButtonsController() -> getZoomButtonsController
    void m() -> m
    void a(android.content.Context,java.lang.String) -> a
    void setMapProjectSetting(com.amap.mapapi.map.ad) -> setMapProjectSetting
    void setScreenHotPoint(android.graphics.Point) -> setScreenHotPoint
    void setMapMoveEnable(boolean) -> setMapMoveEnable
    void setServerUrl(com.amap.mapapi.core.r) -> setServerUrl
    boolean isDoubleClickZooming() -> isDoubleClickZooming
    void setDoubleClickZooming(boolean) -> setDoubleClickZooming
    void registerTrackballListener(com.amap.mapapi.map.ax$a) -> registerTrackballListener
    void setEnabled(boolean) -> setEnabled
    com.amap.mapapi.map.MapView$g getZoomMgr() -> getZoomMgr
    com.amap.mapapi.map.v getLayerMgr() -> getLayerMgr
    com.amap.mapapi.map.ah a() -> a
    com.amap.mapapi.map.MapView$c b() -> b
    void a(int) -> a
    void setReticleDrawMode(com.amap.mapapi.map.MapView$ReticleDrawMode) -> setReticleDrawMode
    com.amap.mapapi.core.GeoPoint getMapCenter() -> getMapCenter
    com.amap.mapapi.map.MapController getController() -> getController
    java.util.List getOverlays() -> getOverlays
    int getLatitudeSpan() -> getLatitudeSpan
    int getLongitudeSpan() -> getLongitudeSpan
    int getZoomLevel() -> getZoomLevel
    int getMaxZoomLevel() -> getMaxZoomLevel
    int getMinZoomLevel() -> getMinZoomLevel
    com.amap.mapapi.map.Projection getProjection() -> getProjection
    java.lang.String getDebugVersion() -> getDebugVersion
    java.lang.String getReleaseVersion() -> getReleaseVersion
    void c() -> c
    boolean canCoverCenter() -> canCoverCenter
    void setBuiltInZoomControls(boolean) -> setBuiltInZoomControls
    void displayZoomControls(boolean) -> displayZoomControls
    void onFocusChanged(boolean,int,android.graphics.Rect) -> onFocusChanged
    void n() -> n
    com.amap.mapapi.map.MapView$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    void preLoad() -> preLoad
    void setVectorMap(boolean) -> setVectorMap
    boolean isVectorMap() -> isVectorMap
    void setMapviewSizeChangedListener(com.amap.mapapi.map.MapView$d) -> setMapviewSizeChangedListener
    void setSatellite(boolean) -> setSatellite
    boolean isSatellite() -> isSatellite
    void setTraffic(boolean) -> setTraffic
    boolean isTraffic() -> isTraffic
    void setStreetView(boolean) -> setStreetView
    boolean isStreetView() -> isStreetView
    void d() -> d
    int b(int) -> b
    void onDraw(android.graphics.Canvas) -> onDraw
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    void onLayout(boolean,int,int,int,int) -> onLayout
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void computeScroll() -> computeScroll
    void setClickable(boolean) -> setClickable
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean onTrackballEvent(android.view.MotionEvent) -> onTrackballEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    int getScale(int) -> getScale
    double getMetersPerPixel(int) -> getMetersPerPixel
    void Vinit() -> Vinit
    void VdestoryMap() -> VdestoryMap
    void setMapAngle(int) -> setMapAngle
    int getMapAngle() -> getMapAngle
    boolean isGridInScreen(java.lang.String) -> isGridInScreen
    boolean isAGridsInScreen(java.util.ArrayList) -> isAGridsInScreen
    void loadBMtilesData2(java.util.ArrayList,boolean) -> loadBMtilesData2
    void sendMapDataRequest(java.util.ArrayList) -> sendMapDataRequest
    void paintVectorMap(android.graphics.Canvas) -> paintVectorMap
    int getGridLevelOff(int) -> getGridLevelOff
    int c(int) -> c
    android.graphics.PointF toScreenPoint(android.graphics.PointF) -> toScreenPoint
    android.graphics.PointF fromScreenPoint(android.graphics.PointF) -> fromScreenPoint
    void getScreenPnt(int,int,android.graphics.Point) -> getScreenPnt
    void getScreenPntBy20Pixel(int,int,int,android.graphics.Point) -> getScreenPntBy20Pixel
    void getScreenPntBy20Pixel(int,int,android.graphics.Point) -> getScreenPntBy20Pixel
    void getPixelPnt(android.graphics.Point,com.amap.mapapi.map.bc) -> getPixelPnt
    void getPixel20Pnt2(android.graphics.Point,com.amap.mapapi.map.bc,int,int) -> getPixel20Pnt2
    void getPixel20Pnt(android.graphics.Point,com.amap.mapapi.map.bc,int,int) -> getPixel20Pnt
    void a(com.amap.mapapi.map.bc,com.amap.mapapi.map.bc) -> a
    java.util.ArrayList e() -> e
    boolean a(java.lang.String) -> a
    java.util.ArrayList f() -> f
    void setMapCenterScreen(int,int) -> setMapCenterScreen
    void setMapCenter(int,int) -> setMapCenter
    java.net.HttpURLConnection getConnection(java.lang.String) -> getConnection
    void onWindowVisibilityChanged(int) -> onWindowVisibilityChanged
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    com.amap.mapapi.map.MapActivity a(com.amap.mapapi.map.MapView) -> a
    com.amap.mapapi.map.ah b(com.amap.mapapi.map.MapView) -> b
    com.amap.mapapi.map.MapView$g c(com.amap.mapapi.map.MapView) -> c
    int[] g() -> g
    int[] h() -> h
    int[] i() -> i
    int[] j() -> j
    int[] k() -> k
    int[] l() -> l
    com.amap.mapapi.map.MapController d(com.amap.mapapi.map.MapView) -> d
    boolean e(com.amap.mapapi.map.MapView) -> e
    int f(com.amap.mapapi.map.MapView) -> f
    int g(com.amap.mapapi.map.MapView) -> g
    int a(com.amap.mapapi.map.MapView,int) -> a
com.amap.mapapi.map.MapView$1 -> com.amap.mapapi.map.MapView$1:
    com.amap.mapapi.map.MapView a -> a
    java.lang.String a(int,int,int) -> a
com.amap.mapapi.map.MapView$2 -> com.amap.mapapi.map.MapView$2:
    com.amap.mapapi.map.MapView a -> a
    java.lang.String a(int,int,int) -> a
com.amap.mapapi.map.MapView$LayoutParams -> com.amap.mapapi.map.MapView$LayoutParams:
    int MODE_MAP -> MODE_MAP
    int MODE_VIEW -> MODE_VIEW
    int LEFT -> LEFT
    int RIGHT -> RIGHT
    int TOP -> TOP
    int BOTTOM -> BOTTOM
    int CENTER_HORIZONTAL -> CENTER_HORIZONTAL
    int CENTER_VERTICAL -> CENTER_VERTICAL
    int CENTER -> CENTER
    int TOP_LEFT -> TOP_LEFT
    int BOTTOM_CENTER -> BOTTOM_CENTER
    int mode -> mode
    com.amap.mapapi.core.GeoPoint point -> point
    int x -> x
    int y -> y
    int alignment -> alignment
com.amap.mapapi.map.MapView$ReticleDrawMode -> com.amap.mapapi.map.MapView$ReticleDrawMode:
    com.amap.mapapi.map.MapView$ReticleDrawMode DRAW_RETICLE_NEVER -> DRAW_RETICLE_NEVER
    com.amap.mapapi.map.MapView$ReticleDrawMode DRAW_RETICLE_OVER -> DRAW_RETICLE_OVER
    com.amap.mapapi.map.MapView$ReticleDrawMode DRAW_RETICLE_UNDER -> DRAW_RETICLE_UNDER
    com.amap.mapapi.map.MapView$ReticleDrawMode[] a -> a
    com.amap.mapapi.map.MapView$ReticleDrawMode[] values() -> values
    com.amap.mapapi.map.MapView$ReticleDrawMode valueOf(java.lang.String) -> valueOf
com.amap.mapapi.map.MapView$a -> com.amap.mapapi.map.MapView$a:
    int a -> a
    int b -> b
    com.amap.mapapi.map.MapView c -> c
    int compare(java.lang.Object,java.lang.Object) -> compare
com.amap.mapapi.map.MapView$b -> com.amap.mapapi.map.MapView$b:
    void a(int) -> a
com.amap.mapapi.map.MapView$c -> com.amap.mapapi.map.MapView$c:
    android.graphics.Point b -> b
    android.view.GestureDetector c -> c
    com.amap.mapapi.map.ai d -> d
    boolean e -> e
    java.util.ArrayList f -> f
    java.util.ArrayList g -> g
    android.widget.Scroller h -> h
    int i -> i
    int j -> j
    android.graphics.Matrix k -> k
    float l -> l
    boolean m -> m
    float n -> n
    float o -> o
    int p -> p
    int q -> q
    long r -> r
    int s -> s
    int t -> t
    long u -> u
    com.amap.mapapi.map.MapView a -> a
    com.amap.mapapi.map.ai a() -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    void a(float) -> a
    float b() -> b
    void c() -> c
    boolean a(android.view.MotionEvent) -> a
    void e() -> e
    void a(int,int) -> a
    boolean b(android.view.MotionEvent) -> b
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    void a(android.view.GestureDetector$OnGestureListener) -> a
    void b(android.view.GestureDetector$OnGestureListener) -> b
    boolean a(float,float) -> a
    boolean b(float) -> b
    boolean a(android.graphics.Matrix) -> a
    boolean b(android.graphics.Matrix) -> b
    boolean a(float,android.graphics.PointF) -> a
    boolean a(android.graphics.PointF) -> a
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
    boolean onDoubleTapEvent(android.view.MotionEvent) -> onDoubleTapEvent
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
    void a(long) -> a
    long d() -> d
    void a(float,android.graphics.PointF,float,float) -> a
    android.widget.Scroller a(com.amap.mapapi.map.MapView$c) -> a
    int b(com.amap.mapapi.map.MapView$c) -> b
    int c(com.amap.mapapi.map.MapView$c) -> c
    int a(com.amap.mapapi.map.MapView$c,int) -> a
    int b(com.amap.mapapi.map.MapView$c,int) -> b
com.amap.mapapi.map.MapView$d -> com.amap.mapapi.map.MapView$d:
    void a(int,int,int,int) -> a
com.amap.mapapi.map.MapView$e -> com.amap.mapapi.map.MapView$e:
    android.widget.ImageView[] c -> c
    android.graphics.drawable.Drawable[] d -> d
    com.amap.mapapi.map.MapView$b e -> e
    boolean a -> a
    boolean f -> f
    int g -> g
    int h -> h
    int i -> i
    int j -> j
    int k -> k
    int l -> l
    android.view.View$OnClickListener m -> m
    com.amap.mapapi.map.MapView b -> b
    void b(int,int) -> b
    void a() -> a
    void a(int,int) -> a
    void a(boolean,com.amap.mapapi.map.MapView$b) -> a
    void a(boolean) -> a
    void b(boolean) -> b
    void c(boolean) -> c
    void d(boolean) -> d
    boolean b() -> b
    void a(int,boolean) -> a
    android.widget.ImageView[] a(com.amap.mapapi.map.MapView$e) -> a
    com.amap.mapapi.map.MapView$b b(com.amap.mapapi.map.MapView$e) -> b
com.amap.mapapi.map.MapView$f -> com.amap.mapapi.map.MapView$f:
    int b -> b
    com.amap.mapapi.map.MapView a -> a
    void onClick(android.view.View) -> onClick
    void a(boolean) -> a
    void b(boolean) -> b
com.amap.mapapi.map.MapView$g -> com.amap.mapapi.map.MapView$g:
    com.amap.mapapi.map.MapView$f j -> j
    com.amap.mapapi.map.MapView$f k -> k
    com.amap.mapapi.map.q l -> l
    boolean m -> m
    boolean n -> n
    android.os.Handler o -> o
    java.lang.Runnable p -> p
    android.graphics.Bitmap a -> a
    android.graphics.Bitmap b -> b
    android.graphics.Bitmap c -> c
    android.graphics.Bitmap d -> d
    android.graphics.Bitmap e -> e
    android.graphics.Bitmap f -> f
    android.graphics.drawable.StateListDrawable g -> g
    android.graphics.drawable.StateListDrawable h -> h
    com.amap.mapapi.map.MapView i -> i
    void a(boolean) -> a
    void a() -> a
    void h() -> h
    void b(boolean) -> b
    boolean b() -> b
    void c(boolean) -> c
    void c() -> c
    android.graphics.drawable.StateListDrawable i() -> i
    android.graphics.drawable.StateListDrawable j() -> j
    void d() -> d
    void a(int,int) -> a
    void e() -> e
    com.amap.mapapi.map.MapView$f f() -> f
    com.amap.mapapi.map.MapView$f g() -> g
    void a(com.amap.mapapi.map.MapView$g,int,int) -> a
com.amap.mapapi.map.MyLocationOverlay -> com.amap.mapapi.map.MyLocationOverlay:
    com.amap.mapapi.map.ah a -> a
    com.amap.mapapi.map.m b -> b
    boolean c -> c
    boolean d -> d
    float e -> e
    com.amap.mapapi.map.l f -> f
    com.amap.mapapi.map.r g -> g
    java.util.LinkedList h -> h
    com.amap.mapapi.location.LocationManagerProxy i -> i
    com.amap.mapapi.location.c j -> j
    android.location.Criteria k -> k
    android.location.Location l -> l
    android.content.Context m -> m
    java.lang.String n -> n
    float getOrientation() -> getOrientation
    void disableCompass() -> disableCompass
    boolean enableCompass() -> enableCompass
    boolean isCompassEnabled() -> isCompassEnabled
    boolean isMyLocationEnabled() -> isMyLocationEnabled
    void disableMyLocation() -> disableMyLocation
    void a() -> a
    boolean enableMyLocation() -> enableMyLocation
    java.lang.String b() -> b
    void c() -> c
    android.location.Location getLastFix() -> getLastFix
    com.amap.mapapi.core.GeoPoint getMyLocation() -> getMyLocation
    com.amap.mapapi.core.GeoPoint a(android.location.Location) -> a
    android.graphics.Rect d() -> d
    boolean dispatchTap() -> dispatchTap
    boolean onTap(com.amap.mapapi.core.GeoPoint,com.amap.mapapi.map.MapView) -> onTap
    boolean runOnFirstFix(java.lang.Runnable) -> runOnFirstFix
    boolean onSnapToItem(int,int,android.graphics.Point,com.amap.mapapi.map.MapView) -> onSnapToItem
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    boolean draw(android.graphics.Canvas,com.amap.mapapi.map.MapView,boolean,long) -> draw
    void drawMyLocation(android.graphics.Canvas,com.amap.mapapi.map.MapView,android.location.Location,com.amap.mapapi.core.GeoPoint,long) -> drawMyLocation
    void drawCompass(android.graphics.Canvas,float) -> drawCompass
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onAccuracyChanged(int,int) -> onAccuracyChanged
    void onSensorChanged(int,float[]) -> onSensorChanged
com.amap.mapapi.map.Overlay -> com.amap.mapapi.map.Overlay:
    float SHADOW_X_SKEW -> SHADOW_X_SKEW
    float SHADOW_Y_SCALE -> SHADOW_Y_SCALE
    boolean onKeyDown(int,android.view.KeyEvent,com.amap.mapapi.map.MapView) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent,com.amap.mapapi.map.MapView) -> onKeyUp
    boolean onTrackballEvent(android.view.MotionEvent,com.amap.mapapi.map.MapView) -> onTrackballEvent
    boolean onTouchEvent(android.view.MotionEvent,com.amap.mapapi.map.MapView) -> onTouchEvent
    boolean onTap(com.amap.mapapi.core.GeoPoint,com.amap.mapapi.map.MapView) -> onTap
    void draw(android.graphics.Canvas,com.amap.mapapi.map.MapView,boolean) -> draw
    boolean draw(android.graphics.Canvas,com.amap.mapapi.map.MapView,boolean,long) -> draw
    void drawAt(android.graphics.Canvas,android.graphics.drawable.Drawable,int,int,boolean) -> drawAt
    void a(android.graphics.Canvas,android.graphics.drawable.Drawable,int,int) -> a
com.amap.mapapi.map.Overlay$Snappable -> com.amap.mapapi.map.Overlay$Snappable:
    boolean onSnapToItem(int,int,android.graphics.Point,com.amap.mapapi.map.MapView) -> onSnapToItem
com.amap.mapapi.map.PoiOverlay -> com.amap.mapapi.map.PoiOverlay:
    com.amap.mapapi.map.t a -> a
    java.util.ArrayList b -> b
    boolean c -> c
    com.amap.mapapi.map.MapView d -> d
    boolean e -> e
    void closePopupWindow() -> closePopupWindow
    com.amap.mapapi.core.PoiItem createItem(int) -> createItem
    int size() -> size
    void addToMap(com.amap.mapapi.map.MapView) -> addToMap
    boolean removeFromMap() -> removeFromMap
    android.graphics.drawable.Drawable getPopupMarker(com.amap.mapapi.core.PoiItem) -> getPopupMarker
    void enablePopup(boolean) -> enablePopup
    boolean showPopupWindow(int) -> showPopupWindow
    boolean onTap(int) -> onTap
    android.graphics.drawable.Drawable getPopupBackground() -> getPopupBackground
    com.amap.mapapi.map.MapView$LayoutParams getLayoutParam(int) -> getLayoutParam
    com.amap.mapapi.map.MapView$LayoutParams getLayoutParam() -> getLayoutParam
    android.view.View getPopupView(com.amap.mapapi.core.PoiItem) -> getPopupView
    void a(android.widget.LinearLayout,com.amap.mapapi.core.PoiItem,android.content.Context) -> a
    android.text.Spanned a(com.amap.mapapi.core.PoiItem) -> a
    android.text.Spanned b(com.amap.mapapi.core.PoiItem) -> b
    android.graphics.Bitmap a(android.graphics.drawable.Drawable) -> a
    android.graphics.drawable.Drawable a(android.graphics.drawable.Drawable,int,int) -> a
    com.amap.mapapi.core.OverlayItem createItem(int) -> createItem
com.amap.mapapi.map.Projection -> com.amap.mapapi.map.Projection:
    android.graphics.Point toPixels(com.amap.mapapi.core.GeoPoint,android.graphics.Point) -> toPixels
    com.amap.mapapi.core.GeoPoint fromPixels(int,int) -> fromPixels
    float metersToEquatorPixels(float) -> metersToEquatorPixels
com.amap.mapapi.map.RouteMessageHandler -> com.amap.mapapi.map.RouteMessageHandler:
    boolean onRouteEvent(com.amap.mapapi.map.MapView,com.amap.mapapi.map.RouteOverlay,int,int) -> onRouteEvent
    void onDragBegin(com.amap.mapapi.map.MapView,com.amap.mapapi.map.RouteOverlay,int,com.amap.mapapi.core.GeoPoint) -> onDragBegin
    void onDragEnd(com.amap.mapapi.map.MapView,com.amap.mapapi.map.RouteOverlay,int,com.amap.mapapi.core.GeoPoint) -> onDragEnd
    void onDrag(com.amap.mapapi.map.MapView,com.amap.mapapi.map.RouteOverlay,int,com.amap.mapapi.core.GeoPoint) -> onDrag
com.amap.mapapi.map.RouteOverlay -> com.amap.mapapi.map.RouteOverlay:
    com.amap.mapapi.map.MapActivity mContext -> mContext
    com.amap.mapapi.route.Route mRoute -> mRoute
    java.util.List a -> a
    com.amap.mapapi.map.an c -> c
    boolean d -> d
    boolean e -> e
    com.amap.mapapi.map.RouteOverlay$a b -> b
    java.util.List f -> f
    com.amap.mapapi.map.MapView g -> g
    int OnOverview -> OnOverview
    int OnDetail -> OnDetail
    int OnPrev -> OnPrev
    int OnNext -> OnNext
    int OnIconClick -> OnIconClick
    int h -> h
    boolean i -> i
    boolean j -> j
    com.amap.mapapi.route.Route getRoute() -> getRoute
    boolean onTrackballEvent(android.view.MotionEvent,com.amap.mapapi.map.MapView) -> onTrackballEvent
    boolean onTouchEvent(android.view.MotionEvent,com.amap.mapapi.map.MapView) -> onTouchEvent
    void setBusLinePaint(android.graphics.Paint) -> setBusLinePaint
    void setFootLinePaint(android.graphics.Paint) -> setFootLinePaint
    void setCarLinePaint(android.graphics.Paint) -> setCarLinePaint
    void draw(android.graphics.Canvas,com.amap.mapapi.map.MapView,boolean) -> draw
    void enablePopup(boolean) -> enablePopup
    void showRouteButton(boolean) -> showRouteButton
    void enableDrag(boolean) -> enableDrag
    void addToMap(com.amap.mapapi.map.MapView) -> addToMap
    void a(com.amap.mapapi.map.MapView) -> a
    void registerRouteMessage(com.amap.mapapi.map.RouteMessageHandler) -> registerRouteMessage
    void unregisterRouteMessage(com.amap.mapapi.map.RouteMessageHandler) -> unregisterRouteMessage
    void takeDefaultAction(com.amap.mapapi.map.MapView,int,int) -> takeDefaultAction
    void showNextPopUpWindow() -> showNextPopUpWindow
    void showPrevPopUpWindow() -> showPrevPopUpWindow
    void a(com.amap.mapapi.map.MapView,int) -> a
    void b(com.amap.mapapi.map.MapView,int) -> b
    boolean removeFromMap(com.amap.mapapi.map.MapView) -> removeFromMap
    boolean showPopupWindow(int) -> showPopupWindow
    void closePopupWindow() -> closePopupWindow
    android.view.View getInfoView(com.amap.mapapi.map.MapView,int) -> getInfoView
    boolean isStartEndMoved() -> isStartEndMoved
    void restoreOverlay(com.amap.mapapi.map.MapView) -> restoreOverlay
    void renewOverlay(com.amap.mapapi.map.MapView) -> renewOverlay
    com.amap.mapapi.core.GeoPoint getStartPos() -> getStartPos
    com.amap.mapapi.core.GeoPoint getEndPos() -> getEndPos
    void b(com.amap.mapapi.map.MapView,com.amap.mapapi.core.GeoPoint) -> b
    boolean a(com.amap.mapapi.map.MapView,android.graphics.Point,int) -> a
    android.graphics.Point a(com.amap.mapapi.map.MapView,com.amap.mapapi.core.GeoPoint) -> a
    com.amap.mapapi.map.o a(int) -> a
    java.util.List a(com.amap.mapapi.map.RouteOverlay) -> a
    boolean b(com.amap.mapapi.map.RouteOverlay) -> b
    com.amap.mapapi.map.o a(com.amap.mapapi.map.RouteOverlay,int) -> a
com.amap.mapapi.map.RouteOverlay$a -> com.amap.mapapi.map.RouteOverlay$a:
    com.amap.mapapi.map.RouteOverlay a -> a
    boolean onRouteEvent(com.amap.mapapi.map.MapView,com.amap.mapapi.map.RouteOverlay,int,int) -> onRouteEvent
    boolean a(com.amap.mapapi.map.MapView,com.amap.mapapi.map.RouteOverlay,int,com.amap.mapapi.core.GeoPoint) -> a
    void onDragBegin(com.amap.mapapi.map.MapView,com.amap.mapapi.map.RouteOverlay,int,com.amap.mapapi.core.GeoPoint) -> onDragBegin
    void onDragEnd(com.amap.mapapi.map.MapView,com.amap.mapapi.map.RouteOverlay,int,com.amap.mapapi.core.GeoPoint) -> onDragEnd
    void onDrag(com.amap.mapapi.map.MapView,com.amap.mapapi.map.RouteOverlay,int,com.amap.mapapi.core.GeoPoint) -> onDrag
com.amap.mapapi.map.ZoomButtonsController -> com.amap.mapapi.map.ZoomButtonsController:
    com.amap.mapapi.map.MapView$g a -> a
    android.view.ViewGroup b -> b
    com.amap.mapapi.map.ZoomButtonsController$OnZoomListener c -> c
    android.view.ViewGroup getContainer() -> getContainer
    android.view.View getZoomControls() -> getZoomControls
    void setZoomSpeed(long) -> setZoomSpeed
    void setFocusable(boolean) -> setFocusable
    boolean isAutoDismissed() -> isAutoDismissed
    void setAutoDismissed(boolean) -> setAutoDismissed
    void setZoomInEnabled(boolean) -> setZoomInEnabled
    boolean isVisible() -> isVisible
    void setVisible(boolean) -> setVisible
    void setOnZoomListener(com.amap.mapapi.map.ZoomButtonsController$OnZoomListener) -> setOnZoomListener
    com.amap.mapapi.map.ZoomButtonsController$OnZoomListener getOnZoomListener() -> getOnZoomListener
    void setZoomOutEnabled(boolean) -> setZoomOutEnabled
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.amap.mapapi.map.ZoomButtonsController$OnZoomListener -> com.amap.mapapi.map.ZoomButtonsController$OnZoomListener:
    void onVisibilityChanged(boolean) -> onVisibilityChanged
    void onZoom(boolean) -> onZoom
com.amap.mapapi.map.a -> com.amap.mapapi.map.a:
    android.os.Handler e -> e
    int a -> a
    boolean b -> b
    int c -> c
    int d -> d
    java.lang.Runnable f -> f
    void a() -> a
    void b() -> b
    void c() -> c
    void d() -> d
    void h() -> h
    void e() -> e
    boolean f() -> f
    void g() -> g
    android.os.Handler a(com.amap.mapapi.map.a) -> a
    android.os.Handler a(com.amap.mapapi.map.a,android.os.Handler) -> a
com.amap.mapapi.map.aa -> com.amap.mapapi.map.aa:
    com.amap.mapapi.map.MapActivity a -> a
    void run() -> run
com.amap.mapapi.map.ab -> com.amap.mapapi.map.ab:
    com.amap.mapapi.map.MapView a -> a
    java.util.ArrayList b -> b
    boolean c -> c
    long d -> d
    int e -> e
    byte[] f -> f
    int g -> g
    int h -> h
    boolean i -> i
    boolean j -> j
    java.lang.String a() -> a
    void b() -> b
    boolean c() -> c
    void a(java.lang.String) -> a
    void a(com.amap.mapapi.map.ab) -> a
    void b(java.lang.String) -> b
    void b(com.amap.mapapi.map.ab) -> b
    void a(com.amap.mapapi.map.ab,int,byte[],int) -> a
    void d() -> d
    void a(byte[],int,int) -> a
com.amap.mapapi.map.ac -> com.amap.mapapi.map.ac:
    double o -> o
    double p -> p
    double a -> a
    int b -> b
    double c -> c
    double d -> d
    int e -> e
    int f -> f
    int g -> g
    double[] h -> h
    com.amap.mapapi.map.ad i -> i
    com.amap.mapapi.core.GeoPoint j -> j
    com.amap.mapapi.core.GeoPoint k -> k
    android.graphics.Point l -> l
    com.amap.mapapi.map.ac$a m -> m
    com.amap.mapapi.map.ah$d n -> n
    double q -> q
    void a(com.amap.mapapi.map.ad) -> a
    void a() -> a
    void a(android.graphics.Point) -> a
    int a(int,int) -> a
    com.amap.mapapi.core.GeoPoint a(com.amap.mapapi.core.GeoPoint) -> a
    android.graphics.PointF a(com.amap.mapapi.core.GeoPoint,com.amap.mapapi.core.GeoPoint,android.graphics.Point,double) -> a
    com.amap.mapapi.core.GeoPoint b(com.amap.mapapi.core.GeoPoint) -> b
    com.amap.mapapi.core.GeoPoint a(android.graphics.PointF,com.amap.mapapi.core.GeoPoint,android.graphics.Point,double,com.amap.mapapi.map.ac$a) -> a
    com.amap.mapapi.core.GeoPoint b(android.graphics.PointF,com.amap.mapapi.core.GeoPoint,android.graphics.Point,double,com.amap.mapapi.map.ac$a) -> b
    android.graphics.PointF b(com.amap.mapapi.core.GeoPoint,com.amap.mapapi.core.GeoPoint,android.graphics.Point,double) -> b
    com.amap.mapapi.map.as$a b() -> b
    java.util.ArrayList a(com.amap.mapapi.core.GeoPoint,int,int,int) -> a
    android.graphics.PointF a(int,int,int,int,android.graphics.PointF,int,int) -> a
    void a(android.graphics.PointF,android.graphics.PointF,int) -> a
    float a(com.amap.mapapi.core.GeoPoint,com.amap.mapapi.core.GeoPoint) -> a
com.amap.mapapi.map.ac$a -> com.amap.mapapi.map.ac$a:
    float a -> a
    float b -> b
    float c -> c
    float d -> d
com.amap.mapapi.map.ad -> com.amap.mapapi.map.ad:
    double a -> a
    double b -> b
    com.amap.mapapi.core.GeoPoint$EnumMapProjection c -> c
    double d -> d
    int e -> e
    double f -> f
    double g -> g
    int h -> h
    int i -> i
    int j -> j
com.amap.mapapi.map.ae -> com.amap.mapapi.map.ae:
    com.amap.mapapi.map.ah e -> e
    android.content.Context f -> f
    void a() -> a
    void c() -> c
    void d() -> d
    void b() -> b
    void a_() -> a_
    void h() -> h
com.amap.mapapi.map.af -> com.amap.mapapi.map.af:
    com.amap.mapapi.map.MapView$e a -> a
    void onClick(android.view.View) -> onClick
com.amap.mapapi.map.ag -> com.amap.mapapi.map.ag:
    com.amap.mapapi.map.MapView$g a -> a
    void run() -> run
com.amap.mapapi.map.ah -> com.amap.mapapi.map.ah:
    com.amap.mapapi.map.ah$e a -> a
    com.amap.mapapi.map.ah$d b -> b
    com.amap.mapapi.map.ah$b c -> c
    com.amap.mapapi.map.ah$a d -> d
    com.amap.mapapi.map.ah$c e -> e
    com.amap.mapapi.map.ac f -> f
    void a() -> a
    void a(com.amap.mapapi.map.ah) -> a
com.amap.mapapi.map.ah$a -> com.amap.mapapi.map.ah$a:
    boolean l -> l
    com.amap.mapapi.core.s a -> a
    com.amap.mapapi.core.s b -> b
    com.amap.mapapi.core.g m -> m
    com.amap.mapapi.map.MapView$ReticleDrawMode n -> n
    long c -> c
    com.amap.mapapi.map.f d -> d
    boolean e -> e
    boolean f -> f
    int o -> o
    int p -> p
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    java.lang.String j -> j
    boolean q -> q
    com.amap.mapapi.map.ah k -> k
    void a(android.content.Context) -> a
    boolean a(java.lang.String,boolean) -> a
    void b(java.lang.String) -> b
    boolean c(java.lang.String) -> c
    boolean a(com.amap.mapapi.map.w,android.content.Context) -> a
    void e() -> e
    com.amap.mapapi.map.w a(java.lang.String) -> a
    void f() -> f
    void a(com.amap.mapapi.map.MapView$ReticleDrawMode) -> a
    void a() -> a
    void b() -> b
    java.util.List c() -> c
    boolean a(com.amap.mapapi.core.GeoPoint) -> a
    void a(int,int,int,int) -> a
    void d() -> d
    void b(int,int,int,int) -> b
    boolean a(long) -> a
    void a(boolean) -> a
    void a(com.amap.mapapi.map.p,boolean) -> a
    void a(android.graphics.Canvas,android.graphics.Matrix,float,float) -> a
    void a(android.graphics.Canvas) -> a
    void b(android.graphics.Canvas) -> b
    android.graphics.PointF a(com.amap.mapapi.map.as$a) -> a
    void a(android.graphics.Canvas,com.amap.mapapi.map.MapView,com.amap.mapapi.map.as$a) -> a
    void c(android.graphics.Canvas) -> c
    boolean a(int,android.view.KeyEvent) -> a
    boolean b(int,android.view.KeyEvent) -> b
    boolean a(android.view.MotionEvent) -> a
    boolean b(android.view.MotionEvent) -> b
    boolean c(android.view.MotionEvent) -> c
    boolean a(com.amap.mapapi.map.ah$a) -> a
com.amap.mapapi.map.ah$a$1 -> com.amap.mapapi.map.ah$a$1:
    com.amap.mapapi.map.ah$a a -> a
    java.lang.String a(int,int,int) -> a
com.amap.mapapi.map.ah$b -> com.amap.mapapi.map.ah$b:
    boolean a -> a
    int b -> b
    com.amap.mapapi.map.ah c -> c
    void a() -> a
    void b() -> b
    void c() -> c
    void d() -> d
    void e() -> e
    void f() -> f
com.amap.mapapi.map.ah$c -> com.amap.mapapi.map.ah$c:
    java.lang.String b -> b
    java.lang.String c -> c
    com.amap.mapapi.map.MapActivity d -> d
    java.net.Proxy e -> e
    android.util.SparseArray f -> f
    com.amap.mapapi.map.ah a -> a
    java.lang.String a() -> a
    java.lang.String b() -> b
    java.net.Proxy c() -> c
    com.amap.mapapi.map.ae a(int) -> a
    void a(com.amap.mapapi.map.ae,int) -> a
    void d() -> d
    void e() -> e
    android.util.SparseArray a(com.amap.mapapi.map.ah$c) -> a
    void b(com.amap.mapapi.map.ah$c) -> b
    void c(com.amap.mapapi.map.ah$c) -> c
com.amap.mapapi.map.ah$d -> com.amap.mapapi.map.ah$d:
    com.amap.mapapi.map.MapView c -> c
    java.util.ArrayList d -> d
    boolean a -> a
    com.amap.mapapi.map.ah b -> b
    void a(int) -> a
    void a(int,int) -> a
    void a(com.amap.mapapi.core.GeoPoint) -> a
    void b(com.amap.mapapi.core.GeoPoint) -> b
    int a() -> a
    void b(int) -> b
    int b() -> b
    void c(int) -> c
    int c() -> c
    int d() -> d
    int e() -> e
    com.amap.mapapi.core.GeoPoint f() -> f
    void a(com.amap.mapapi.map.bf) -> a
    void a(boolean,boolean) -> a
    com.amap.mapapi.map.MapView g() -> g
    void h() -> h
    void a(android.view.View,com.amap.mapapi.map.MapView$LayoutParams) -> a
    void b(android.view.View,com.amap.mapapi.map.MapView$LayoutParams) -> b
    void a(android.view.View,int,int,int,int,int) -> a
    com.amap.mapapi.map.MapView a(com.amap.mapapi.map.ah$d) -> a
com.amap.mapapi.map.ah$e -> com.amap.mapapi.map.ah$e:
    int b -> b
    java.util.HashMap c -> c
    com.amap.mapapi.map.ah a -> a
    android.graphics.Point toPixels(com.amap.mapapi.core.GeoPoint,android.graphics.Point) -> toPixels
    com.amap.mapapi.core.GeoPoint fromPixels(int,int) -> fromPixels
    float metersToEquatorPixels(float) -> metersToEquatorPixels
    int a() -> a
    int b() -> b
    int a(boolean) -> a
com.amap.mapapi.map.ai -> com.amap.mapapi.map.ai:
    com.amap.mapapi.map.ai$b a -> a
    int b -> b
    android.graphics.Matrix c -> c
    android.graphics.Matrix d -> d
    android.graphics.PointF e -> e
    android.graphics.PointF f -> f
    android.graphics.PointF g -> g
    float h -> h
    float i -> i
    float j -> j
    boolean k -> k
    boolean l -> l
    boolean m -> m
    java.lang.reflect.Method o -> o
    java.lang.reflect.Method p -> p
    boolean q -> q
    boolean r -> r
    int n -> n
    com.amap.mapapi.map.ai a(android.content.Context,com.amap.mapapi.map.ai$b) -> a
    boolean a(android.view.MotionEvent) -> a
    void c(android.view.MotionEvent) -> c
    void b(android.view.MotionEvent) -> b
    boolean a() -> a
    java.lang.reflect.Method b() -> b
    java.lang.reflect.Method c() -> c
com.amap.mapapi.map.ai$1 -> com.amap.mapapi.map.ai$1:
com.amap.mapapi.map.ai$a -> com.amap.mapapi.map.ai$a:
    float o -> o
    float p -> p
    float q -> q
    float r -> r
    boolean a(android.view.MotionEvent) -> a
    float c(android.view.MotionEvent) -> c
    void a(android.graphics.PointF,android.view.MotionEvent) -> a
com.amap.mapapi.map.ai$b -> com.amap.mapapi.map.ai$b:
    boolean a(float,float) -> a
    boolean a(android.graphics.Matrix) -> a
    boolean b(float) -> b
    boolean b(android.graphics.Matrix) -> b
    boolean a(android.graphics.PointF) -> a
    boolean a(float,android.graphics.PointF) -> a
com.amap.mapapi.map.aj -> com.amap.mapapi.map.aj:
    int a -> a
    com.amap.mapapi.core.GeoPoint b -> b
com.amap.mapapi.map.ak -> com.amap.mapapi.map.ak:
    int a -> a
    java.lang.Object a() -> a
    java.lang.Object b() -> b
    boolean c() -> c
    void clear() -> clear
com.amap.mapapi.map.al -> com.amap.mapapi.map.al:
    boolean a -> a
    java.lang.Thread b -> b
    com.amap.mapapi.map.MapView c -> c
    java.util.ArrayList d -> d
    void a() -> a
    void run() -> run
    void a(com.amap.mapapi.map.am) -> a
    boolean a(java.lang.String) -> a
com.amap.mapapi.map.am -> com.amap.mapapi.map.am:
    java.lang.String a -> a
    boolean b -> b
    boolean a(com.mapabc.minimap.map.vmap.NativeMapEngine) -> a
com.amap.mapapi.map.an -> com.amap.mapapi.map.an:
    com.amap.mapapi.map.RouteOverlay i -> i
    int j -> j
    void a(boolean) -> a
    void c() -> c
    void a(int) -> a
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    boolean onDown(android.view.MotionEvent) -> onDown
    void b() -> b
    void a() -> a
com.amap.mapapi.map.ao -> com.amap.mapapi.map.ao:
    com.amap.mapapi.map.RouteOverlay c -> c
    void a(android.graphics.Canvas,com.amap.mapapi.map.MapView,boolean) -> a
    android.graphics.Point a(com.amap.mapapi.map.MapView,com.amap.mapapi.core.GeoPoint) -> a
    com.amap.mapapi.core.GeoPoint a(com.amap.mapapi.map.MapView,android.graphics.Point) -> a
    void a(com.amap.mapapi.map.MapView) -> a
    void b(com.amap.mapapi.map.MapView) -> b
    boolean a(android.view.MotionEvent,com.amap.mapapi.map.MapView) -> a
com.amap.mapapi.map.ap -> com.amap.mapapi.map.ap:
    com.amap.mapapi.map.f a -> a
    android.graphics.drawable.Drawable b -> b
    android.graphics.drawable.Drawable a(android.graphics.drawable.Drawable) -> a
    void a(android.graphics.Canvas) -> a
    void a(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable) -> a
com.amap.mapapi.map.aq -> com.amap.mapapi.map.aq:
    java.util.LinkedList a -> a
    java.util.concurrent.Semaphore b -> b
    boolean c -> c
    void a() -> a
    void a(java.util.List,boolean) -> a
    void b() -> b
    void c() -> c
    java.util.ArrayList a(int,boolean) -> a
    java.util.ArrayList b(int,boolean) -> b
com.amap.mapapi.map.ar -> com.amap.mapapi.map.ar:
    java.lang.Thread[] a -> a
    void a() -> a
    void b() -> b
    void c() -> c
com.amap.mapapi.map.as -> com.amap.mapapi.map.as:
    android.graphics.Paint a -> a
    android.graphics.Bitmap b -> b
    int c -> c
    int a() -> a
    android.graphics.Paint b() -> b
    android.graphics.Bitmap c() -> c
com.amap.mapapi.map.as$1 -> com.amap.mapapi.map.as$1:
    void a(android.graphics.Canvas) -> a
com.amap.mapapi.map.as$a -> com.amap.mapapi.map.as$a:
    int a -> a
    int b -> b
    int c -> c
    int d -> d
    int e -> e
    android.graphics.PointF f -> f
    int g -> g
    com.amap.mapapi.map.as$a a() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
com.amap.mapapi.map.at -> com.amap.mapapi.map.at:
    java.util.ArrayList b(int,boolean) -> b
com.amap.mapapi.map.au -> com.amap.mapapi.map.au:
    java.util.Hashtable f -> f
    int a -> a
    com.amap.mapapi.map.MapView b -> b
    long c -> c
    boolean d -> d
    java.lang.Thread e -> e
    void a(java.lang.String) -> a
    boolean b(java.lang.String) -> b
    void c(java.lang.String) -> c
    void a() -> a
    void b() -> b
    void c() -> c
    void run() -> run
com.amap.mapapi.map.av -> com.amap.mapapi.map.av:
    com.amap.mapapi.map.u g -> g
    void a_() -> a_
    void a() -> a
    java.util.ArrayList a(java.util.ArrayList,java.net.Proxy) -> a
    void a(java.util.List) -> a
    void b(java.util.ArrayList) -> b
    void a(java.util.ArrayList,boolean) -> a
    void c() -> c
    void h() -> h
    boolean i() -> i
    java.util.ArrayList a(java.util.ArrayList,com.amap.mapapi.map.w,int,boolean) -> a
    void a(boolean,boolean) -> a
    boolean a(com.amap.mapapi.map.as$a) -> a
    int g() -> g
    int f() -> f
    java.util.ArrayList a(java.util.ArrayList) -> a
com.amap.mapapi.map.aw -> com.amap.mapapi.map.aw:
    com.amap.mapapi.map.w i -> i
    void a(com.amap.mapapi.map.w) -> a
    java.util.ArrayList a() -> a
    java.util.ArrayList a(java.io.InputStream) -> a
    java.lang.String e() -> e
    int a(java.io.InputStream,com.amap.mapapi.map.as$a) -> a
    byte[] a(android.graphics.Bitmap) -> a
    void a(com.amap.mapapi.map.as$a,int) -> a
    byte[] d() -> d
    java.lang.Object h() -> h
    java.lang.Object b(java.io.InputStream) -> b
com.amap.mapapi.map.ax -> com.amap.mapapi.map.ax:
    boolean a -> a
    float b -> b
    float c -> c
    long d -> d
    boolean e -> e
    boolean f -> f
    boolean g -> g
    float h -> h
    float i -> i
    float j -> j
    float k -> k
    java.lang.Runnable l -> l
    java.lang.Thread m -> m
    com.amap.mapapi.map.ax n -> n
    com.amap.mapapi.map.ax a() -> a
    void b() -> b
    void a(android.view.MotionEvent) -> a
com.amap.mapapi.map.ax$a -> com.amap.mapapi.map.ax$a:
    void a(com.amap.mapapi.map.ax) -> a
com.amap.mapapi.map.ay -> com.amap.mapapi.map.ay:
    int a -> a
    java.util.List b -> b
    java.util.List a() -> a
    int b() -> b
com.amap.mapapi.map.az -> com.amap.mapapi.map.az:
    com.amap.mapapi.core.GeoPoint e -> e
    com.amap.mapapi.core.GeoPoint f -> f
    int g -> g
    int h -> h
    int i -> i
    int j -> j
    int k -> k
    int l -> l
    int m -> m
    int n -> n
    com.amap.mapapi.map.ba o -> o
    void a(int) -> a
    void b() -> b
    void a() -> a
    int a(int,int,int) -> a
com.amap.mapapi.map.b -> com.amap.mapapi.map.b:
    com.amap.mapapi.map.a a -> a
    void run() -> run
com.amap.mapapi.map.ba -> com.amap.mapapi.map.ba:
    void a(com.amap.mapapi.core.GeoPoint) -> a
    void b() -> b
com.amap.mapapi.map.bb -> com.amap.mapapi.map.bb:
    java.lang.String a(int,int,int) -> a
com.amap.mapapi.map.bc -> com.amap.mapapi.map.bc:
    int a -> a
    int b -> b
com.amap.mapapi.map.bd -> com.amap.mapapi.map.bd:
    com.amap.mapapi.map.u g -> g
    void a_() -> a_
    void a() -> a
    java.util.ArrayList a(java.util.ArrayList,java.net.Proxy) -> a
    void a(java.util.List) -> a
    void b(java.util.ArrayList) -> b
    void a(java.util.ArrayList,boolean) -> a
    void c() -> c
    void h() -> h
    java.util.ArrayList a(java.util.ArrayList,com.amap.mapapi.map.w,int,boolean) -> a
    void a(boolean,boolean) -> a
    boolean a(com.amap.mapapi.map.as$a) -> a
    int g() -> g
    int f() -> f
    java.util.ArrayList a(java.util.ArrayList) -> a
com.amap.mapapi.map.be -> com.amap.mapapi.map.be:
    com.amap.mapapi.map.MapView$LayoutParams d -> d
    android.view.View e -> e
    void a(com.amap.mapapi.map.MapView) -> a
    void b(com.amap.mapapi.map.MapView) -> b
com.amap.mapapi.map.bf -> com.amap.mapapi.map.bf:
    void a(boolean,boolean) -> a
com.amap.mapapi.map.bg -> com.amap.mapapi.map.bg:
    android.graphics.Point a() -> a
    void b() -> b
com.amap.mapapi.map.bh -> com.amap.mapapi.map.bh:
    android.view.animation.Animation$AnimationListener k -> k
    com.amap.mapapi.map.MapView e -> e
    float f -> f
    float g -> g
    float h -> h
    float l -> l
    float m -> m
    float n -> n
    boolean o -> o
    boolean p -> p
    int i -> i
    boolean j -> j
    void a() -> a
    void b() -> b
    void a(float,int,boolean,float,float) -> a
    void a(int,boolean,float,float) -> a
com.amap.mapapi.map.c -> com.amap.mapapi.map.c:
    boolean a -> a
    java.util.ArrayList b -> b
    java.lang.Runnable g -> g
    java.lang.Runnable h -> h
    com.amap.mapapi.map.aq c -> c
    com.amap.mapapi.map.ar d -> d
    void a() -> a
    void b() -> b
    void c() -> c
    void d() -> d
    void e() -> e
    int f() -> f
    int g() -> g
    java.util.ArrayList a(java.util.ArrayList,java.net.Proxy) -> a
    java.util.ArrayList a(java.util.ArrayList) -> a
com.amap.mapapi.map.d -> com.amap.mapapi.map.d:
    com.amap.mapapi.map.c a -> a
    void run() -> run
com.amap.mapapi.map.e -> com.amap.mapapi.map.e:
    com.amap.mapapi.map.c a -> a
    void run() -> run
com.amap.mapapi.map.f -> com.amap.mapapi.map.f:
    android.graphics.Bitmap a -> a
    android.graphics.Canvas b -> b
    android.graphics.Bitmap$Config c -> c
    void a(android.graphics.Bitmap) -> a
    void a(int,int) -> a
    void a() -> a
    void a(com.amap.mapapi.map.g) -> a
    android.graphics.Bitmap b() -> b
com.amap.mapapi.map.g -> com.amap.mapapi.map.g:
    void a(android.graphics.Canvas) -> a
com.amap.mapapi.map.h -> com.amap.mapapi.map.h:
    com.amap.mapapi.map.h$a[] a -> a
    int b -> b
    int c -> c
    com.amap.mapapi.map.h$a[] d -> d
    boolean g -> g
    long h -> h
    android.graphics.Paint e -> e
    android.graphics.Path f -> f
    int a(java.lang.String) -> a
    android.graphics.Bitmap a(int) -> a
    int a(byte[],java.io.InputStream,boolean,java.util.List,java.lang.String) -> a
    long d() -> d
    int a() -> a
    int b() -> b
    void c() -> c
    void a(android.graphics.Bitmap,java.util.List) -> a
com.amap.mapapi.map.h$1 -> com.amap.mapapi.map.h$1:
    java.util.List a -> a
    com.amap.mapapi.map.h b -> b
    void a(android.graphics.Canvas) -> a
com.amap.mapapi.map.h$a -> com.amap.mapapi.map.h$a:
    android.graphics.Bitmap a -> a
    java.lang.String b -> b
    boolean c -> c
    long d -> d
    int e -> e
    long f -> f
    java.util.List g -> g
    com.amap.mapapi.map.h h -> h
com.amap.mapapi.map.i -> com.amap.mapapi.map.i:
    int a -> a
    byte[] a(java.io.InputStream) -> a
com.amap.mapapi.map.j -> com.amap.mapapi.map.j:
    com.amap.mapapi.map.h a -> a
    java.lang.String b -> b
    int c -> c
    java.lang.String[] a(int,int,int,boolean) -> a
    void a(com.amap.mapapi.map.h) -> a
    byte[] a(int) -> a
    void a(byte[]) -> a
    int b(byte[]) -> b
    int a(int,int) -> a
    int a(com.amap.mapapi.map.as$a) -> a
    boolean a(byte[],int,int,int) -> a
com.amap.mapapi.map.k -> com.amap.mapapi.map.k:
    android.graphics.drawable.Drawable b -> b
    android.graphics.drawable.Drawable c -> c
    int d -> d
    int e -> e
    float f -> f
    com.amap.mapapi.map.f a -> a
    android.graphics.drawable.Drawable a(android.graphics.Bitmap) -> a
    android.graphics.Bitmap a(float) -> a
    void a(android.graphics.Canvas) -> a
com.amap.mapapi.map.l -> com.amap.mapapi.map.l:
    com.amap.mapapi.map.k c -> c
    float d -> d
    android.graphics.Point a() -> a
    boolean a(float) -> a
    void d() -> d
    boolean b(float) -> b
    void b() -> b
com.amap.mapapi.map.m -> com.amap.mapapi.map.m:
    android.hardware.SensorManager a -> a
    android.hardware.Sensor b -> b
    android.hardware.SensorEventListener c -> c
    boolean a(android.hardware.SensorEventListener) -> a
    void e() -> e
    void a_() -> a_
    void c() -> c
    void g() -> g
    boolean i() -> i
com.amap.mapapi.map.n -> com.amap.mapapi.map.n:
    com.amap.mapapi.map.ak a -> a
    int b -> b
    boolean c -> c
    java.lang.Thread d -> d
    com.amap.mapapi.map.MapView e -> e
    void a() -> a
    void a(com.amap.mapapi.map.ab) -> a
    void b() -> b
    void run() -> run
com.amap.mapapi.map.o -> com.amap.mapapi.map.o:
    android.graphics.drawable.Drawable d -> d
    com.amap.mapapi.map.RouteMessageHandler e -> e
    boolean f -> f
    boolean g -> g
    int h -> h
    int i -> i
    boolean j -> j
    void a(android.graphics.Canvas,com.amap.mapapi.map.MapView,boolean) -> a
    boolean a(com.amap.mapapi.map.MapView,int,int) -> a
    boolean b(com.amap.mapapi.map.MapView,android.graphics.Point) -> b
    boolean a(android.view.MotionEvent,com.amap.mapapi.map.MapView) -> a
    void a(com.amap.mapapi.core.GeoPoint) -> a
com.amap.mapapi.map.p -> com.amap.mapapi.map.p:
    boolean draw(android.graphics.Canvas,com.amap.mapapi.map.MapView,boolean,long) -> draw
    void b() -> b
com.amap.mapapi.map.q -> com.amap.mapapi.map.q:
    android.graphics.Rect a -> a
    boolean draw(android.graphics.Canvas,com.amap.mapapi.map.MapView,boolean,long) -> draw
    void b() -> b
com.amap.mapapi.map.r -> com.amap.mapapi.map.r:
    android.graphics.Bitmap[] e -> e
    android.graphics.Rect f -> f
    int g -> g
    com.amap.mapapi.map.ah h -> h
    int h() -> h
    int i() -> i
    void a(android.graphics.Canvas,int,int) -> a
    void a() -> a
    void b() -> b
com.amap.mapapi.map.s -> com.amap.mapapi.map.s:
    com.amap.mapapi.map.ah a -> a
    android.graphics.Bitmap b -> b
    android.graphics.Point a() -> a
    android.graphics.Rect c() -> c
    boolean draw(android.graphics.Canvas,com.amap.mapapi.map.MapView,boolean,long) -> draw
com.amap.mapapi.map.t -> com.amap.mapapi.map.t:
    com.amap.mapapi.map.t a -> a
    android.graphics.drawable.Drawable b -> b
    android.graphics.Bitmap c -> c
    com.amap.mapapi.map.MapView d -> d
    android.view.View e -> e
    com.amap.mapapi.core.GeoPoint f -> f
    long g -> g
    com.amap.mapapi.map.MapView$LayoutParams h -> h
    void a(android.graphics.drawable.Drawable) -> a
    void a(android.content.Context) -> a
    void a() -> a
    void b() -> b
    void c() -> c
    boolean d() -> d
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
com.amap.mapapi.map.u -> com.amap.mapapi.map.u:
    void a(com.amap.mapapi.map.as$a) -> a
    boolean b(com.amap.mapapi.map.as$a) -> b
com.amap.mapapi.map.v -> com.amap.mapapi.map.v:
    com.amap.mapapi.map.MapView a -> a
    void a(com.amap.mapapi.map.MapView) -> a
com.amap.mapapi.map.w -> com.amap.mapapi.map.w:
    java.lang.String a -> a
    int b -> b
    int c -> c
    boolean d -> d
    boolean e -> e
    boolean f -> f
    boolean g -> g
    boolean h -> h
    long i -> i
    com.amap.mapapi.map.bb j -> j
    int k -> k
    java.lang.String l -> l
    com.amap.mapapi.map.h m -> m
    com.amap.mapapi.map.j n -> n
    com.amap.mapapi.core.s o -> o
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void a(android.graphics.Canvas) -> a
    void a() -> a
com.amap.mapapi.map.x -> com.amap.mapapi.map.x:
com.amap.mapapi.map.y -> com.amap.mapapi.map.y:
    android.graphics.Paint a -> a
    com.amap.mapapi.core.GeoPoint[] b -> b
    android.graphics.Path d -> d
    void a(android.graphics.Canvas,com.amap.mapapi.map.MapView,boolean) -> a
    void a(android.graphics.Canvas,com.amap.mapapi.map.MapView,java.util.ArrayList) -> a
    boolean a(android.graphics.Point,android.graphics.Point) -> a
    int a(com.amap.mapapi.map.MapView,java.util.ArrayList) -> a
com.amap.mapapi.map.z -> com.amap.mapapi.map.z:
    com.amap.mapapi.map.MapActivity a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.amap.mapapi.offlinemap.City -> com.amap.mapapi.offlinemap.City:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    void setProvince(java.lang.String) -> setProvince
    java.lang.String getProvince() -> getProvince
    void setCity(java.lang.String) -> setCity
    java.lang.String getCity() -> getCity
    void setInitial(java.lang.String) -> setInitial
    java.lang.String getInitial() -> getInitial
    void setCode(java.lang.String) -> setCode
    java.lang.String getCode() -> getCode
    int compareTo(java.lang.Object) -> compareTo
    void setPinyin(java.lang.String) -> setPinyin
    java.lang.String getPinyin() -> getPinyin
com.amap.mapapi.offlinemap.MOfflineMapStatus -> com.amap.mapapi.offlinemap.MOfflineMapStatus:
    int ERROR -> ERROR
    int STOP -> STOP
    int LOADING -> LOADING
    int UNZIP -> UNZIP
    int WAITING -> WAITING
    int PAUSE -> PAUSE
    int SUCCESS -> SUCCESS
com.amap.mapapi.offlinemap.OfflineMapManager -> com.amap.mapapi.offlinemap.OfflineMapManager:
    com.amap.mapapi.offlinemap.c a -> a
    com.amap.mapapi.offlinemap.OfflineMapManager$OfflineMapDownloadListener b -> b
    java.util.ArrayList c -> c
    android.os.Handler d -> d
    void a(android.content.Context) -> a
    boolean downloadByCityCode(java.lang.String) -> downloadByCityCode
    boolean downloadByCityName(java.lang.String) -> downloadByCityName
    void a(com.amap.mapapi.offlinemap.i) -> a
    com.amap.mapapi.offlinemap.i getItemByCityCode(java.lang.String) -> getItemByCityCode
    com.amap.mapapi.offlinemap.i getItemByCityName(java.lang.String) -> getItemByCityName
    void pause() -> pause
    void remove(java.lang.String) -> remove
    java.util.ArrayList getOfflineCityList() -> getOfflineCityList
    java.util.ArrayList getDownloadingCityList() -> getDownloadingCityList
    void getUpdateInfo(java.lang.String) -> getUpdateInfo
    void stop() -> stop
    void restart() -> restart
com.amap.mapapi.offlinemap.OfflineMapManager$OfflineMapDownloadListener -> com.amap.mapapi.offlinemap.OfflineMapManager$OfflineMapDownloadListener:
    void onDownload(int,int) -> onDownload
com.amap.mapapi.offlinemap.a -> com.amap.mapapi.offlinemap.a:
    java.io.RandomAccessFile a -> a
    long b -> b
    int a(byte[],int,int) -> a
com.amap.mapapi.offlinemap.b -> com.amap.mapapi.offlinemap.b:
    java.lang.String a -> a
    long b -> b
    long c -> c
    int d -> d
    boolean e -> e
    boolean f -> f
    com.amap.mapapi.offlinemap.a g -> g
    void run() -> run
    void a() -> a
com.amap.mapapi.offlinemap.c -> com.amap.mapapi.offlinemap.c:
    java.util.ArrayList a -> a
    java.util.ArrayList b -> b
    java.util.ArrayList c -> c
    java.util.ArrayList d -> d
    android.os.Handler e -> e
    java.lang.String g -> g
    android.content.Context h -> h
    com.amap.mapapi.offlinemap.e f -> f
    java.lang.String a() -> a
    java.lang.String c() -> c
    void a(int) -> a
    void b(int) -> b
    void a(com.amap.mapapi.offlinemap.g) -> a
    void b() -> b
    void a(org.json.JSONObject) -> a
    void a(com.amap.mapapi.offlinemap.g,int,int) -> a
    void b(com.amap.mapapi.offlinemap.g) -> b
com.amap.mapapi.offlinemap.d -> com.amap.mapapi.offlinemap.d:
    com.amap.mapapi.offlinemap.OfflineMapManager a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.amap.mapapi.offlinemap.e -> com.amap.mapapi.offlinemap.e:
    com.amap.mapapi.offlinemap.f a -> a
    long[] b -> b
    long[] c -> c
    com.amap.mapapi.offlinemap.b[] d -> d
    long e -> e
    boolean f -> f
    boolean g -> g
    java.io.File h -> h
    java.io.DataOutputStream i -> i
    com.amap.mapapi.offlinemap.c j -> j
    com.amap.mapapi.offlinemap.g k -> k
    void run() -> run
    long a() -> a
    void c() -> c
    void d() -> d
    void a(int) -> a
    void b() -> b
com.amap.mapapi.offlinemap.f -> com.amap.mapapi.offlinemap.f:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    int d -> d
    java.lang.String a() -> a
    java.lang.String b() -> b
    java.lang.String c() -> c
    int d() -> d
com.amap.mapapi.offlinemap.g -> com.amap.mapapi.offlinemap.g:
    int a -> a
    java.lang.String h -> h
    java.lang.String i -> i
    java.lang.String j -> j
    java.lang.String k -> k
    java.lang.String l -> l
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    long e -> e
    long f -> f
    int m -> m
    long g -> g
    java.lang.String a() -> a
    java.lang.String b() -> b
    java.lang.String c() -> c
    void a(int) -> a
    int d() -> d
    void e() -> e
com.amap.mapapi.offlinemap.h -> com.amap.mapapi.offlinemap.h:
    void a(int) -> a
    void a(java.lang.String) -> a
    void b(int) -> b
com.amap.mapapi.offlinemap.i -> com.amap.mapapi.offlinemap.i:
    java.lang.String a -> a
    long b -> b
    int c -> c
    java.lang.String d -> d
    java.lang.String e -> e
com.amap.mapapi.poisearch.PoiPagedResult -> com.amap.mapapi.poisearch.PoiPagedResult:
    int a -> a
    java.util.ArrayList b -> b
    com.amap.mapapi.poisearch.a c -> c
    com.amap.mapapi.poisearch.PoiPagedResult a(com.amap.mapapi.poisearch.a,java.util.ArrayList) -> a
    int a(int) -> a
    void a(java.util.ArrayList) -> a
    int getPageCount() -> getPageCount
    com.amap.mapapi.poisearch.PoiSearch$Query getQuery() -> getQuery
    com.amap.mapapi.poisearch.PoiSearch$SearchBound getBound() -> getBound
    boolean b(int) -> b
    java.util.List getPageLocal(int) -> getPageLocal
    java.util.List getPage(int) -> getPage
    java.util.List getSearchSuggestions() -> getSearchSuggestions
com.amap.mapapi.poisearch.PoiSearch -> com.amap.mapapi.poisearch.PoiSearch:
    com.amap.mapapi.poisearch.PoiSearch$SearchBound a -> a
    com.amap.mapapi.poisearch.PoiSearch$Query b -> b
    android.content.Context c -> c
    int d -> d
    com.amap.mapapi.poisearch.PoiPagedResult searchPOI() -> searchPOI
    void setPageSize(int) -> setPageSize
    void setPoiNumber(int) -> setPoiNumber
    void setQuery(com.amap.mapapi.poisearch.PoiSearch$Query) -> setQuery
    void setBound(com.amap.mapapi.poisearch.PoiSearch$SearchBound) -> setBound
    com.amap.mapapi.poisearch.PoiSearch$Query getQuery() -> getQuery
    com.amap.mapapi.poisearch.PoiSearch$SearchBound getBound() -> getBound
com.amap.mapapi.poisearch.PoiSearch$Query -> com.amap.mapapi.poisearch.PoiSearch$Query:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    boolean b() -> b
    java.lang.String getQueryString() -> getQueryString
    java.lang.String getCategory() -> getCategory
    java.lang.String a() -> a
    java.lang.String getCity() -> getCity
com.amap.mapapi.poisearch.PoiSearch$SearchBound -> com.amap.mapapi.poisearch.PoiSearch$SearchBound:
    com.amap.mapapi.core.GeoPoint a -> a
    com.amap.mapapi.core.GeoPoint b -> b
    int c -> c
    com.amap.mapapi.core.GeoPoint d -> d
    java.lang.String e -> e
    java.lang.String BOUND_SHAPE -> BOUND_SHAPE
    java.lang.String POLYGON_SHAPE -> POLYGON_SHAPE
    java.lang.String RECTANGLE_SHAPE -> RECTANGLE_SHAPE
    java.lang.String ELLIPSE_SHAPE -> ELLIPSE_SHAPE
    void a(com.amap.mapapi.core.GeoPoint,com.amap.mapapi.core.GeoPoint) -> a
    void a(com.amap.mapapi.core.GeoPoint,int,int) -> a
    com.amap.mapapi.core.GeoPoint getLowerLeft() -> getLowerLeft
    com.amap.mapapi.core.GeoPoint getUpperRight() -> getUpperRight
    com.amap.mapapi.core.GeoPoint getCenter() -> getCenter
    int getLonSpanInMeter() -> getLonSpanInMeter
    int getLatSpanInMeter() -> getLatSpanInMeter
    int getRange() -> getRange
    java.lang.String getShape() -> getShape
com.amap.mapapi.poisearch.PoiTypeDef -> com.amap.mapapi.poisearch.PoiTypeDef:
    java.lang.String All -> All
    java.lang.String Shopping -> Shopping
    java.lang.String SportEntertainment -> SportEntertainment
    java.lang.String MedicalService -> MedicalService
    java.lang.String FoodBeverages -> FoodBeverages
    java.lang.String Accommodation -> Accommodation
    java.lang.String TouristAttraction -> TouristAttraction
    java.lang.String RealEstate -> RealEstate
    java.lang.String Organization -> Organization
    java.lang.String Education -> Education
    java.lang.String PublicTransportation -> PublicTransportation
    java.lang.String Financial -> Financial
    java.lang.String Enterprise -> Enterprise
    java.lang.String PlaceAndAddress -> PlaceAndAddress
    java.lang.String AutoService -> AutoService
    java.lang.String LifeService -> LifeService
    java.lang.String AutoCarService -> AutoCarService
    java.lang.String AutoCarDealers -> AutoCarDealers
    java.lang.String AutoCarRepair -> AutoCarRepair
    java.lang.String MotorcycleService -> MotorcycleService
    java.lang.String RoadFurniture -> RoadFurniture
    java.lang.String DailyLifeService -> DailyLifeService
    java.lang.String PublicService -> PublicService
com.amap.mapapi.poisearch.a -> com.amap.mapapi.poisearch.a:
    int i -> i
    int j -> j
    int k -> k
    java.util.ArrayList l -> l
    void a(int) -> a
    void b(int) -> b
    int a() -> a
    int b() -> b
    com.amap.mapapi.poisearch.PoiSearch$Query c() -> c
    com.amap.mapapi.poisearch.PoiSearch$SearchBound i() -> i
    java.util.List j() -> j
    boolean a(java.lang.String) -> a
    java.lang.String e() -> e
    java.util.ArrayList a(java.io.InputStream) -> a
    byte[] d() -> d
    java.lang.Object b(java.io.InputStream) -> b
com.amap.mapapi.poisearch.b -> com.amap.mapapi.poisearch.b:
    com.amap.mapapi.poisearch.PoiSearch$Query a -> a
    com.amap.mapapi.poisearch.PoiSearch$SearchBound b -> b
com.amap.mapapi.route.BusSegment -> com.amap.mapapi.route.BusSegment:
    java.lang.String mLine -> mLine
    com.amap.mapapi.core.GeoPoint[] mPassStopPos -> mPassStopPos
    java.lang.String[] mPassStopName -> mPassStopName
    java.lang.String mFirstStation -> mFirstStation
    java.lang.String mLastStation -> mLastStation
    int getStopNumber() -> getStopNumber
    void setPassStopPos(com.amap.mapapi.core.GeoPoint[]) -> setPassStopPos
    java.lang.String getLineName() -> getLineName
    void setLineName(java.lang.String) -> setLineName
    java.lang.String getFirstStationName() -> getFirstStationName
    void setFirstStationName(java.lang.String) -> setFirstStationName
    java.lang.String getLastStationName() -> getLastStationName
    void setLastStationName(java.lang.String) -> setLastStationName
    java.lang.String getOnStationName() -> getOnStationName
    java.lang.String[] getPassStopName() -> getPassStopName
    void setPassStopName(java.lang.String[]) -> setPassStopName
    java.lang.String getOffStationName() -> getOffStationName
com.amap.mapapi.route.DriveWalkSegment -> com.amap.mapapi.route.DriveWalkSegment:
    int NoAction -> NoAction
    int mActionCode -> mActionCode
    java.lang.String mActionDes -> mActionDes
    java.lang.String mRoadName -> mRoadName
    java.lang.String getActionDescription() -> getActionDescription
    void setActionDescription(java.lang.String) -> setActionDescription
    int getActionCode() -> getActionCode
    void setActionCode(int) -> setActionCode
    java.lang.String getRoadName() -> getRoadName
    void setRoadName(java.lang.String) -> setRoadName
com.amap.mapapi.route.Route -> com.amap.mapapi.route.Route:
    java.lang.String mStartPlace -> mStartPlace
    java.lang.String mTargetPlace -> mTargetPlace
    java.util.List mSegs -> mSegs
    com.amap.mapapi.route.Route$d mHelper -> mHelper
    int BusDefault -> BusDefault
    int BusSaveMoney -> BusSaveMoney
    int BusLeaseChange -> BusLeaseChange
    int BusLeaseWalk -> BusLeaseWalk
    int BusMostComfortable -> BusMostComfortable
    int DrivingDefault -> DrivingDefault
    int DrivingSaveMoney -> DrivingSaveMoney
    int DrivingLeastDistance -> DrivingLeastDistance
    int DrivingNoFastRoad -> DrivingNoFastRoad
    com.amap.mapapi.core.GeoPoint a -> a
    com.amap.mapapi.core.GeoPoint b -> b
    int c -> c
    int getMode() -> getMode
    int getLength() -> getLength
    void b() -> b
    com.amap.mapapi.core.GeoPoint getLowerLeftPoint() -> getLowerLeftPoint
    com.amap.mapapi.core.GeoPoint getUpperRightPoint() -> getUpperRightPoint
    java.util.List calculateRoute(android.content.Context,com.amap.mapapi.route.Route$FromAndTo,int) -> calculateRoute
    java.util.List calculateRoute(android.content.Context,com.amap.mapapi.route.Route$FromAndTo,int,java.util.List) -> calculateRoute
    java.lang.String getStartPlace() -> getStartPlace
    void setStartPlace(java.lang.String) -> setStartPlace
    java.lang.String getTargetPlace() -> getTargetPlace
    void setTargetPlace(java.lang.String) -> setTargetPlace
    java.util.List a() -> a
    void a(java.util.List) -> a
    com.amap.mapapi.core.GeoPoint getStartPos() -> getStartPos
    com.amap.mapapi.core.GeoPoint getTargetPos() -> getTargetPos
    int getStepCount() -> getStepCount
    com.amap.mapapi.route.Segment getStep(int) -> getStep
    int getSegmentIndex(com.amap.mapapi.route.Segment) -> getSegmentIndex
    java.lang.String getStepedDescription(int) -> getStepedDescription
    java.lang.String getOverview() -> getOverview
    boolean isDrive(int) -> isDrive
    boolean isBus(int) -> isBus
    boolean isWalk(int) -> isWalk
    java.lang.String a(int) -> a
com.amap.mapapi.route.Route$FromAndTo -> com.amap.mapapi.route.Route$FromAndTo:
    com.amap.mapapi.core.GeoPoint mFrom -> mFrom
    com.amap.mapapi.core.GeoPoint mTo -> mTo
    int mTrans -> mTrans
    int NoTrans -> NoTrans
    int TransFromPoint -> TransFromPoint
    int TransToPoint -> TransToPoint
    int TransBothPoint -> TransBothPoint
    void a(android.content.Context,com.amap.mapapi.core.GeoPoint,com.amap.mapapi.core.GeoPoint,int) -> a
    com.amap.mapapi.core.GeoPoint$b a(android.content.Context,com.amap.mapapi.core.GeoPoint) -> a
    void a(com.amap.mapapi.route.Route$FromAndTo,android.content.Context,com.amap.mapapi.core.GeoPoint,com.amap.mapapi.core.GeoPoint,int) -> a
com.amap.mapapi.route.Route$a -> com.amap.mapapi.route.Route$a:
    com.amap.mapapi.route.Route a -> a
    android.graphics.Paint a(int) -> a
    java.lang.String a() -> a
    java.lang.String b(int) -> b
    android.text.Spanned c(int) -> c
    java.lang.String h(int) -> h
    java.lang.String i(int) -> i
    android.text.Spanned j(int) -> j
    android.text.Spanned k(int) -> k
    int d(int) -> d
    int e(int) -> e
    android.view.View a(com.amap.mapapi.map.MapView,android.content.Context,com.amap.mapapi.map.RouteMessageHandler,com.amap.mapapi.map.RouteOverlay,int) -> a
    android.graphics.drawable.Drawable f(int) -> f
com.amap.mapapi.route.Route$b -> com.amap.mapapi.route.Route$b:
    com.amap.mapapi.route.Route a -> a
    android.graphics.drawable.Drawable f(int) -> f
com.amap.mapapi.route.Route$c -> com.amap.mapapi.route.Route$c:
    com.amap.mapapi.route.Route a -> a
    android.graphics.Paint a(int) -> a
    android.graphics.drawable.Drawable f(int) -> f
com.amap.mapapi.route.Route$d -> com.amap.mapapi.route.Route$d:
    com.amap.mapapi.route.Route b -> b
    java.lang.String b(int) -> b
    java.lang.String h(int) -> h
    java.lang.String a() -> a
    android.text.Spanned c(int) -> c
    android.graphics.Paint a(int) -> a
    int d(int) -> d
    int e(int) -> e
    android.view.View a(com.amap.mapapi.map.MapView,android.content.Context,com.amap.mapapi.map.RouteMessageHandler,com.amap.mapapi.map.RouteOverlay,int) -> a
    com.amap.mapapi.core.GeoPoint g(int) -> g
    android.view.View b(com.amap.mapapi.map.MapView,android.content.Context,com.amap.mapapi.map.RouteMessageHandler,com.amap.mapapi.map.RouteOverlay,int) -> b
    android.graphics.drawable.Drawable f(int) -> f
com.amap.mapapi.route.Route$e -> com.amap.mapapi.route.Route$e:
    com.amap.mapapi.route.Route c -> c
    android.graphics.Paint a(int) -> a
    java.lang.String a() -> a
    java.lang.String b(int) -> b
    android.text.Spanned c(int) -> c
com.amap.mapapi.route.Segment -> com.amap.mapapi.route.Segment:
    com.amap.mapapi.core.GeoPoint[] mShapes -> mShapes
    com.amap.mapapi.route.Route mRoute -> mRoute
    int mLength -> mLength
    com.amap.mapapi.core.GeoPoint a -> a
    com.amap.mapapi.core.GeoPoint b -> b
    java.lang.String strTimeConsume -> strTimeConsume
    java.lang.String getConsumeTime() -> getConsumeTime
    void setConsumeTime(java.lang.String) -> setConsumeTime
    void a() -> a
    com.amap.mapapi.core.GeoPoint getLowerLeftPoint() -> getLowerLeftPoint
    com.amap.mapapi.core.GeoPoint getUpperRightPoint() -> getUpperRightPoint
    int getLength() -> getLength
    void setLength(int) -> setLength
    void setRoute(com.amap.mapapi.route.Route) -> setRoute
    void setShapes(com.amap.mapapi.core.GeoPoint[]) -> setShapes
    com.amap.mapapi.core.GeoPoint[] getShapes() -> getShapes
    int b() -> b
    com.amap.mapapi.route.Segment getPrev() -> getPrev
    com.amap.mapapi.route.Segment getNext() -> getNext
    com.amap.mapapi.core.GeoPoint getFirstPoint() -> getFirstPoint
    com.amap.mapapi.core.GeoPoint getLastPoint() -> getLastPoint
com.amap.mapapi.route.a -> com.amap.mapapi.route.a:
    java.util.List i -> i
    java.util.List a(java.util.LinkedList) -> a
    com.amap.mapapi.route.Segment a(com.amap.mapapi.core.GeoPoint,com.amap.mapapi.core.GeoPoint) -> a
    void a(com.amap.mapapi.route.BusSegment,java.lang.String) -> a
    void a(java.lang.String[],java.lang.String[]) -> a
    void a(com.amap.mapapi.core.GeoPoint[],java.lang.String[]) -> a
    void a(com.amap.mapapi.route.Route) -> a
    java.lang.String e() -> e
    byte[] d() -> d
    java.util.ArrayList a(java.io.InputStream) -> a
    void a(java.util.List) -> a
    java.lang.Object b(java.io.InputStream) -> b
com.amap.mapapi.route.b -> com.amap.mapapi.route.b:
    com.amap.mapapi.map.RouteMessageHandler a -> a
    int b -> b
    int c -> c
    com.amap.mapapi.map.MapView d -> d
    com.amap.mapapi.map.RouteOverlay e -> e
    void a(android.view.View) -> a
    com.amap.mapapi.map.MapView a(com.amap.mapapi.route.b) -> a
    com.amap.mapapi.map.RouteOverlay b(com.amap.mapapi.route.b) -> b
    int c(com.amap.mapapi.route.b) -> c
    int d(com.amap.mapapi.route.b) -> d
    com.amap.mapapi.map.RouteMessageHandler e(com.amap.mapapi.route.b) -> e
com.amap.mapapi.route.b$1 -> com.amap.mapapi.route.b$1:
    com.amap.mapapi.route.b a -> a
    void onClick(android.view.View) -> onClick
com.amap.mapapi.route.c -> com.amap.mapapi.route.c:
    java.util.List i -> i
    byte[] d() -> d
    java.util.ArrayList a(java.io.InputStream) -> a
    void a(java.util.List) -> a
    java.lang.Object b(java.io.InputStream) -> b
com.amap.mapapi.route.d -> com.amap.mapapi.route.d:
    void a(com.amap.mapapi.route.Route) -> a
    java.lang.String e() -> e
    java.util.ArrayList a(java.io.InputStream) -> a
    java.lang.Object b(java.io.InputStream) -> b
com.amap.mapapi.route.e -> com.amap.mapapi.route.e:
    java.lang.String j -> j
    java.lang.String k -> k
    com.amap.mapapi.core.GeoPoint l -> l
    com.amap.mapapi.core.GeoPoint m -> m
    java.util.ArrayList a(java.io.InputStream) -> a
    void a(java.util.List) -> a
    com.amap.mapapi.core.GeoPoint[] a(java.lang.String[]) -> a
    java.lang.Object b(java.io.InputStream) -> b
com.amap.mapapi.route.f -> com.amap.mapapi.route.f:
    com.amap.mapapi.route.Route$FromAndTo a -> a
    int b -> b
    double a() -> a
    double b() -> b
    double c() -> c
    double d() -> d
com.amap.mapapi.route.g -> com.amap.mapapi.route.g:
    java.util.List i -> i
    byte[] d() -> d
    void a(java.util.List) -> a
com.autonavi.aps.api.APS -> com.a.a.a.a:
    java.lang.String a -> a
    java.lang.String b -> b
    com.autonavi.aps.api.APS c -> c
    android.content.Context d -> d
    com.autonavi.aps.api.TelephoneBean e -> e
    int f -> f
    android.net.ConnectivityManager g -> g
    android.net.wifi.WifiManager h -> h
    android.telephony.TelephonyManager i -> i
    android.location.LocationManager j -> j
    android.location.LocationListener k -> k
    android.location.LocationListener l -> l
    android.location.Location m -> m
    android.location.Location n -> n
    java.util.ArrayList o -> o
    java.util.ArrayList p -> p
    java.util.List q -> q
    com.autonavi.aps.api.Des r -> r
    android.telephony.PhoneStateListener s -> s
    int t -> t
    com.autonavi.aps.api.f u -> u
    android.net.wifi.WifiInfo v -> v
    java.lang.String w -> w
    com.autonavi.aps.api.Location x -> x
    long y -> y
    boolean z -> z
    boolean A -> A
    boolean B -> B
    com.autonavi.aps.api.APS getInstance(android.content.Context) -> a
    void b(android.telephony.CellLocation,java.util.List) -> b
    void setLicence(java.lang.String) -> a
    void setProductName(java.lang.String) -> b
    com.autonavi.aps.api.Location getCurrentLocation$5b4ef32d() -> a
    java.lang.String j() -> l
    void onDestroy() -> b
    com.autonavi.aps.api.Location a(java.lang.String) -> c
    void finalize() -> finalize
    android.net.wifi.WifiManager a() -> c
    void a(java.util.List) -> a
    java.util.List b() -> d
    void a$1349ef() -> e
    void a$34b09f61() -> f
    void b(android.location.Location) -> a
    android.telephony.TelephonyManager c() -> g
    void a(android.telephony.CellLocation,java.util.List) -> a
    void a(int) -> a
    int d() -> h
    java.util.ArrayList e() -> i
    int f() -> j
    java.util.ArrayList g() -> k
com.autonavi.aps.api.APSFactory -> com.a.a.a.b:
    com.autonavi.aps.api.IAPS a -> a
    com.autonavi.aps.api.IAPS getInstance(android.content.Context) -> a
com.autonavi.aps.api.ApsRequest -> com.a.a.a.c:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    java.lang.String j -> j
    java.lang.String k -> k
    java.lang.String l -> l
    java.lang.String m -> m
    java.lang.String n -> n
    java.lang.String o -> o
    java.lang.String p -> p
    java.lang.String q -> q
    java.lang.String r -> r
    java.lang.String s -> s
    java.lang.String t -> t
    java.lang.String u -> u
    java.lang.String v -> v
    java.lang.String w -> w
    java.lang.String x -> x
    java.lang.String y -> y
    java.lang.String z -> z
    void setClienttime(java.lang.String) -> a
    java.lang.String getLicense() -> a
    void setLicense(java.lang.String) -> b
    java.lang.String getSrc() -> b
    void setSrc(java.lang.String) -> c
    java.lang.String getImei() -> c
    void setImei(java.lang.String) -> d
    java.lang.String getCdma() -> d
    void setCdma(java.lang.String) -> e
    java.lang.String getLon() -> e
    void setLon(java.lang.String) -> f
    java.lang.String getLat() -> f
    void setLat(java.lang.String) -> g
    java.lang.String getMcc() -> g
    void setMcc(java.lang.String) -> h
    java.lang.String getMnc() -> h
    void setMnc(java.lang.String) -> i
    java.lang.String getCellid() -> i
    void setCellid(java.lang.String) -> j
    java.lang.String getLac() -> j
    void setLac(java.lang.String) -> k
    java.lang.String getSid() -> k
    void setSid(java.lang.String) -> l
    java.lang.String getNid() -> l
    void setNid(java.lang.String) -> m
    java.lang.String getBid() -> m
    void setBid(java.lang.String) -> n
    java.lang.String getNetwork() -> x
    void setNetwork(java.lang.String) -> o
    java.lang.String getSignal() -> n
    void setSignal(java.lang.String) -> p
    java.lang.String getNb() -> o
    void setNb(java.lang.String) -> q
    java.lang.String getMacs() -> p
    void setMacs(java.lang.String) -> r
    java.lang.String getMainmac() -> q
    void setMainmac(java.lang.String) -> s
    java.lang.String getGps() -> r
    void setGps(java.lang.String) -> t
    java.lang.String getGlong() -> s
    void setGlong(java.lang.String) -> u
    java.lang.String getGlat() -> t
    void setGlat(java.lang.String) -> v
    void setGaccuracy(java.lang.String) -> w
    java.lang.String getInftype() -> u
    java.lang.String getNettype() -> v
    java.lang.String getLine1number() -> w
com.autonavi.aps.api.CdmaCellBean -> com.a.a.a.d:
    int a -> a
    int b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    int e -> e
    int f -> f
    int g -> g
    int h -> h
    java.lang.String getMcc() -> a
    void setMcc(java.lang.String) -> a
    void setMnc(java.lang.String) -> b
    int getLat() -> b
    void setLat(int) -> a
    int getLon() -> c
    void setLon(int) -> b
    int getSid() -> d
    void setSid(int) -> c
    int getNid() -> e
    void setNid(int) -> d
    int getBid() -> f
    void setBid(int) -> e
    int getSignal() -> g
    void setSignal(int) -> f
com.autonavi.aps.api.Constant -> com.a.a.a.e:
    int apsVerion -> a
com.autonavi.aps.api.Des -> com.a.a.a.f:
    java.lang.String a -> a
    javax.crypto.Cipher b -> b
    javax.crypto.Cipher c -> c
    java.lang.String encrypt(java.lang.String) -> a
    java.lang.String decrypt(java.lang.String,java.lang.String) -> a
    byte[] hex2byte(java.lang.String) -> b
com.autonavi.aps.api.GsmCellBean -> com.a.a.a.g:
    java.lang.String a -> a
    java.lang.String b -> b
    int c -> c
    int d -> d
    int e -> e
    java.lang.String getMcc() -> a
    void setMcc(java.lang.String) -> a
    java.lang.String getMnc() -> b
    void setMnc(java.lang.String) -> b
    int getLac() -> c
    void setLac(int) -> a
    int getCellid() -> d
    void setCellid(int) -> b
    int getSignal() -> e
    void setSignal(int) -> c
com.autonavi.aps.api.IAPS -> com.a.a.a.h:
    void setLicence(java.lang.String) -> a
    void setProductName(java.lang.String) -> b
    com.autonavi.aps.api.Location getCurrentLocation$5b4ef32d() -> a
    void onDestroy() -> b
com.autonavi.aps.api.Location -> com.a.a.a.i:
    java.lang.String a -> a
    java.lang.String b -> b
    double c -> c
    double d -> d
    double e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    double i -> i
    double j -> j
    double k -> k
    void setRawx$133369() -> a
    void setRawy$133369() -> b
    void setRawd$133369() -> c
    java.lang.String getCitycode() -> d
    void setCitycode(java.lang.String) -> a
    java.lang.String getDesc() -> e
    void setDesc(java.lang.String) -> b
    void setAdcode(java.lang.String) -> c
    void setResult(java.lang.String) -> d
    void setRdesc(java.lang.String) -> e
    double getCenx() -> f
    void setCenx(double) -> a
    double getCeny() -> g
    void setCeny(double) -> b
    double getRadius() -> h
    void setRadius(double) -> c
    java.lang.String toString() -> toString
com.autonavi.aps.api.NetManagerApache -> com.a.a.a.j:
    android.content.Context a -> a
    com.autonavi.aps.api.NetManagerApache b -> b
    com.autonavi.aps.api.NetManagerApache getInstance(android.content.Context) -> a
    java.lang.String doPostXmlAsString(java.lang.String,java.lang.String) -> a
    java.lang.String intToIpAddr(int) -> a
com.autonavi.aps.api.ParserResponse -> com.a.a.a.k:
    java.lang.String ParserSapsXml(java.lang.String) -> a
    com.autonavi.aps.api.Location ParserApsXml(java.lang.String) -> b
com.autonavi.aps.api.Storage -> com.a.a.a.l:
    com.autonavi.aps.api.Storage a -> a
    com.autonavi.aps.api.Storage getInstance() -> a
    void writeLog(java.lang.String) -> a
com.autonavi.aps.api.TelephoneBean -> com.a.a.a.m:
    java.lang.String a -> a
    com.autonavi.aps.api.TelephoneBean b -> b
    com.autonavi.aps.api.TelephoneBean getInstance$a933add(android.telephony.TelephonyManager,android.content.Context) -> a
    java.lang.String getDeviceId() -> a
com.autonavi.aps.api.b -> com.a.a.a.n:
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
com.autonavi.aps.api.c -> com.a.a.a.o:
    void run() -> run
com.autonavi.aps.api.d -> com.a.a.a.p:
    void run() -> run
com.autonavi.aps.api.e -> com.a.a.a.q:
    void onCellLocationChanged(android.telephony.CellLocation) -> onCellLocationChanged
    void onServiceStateChanged(android.telephony.ServiceState) -> onServiceStateChanged
    void onSignalStrengthsChanged(android.telephony.SignalStrength) -> onSignalStrengthsChanged
com.autonavi.aps.api.f -> com.a.a.a.r:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.autonavi.aps.api.k -> com.a.a.a.s:
    java.lang.StringBuffer a -> a
    com.autonavi.aps.api.ApsRequest b -> b
    void characters(char[],int,int) -> characters
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
com.autonavi.aps.api.l -> com.a.a.a.t:
    com.autonavi.aps.api.Location a -> a
    java.lang.StringBuffer b -> b
    void characters(char[],int,int) -> characters
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
com.autonavi.aps.api.m -> com.a.a.a.u:
    java.lang.String a -> a
    boolean b -> b
    void characters(char[],int,int) -> characters
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
com.autonavi.util.Shifting -> com.a.b.a:
    double[][] a -> a
    double[] table_offset(double,double) -> a
    double a(double,double,double) -> a
com.google.analytics.tracking.android.AdHitIdGenerator -> com.google.analytics.tracking.android.a:
    boolean mAdMobSdkInstalled -> a
    int getAdHitId() -> a
com.google.analytics.tracking.android.AdMobInfo -> com.google.analytics.tracking.android.b:
    com.google.analytics.tracking.android.AdMobInfo INSTANCE -> a
    int mAdHitId -> b
    java.util.Random mRandom -> c
    com.google.analytics.tracking.android.AdMobInfo getInstance() -> a
    int generateAdHitId() -> b
com.google.analytics.tracking.android.AnalyticsClient -> com.google.analytics.tracking.android.c:
    void sendHit(java.util.Map,long,java.lang.String,java.util.List) -> a
    void clearHits() -> a
    void connect() -> b
    void disconnect() -> c
com.google.analytics.tracking.android.AnalyticsGmsCoreClient -> com.google.analytics.tracking.android.d:
    android.content.ServiceConnection mConnection -> a
    com.google.analytics.tracking.android.AnalyticsGmsCoreClient$OnConnectedListener mOnConnectedListener -> b
    com.google.analytics.tracking.android.AnalyticsGmsCoreClient$OnConnectionFailedListener mOnConnectionFailedListener -> c
    android.content.Context mContext -> d
    com.google.android.gms.analytics.internal.IAnalyticsService mService -> e
    void connect() -> b
    void disconnect() -> c
    void sendHit(java.util.Map,long,java.lang.String,java.util.List) -> a
    void clearHits() -> a
    com.google.android.gms.analytics.internal.IAnalyticsService getService() -> d
    com.google.android.gms.analytics.internal.IAnalyticsService access$002(com.google.analytics.tracking.android.AnalyticsGmsCoreClient,com.google.android.gms.analytics.internal.IAnalyticsService) -> a
    void access$100(com.google.analytics.tracking.android.AnalyticsGmsCoreClient) -> a
    android.content.Context access$200(com.google.analytics.tracking.android.AnalyticsGmsCoreClient) -> b
    android.content.ServiceConnection access$302$1cc23a94(com.google.analytics.tracking.android.AnalyticsGmsCoreClient) -> c
    com.google.analytics.tracking.android.AnalyticsGmsCoreClient$OnConnectionFailedListener access$400(com.google.analytics.tracking.android.AnalyticsGmsCoreClient) -> d
    com.google.analytics.tracking.android.AnalyticsGmsCoreClient$OnConnectedListener access$500(com.google.analytics.tracking.android.AnalyticsGmsCoreClient) -> e
com.google.analytics.tracking.android.AnalyticsGmsCoreClient$AnalyticsServiceConnection -> com.google.analytics.tracking.android.e:
    com.google.analytics.tracking.android.AnalyticsGmsCoreClient this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.google.analytics.tracking.android.AnalyticsGmsCoreClient$OnConnectedListener -> com.google.analytics.tracking.android.f:
    void onConnected() -> a
    void onDisconnected() -> b
com.google.analytics.tracking.android.AnalyticsGmsCoreClient$OnConnectionFailedListener -> com.google.analytics.tracking.android.g:
    void onConnectionFailed$10b55c15(int) -> a
com.google.analytics.tracking.android.AnalyticsStore -> com.google.analytics.tracking.android.h:
    void putHit(java.util.Map,long,java.lang.String,java.util.Collection) -> a
    void clearHits$1349ef() -> a
    void dispatch() -> b
com.google.analytics.tracking.android.AnalyticsStoreStateListener -> com.google.analytics.tracking.android.i:
    void reportStoreIsEmpty(boolean) -> a
com.google.analytics.tracking.android.AnalyticsThread -> com.google.analytics.tracking.android.j:
    void sendHit(java.util.Map) -> a
    void dispatch() -> a
    void requestAppOptOut(com.google.analytics.tracking.android.GoogleAnalytics$AppOptOutCallback) -> a
    void requestClientId(com.google.analytics.tracking.android.AnalyticsThread$ClientIdCallback) -> a
    java.util.concurrent.LinkedBlockingQueue getQueue() -> b
    java.lang.Thread getThread() -> c
com.google.analytics.tracking.android.AnalyticsThread$ClientIdCallback -> com.google.analytics.tracking.android.k:
    void reportClientId(java.lang.String) -> a
com.google.analytics.tracking.android.CampaignTrackingReceiver -> com.google.analytics.tracking.android.CampaignTrackingReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.google.analytics.tracking.android.CampaignTrackingService -> com.google.analytics.tracking.android.CampaignTrackingService:
    void onHandleIntent(android.content.Intent) -> onHandleIntent
com.google.analytics.tracking.android.Clock -> com.google.analytics.tracking.android.l:
    long currentTimeMillis() -> a
com.google.analytics.tracking.android.Dispatcher -> com.google.analytics.tracking.android.m:
    int dispatchHits(java.util.List) -> a
    boolean okToDispatch() -> a
com.google.analytics.tracking.android.EasyTracker -> com.google.analytics.tracking.android.n:
    com.google.analytics.tracking.android.EasyTracker sInstance -> a
    boolean mIsEnabled -> b
    java.lang.String mTrackingId -> c
    java.lang.String mAppName -> d
    java.lang.String mAppVersion -> e
    int mDispatchPeriod -> f
    boolean mDebug -> g
    java.lang.Double mSampleRate -> h
    boolean mIsAnonymizeIpEnabled -> i
    boolean mIsReportUncaughtExceptionsEnabled -> j
    java.lang.Thread$UncaughtExceptionHandler mExceptionHandler -> k
    boolean mIsAutoActivityTracking -> l
    int mActivitiesActive -> m
    long mSessionTimeout -> n
    android.content.Context mContext -> o
    java.util.Map mActivityNameMap -> p
    com.google.analytics.tracking.android.Tracker mTracker -> q
    com.google.analytics.tracking.android.ParameterLoader mParameterFetcher -> r
    com.google.analytics.tracking.android.GoogleAnalytics mAnalyticsInstance -> s
    com.google.analytics.tracking.android.ServiceManager mServiceManager -> t
    com.google.analytics.tracking.android.Clock mClock -> u
    boolean mIsInForeground -> v
    com.google.analytics.tracking.android.EasyTracker getInstance() -> a
    com.google.analytics.tracking.android.Tracker getTracker() -> b
    void setContext(android.content.Context) -> a
com.google.analytics.tracking.android.EasyTracker$1 -> com.google.analytics.tracking.android.o:
    com.google.analytics.tracking.android.EasyTracker this$0 -> a
    long currentTimeMillis() -> a
com.google.analytics.tracking.android.EasyTracker$NoopTracker -> com.google.analytics.tracking.android.p:
    double mSampleRate -> b
    boolean mIsAnonymizeIp -> c
    com.google.analytics.tracking.android.EasyTracker this$0 -> a
    void setAppName(java.lang.String) -> a
    void setAppVersion(java.lang.String) -> b
    void sendException$505cbf4b(java.lang.String) -> c
    void setAnonymizeIp(boolean) -> a
    void setSampleRate(double) -> a
    void setCampaign(java.lang.String) -> d
    java.util.Map constructException$11388dd6(java.lang.String) -> e
com.google.analytics.tracking.android.ExceptionParser -> com.google.analytics.tracking.android.q:
    java.lang.String getDescription(java.lang.String,java.lang.Throwable) -> a
com.google.analytics.tracking.android.ExceptionReporter -> com.google.analytics.tracking.android.r:
    java.lang.Thread$UncaughtExceptionHandler mOriginalHandler -> a
    com.google.analytics.tracking.android.Tracker mTracker -> b
    com.google.analytics.tracking.android.ServiceManager mServiceManager -> c
    com.google.analytics.tracking.android.ExceptionParser mExceptionParser -> d
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
com.google.analytics.tracking.android.FutureApis -> com.google.analytics.tracking.android.s:
    int version() -> a
com.google.analytics.tracking.android.GANetworkReceiver -> com.google.analytics.tracking.android.t:
    com.google.analytics.tracking.android.ServiceManager mManager -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.google.analytics.tracking.android.GAServiceManager -> com.google.analytics.tracking.android.u:
    java.lang.Object MSG_OBJECT -> a
    android.content.Context ctx -> b
    com.google.analytics.tracking.android.AnalyticsStore store -> c
    com.google.analytics.tracking.android.AnalyticsThread thread -> d
    int dispatchPeriodInSeconds -> e
    boolean pendingDispatch -> f
    boolean connected -> g
    boolean listenForNetwork -> h
    com.google.analytics.tracking.android.AnalyticsStoreStateListener listener -> i
    android.os.Handler handler -> j
    com.google.analytics.tracking.android.GANetworkReceiver networkReceiver -> k
    boolean storeIsEmpty -> l
    com.google.analytics.tracking.android.GAServiceManager instance -> m
    com.google.analytics.tracking.android.GAServiceManager getInstance() -> a
    void initialize(android.content.Context,com.google.analytics.tracking.android.AnalyticsThread) -> a
    com.google.analytics.tracking.android.AnalyticsStore getStore() -> b
    void dispatch() -> c
    void setDispatchPeriod(int) -> a
    void updatePowerSaveMode(boolean,boolean) -> a
    void updateConnectivityStatus(boolean) -> a
    boolean access$000(com.google.analytics.tracking.android.GAServiceManager) -> a
    java.lang.Object access$100() -> d
    int access$200(com.google.analytics.tracking.android.GAServiceManager) -> b
    boolean access$300(com.google.analytics.tracking.android.GAServiceManager) -> c
    android.os.Handler access$400(com.google.analytics.tracking.android.GAServiceManager) -> d
com.google.analytics.tracking.android.GAServiceManager$1 -> com.google.analytics.tracking.android.v:
    com.google.analytics.tracking.android.GAServiceManager this$0 -> a
    void reportStoreIsEmpty(boolean) -> a
com.google.analytics.tracking.android.GAServiceManager$2 -> com.google.analytics.tracking.android.w:
    com.google.analytics.tracking.android.GAServiceManager this$0 -> a
    boolean handleMessage(android.os.Message) -> handleMessage
com.google.analytics.tracking.android.GAServiceProxy -> com.google.analytics.tracking.android.x:
    long lastRequestTime -> a
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState state -> b
    com.google.analytics.tracking.android.AnalyticsClient client -> c
    com.google.analytics.tracking.android.AnalyticsStore store -> d
    com.google.analytics.tracking.android.AnalyticsStore testStore -> e
    com.google.analytics.tracking.android.AnalyticsThread thread -> f
    android.content.Context ctx -> g
    java.util.Queue queue -> h
    int connectTries -> i
    java.util.Timer reConnectTimer -> j
    java.util.Timer failedConnectTimer -> k
    java.util.Timer disconnectCheckTimer -> l
    boolean pendingDispatch -> m
    boolean pendingClearHits -> n
    com.google.analytics.tracking.android.Clock clock -> o
    long idleTimeout -> p
    void putHit(java.util.Map,long,java.lang.String,java.util.List) -> a
    void dispatch() -> c
    java.util.Timer cancelTimer(java.util.Timer) -> a
    void clearAllTimers() -> e
    void createService() -> d
    void sendQueue() -> f
    void dispatchToStore() -> g
    void useStore() -> h
    void connectToService() -> i
    void disconnectFromService() -> j
    void onConnected() -> a
    void onDisconnected() -> b
    void onConnectionFailed$10b55c15(int) -> a
    void fireReconnectAttempt() -> k
    void access$000(com.google.analytics.tracking.android.GAServiceProxy) -> a
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState access$400(com.google.analytics.tracking.android.GAServiceProxy) -> b
    void access$500(com.google.analytics.tracking.android.GAServiceProxy) -> c
    void access$600(com.google.analytics.tracking.android.GAServiceProxy) -> d
    java.util.Queue access$700(com.google.analytics.tracking.android.GAServiceProxy) -> e
    long access$800(com.google.analytics.tracking.android.GAServiceProxy) -> f
    long access$900(com.google.analytics.tracking.android.GAServiceProxy) -> g
    com.google.analytics.tracking.android.Clock access$1000(com.google.analytics.tracking.android.GAServiceProxy) -> h
    void access$1100(com.google.analytics.tracking.android.GAServiceProxy) -> i
    java.util.Timer access$1200(com.google.analytics.tracking.android.GAServiceProxy) -> j
com.google.analytics.tracking.android.GAServiceProxy$1 -> com.google.analytics.tracking.android.y:
    com.google.analytics.tracking.android.GAServiceProxy this$0 -> a
    long currentTimeMillis() -> a
com.google.analytics.tracking.android.GAServiceProxy$2 -> com.google.analytics.tracking.android.z:
    com.google.analytics.tracking.android.GAServiceProxy this$0 -> a
    void run() -> run
com.google.analytics.tracking.android.GAServiceProxy$3 -> com.google.analytics.tracking.android.aa:
    int[] $SwitchMap$com$google$analytics$tracking$android$GAServiceProxy$ConnectState -> a
com.google.analytics.tracking.android.GAServiceProxy$ConnectState -> com.google.analytics.tracking.android.ab:
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState CONNECTING -> a
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState CONNECTED_SERVICE -> b
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState CONNECTED_LOCAL -> c
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState BLOCKED -> d
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState PENDING_CONNECTION -> e
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState PENDING_DISCONNECT -> f
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState DISCONNECTED -> g
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState[] $VALUES -> h
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState[] values() -> values
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState valueOf(java.lang.String) -> valueOf
com.google.analytics.tracking.android.GAServiceProxy$DisconnectCheckTask -> com.google.analytics.tracking.android.ac:
    com.google.analytics.tracking.android.GAServiceProxy this$0 -> a
    void run() -> run
com.google.analytics.tracking.android.GAServiceProxy$FailedConnectTask -> com.google.analytics.tracking.android.ad:
    com.google.analytics.tracking.android.GAServiceProxy this$0 -> a
    void run() -> run
com.google.analytics.tracking.android.GAServiceProxy$HitParams -> com.google.analytics.tracking.android.ae:
    java.util.Map wireFormatParams -> a
    long hitTimeInMilliseconds -> b
    java.lang.String path -> c
    java.util.List commands -> d
    java.util.Map getWireFormatParams() -> a
    long getHitTimeInMilliseconds() -> b
    java.lang.String getPath() -> c
    java.util.List getCommands() -> d
com.google.analytics.tracking.android.GAServiceProxy$ReconnectTask -> com.google.analytics.tracking.android.af:
    com.google.analytics.tracking.android.GAServiceProxy this$0 -> a
    void run() -> run
com.google.analytics.tracking.android.GAThread -> com.google.analytics.tracking.android.ag:
    java.util.concurrent.LinkedBlockingQueue queue -> a
    boolean mDisabled -> b
    boolean mClosed -> c
    boolean mAppOptOut -> d
    java.util.List mCommands -> e
    com.google.analytics.tracking.android.MetaModel mMetaModel -> f
    java.lang.String mInstallCampaign -> g
    java.lang.String mClientId -> h
    com.google.analytics.tracking.android.GAThread sInstance -> i
    com.google.analytics.tracking.android.ServiceProxy mServiceProxy -> j
    android.content.Context mContext -> k
    com.google.analytics.tracking.android.GAThread getInstance(android.content.Context) -> a
    void sendHit(java.util.Map) -> a
    void putIfAbsent(java.util.Map,java.lang.String,java.lang.String) -> a
    void dispatch() -> a
    void requestAppOptOut(com.google.analytics.tracking.android.GoogleAnalytics$AppOptOutCallback) -> a
    void requestClientId(com.google.analytics.tracking.android.AnalyticsThread$ClientIdCallback) -> a
    void queueToThread(java.lang.Runnable) -> a
    boolean storeClientId(java.lang.String) -> a
    java.lang.String initializeClientId() -> d
    java.lang.String getAndClearCampaign(android.content.Context) -> b
    java.lang.String printStackTrace(java.lang.Throwable) -> a
    void run() -> run
    java.util.concurrent.LinkedBlockingQueue getQueue() -> b
    java.lang.Thread getThread() -> c
    java.lang.String access$000(com.google.analytics.tracking.android.GAThread) -> a
    boolean access$100(com.google.analytics.tracking.android.GAThread) -> b
    boolean access$200$424bc930(java.util.Map) -> b
    java.lang.String access$300(com.google.analytics.tracking.android.GAThread) -> c
    java.lang.String access$302$5f7b49dd(com.google.analytics.tracking.android.GAThread) -> d
    void access$400(com.google.analytics.tracking.android.GAThread,java.util.Map) -> a
    void access$500$424bc934(java.util.Map) -> c
    void access$600(com.google.analytics.tracking.android.GAThread,java.util.Map) -> b
    com.google.analytics.tracking.android.MetaModel access$700(com.google.analytics.tracking.android.GAThread) -> e
    java.lang.String access$800$6c0750ac(java.util.Map) -> d
    java.util.List access$900(com.google.analytics.tracking.android.GAThread) -> f
    com.google.analytics.tracking.android.ServiceProxy access$1000(com.google.analytics.tracking.android.GAThread) -> g
com.google.analytics.tracking.android.GAThread$1 -> com.google.analytics.tracking.android.ah:
    java.util.Map val$hitCopy -> a
    long val$hitTime -> b
    com.google.analytics.tracking.android.GAThread this$0 -> c
    void run() -> run
com.google.analytics.tracking.android.GAThread$2 -> com.google.analytics.tracking.android.ai:
    com.google.analytics.tracking.android.GAThread this$0 -> a
    void run() -> run
com.google.analytics.tracking.android.GAThread$4 -> com.google.analytics.tracking.android.aj:
    com.google.analytics.tracking.android.GoogleAnalytics$AppOptOutCallback val$callback -> a
    com.google.analytics.tracking.android.GAThread this$0 -> b
    void run() -> run
com.google.analytics.tracking.android.GAThread$5 -> com.google.analytics.tracking.android.ak:
    com.google.analytics.tracking.android.AnalyticsThread$ClientIdCallback val$callback -> a
    com.google.analytics.tracking.android.GAThread this$0 -> b
    void run() -> run
com.google.analytics.tracking.android.GAUsage -> com.google.analytics.tracking.android.al:
    java.util.SortedSet mUsedFields -> a
    java.lang.StringBuilder mSequence -> b
    boolean mDisableUsage -> c
    com.google.analytics.tracking.android.GAUsage INSTANCE -> d
    com.google.analytics.tracking.android.GAUsage getInstance() -> a
    void setDisableUsage(boolean) -> a
    void setUsage(com.google.analytics.tracking.android.GAUsage$Field) -> a
    java.lang.String getAndClearUsage() -> b
    java.lang.String getAndClearSequence() -> c
com.google.analytics.tracking.android.GAUsage$Field -> com.google.analytics.tracking.android.am:
    com.google.analytics.tracking.android.GAUsage$Field TRACK_VIEW -> a
    com.google.analytics.tracking.android.GAUsage$Field TRACK_VIEW_WITH_APPSCREEN -> b
    com.google.analytics.tracking.android.GAUsage$Field TRACK_EVENT -> c
    com.google.analytics.tracking.android.GAUsage$Field TRACK_TRANSACTION -> d
    com.google.analytics.tracking.android.GAUsage$Field TRACK_EXCEPTION_WITH_DESCRIPTION -> e
    com.google.analytics.tracking.android.GAUsage$Field TRACK_EXCEPTION_WITH_THROWABLE -> f
    com.google.analytics.tracking.android.GAUsage$Field BLANK_06 -> g
    com.google.analytics.tracking.android.GAUsage$Field TRACK_TIMING -> h
    com.google.analytics.tracking.android.GAUsage$Field TRACK_SOCIAL -> i
    com.google.analytics.tracking.android.GAUsage$Field GET -> j
    com.google.analytics.tracking.android.GAUsage$Field SET -> k
    com.google.analytics.tracking.android.GAUsage$Field SEND -> l
    com.google.analytics.tracking.android.GAUsage$Field SET_START_SESSION -> m
    com.google.analytics.tracking.android.GAUsage$Field BLANK_13 -> n
    com.google.analytics.tracking.android.GAUsage$Field SET_APP_NAME -> o
    com.google.analytics.tracking.android.GAUsage$Field BLANK_15 -> p
    com.google.analytics.tracking.android.GAUsage$Field SET_APP_VERSION -> q
    com.google.analytics.tracking.android.GAUsage$Field BLANK_17 -> r
    com.google.analytics.tracking.android.GAUsage$Field SET_APP_SCREEN -> s
    com.google.analytics.tracking.android.GAUsage$Field GET_TRACKING_ID -> t
    com.google.analytics.tracking.android.GAUsage$Field SET_ANONYMIZE_IP -> u
    com.google.analytics.tracking.android.GAUsage$Field GET_ANONYMIZE_IP -> v
    com.google.analytics.tracking.android.GAUsage$Field SET_SAMPLE_RATE -> w
    com.google.analytics.tracking.android.GAUsage$Field GET_SAMPLE_RATE -> x
    com.google.analytics.tracking.android.GAUsage$Field SET_USE_SECURE -> y
    com.google.analytics.tracking.android.GAUsage$Field GET_USE_SECURE -> z
    com.google.analytics.tracking.android.GAUsage$Field SET_REFERRER -> A
    com.google.analytics.tracking.android.GAUsage$Field SET_CAMPAIGN -> B
    com.google.analytics.tracking.android.GAUsage$Field SET_APP_ID -> C
    com.google.analytics.tracking.android.GAUsage$Field GET_APP_ID -> D
    com.google.analytics.tracking.android.GAUsage$Field SET_EXCEPTION_PARSER -> E
    com.google.analytics.tracking.android.GAUsage$Field GET_EXCEPTION_PARSER -> F
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_TRANSACTION -> G
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_EXCEPTION -> H
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_RAW_EXCEPTION -> I
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_TIMING -> J
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_SOCIAL -> K
    com.google.analytics.tracking.android.GAUsage$Field SET_DEBUG -> L
    com.google.analytics.tracking.android.GAUsage$Field GET_DEBUG -> M
    com.google.analytics.tracking.android.GAUsage$Field GET_TRACKER -> N
    com.google.analytics.tracking.android.GAUsage$Field GET_DEFAULT_TRACKER -> O
    com.google.analytics.tracking.android.GAUsage$Field SET_DEFAULT_TRACKER -> P
    com.google.analytics.tracking.android.GAUsage$Field SET_APP_OPT_OUT -> Q
    com.google.analytics.tracking.android.GAUsage$Field REQUEST_APP_OPT_OUT -> R
    com.google.analytics.tracking.android.GAUsage$Field DISPATCH -> S
    com.google.analytics.tracking.android.GAUsage$Field SET_DISPATCH_PERIOD -> T
    com.google.analytics.tracking.android.GAUsage$Field BLANK_48 -> U
    com.google.analytics.tracking.android.GAUsage$Field REPORT_UNCAUGHT_EXCEPTIONS -> V
    com.google.analytics.tracking.android.GAUsage$Field SET_AUTO_ACTIVITY_TRACKING -> W
    com.google.analytics.tracking.android.GAUsage$Field SET_SESSION_TIMEOUT -> X
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_EVENT -> Y
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_ITEM -> Z
    com.google.analytics.tracking.android.GAUsage$Field SET_APP_INSTALLER_ID -> aa
    com.google.analytics.tracking.android.GAUsage$Field GET_APP_INSTALLER_ID -> ab
    com.google.analytics.tracking.android.GAUsage$Field[] $VALUES -> ac
    com.google.analytics.tracking.android.GAUsage$Field[] values() -> values
    com.google.analytics.tracking.android.GAUsage$Field valueOf(java.lang.String) -> valueOf
com.google.analytics.tracking.android.GoogleAnalytics -> com.google.analytics.tracking.android.an:
    boolean mDebug -> a
    com.google.analytics.tracking.android.AnalyticsThread mThread -> b
    android.content.Context mContext -> c
    com.google.analytics.tracking.android.Tracker mDefaultTracker -> d
    com.google.analytics.tracking.android.AdHitIdGenerator mAdHitIdGenerator -> e
    java.lang.String mClientId -> f
    java.lang.Boolean mAppOptOut -> g
    java.util.Map mTrackers -> h
    java.lang.String mLastTrackingId -> i
    com.google.analytics.tracking.android.GoogleAnalytics sInstance -> j
    com.google.analytics.tracking.android.GoogleAnalytics getInstance(android.content.Context) -> a
    void setDebug(boolean) -> a
    com.google.analytics.tracking.android.Tracker getTracker(java.lang.String) -> a
    void sendHit(java.util.Map) -> a
    java.lang.Boolean access$002(com.google.analytics.tracking.android.GoogleAnalytics,java.lang.Boolean) -> a
    java.lang.String access$102(com.google.analytics.tracking.android.GoogleAnalytics,java.lang.String) -> a
com.google.analytics.tracking.android.GoogleAnalytics$1 -> com.google.analytics.tracking.android.ao:
    com.google.analytics.tracking.android.GoogleAnalytics this$0 -> a
    void reportAppOptOut(boolean) -> a
com.google.analytics.tracking.android.GoogleAnalytics$2 -> com.google.analytics.tracking.android.ap:
    com.google.analytics.tracking.android.GoogleAnalytics this$0 -> a
    void reportClientId(java.lang.String) -> a
com.google.analytics.tracking.android.GoogleAnalytics$AppOptOutCallback -> com.google.analytics.tracking.android.aq:
    void reportAppOptOut(boolean) -> a
com.google.analytics.tracking.android.Hit -> com.google.analytics.tracking.android.ar:
    java.lang.String mHitString -> a
    long mHitId -> b
    long mHitTime -> c
    java.lang.String mHitUrl -> d
    java.lang.String getHitParams() -> a
    void setHitString(java.lang.String) -> a
    long getHitId() -> b
    long getHitTime() -> c
    java.lang.String getHitUrl() -> d
    void setHitUrl(java.lang.String) -> b
com.google.analytics.tracking.android.HitBuilder -> com.google.analytics.tracking.android.as:
    java.lang.String encode(java.lang.String) -> a
com.google.analytics.tracking.android.HttpClientFactory -> com.google.analytics.tracking.android.at:
    org.apache.http.client.HttpClient newInstance() -> a
com.google.analytics.tracking.android.Log -> com.google.analytics.tracking.android.au:
    boolean sDebug -> a
    void setDebug(boolean) -> a
    boolean isDebugEnabled() -> a
    int dDebug(java.lang.String) -> a
    int e(java.lang.String) -> b
    int i(java.lang.String) -> c
    int iDebug(java.lang.String) -> d
    int vDebug(java.lang.String) -> e
    int w(java.lang.String) -> f
    int wDebug(java.lang.String) -> g
    java.lang.String formatMessage(java.lang.String) -> h
com.google.analytics.tracking.android.MetaModel -> com.google.analytics.tracking.android.av:
    java.util.Map mMetaInfos -> a
    com.google.analytics.tracking.android.MetaModel$MetaInfo getMetaInfo(java.lang.String) -> a
    void addField(java.lang.String,java.lang.String,java.lang.String,com.google.analytics.tracking.android.MetaModel$Formatter) -> a
com.google.analytics.tracking.android.MetaModel$Formatter -> com.google.analytics.tracking.android.aw:
    java.lang.String format(java.lang.String) -> a
com.google.analytics.tracking.android.MetaModel$MetaInfo -> com.google.analytics.tracking.android.ax:
    java.lang.String mUrlParam -> a
    java.lang.String mDefaultValue -> b
    com.google.analytics.tracking.android.MetaModel$Formatter mFormatter -> c
    java.lang.String getUrlParam(java.lang.String) -> a
    java.lang.String getDefaultValue() -> a
    com.google.analytics.tracking.android.MetaModel$Formatter getFormatter() -> b
com.google.analytics.tracking.android.MetaModelInitializer -> com.google.analytics.tracking.android.ay:
    com.google.analytics.tracking.android.MetaModel$Formatter BOOLEAN_FORMATTER -> a
    com.google.analytics.tracking.android.MetaModel$Formatter UP_TO_TWO_DIGIT_FLOAT_FORMATTER -> b
    void set(com.google.analytics.tracking.android.MetaModel) -> a
com.google.analytics.tracking.android.MetaModelInitializer$1 -> com.google.analytics.tracking.android.az:
    java.lang.String format(java.lang.String) -> a
com.google.analytics.tracking.android.MetaModelInitializer$2 -> com.google.analytics.tracking.android.ba:
    java.text.DecimalFormat mFloatFormat -> a
    java.lang.String format(java.lang.String) -> a
com.google.analytics.tracking.android.ParameterLoader -> com.google.analytics.tracking.android.bb:
    java.lang.String getString(java.lang.String) -> a
    java.lang.Double getDoubleFromString(java.lang.String) -> b
    boolean getBoolean(java.lang.String) -> c
    int getInt(java.lang.String,int) -> a
com.google.analytics.tracking.android.ParameterLoaderImpl -> com.google.analytics.tracking.android.bc:
    android.content.Context mContext -> a
    int getResourceIdForType(java.lang.String,java.lang.String) -> a
    java.lang.String getString(java.lang.String) -> a
    boolean getBoolean(java.lang.String) -> c
    int getInt(java.lang.String,int) -> a
    java.lang.Double getDoubleFromString(java.lang.String) -> b
com.google.analytics.tracking.android.PersistentAnalyticsStore -> com.google.analytics.tracking.android.bd:
    java.lang.String CREATE_HITS_TABLE -> a
    com.google.analytics.tracking.android.PersistentAnalyticsStore$AnalyticsDatabaseHelper mDbHelper -> b
    com.google.analytics.tracking.android.Dispatcher mDispatcher -> c
    com.google.analytics.tracking.android.AnalyticsStoreStateListener mListener -> d
    android.content.Context mContext -> e
    java.lang.String mDatabaseName -> f
    long mLastDeleteStaleHitsTime -> g
    com.google.analytics.tracking.android.Clock mClock -> h
    void clearHits$1349ef() -> a
    void putHit(java.util.Map,long,java.lang.String,java.util.Collection) -> a
    java.lang.String generateHitString(java.util.Map) -> a
    java.util.List peekHits(int) -> a
    void deleteHits(java.util.Collection) -> a
    int getNumStoredHits() -> d
    void dispatch() -> b
    android.database.sqlite.SQLiteDatabase getWritableDatabase(java.lang.String) -> a
    com.google.analytics.tracking.android.Clock access$000(com.google.analytics.tracking.android.PersistentAnalyticsStore) -> a
    java.lang.String access$100(com.google.analytics.tracking.android.PersistentAnalyticsStore) -> b
    android.content.Context access$200(com.google.analytics.tracking.android.PersistentAnalyticsStore) -> c
    java.lang.String access$300() -> c
com.google.analytics.tracking.android.PersistentAnalyticsStore$1 -> com.google.analytics.tracking.android.be:
    com.google.analytics.tracking.android.PersistentAnalyticsStore this$0 -> a
    long currentTimeMillis() -> a
com.google.analytics.tracking.android.PersistentAnalyticsStore$2 -> com.google.analytics.tracking.android.bf:
    com.google.analytics.tracking.android.PersistentAnalyticsStore this$0 -> a
    org.apache.http.client.HttpClient newInstance() -> a
com.google.analytics.tracking.android.PersistentAnalyticsStore$AnalyticsDatabaseHelper -> com.google.analytics.tracking.android.bg:
    boolean mBadDatabase -> b
    long mLastDatabaseCheckTime -> c
    com.google.analytics.tracking.android.PersistentAnalyticsStore this$0 -> a
    boolean tablePresent(java.lang.String,android.database.sqlite.SQLiteDatabase) -> a
    android.database.sqlite.SQLiteDatabase getWritableDatabase() -> getWritableDatabase
    void onOpen(android.database.sqlite.SQLiteDatabase) -> onOpen
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.google.analytics.tracking.android.ServiceManager -> com.google.analytics.tracking.android.bh:
    void dispatch() -> c
    void setDispatchPeriod(int) -> a
    void updateConnectivityStatus(boolean) -> a
com.google.analytics.tracking.android.ServiceProxy -> com.google.analytics.tracking.android.bi:
    void putHit(java.util.Map,long,java.lang.String,java.util.List) -> a
    void dispatch() -> c
    void createService() -> d
com.google.analytics.tracking.android.SimpleNetworkDispatcher -> com.google.analytics.tracking.android.bj:
    java.lang.String userAgent -> a
    com.google.analytics.tracking.android.HttpClientFactory httpClientFactory -> b
    android.content.Context ctx -> c
    boolean okToDispatch() -> a
    int dispatchHits(java.util.List) -> a
    org.apache.http.HttpEntityEnclosingRequest buildRequest(java.lang.String,java.lang.String) -> a
    void logDebugInformation(boolean,org.apache.http.HttpEntityEnclosingRequest) -> a
    java.net.URL getUrl(com.google.analytics.tracking.android.Hit) -> a
com.google.analytics.tracking.android.StandardExceptionParser -> com.google.analytics.tracking.android.bk:
    java.util.TreeSet includedPackages -> a
    void setIncludedPackages(android.content.Context,java.util.Collection) -> a
    java.lang.Throwable getCause(java.lang.Throwable) -> a
    java.lang.String getDescription(java.lang.String,java.lang.Throwable) -> a
com.google.analytics.tracking.android.Tracker -> com.google.analytics.tracking.android.bl:
    java.text.DecimalFormat DF -> a
    com.google.analytics.tracking.android.TrackerHandler mHandler -> b
    com.google.analytics.tracking.android.Tracker$SimpleModel mModel -> c
    boolean mIsTrackerClosed -> d
    boolean mIsTrackingStarted -> e
    long mTokens -> f
    long mLastTrackTime -> g
    boolean mIsThrottlingEnabled -> h
    void setAppName(java.lang.String) -> a
    void setAppVersion(java.lang.String) -> b
    void sendException$505cbf4b(java.lang.String) -> c
    void setAnonymizeIp(boolean) -> a
    void setSampleRate(double) -> a
    void setCampaign(java.lang.String) -> d
    java.util.Map constructException$11388dd6(java.lang.String) -> e
    boolean tokensAvailable() -> a
com.google.analytics.tracking.android.Tracker$SimpleModel -> com.google.analytics.tracking.android.bm:
    java.util.Map temporaryMap -> a
    java.util.Map permanentMap -> b
    void setForNextHit(java.lang.String,java.lang.String) -> a
    void set(java.lang.String,java.lang.String) -> b
    void clearTemporaryValues() -> a
    void setAll(java.util.Map,java.lang.Boolean) -> a
    java.util.Map getKeysAndValues() -> b
com.google.analytics.tracking.android.TrackerHandler -> com.google.analytics.tracking.android.bn:
    void sendHit(java.util.Map) -> a
com.google.analytics.tracking.android.Utils -> com.google.analytics.tracking.android.bo:
    char[] HEXBYTES -> a
    java.util.Map parseURLParameters(java.lang.String) -> a
    double safeParseDouble(java.lang.String) -> b
    boolean safeParseBoolean(java.lang.String) -> c
    java.lang.String filterCampaign(java.lang.String) -> d
    java.lang.String getLanguage(java.util.Locale) -> a
    int fromHexDigit(char) -> a
    byte[] hexDecode(java.lang.String) -> e
com.google.android.gms.analytics.internal.Command -> com.google.android.gms.analytics.internal.Command:
    java.lang.String id -> a
    java.lang.String urlParam -> b
    java.lang.String value -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String getId() -> a
    java.lang.String getUrlParam() -> b
    java.lang.String getValue() -> c
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.google.android.gms.analytics.internal.Command$1 -> com.google.android.gms.analytics.internal.a:
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.google.android.gms.analytics.internal.IAnalyticsService -> com.google.android.gms.analytics.internal.b:
    void sendHit(java.util.Map,long,java.lang.String,java.util.List) -> a
    void clearHits() -> a
com.google.android.gms.analytics.internal.IAnalyticsService$Stub -> com.google.android.gms.analytics.internal.c:
    com.google.android.gms.analytics.internal.IAnalyticsService asInterface(android.os.IBinder) -> a
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.google.android.gms.analytics.internal.IAnalyticsService$Stub$Proxy -> com.google.android.gms.analytics.internal.d:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    void sendHit(java.util.Map,long,java.lang.String,java.util.List) -> a
    void clearHits() -> a
com.kenai.jbosh.AbstractAttr -> com.kenai.jbosh.AbstractAttr:
    java.lang.Comparable value -> value
    java.lang.Comparable getValue() -> getValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
com.kenai.jbosh.AbstractBody -> com.kenai.jbosh.AbstractBody:
    java.util.Set getAttributeNames() -> getAttributeNames
    java.lang.String getAttribute(com.kenai.jbosh.BodyQName) -> getAttribute
    java.util.Map getAttributes() -> getAttributes
    java.lang.String toXML() -> toXML
    com.kenai.jbosh.BodyQName getBodyQName() -> getBodyQName
com.kenai.jbosh.AbstractIntegerAttr -> com.kenai.jbosh.AbstractIntegerAttr:
    void checkMinValue(int) -> checkMinValue
    int parseInt(java.lang.String) -> parseInt
    int intValue() -> intValue
com.kenai.jbosh.ApacheHTTPResponse -> com.kenai.jbosh.ApacheHTTPResponse:
    java.lang.String ACCEPT_ENCODING -> ACCEPT_ENCODING
    java.lang.String ACCEPT_ENCODING_VAL -> ACCEPT_ENCODING_VAL
    java.lang.String CHARSET -> CHARSET
    java.lang.String CONTENT_TYPE -> CONTENT_TYPE
    java.util.concurrent.locks.Lock lock -> lock
    org.apache.http.protocol.HttpContext context -> context
    org.apache.http.client.HttpClient client -> client
    org.apache.http.client.methods.HttpPost post -> post
    boolean sent -> sent
    com.kenai.jbosh.BOSHException toThrow -> toThrow
    com.kenai.jbosh.AbstractBody body -> body
    int statusCode -> statusCode
    void abort() -> abort
    com.kenai.jbosh.AbstractBody getBody() -> getBody
    int getHTTPStatus() -> getHTTPStatus
    void awaitResponse() -> awaitResponse
com.kenai.jbosh.ApacheHTTPSender -> com.kenai.jbosh.ApacheHTTPSender:
    java.util.concurrent.locks.Lock lock -> lock
    com.kenai.jbosh.BOSHClientConfig cfg -> cfg
    org.apache.http.client.HttpClient httpClient -> httpClient
    void init(com.kenai.jbosh.BOSHClientConfig) -> init
    void destroy() -> destroy
    com.kenai.jbosh.HTTPResponse send(com.kenai.jbosh.CMSessionParams,com.kenai.jbosh.AbstractBody) -> send
    org.apache.http.client.HttpClient initHttpClient(com.kenai.jbosh.BOSHClientConfig) -> initHttpClient
com.kenai.jbosh.AttrAccept -> com.kenai.jbosh.AttrAccept:
    java.lang.String[] encodings -> encodings
    com.kenai.jbosh.AttrAccept createFromString(java.lang.String) -> createFromString
    boolean isAccepted(java.lang.String) -> isAccepted
com.kenai.jbosh.AttrAck -> com.kenai.jbosh.AttrAck:
    com.kenai.jbosh.AttrAck createFromString(java.lang.String) -> createFromString
com.kenai.jbosh.AttrCharsets -> com.kenai.jbosh.AttrCharsets:
    java.lang.String[] charsets -> charsets
    com.kenai.jbosh.AttrCharsets createFromString(java.lang.String) -> createFromString
    boolean isAccepted(java.lang.String) -> isAccepted
com.kenai.jbosh.AttrHold -> com.kenai.jbosh.AttrHold:
    com.kenai.jbosh.AttrHold createFromString(java.lang.String) -> createFromString
com.kenai.jbosh.AttrInactivity -> com.kenai.jbosh.AttrInactivity:
    com.kenai.jbosh.AttrInactivity createFromString(java.lang.String) -> createFromString
com.kenai.jbosh.AttrMaxPause -> com.kenai.jbosh.AttrMaxPause:
    com.kenai.jbosh.AttrMaxPause createFromString(java.lang.String) -> createFromString
    int getInMilliseconds() -> getInMilliseconds
com.kenai.jbosh.AttrPause -> com.kenai.jbosh.AttrPause:
    com.kenai.jbosh.AttrPause createFromString(java.lang.String) -> createFromString
    int getInMilliseconds() -> getInMilliseconds
com.kenai.jbosh.AttrPolling -> com.kenai.jbosh.AttrPolling:
    com.kenai.jbosh.AttrPolling createFromString(java.lang.String) -> createFromString
    int getInMilliseconds() -> getInMilliseconds
com.kenai.jbosh.AttrRequests -> com.kenai.jbosh.AttrRequests:
    com.kenai.jbosh.AttrRequests createFromString(java.lang.String) -> createFromString
com.kenai.jbosh.AttrSessionID -> com.kenai.jbosh.AttrSessionID:
    com.kenai.jbosh.AttrSessionID createFromString(java.lang.String) -> createFromString
com.kenai.jbosh.AttrVersion -> com.kenai.jbosh.AttrVersion:
    com.kenai.jbosh.AttrVersion DEFAULT -> DEFAULT
    int major -> major
    int minor -> minor
    com.kenai.jbosh.AttrVersion getSupportedVersion() -> getSupportedVersion
    com.kenai.jbosh.AttrVersion createFromString(java.lang.String) -> createFromString
    int getMajor() -> getMajor
    int getMinor() -> getMinor
    int compareTo(java.lang.Object) -> compareTo
com.kenai.jbosh.AttrWait -> com.kenai.jbosh.AttrWait:
    com.kenai.jbosh.AttrWait createFromString(java.lang.String) -> createFromString
com.kenai.jbosh.Attributes -> com.kenai.jbosh.Attributes:
    com.kenai.jbosh.BodyQName ACCEPT -> ACCEPT
    com.kenai.jbosh.BodyQName AUTHID -> AUTHID
    com.kenai.jbosh.BodyQName ACK -> ACK
    com.kenai.jbosh.BodyQName CHARSETS -> CHARSETS
    com.kenai.jbosh.BodyQName CONDITION -> CONDITION
    com.kenai.jbosh.BodyQName CONTENT -> CONTENT
    com.kenai.jbosh.BodyQName FROM -> FROM
    com.kenai.jbosh.BodyQName HOLD -> HOLD
    com.kenai.jbosh.BodyQName INACTIVITY -> INACTIVITY
    com.kenai.jbosh.BodyQName KEY -> KEY
    com.kenai.jbosh.BodyQName MAXPAUSE -> MAXPAUSE
    com.kenai.jbosh.BodyQName NEWKEY -> NEWKEY
    com.kenai.jbosh.BodyQName PAUSE -> PAUSE
    com.kenai.jbosh.BodyQName POLLING -> POLLING
    com.kenai.jbosh.BodyQName REPORT -> REPORT
    com.kenai.jbosh.BodyQName REQUESTS -> REQUESTS
    com.kenai.jbosh.BodyQName RID -> RID
    com.kenai.jbosh.BodyQName ROUTE -> ROUTE
    com.kenai.jbosh.BodyQName SECURE -> SECURE
    com.kenai.jbosh.BodyQName SID -> SID
    com.kenai.jbosh.BodyQName STREAM -> STREAM
    com.kenai.jbosh.BodyQName TIME -> TIME
    com.kenai.jbosh.BodyQName TO -> TO
    com.kenai.jbosh.BodyQName TYPE -> TYPE
    com.kenai.jbosh.BodyQName VER -> VER
    com.kenai.jbosh.BodyQName WAIT -> WAIT
    com.kenai.jbosh.BodyQName XML_LANG -> XML_LANG
com.kenai.jbosh.BOSHClient -> com.kenai.jbosh.BOSHClient:
    java.util.logging.Logger LOG -> LOG
    java.lang.String TERMINATE -> TERMINATE
    java.lang.String ERROR -> ERROR
    java.lang.String INTERRUPTED -> INTERRUPTED
    java.lang.String UNHANDLED -> UNHANDLED
    java.lang.String NULL_LISTENER -> NULL_LISTENER
    int DEFAULT_EMPTY_REQUEST_DELAY -> DEFAULT_EMPTY_REQUEST_DELAY
    int EMPTY_REQUEST_DELAY -> EMPTY_REQUEST_DELAY
    int DEFAULT_PAUSE_MARGIN -> DEFAULT_PAUSE_MARGIN
    int PAUSE_MARGIN -> PAUSE_MARGIN
    boolean ASSERTIONS -> ASSERTIONS
    java.util.Set connListeners -> connListeners
    java.util.Set requestListeners -> requestListeners
    java.util.Set responseListeners -> responseListeners
    java.util.concurrent.locks.ReentrantLock lock -> lock
    java.util.concurrent.locks.Condition notEmpty -> notEmpty
    java.util.concurrent.locks.Condition notFull -> notFull
    java.util.concurrent.locks.Condition drained -> drained
    com.kenai.jbosh.BOSHClientConfig cfg -> cfg
    java.lang.Runnable procRunnable -> procRunnable
    java.lang.Runnable emptyRequestRunnable -> emptyRequestRunnable
    com.kenai.jbosh.HTTPSender httpSender -> httpSender
    java.util.concurrent.atomic.AtomicReference exchInterceptor -> exchInterceptor
    com.kenai.jbosh.RequestIDSequence requestIDSeq -> requestIDSeq
    java.util.concurrent.ScheduledExecutorService schedExec -> schedExec
    java.lang.Thread procThread -> procThread
    java.util.concurrent.ScheduledFuture emptyRequestFuture -> emptyRequestFuture
    com.kenai.jbosh.CMSessionParams cmParams -> cmParams
    java.util.Queue exchanges -> exchanges
    java.util.SortedSet pendingResponseAcks -> pendingResponseAcks
    java.lang.Long responseAck -> responseAck
    java.util.List pendingRequestAcks -> pendingRequestAcks
    boolean $assertionsDisabled -> $assertionsDisabled
    com.kenai.jbosh.BOSHClient create(com.kenai.jbosh.BOSHClientConfig) -> create
    com.kenai.jbosh.BOSHClientConfig getBOSHClientConfig() -> getBOSHClientConfig
    void addBOSHClientConnListener(com.kenai.jbosh.BOSHClientConnListener) -> addBOSHClientConnListener
    void removeBOSHClientConnListener(com.kenai.jbosh.BOSHClientConnListener) -> removeBOSHClientConnListener
    void addBOSHClientRequestListener(com.kenai.jbosh.BOSHClientRequestListener) -> addBOSHClientRequestListener
    void removeBOSHClientRequestListener(com.kenai.jbosh.BOSHClientRequestListener) -> removeBOSHClientRequestListener
    void addBOSHClientResponseListener(com.kenai.jbosh.BOSHClientResponseListener) -> addBOSHClientResponseListener
    void removeBOSHClientResponseListener(com.kenai.jbosh.BOSHClientResponseListener) -> removeBOSHClientResponseListener
    void send(com.kenai.jbosh.ComposableBody) -> send
    boolean pause() -> pause
    void disconnect() -> disconnect
    void disconnect(com.kenai.jbosh.ComposableBody) -> disconnect
    void close() -> close
    com.kenai.jbosh.CMSessionParams getCMSessionParams() -> getCMSessionParams
    void drain() -> drain
    void setExchangeInterceptor(com.kenai.jbosh.BOSHClient$ExchangeInterceptor) -> setExchangeInterceptor
    void init() -> init
    void dispose(java.lang.Throwable) -> dispose
    boolean isPause(com.kenai.jbosh.AbstractBody) -> isPause
    boolean isTermination(com.kenai.jbosh.AbstractBody) -> isTermination
    com.kenai.jbosh.TerminalBindingCondition getTerminalBindingCondition(int,com.kenai.jbosh.AbstractBody) -> getTerminalBindingCondition
    boolean isImmediatelySendable(com.kenai.jbosh.AbstractBody) -> isImmediatelySendable
    boolean isWorking() -> isWorking
    void blockUntilSendable(com.kenai.jbosh.AbstractBody) -> blockUntilSendable
    com.kenai.jbosh.ComposableBody applySessionCreationRequest(long,com.kenai.jbosh.ComposableBody) -> applySessionCreationRequest
    void applyRoute(com.kenai.jbosh.ComposableBody$Builder) -> applyRoute
    void applyFrom(com.kenai.jbosh.ComposableBody$Builder) -> applyFrom
    com.kenai.jbosh.ComposableBody applySessionData(long,com.kenai.jbosh.ComposableBody) -> applySessionData
    void applyResponseAcknowledgement(com.kenai.jbosh.ComposableBody$Builder,long) -> applyResponseAcknowledgement
    void processMessages() -> processMessages
    com.kenai.jbosh.HTTPExchange nextExchange() -> nextExchange
    void processExchange(com.kenai.jbosh.HTTPExchange) -> processExchange
    void clearEmptyRequest() -> clearEmptyRequest
    long getDefaultEmptyRequestDelay() -> getDefaultEmptyRequestDelay
    void scheduleEmptyRequest(long) -> scheduleEmptyRequest
    void sendEmptyRequest() -> sendEmptyRequest
    void assertLocked() -> assertLocked
    void assertUnlocked() -> assertUnlocked
    void checkForTerminalBindingConditions(com.kenai.jbosh.AbstractBody,int) -> checkForTerminalBindingConditions
    boolean isRecoverableBindingCondition(com.kenai.jbosh.AbstractBody) -> isRecoverableBindingCondition
    long processPauseRequest(com.kenai.jbosh.AbstractBody) -> processPauseRequest
    void processRequestAcknowledgements(com.kenai.jbosh.AbstractBody,com.kenai.jbosh.AbstractBody) -> processRequestAcknowledgements
    void processResponseAcknowledgementData(com.kenai.jbosh.AbstractBody) -> processResponseAcknowledgementData
    com.kenai.jbosh.HTTPExchange processResponseAcknowledgementReport(com.kenai.jbosh.AbstractBody) -> processResponseAcknowledgementReport
    void fireRequestSent(com.kenai.jbosh.AbstractBody) -> fireRequestSent
    void fireResponseReceived(com.kenai.jbosh.AbstractBody) -> fireResponseReceived
    void fireConnectionEstablished() -> fireConnectionEstablished
    void fireConnectionClosed() -> fireConnectionClosed
    void fireConnectionClosedOnError(java.lang.Throwable) -> fireConnectionClosedOnError
    void access$000(com.kenai.jbosh.BOSHClient) -> access$000
    void access$100(com.kenai.jbosh.BOSHClient) -> access$100
com.kenai.jbosh.BOSHClient$1 -> com.kenai.jbosh.BOSHClient$1:
    com.kenai.jbosh.BOSHClient this$0 -> this$0
    void run() -> run
com.kenai.jbosh.BOSHClient$2 -> com.kenai.jbosh.BOSHClient$2:
    com.kenai.jbosh.BOSHClient this$0 -> this$0
    void run() -> run
com.kenai.jbosh.BOSHClient$ExchangeInterceptor -> com.kenai.jbosh.BOSHClient$ExchangeInterceptor:
    com.kenai.jbosh.HTTPExchange interceptExchange(com.kenai.jbosh.HTTPExchange) -> interceptExchange
com.kenai.jbosh.BOSHClientConfig -> com.kenai.jbosh.BOSHClientConfig:
    java.net.URI uri -> uri
    java.lang.String to -> to
    java.lang.String from -> from
    java.lang.String lang -> lang
    java.lang.String route -> route
    java.lang.String proxyHost -> proxyHost
    int proxyPort -> proxyPort
    javax.net.ssl.SSLContext sslContext -> sslContext
    boolean compressionEnabled -> compressionEnabled
    java.net.URI getURI() -> getURI
    java.lang.String getTo() -> getTo
    java.lang.String getFrom() -> getFrom
    java.lang.String getLang() -> getLang
    java.lang.String getRoute() -> getRoute
    java.lang.String getProxyHost() -> getProxyHost
    int getProxyPort() -> getProxyPort
    javax.net.ssl.SSLContext getSSLContext() -> getSSLContext
    boolean isCompressionEnabled() -> isCompressionEnabled
com.kenai.jbosh.BOSHClientConfig$1 -> com.kenai.jbosh.BOSHClientConfig$1:
com.kenai.jbosh.BOSHClientConfig$Builder -> com.kenai.jbosh.BOSHClientConfig$Builder:
    java.net.URI bURI -> bURI
    java.lang.String bDomain -> bDomain
    java.lang.String bFrom -> bFrom
    java.lang.String bLang -> bLang
    java.lang.String bRoute -> bRoute
    java.lang.String bProxyHost -> bProxyHost
    int bProxyPort -> bProxyPort
    javax.net.ssl.SSLContext bSSLContext -> bSSLContext
    java.lang.Boolean bCompression -> bCompression
    com.kenai.jbosh.BOSHClientConfig$Builder create(java.net.URI,java.lang.String) -> create
    com.kenai.jbosh.BOSHClientConfig$Builder create(com.kenai.jbosh.BOSHClientConfig) -> create
    com.kenai.jbosh.BOSHClientConfig$Builder setFrom(java.lang.String) -> setFrom
    com.kenai.jbosh.BOSHClientConfig$Builder setXMLLang(java.lang.String) -> setXMLLang
    com.kenai.jbosh.BOSHClientConfig$Builder setRoute(java.lang.String,java.lang.String,int) -> setRoute
    com.kenai.jbosh.BOSHClientConfig$Builder setProxy(java.lang.String,int) -> setProxy
    com.kenai.jbosh.BOSHClientConfig$Builder setSSLContext(javax.net.ssl.SSLContext) -> setSSLContext
    com.kenai.jbosh.BOSHClientConfig$Builder setCompressionEnabled(boolean) -> setCompressionEnabled
    com.kenai.jbosh.BOSHClientConfig build() -> build
com.kenai.jbosh.BOSHClientConnEvent -> com.kenai.jbosh.BOSHClientConnEvent:
    long serialVersionUID -> serialVersionUID
    boolean connected -> connected
    java.util.List requests -> requests
    java.lang.Throwable cause -> cause
    com.kenai.jbosh.BOSHClientConnEvent createConnectionEstablishedEvent(com.kenai.jbosh.BOSHClient) -> createConnectionEstablishedEvent
    com.kenai.jbosh.BOSHClientConnEvent createConnectionClosedEvent(com.kenai.jbosh.BOSHClient) -> createConnectionClosedEvent
    com.kenai.jbosh.BOSHClientConnEvent createConnectionClosedOnErrorEvent(com.kenai.jbosh.BOSHClient,java.util.List,java.lang.Throwable) -> createConnectionClosedOnErrorEvent
    com.kenai.jbosh.BOSHClient getBOSHClient() -> getBOSHClient
    boolean isConnected() -> isConnected
    boolean isError() -> isError
    java.lang.Throwable getCause() -> getCause
    java.util.List getOutstandingRequests() -> getOutstandingRequests
com.kenai.jbosh.BOSHClientConnListener -> com.kenai.jbosh.BOSHClientConnListener:
    void connectionEvent(com.kenai.jbosh.BOSHClientConnEvent) -> connectionEvent
com.kenai.jbosh.BOSHClientRequestListener -> com.kenai.jbosh.BOSHClientRequestListener:
    void requestSent(com.kenai.jbosh.BOSHMessageEvent) -> requestSent
com.kenai.jbosh.BOSHClientResponseListener -> com.kenai.jbosh.BOSHClientResponseListener:
    void responseReceived(com.kenai.jbosh.BOSHMessageEvent) -> responseReceived
com.kenai.jbosh.BOSHException -> com.kenai.jbosh.BOSHException:
    long serialVersionUID -> serialVersionUID
com.kenai.jbosh.BOSHMessageEvent -> com.kenai.jbosh.BOSHMessageEvent:
    long serialVersionUID -> serialVersionUID
    com.kenai.jbosh.AbstractBody body -> body
    com.kenai.jbosh.BOSHMessageEvent createRequestSentEvent(com.kenai.jbosh.BOSHClient,com.kenai.jbosh.AbstractBody) -> createRequestSentEvent
    com.kenai.jbosh.BOSHMessageEvent createResponseReceivedEvent(com.kenai.jbosh.BOSHClient,com.kenai.jbosh.AbstractBody) -> createResponseReceivedEvent
    com.kenai.jbosh.AbstractBody getBody() -> getBody
com.kenai.jbosh.BodyParser -> com.kenai.jbosh.BodyParser:
    com.kenai.jbosh.BodyParserResults parse(java.lang.String) -> parse
com.kenai.jbosh.BodyParserResults -> com.kenai.jbosh.BodyParserResults:
    java.util.Map attrs -> attrs
    void addBodyAttributeValue(com.kenai.jbosh.BodyQName,java.lang.String) -> addBodyAttributeValue
    java.util.Map getAttributes() -> getAttributes
com.kenai.jbosh.BodyParserSAX -> com.kenai.jbosh.BodyParserSAX:
    java.util.logging.Logger LOG -> LOG
    javax.xml.parsers.SAXParserFactory SAX_FACTORY -> SAX_FACTORY
    java.lang.ThreadLocal PARSER -> PARSER
    com.kenai.jbosh.BodyParserResults parse(java.lang.String) -> parse
    javax.xml.parsers.SAXParser getSAXParser() -> getSAXParser
    java.util.logging.Logger access$000() -> access$000
com.kenai.jbosh.BodyParserSAX$1 -> com.kenai.jbosh.BodyParserSAX$1:
    java.lang.ref.SoftReference initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.kenai.jbosh.BodyParserSAX$Handler -> com.kenai.jbosh.BodyParserSAX$Handler:
    com.kenai.jbosh.BodyParserResults result -> result
    javax.xml.parsers.SAXParser parser -> parser
    java.lang.String defaultNS -> defaultNS
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void startPrefixMapping(java.lang.String,java.lang.String) -> startPrefixMapping
com.kenai.jbosh.BodyParserXmlPull -> com.kenai.jbosh.BodyParserXmlPull:
    java.util.logging.Logger LOG -> LOG
    java.lang.ThreadLocal XPP_PARSER -> XPP_PARSER
    com.kenai.jbosh.BodyParserResults parse(java.lang.String) -> parse
    org.xmlpull.v1.XmlPullParser getXmlPullParser() -> getXmlPullParser
com.kenai.jbosh.BodyParserXmlPull$1 -> com.kenai.jbosh.BodyParserXmlPull$1:
    java.lang.ref.SoftReference initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.kenai.jbosh.BodyQName -> com.kenai.jbosh.BodyQName:
    java.lang.String BOSH_NS_URI -> BOSH_NS_URI
    com.kenai.jbosh.QName qname -> qname
    com.kenai.jbosh.BodyQName create(java.lang.String,java.lang.String) -> create
    com.kenai.jbosh.BodyQName createWithPrefix(java.lang.String,java.lang.String,java.lang.String) -> createWithPrefix
    java.lang.String getNamespaceURI() -> getNamespaceURI
    java.lang.String getLocalPart() -> getLocalPart
    java.lang.String getPrefix() -> getPrefix
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.kenai.jbosh.BodyQName createBOSH(java.lang.String) -> createBOSH
    boolean equalsQName(com.kenai.jbosh.QName) -> equalsQName
com.kenai.jbosh.CMSessionParams -> com.kenai.jbosh.CMSessionParams:
    com.kenai.jbosh.AttrSessionID sid -> sid
    com.kenai.jbosh.AttrWait wait -> wait
    com.kenai.jbosh.AttrVersion ver -> ver
    com.kenai.jbosh.AttrPolling polling -> polling
    com.kenai.jbosh.AttrInactivity inactivity -> inactivity
    com.kenai.jbosh.AttrRequests requests -> requests
    com.kenai.jbosh.AttrHold hold -> hold
    com.kenai.jbosh.AttrAccept accept -> accept
    com.kenai.jbosh.AttrMaxPause maxPause -> maxPause
    com.kenai.jbosh.AttrAck ack -> ack
    com.kenai.jbosh.AttrCharsets charsets -> charsets
    boolean ackingRequests -> ackingRequests
    com.kenai.jbosh.CMSessionParams fromSessionInit(com.kenai.jbosh.AbstractBody,com.kenai.jbosh.AbstractBody) -> fromSessionInit
    java.lang.String getRequiredAttribute(com.kenai.jbosh.AbstractBody,com.kenai.jbosh.BodyQName) -> getRequiredAttribute
    com.kenai.jbosh.AttrSessionID getSessionID() -> getSessionID
    com.kenai.jbosh.AttrWait getWait() -> getWait
    com.kenai.jbosh.AttrVersion getVersion() -> getVersion
    com.kenai.jbosh.AttrPolling getPollingInterval() -> getPollingInterval
    com.kenai.jbosh.AttrInactivity getInactivityPeriod() -> getInactivityPeriod
    com.kenai.jbosh.AttrRequests getRequests() -> getRequests
    com.kenai.jbosh.AttrHold getHold() -> getHold
    com.kenai.jbosh.AttrAccept getAccept() -> getAccept
    com.kenai.jbosh.AttrMaxPause getMaxPause() -> getMaxPause
    com.kenai.jbosh.AttrAck getAck() -> getAck
    com.kenai.jbosh.AttrCharsets getCharsets() -> getCharsets
    boolean isAckingRequests() -> isAckingRequests
com.kenai.jbosh.ComposableBody -> com.kenai.jbosh.ComposableBody:
    java.util.regex.Pattern BOSH_START -> BOSH_START
    java.util.Map attrs -> attrs
    java.lang.String payload -> payload
    java.util.concurrent.atomic.AtomicReference computed -> computed
    com.kenai.jbosh.ComposableBody fromStaticBody(com.kenai.jbosh.StaticBody) -> fromStaticBody
    com.kenai.jbosh.ComposableBody$Builder builder() -> builder
    com.kenai.jbosh.ComposableBody$Builder rebuild() -> rebuild
    java.util.Map getAttributes() -> getAttributes
    java.lang.String toXML() -> toXML
    java.lang.String getPayloadXML() -> getPayloadXML
    java.lang.String escape(java.lang.String) -> escape
    java.lang.String computeXML() -> computeXML
    java.lang.String access$000(com.kenai.jbosh.ComposableBody) -> access$000
com.kenai.jbosh.ComposableBody$1 -> com.kenai.jbosh.ComposableBody$1:
com.kenai.jbosh.ComposableBody$Builder -> com.kenai.jbosh.ComposableBody$Builder:
    java.util.Map map -> map
    boolean doMapCopy -> doMapCopy
    java.lang.String payloadXML -> payloadXML
    com.kenai.jbosh.ComposableBody$Builder fromBody(com.kenai.jbosh.ComposableBody) -> fromBody
    com.kenai.jbosh.ComposableBody$Builder setPayloadXML(java.lang.String) -> setPayloadXML
    com.kenai.jbosh.ComposableBody$Builder setAttribute(com.kenai.jbosh.BodyQName,java.lang.String) -> setAttribute
    com.kenai.jbosh.ComposableBody$Builder setNamespaceDefinition(java.lang.String,java.lang.String) -> setNamespaceDefinition
    com.kenai.jbosh.ComposableBody build() -> build
    com.kenai.jbosh.ComposableBody$Builder access$300(com.kenai.jbosh.ComposableBody) -> access$300
com.kenai.jbosh.GZIPCodec -> com.kenai.jbosh.GZIPCodec:
    int BUFFER_SIZE -> BUFFER_SIZE
    java.lang.String getID() -> getID
    byte[] encode(byte[]) -> encode
    byte[] decode(byte[]) -> decode
com.kenai.jbosh.HTTPExchange -> com.kenai.jbosh.HTTPExchange:
    java.util.logging.Logger LOG -> LOG
    com.kenai.jbosh.AbstractBody request -> request
    java.util.concurrent.locks.Lock lock -> lock
    java.util.concurrent.locks.Condition ready -> ready
    com.kenai.jbosh.HTTPResponse response -> response
    com.kenai.jbosh.AbstractBody getRequest() -> getRequest
    void setHTTPResponse(com.kenai.jbosh.HTTPResponse) -> setHTTPResponse
    com.kenai.jbosh.HTTPResponse getHTTPResponse() -> getHTTPResponse
com.kenai.jbosh.HTTPResponse -> com.kenai.jbosh.HTTPResponse:
    void abort() -> abort
    int getHTTPStatus() -> getHTTPStatus
    com.kenai.jbosh.AbstractBody getBody() -> getBody
com.kenai.jbosh.HTTPSender -> com.kenai.jbosh.HTTPSender:
    void init(com.kenai.jbosh.BOSHClientConfig) -> init
    void destroy() -> destroy
    com.kenai.jbosh.HTTPResponse send(com.kenai.jbosh.CMSessionParams,com.kenai.jbosh.AbstractBody) -> send
com.kenai.jbosh.QName -> com.kenai.jbosh.QName:
    java.lang.String emptyString -> emptyString
    java.lang.String namespaceURI -> namespaceURI
    java.lang.String localPart -> localPart
    java.lang.String prefix -> prefix
    java.lang.String getNamespaceURI() -> getNamespaceURI
    java.lang.String getLocalPart() -> getLocalPart
    java.lang.String getPrefix() -> getPrefix
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    com.kenai.jbosh.QName valueOf(java.lang.String) -> valueOf
    int hashCode() -> hashCode
    void readObject(java.io.ObjectInputStream) -> readObject
com.kenai.jbosh.RequestIDSequence -> com.kenai.jbosh.RequestIDSequence:
    int MAX_BITS -> MAX_BITS
    int INCREMENT_BITS -> INCREMENT_BITS
    long MIN_INCREMENTS -> MIN_INCREMENTS
    long MAX_INITIAL -> MAX_INITIAL
    long MASK -> MASK
    java.security.SecureRandom RAND -> RAND
    java.util.concurrent.locks.Lock LOCK -> LOCK
    java.util.concurrent.atomic.AtomicLong nextRequestID -> nextRequestID
    long getNextRID() -> getNextRID
    long generateInitialValue() -> generateInitialValue
com.kenai.jbosh.ServiceLib -> com.kenai.jbosh.ServiceLib:
    java.util.logging.Logger LOG -> LOG
    java.lang.Object loadService(java.lang.Class) -> loadService
    java.util.List loadServicesImplementations(java.lang.Class) -> loadServicesImplementations
    java.lang.Object attemptLoad(java.lang.Class,java.lang.String) -> attemptLoad
    void finalClose(java.io.Closeable) -> finalClose
com.kenai.jbosh.StaticBody -> com.kenai.jbosh.StaticBody:
    com.kenai.jbosh.BodyParser PARSER -> PARSER
    int BUFFER_SIZE -> BUFFER_SIZE
    java.util.Map attrs -> attrs
    java.lang.String raw -> raw
    com.kenai.jbosh.StaticBody fromStream(java.io.InputStream) -> fromStream
    com.kenai.jbosh.StaticBody fromString(java.lang.String) -> fromString
    java.util.Map getAttributes() -> getAttributes
    java.lang.String toXML() -> toXML
com.kenai.jbosh.TerminalBindingCondition -> com.kenai.jbosh.TerminalBindingCondition:
    java.util.Map COND_TO_INSTANCE -> COND_TO_INSTANCE
    java.util.Map CODE_TO_INSTANCE -> CODE_TO_INSTANCE
    com.kenai.jbosh.TerminalBindingCondition BAD_REQUEST -> BAD_REQUEST
    com.kenai.jbosh.TerminalBindingCondition HOST_GONE -> HOST_GONE
    com.kenai.jbosh.TerminalBindingCondition HOST_UNKNOWN -> HOST_UNKNOWN
    com.kenai.jbosh.TerminalBindingCondition IMPROPER_ADDRESSING -> IMPROPER_ADDRESSING
    com.kenai.jbosh.TerminalBindingCondition INTERNAL_SERVER_ERROR -> INTERNAL_SERVER_ERROR
    com.kenai.jbosh.TerminalBindingCondition ITEM_NOT_FOUND -> ITEM_NOT_FOUND
    com.kenai.jbosh.TerminalBindingCondition OTHER_REQUEST -> OTHER_REQUEST
    com.kenai.jbosh.TerminalBindingCondition POLICY_VIOLATION -> POLICY_VIOLATION
    com.kenai.jbosh.TerminalBindingCondition REMOTE_CONNECTION_FAILED -> REMOTE_CONNECTION_FAILED
    com.kenai.jbosh.TerminalBindingCondition REMOTE_STREAM_ERROR -> REMOTE_STREAM_ERROR
    com.kenai.jbosh.TerminalBindingCondition SEE_OTHER_URI -> SEE_OTHER_URI
    com.kenai.jbosh.TerminalBindingCondition SYSTEM_SHUTDOWN -> SYSTEM_SHUTDOWN
    com.kenai.jbosh.TerminalBindingCondition UNDEFINED_CONDITION -> UNDEFINED_CONDITION
    java.lang.String cond -> cond
    java.lang.String msg -> msg
    com.kenai.jbosh.TerminalBindingCondition create(java.lang.String,java.lang.String) -> create
    com.kenai.jbosh.TerminalBindingCondition createWithCode(java.lang.String,java.lang.String,java.lang.Integer) -> createWithCode
    com.kenai.jbosh.TerminalBindingCondition forString(java.lang.String) -> forString
    com.kenai.jbosh.TerminalBindingCondition forHTTPResponseCode(int) -> forHTTPResponseCode
    java.lang.String getCondition() -> getCondition
    java.lang.String getMessage() -> getMessage
com.kenai.jbosh.ZLIBCodec -> com.kenai.jbosh.ZLIBCodec:
    int BUFFER_SIZE -> BUFFER_SIZE
    java.lang.String getID() -> getID
    byte[] encode(byte[]) -> encode
    byte[] decode(byte[]) -> decode
com.mapabc.minimap.map.vmap.NativeMap -> com.mapabc.minimap.map.vmap.NativeMap:
    int b -> b
    byte[] a -> a
    void initMap(byte[],int,int) -> a
    void finalize() -> finalize
    void setMapParameter(int,int,int,int) -> a
    void paintLables$6c8024c(com.mapabc.minimap.map.vmap.NativeMapEngine,android.graphics.Canvas) -> a
    boolean paintMap(com.mapabc.minimap.map.vmap.NativeMapEngine,int) -> a
    int nativeCreate() -> nativeCreate
    void nativeFinalizer(int) -> nativeFinalizer
    boolean nativePaint(int,int,byte[],int) -> nativePaint
    void nativeInitMap(int,byte[],int,int) -> nativeInitMap
    void nativeSetMapParameter(int,int,int,int,int) -> nativeSetMapParameter
com.mapabc.minimap.map.vmap.NativeMapEngine -> com.mapabc.minimap.map.vmap.NativeMapEngine:
    android.graphics.Bitmap[] a -> a
    int b -> b
    android.graphics.Bitmap getIconBitmap(int) -> a
    void initIconData(android.content.Context) -> a
    void initStyleData(android.content.Context) -> b
    void finalize() -> finalize
    void destory() -> a
    void putGridData(byte[],int,int) -> a
    boolean hasGridData(java.lang.String) -> a
    int getBKColor(int) -> b
    boolean hasBitMapData(java.lang.String) -> b
    void putBitmapData$29f759e6(java.lang.String,byte[]) -> a
    void removeBitmapData(java.lang.String,int) -> a
    void fillBitmapBufferData(java.lang.String,byte[]) -> b
    int nativeGetBKColor(int,int) -> nativeGetBKColor
    int nativeCreate(java.lang.String) -> nativeCreate
    void nativeFinalizer(int) -> nativeFinalizer
    boolean nativeHasBitMapData(int,java.lang.String) -> nativeHasBitMapData
    void nativePutBitmapData(int,java.lang.String,byte[],int,int) -> nativePutBitmapData
    void nativeRemoveBitmapData(int,java.lang.String,int) -> nativeRemoveBitmapData
    void nativeFillBitmapBufferData(int,java.lang.String,byte[]) -> nativeFillBitmapBufferData
    void nativeSetBitmapCacheMaxSize(int,int) -> nativeSetBitmapCacheMaxSize
    void nativeSetVectormapCacheMaxSize(int,int) -> nativeSetVectormapCacheMaxSize
    void nativePutGridData(int,byte[],int,int) -> nativePutGridData
    boolean nativeHasGridData(int,java.lang.String) -> nativeHasGridData
    void nativeSetBackgroundImageData(int,byte[]) -> nativeSetBackgroundImageData
    void nativeSetStyleData(int,byte[]) -> nativeSetStyleData
com.mapabc.minimap.map.vmap.VMapProjection -> com.mapabc.minimap.map.vmap.a:
    double Clip(double,double,double) -> a
    com.amap.mapapi.map.bc LatLongToPixels$47594368(double,double) -> a
    com.amap.mapapi.map.bc PixelsToTile(int,int) -> a
    java.lang.String TileToQuadKey(int,int,int) -> a
    com.amap.mapapi.map.bc QuadKeyToTitle(java.lang.String) -> a
    android.graphics.Point QuadKeyToTile(java.lang.String) -> b
com.mapabc.minimap.map.vmap.b -> com.mapabc.minimap.map.vmap.b:
    java.lang.String a -> a
    int b -> b
    int c -> c
    int d -> d
    int e -> e
    int f -> f
    int g -> g
    int h -> h
    int i -> i
    int j -> j
    int k -> k
    int l -> l
    int m -> m
    int n -> n
    int o -> o
    int p -> p
com.massvig.ecommerce.activities.ActionDetailActivity -> com.massvig.ecommerce.activities.ActionDetailActivity:
    android.widget.TabHost tabHost -> a
    com.massvig.ecommerce.managers.ActionManager manager -> b
    com.massvig.ecommerce.activities.BaseApplication app -> c
    com.massvig.ecommerce.widgets.NetImageView imageView -> d
    android.widget.TextView detail -> e
    android.widget.ScrollView rule_layout -> f
    com.tencent.weibo.oauthv2.OAuthV2 oAuth -> g
    java.lang.String uploadImgUrlSd -> h
    com.tencent.mm.sdk.openapi.IWXAPI wxapi -> i
    void onCreate(android.os.Bundle) -> onCreate
    void Success(int) -> a
    void ShareSina(java.lang.String) -> a
    void ShareQQ(java.lang.String) -> b
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onClick(android.view.View) -> onClick
    java.lang.String access$0(com.massvig.ecommerce.activities.ActionDetailActivity) -> a
com.massvig.ecommerce.activities.ActionDetailActivity$1 -> com.massvig.ecommerce.activities.a:
    com.massvig.ecommerce.activities.ActionDetailActivity this$0 -> a
    java.lang.String val$content -> b
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onPostExecute(java.lang.Object) -> onPostExecute
    void onPreExecute() -> onPreExecute
com.massvig.ecommerce.activities.ActionDetailActivity$2 -> com.massvig.ecommerce.activities.b:
    com.massvig.ecommerce.activities.ActionDetailActivity this$0 -> a
    java.lang.String val$content -> b
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onPostExecute(java.lang.Object) -> onPostExecute
    void onPreExecute() -> onPreExecute
com.massvig.ecommerce.activities.AdGoodsListActivity -> com.massvig.ecommerce.activities.AdGoodsListActivity:
    com.massvig.ecommerce.managers.GoodsListManager mManager -> d
    android.widget.ListView listview -> e
    com.massvig.ecommerce.widgets.GoodsAdapter mAdapter -> f
    android.widget.LinearLayout cateGoryBarBtn1 -> g
    android.widget.LinearLayout cateGoryBarBtn2 -> h
    com.massvig.ecommerce.widgets.CategoryDialogView categoryDialogView -> a
    java.lang.String subCategoryName -> b
    java.lang.Double latitude -> i
    java.lang.Double longitude -> j
    com.massvig.ecommerce.location.LocationManage mLocationManage -> k
    int categoryID -> l
    int subCategoryID -> m
    boolean isScolling -> n
    java.lang.String params -> o
    com.massvig.ecommerce.activities.BaseApplication app -> p
    android.app.ProgressDialog dialog -> q
    com.massvig.ecommerce.location.LocationManage$MyLocationListener mmMyLocationListener -> c
    android.os.Handler mHandler -> r
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onClick(android.view.View) -> onClick
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void access$0(com.massvig.ecommerce.activities.AdGoodsListActivity,java.lang.Double) -> a
    void access$1(com.massvig.ecommerce.activities.AdGoodsListActivity,java.lang.Double) -> b
    java.lang.Double access$2(com.massvig.ecommerce.activities.AdGoodsListActivity) -> a
    java.lang.Double access$3(com.massvig.ecommerce.activities.AdGoodsListActivity) -> b
    com.massvig.ecommerce.location.LocationManage access$4(com.massvig.ecommerce.activities.AdGoodsListActivity) -> c
    android.app.ProgressDialog access$5(com.massvig.ecommerce.activities.AdGoodsListActivity) -> d
    android.widget.LinearLayout access$6(com.massvig.ecommerce.activities.AdGoodsListActivity) -> e
    android.widget.LinearLayout access$7(com.massvig.ecommerce.activities.AdGoodsListActivity) -> f
    void access$8(com.massvig.ecommerce.activities.AdGoodsListActivity,int) -> a
    void access$9(com.massvig.ecommerce.activities.AdGoodsListActivity,int) -> b
    int access$10(com.massvig.ecommerce.activities.AdGoodsListActivity) -> g
    int access$11(com.massvig.ecommerce.activities.AdGoodsListActivity) -> h
    com.massvig.ecommerce.managers.GoodsListManager access$12(com.massvig.ecommerce.activities.AdGoodsListActivity) -> i
    com.massvig.ecommerce.widgets.GoodsAdapter access$13(com.massvig.ecommerce.activities.AdGoodsListActivity) -> j
    android.os.Handler access$14(com.massvig.ecommerce.activities.AdGoodsListActivity) -> k
    void access$15(com.massvig.ecommerce.activities.AdGoodsListActivity,boolean) -> a
    boolean access$16(com.massvig.ecommerce.activities.AdGoodsListActivity) -> l
    java.lang.String access$17(com.massvig.ecommerce.activities.AdGoodsListActivity) -> m
    com.massvig.ecommerce.activities.BaseApplication access$18(com.massvig.ecommerce.activities.AdGoodsListActivity) -> n
com.massvig.ecommerce.activities.AdGoodsListActivity$1 -> com.massvig.ecommerce.activities.c:
    com.massvig.ecommerce.activities.AdGoodsListActivity this$0 -> a
    void location(double,double) -> a
    void isAllow(java.lang.Boolean) -> a
    void address(java.lang.String) -> a
com.massvig.ecommerce.activities.AdGoodsListActivity$2 -> com.massvig.ecommerce.activities.d:
    com.massvig.ecommerce.activities.AdGoodsListActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.AdGoodsListActivity$3 -> com.massvig.ecommerce.activities.e:
    com.massvig.ecommerce.activities.AdGoodsListActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.AdGoodsListActivity$4 -> com.massvig.ecommerce.activities.f:
    com.massvig.ecommerce.activities.AdGoodsListActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.AdGoodsListActivity$5 -> com.massvig.ecommerce.activities.g:
    com.massvig.ecommerce.activities.AdGoodsListActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.AdGoodsListActivity$6 -> com.massvig.ecommerce.activities.h:
    android.widget.TextView cateName -> b
    android.widget.TextView orderName -> c
    com.massvig.ecommerce.activities.AdGoodsListActivity this$0 -> a
    void setBarText(int,java.lang.String) -> b
    void cateGorycallBack(int,int,java.lang.String) -> a
    void orderCallBack$2f2e9c64(int,java.lang.String) -> a
com.massvig.ecommerce.activities.AdGoodsListActivity$7 -> com.massvig.ecommerce.activities.i:
    com.massvig.ecommerce.activities.AdGoodsListActivity this$0 -> a
    void LoadSuccess() -> a
    void LoadFailed() -> b
    void NoData() -> c
com.massvig.ecommerce.activities.AdGoodsListActivity$8 -> com.massvig.ecommerce.activities.j:
    com.massvig.ecommerce.activities.AdGoodsListActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.AdGoodsListActivity$9 -> com.massvig.ecommerce.activities.k:
    com.massvig.ecommerce.activities.AdGoodsListActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.massvig.ecommerce.activities.AddOption -> com.massvig.ecommerce.activities.AddOption:
    android.widget.Button go_finish -> b
    android.widget.Button go_back -> c
    android.widget.EditText option -> d
    com.massvig.ecommerce.managers.AddOptionManager mManager -> e
    com.massvig.ecommerce.activities.BaseApplication app -> f
    boolean isclick -> a
    android.app.ProgressDialog dialog -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void onDestroy() -> onDestroy
    android.app.ProgressDialog access$0(com.massvig.ecommerce.activities.AddOption) -> a
    com.massvig.ecommerce.activities.BaseApplication access$1(com.massvig.ecommerce.activities.AddOption) -> b
    android.widget.EditText access$2(com.massvig.ecommerce.activities.AddOption) -> c
    com.massvig.ecommerce.managers.AddOptionManager access$3(com.massvig.ecommerce.activities.AddOption) -> d
com.massvig.ecommerce.activities.AddOption$1 -> com.massvig.ecommerce.activities.l:
    com.massvig.ecommerce.activities.AddOption this$0 -> a
    void AddOptionSuccess() -> a
    void SessionVailed() -> b
    void AddOptionFailed() -> c
com.massvig.ecommerce.activities.AddOption$2 -> com.massvig.ecommerce.activities.m:
    com.massvig.ecommerce.activities.AddOption this$0 -> a
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
com.massvig.ecommerce.activities.AddressDetailActivity -> com.massvig.ecommerce.activities.AddressDetailActivity:
    int customerAddressID -> a
    boolean isEditing -> b
    android.widget.EditText customerName -> c
    android.widget.EditText mobile -> d
    android.widget.EditText address -> e
    android.widget.EditText zipcode -> f
    android.widget.EditText email -> g
    android.widget.TextView region_1 -> h
    android.widget.TextView region_2 -> i
    android.widget.TextView region_3 -> j
    android.widget.TextView finish -> k
    android.widget.TextView delete -> l
    com.massvig.ecommerce.managers.AddressManager mAddressManager -> m
    com.massvig.ecommerce.activities.BaseApplication app -> n
    android.app.AlertDialog$Builder dialog -> o
    int firstID -> p
    int secondID -> q
    org.json.JSONArray array -> r
    android.os.Handler mHandler -> s
    void onCreate(android.os.Bundle) -> onCreate
    void setEnable(boolean) -> a
    void onClick(android.view.View) -> onClick
    void Success(int) -> a
    void Failed(int) -> b
    java.util.HashMap getCityArray() -> c
    void SessionidFail() -> a
    com.massvig.ecommerce.managers.AddressManager access$0(com.massvig.ecommerce.activities.AddressDetailActivity) -> a
    void access$1(com.massvig.ecommerce.activities.AddressDetailActivity,int) -> a
    void access$2(com.massvig.ecommerce.activities.AddressDetailActivity,int) -> b
    android.widget.TextView access$3(com.massvig.ecommerce.activities.AddressDetailActivity) -> b
    android.widget.TextView access$4(com.massvig.ecommerce.activities.AddressDetailActivity) -> c
    android.widget.TextView access$5(com.massvig.ecommerce.activities.AddressDetailActivity) -> d
com.massvig.ecommerce.activities.AddressDetailActivity$1 -> com.massvig.ecommerce.activities.n:
    com.massvig.ecommerce.activities.AddressDetailActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.AddressDetailActivity$2 -> com.massvig.ecommerce.activities.o:
    com.massvig.ecommerce.activities.AddressDetailActivity this$0 -> a
    java.lang.String[] val$items -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.AddressDetailActivity$3 -> com.massvig.ecommerce.activities.p:
    com.massvig.ecommerce.activities.AddressDetailActivity this$0 -> a
    java.lang.String[] val$cities -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.AddressDetailActivity$4 -> com.massvig.ecommerce.activities.q:
    com.massvig.ecommerce.activities.AddressDetailActivity this$0 -> a
    java.lang.String[] val$cities -> b
    int[] val$cityIDs -> c
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.AliWebPayActivity -> com.massvig.ecommerce.activities.AliWebPayActivity:
    android.webkit.WebView webView -> a
    android.os.Handler mHandler -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.AliWebPayActivity$1 -> com.massvig.ecommerce.activities.r:
    com.massvig.ecommerce.activities.AliWebPayActivity this$0 -> a
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
com.massvig.ecommerce.activities.AliWebPayActivity$JavaScriptInterface -> com.massvig.ecommerce.activities.s:
    com.massvig.ecommerce.activities.AliWebPayActivity this$0 -> a
com.massvig.ecommerce.activities.AliWebPayActivity$MyWebViewClient -> com.massvig.ecommerce.activities.t:
    com.massvig.ecommerce.activities.AliWebPayActivity this$0 -> b
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
com.massvig.ecommerce.activities.BaseActivity -> com.massvig.ecommerce.activities.BaseActivity:
    void GotoLogin() -> b
    void onStart() -> onStart
    void onPause() -> onPause
com.massvig.ecommerce.activities.BaseApplication -> com.massvig.ecommerce.activities.BaseApplication:
    java.lang.String udid -> a
    com.massvig.ecommerce.entities.User user -> b
    boolean isChating -> c
    void onCreate() -> onCreate
com.massvig.ecommerce.activities.BillActivity -> com.massvig.ecommerce.activities.BillActivity:
    android.widget.TextView person -> a
    android.widget.TextView compa -> b
    android.widget.EditText company -> c
    java.lang.String billText -> d
    android.widget.TextView bill1 -> e
    android.widget.TextView bill2 -> f
    android.widget.TextView bill3 -> g
    android.widget.TextView bill4 -> h
    android.widget.TextView bill5 -> i
    android.widget.TextView bill6 -> j
    int billType -> k
    void onCreate(android.os.Bundle) -> onCreate
    void initBill() -> a
    void clear() -> b
    void onClick(android.view.View) -> onClick
    android.widget.TextView access$0(com.massvig.ecommerce.activities.BillActivity) -> a
    android.widget.TextView access$1(com.massvig.ecommerce.activities.BillActivity) -> b
    void access$2(com.massvig.ecommerce.activities.BillActivity,java.lang.String) -> a
com.massvig.ecommerce.activities.BillActivity$1 -> com.massvig.ecommerce.activities.u:
    com.massvig.ecommerce.activities.BillActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.massvig.ecommerce.activities.ChatActivity -> com.massvig.ecommerce.activities.ChatActivity:
    android.widget.ListView listView -> a
    com.massvig.ecommerce.managers.ChatManager manager -> b
    com.massvig.ecommerce.widgets.ChatAdapter adapter -> c
    android.graphics.Bitmap fromImg -> d
    android.graphics.Bitmap toImg -> e
    java.lang.String fromEJID -> f
    java.lang.String toEJID -> g
    com.massvig.ecommerce.activities.BaseApplication app -> h
    android.widget.EditText content_edit -> i
    org.jivesoftware.smack.Chat newchat -> j
    com.massvig.ecommerce.activities.ChatActivity$MyBroadCast receiver -> k
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    void UpdateMessage(com.massvig.ecommerce.entities.Message) -> a
    void onResume() -> onResume
    void sendMessage() -> a
    void onClick(android.view.View) -> onClick
    java.lang.String access$0(com.massvig.ecommerce.activities.ChatActivity) -> a
    java.lang.String access$1(com.massvig.ecommerce.activities.ChatActivity) -> b
    com.massvig.ecommerce.managers.ChatManager access$2(com.massvig.ecommerce.activities.ChatActivity) -> c
    com.massvig.ecommerce.widgets.ChatAdapter access$3(com.massvig.ecommerce.activities.ChatActivity) -> d
    android.widget.ListView access$4(com.massvig.ecommerce.activities.ChatActivity) -> e
    void access$5(com.massvig.ecommerce.activities.ChatActivity,android.graphics.Bitmap) -> a
    android.graphics.Bitmap access$6(com.massvig.ecommerce.activities.ChatActivity) -> f
    android.graphics.Bitmap access$7(com.massvig.ecommerce.activities.ChatActivity) -> g
    void access$8(com.massvig.ecommerce.activities.ChatActivity,android.graphics.Bitmap) -> b
com.massvig.ecommerce.activities.ChatActivity$1 -> com.massvig.ecommerce.activities.v:
    com.massvig.ecommerce.activities.ChatActivity this$0 -> a
    void imageLoaded$6004fe1d(android.graphics.Bitmap) -> a
com.massvig.ecommerce.activities.ChatActivity$2 -> com.massvig.ecommerce.activities.w:
    com.massvig.ecommerce.activities.ChatActivity this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    com.massvig.ecommerce.activities.ChatActivity access$2(com.massvig.ecommerce.activities.ChatActivity$2) -> a
com.massvig.ecommerce.activities.ChatActivity$2$1 -> com.massvig.ecommerce.activities.x:
    com.massvig.ecommerce.activities.ChatActivity$2 this$1 -> a
    void imageLoaded$6004fe1d(android.graphics.Bitmap) -> a
com.massvig.ecommerce.activities.ChatActivity$3 -> com.massvig.ecommerce.activities.y:
    com.massvig.ecommerce.activities.ChatActivity this$0 -> a
    void imageLoaded$6004fe1d(android.graphics.Bitmap) -> a
com.massvig.ecommerce.activities.ChatActivity$4 -> com.massvig.ecommerce.activities.z:
    com.massvig.ecommerce.activities.ChatActivity this$0 -> a
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
com.massvig.ecommerce.activities.ChatActivity$MyBroadCast -> com.massvig.ecommerce.activities.ChatActivity$MyBroadCast:
    com.massvig.ecommerce.activities.ChatActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.massvig.ecommerce.activities.CollectActivity -> com.massvig.ecommerce.activities.CollectActivity:
    android.widget.Button edit -> a
    android.widget.Button back -> b
    android.widget.ListView listview -> c
    com.massvig.ecommerce.activities.CollectActivity$listAdapter adapter -> d
    com.massvig.ecommerce.activities.BaseApplication app -> e
    com.massvig.ecommerce.managers.CollectManager mManager -> f
    boolean isScolling -> g
    android.app.ProgressDialog dialog -> h
    android.widget.Button gotobuy -> i
    android.widget.RelativeLayout linear -> j
    boolean isClick -> k
    int index -> l
    int clickIndex -> m
    android.os.Handler mHandler -> n
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void onResume() -> onResume
    android.app.ProgressDialog access$0(com.massvig.ecommerce.activities.CollectActivity) -> a
    android.widget.RelativeLayout access$1(com.massvig.ecommerce.activities.CollectActivity) -> b
    com.massvig.ecommerce.managers.CollectManager access$2(com.massvig.ecommerce.activities.CollectActivity) -> c
    boolean access$3(com.massvig.ecommerce.activities.CollectActivity) -> d
    void access$4(com.massvig.ecommerce.activities.CollectActivity,int) -> a
    int access$5(com.massvig.ecommerce.activities.CollectActivity) -> e
    com.massvig.ecommerce.activities.CollectActivity$listAdapter access$6(com.massvig.ecommerce.activities.CollectActivity) -> f
    com.massvig.ecommerce.activities.BaseApplication access$7(com.massvig.ecommerce.activities.CollectActivity) -> g
    android.os.Handler access$8(com.massvig.ecommerce.activities.CollectActivity) -> h
    void access$9(com.massvig.ecommerce.activities.CollectActivity,boolean) -> a
    boolean access$10(com.massvig.ecommerce.activities.CollectActivity) -> i
com.massvig.ecommerce.activities.CollectActivity$1 -> com.massvig.ecommerce.activities.aa:
    com.massvig.ecommerce.activities.CollectActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.CollectActivity$2 -> com.massvig.ecommerce.activities.ab:
    com.massvig.ecommerce.activities.CollectActivity this$0 -> a
    void deleteCollectSucess() -> a
    void deleteCollectFailed() -> b
    void SessionVailed() -> c
    void loadCollectSucess() -> d
    void loadCollectfailed() -> e
    void noData() -> f
com.massvig.ecommerce.activities.CollectActivity$3 -> com.massvig.ecommerce.activities.ac:
    com.massvig.ecommerce.activities.CollectActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.CollectActivity$4 -> com.massvig.ecommerce.activities.ad:
    com.massvig.ecommerce.activities.CollectActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.massvig.ecommerce.activities.CollectActivity$listAdapter -> com.massvig.ecommerce.activities.ae:
    android.view.LayoutInflater mInflater -> b
    java.util.ArrayList imageList -> c
    android.graphics.Bitmap shopDefaultImg -> d
    android.content.Context mContext -> e
    com.massvig.ecommerce.activities.CollectActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.util.ArrayList getImageList() -> a
    android.view.LayoutInflater access$0(com.massvig.ecommerce.activities.CollectActivity$listAdapter) -> a
    android.content.Context access$1(com.massvig.ecommerce.activities.CollectActivity$listAdapter) -> b
    android.graphics.Bitmap access$2(com.massvig.ecommerce.activities.CollectActivity$listAdapter) -> c
    com.massvig.ecommerce.activities.CollectActivity access$3(com.massvig.ecommerce.activities.CollectActivity$listAdapter) -> d
com.massvig.ecommerce.activities.CollectActivity$listAdapter$ViewHolder -> com.massvig.ecommerce.activities.af:
    com.massvig.ecommerce.widgets.NetImageView image -> b
    android.widget.TextView name -> c
    android.widget.TextView price -> d
    android.widget.TextView volume -> e
    com.massvig.ecommerce.widgets.LineTextView realPrice -> f
    android.view.View itemView -> g
    android.widget.TextView commentCount -> h
    android.widget.Button del -> i
    com.massvig.ecommerce.activities.CollectActivity$listAdapter this$1 -> a
    android.view.View getView(int) -> a
    com.massvig.ecommerce.widgets.NetImageView access$0(com.massvig.ecommerce.activities.CollectActivity$listAdapter$ViewHolder) -> a
com.massvig.ecommerce.activities.CollectActivity$listAdapter$ViewHolder$1 -> com.massvig.ecommerce.activities.ag:
    com.massvig.ecommerce.activities.CollectActivity$listAdapter$ViewHolder this$2 -> a
    int val$position -> b
    com.massvig.ecommerce.entities.Goods val$collect -> c
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.CommunityActivity -> com.massvig.ecommerce.activities.CommunityActivity:
    com.massvig.ecommerce.activities.BaseApplication app -> a
    com.massvig.ecommerce.managers.CommunityManager mManager -> b
    android.view.animation.TranslateAnimation mAnimation -> c
    android.widget.ImageView m_ivMove -> d
    android.support.v4.view.ViewPager mViewPager -> e
    android.view.LayoutInflater mInflater -> f
    android.view.View view1 -> g
    android.view.View view2 -> h
    com.massvig.ecommerce.widgets.RefreshListView listview1 -> i
    com.massvig.ecommerce.widgets.RefreshListView listview2 -> j
    com.massvig.ecommerce.widgets.PostAdapter adapter1 -> k
    com.massvig.ecommerce.widgets.PostAdapter adapter2 -> l
    android.widget.LinearLayout title_layout -> m
    android.widget.RelativeLayout tab_layout -> n
    android.widget.Button notFull -> o
    boolean isScolling -> p
    int tabindex -> q
    android.widget.TextView message_number -> r
    com.massvig.ecommerce.activities.CommunityActivity$MyBroadCast receiver -> s
    com.massvig.ecommerce.utilities.MassVigExit exit -> t
    boolean isLoadingMore -> u
    boolean isFirst -> v
    android.os.Handler mHandler -> w
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onResume() -> onResume
    void initListView(com.massvig.ecommerce.widgets.RefreshListView,com.massvig.ecommerce.widgets.PostAdapter) -> a
    void tabClickListener(int) -> a
    void onClick(android.view.View) -> onClick
    void LoadSuccess(int,int) -> a
    void SessionFailed() -> a
    void onDestroy() -> onDestroy
    boolean access$0(com.massvig.ecommerce.activities.CommunityActivity) -> a
    com.massvig.ecommerce.widgets.RefreshListView access$1(com.massvig.ecommerce.activities.CommunityActivity) -> b
    void access$2(com.massvig.ecommerce.activities.CommunityActivity,boolean) -> a
    com.massvig.ecommerce.managers.CommunityManager access$3(com.massvig.ecommerce.activities.CommunityActivity) -> c
    com.massvig.ecommerce.widgets.PostAdapter access$4(com.massvig.ecommerce.activities.CommunityActivity) -> d
    com.massvig.ecommerce.widgets.RefreshListView access$5(com.massvig.ecommerce.activities.CommunityActivity) -> e
    com.massvig.ecommerce.widgets.PostAdapter access$6(com.massvig.ecommerce.activities.CommunityActivity) -> f
    com.massvig.ecommerce.activities.BaseApplication access$7(com.massvig.ecommerce.activities.CommunityActivity) -> g
    android.widget.TextView access$8(com.massvig.ecommerce.activities.CommunityActivity) -> h
    void access$9(com.massvig.ecommerce.activities.CommunityActivity,int) -> a
    android.support.v4.view.ViewPager access$10(com.massvig.ecommerce.activities.CommunityActivity) -> i
    boolean access$11(com.massvig.ecommerce.activities.CommunityActivity) -> j
    void access$12$4ba81692(com.massvig.ecommerce.activities.CommunityActivity) -> k
    void access$13(com.massvig.ecommerce.activities.CommunityActivity) -> l
    int access$14(com.massvig.ecommerce.activities.CommunityActivity) -> m
    void access$15(com.massvig.ecommerce.activities.CommunityActivity,boolean) -> b
    boolean access$16(com.massvig.ecommerce.activities.CommunityActivity) -> n
com.massvig.ecommerce.activities.CommunityActivity$1 -> com.massvig.ecommerce.activities.ah:
    com.massvig.ecommerce.activities.CommunityActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.CommunityActivity$2 -> com.massvig.ecommerce.activities.ai:
    com.massvig.ecommerce.activities.CommunityActivity this$0 -> a
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    int getCount() -> a
    void destroyItem$7e55ba3e(android.view.View,int) -> b
com.massvig.ecommerce.activities.CommunityActivity$3 -> com.massvig.ecommerce.activities.aj:
    com.massvig.ecommerce.activities.CommunityActivity this$0 -> a
    void onPageSelected(int) -> a
com.massvig.ecommerce.activities.CommunityActivity$4 -> com.massvig.ecommerce.activities.ak:
    com.massvig.ecommerce.activities.CommunityActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.CommunityActivity$5 -> com.massvig.ecommerce.activities.al:
    com.massvig.ecommerce.activities.CommunityActivity this$0 -> a
    com.massvig.ecommerce.widgets.PostAdapter val$adapter22 -> b
    void startRefresh() -> a
    void startLoadMore() -> b
    void scrollStop() -> c
    void scrollStart() -> d
com.massvig.ecommerce.activities.CommunityActivity$6 -> com.massvig.ecommerce.activities.am:
    com.massvig.ecommerce.activities.CommunityActivity this$0 -> a
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
com.massvig.ecommerce.activities.CommunityActivity$MyBroadCast -> com.massvig.ecommerce.activities.CommunityActivity$MyBroadCast:
    com.massvig.ecommerce.activities.CommunityActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.massvig.ecommerce.activities.CommunityGroupActivity -> com.massvig.ecommerce.activities.CommunityGroupActivity:
    android.widget.ImageButton showLeftMenuBtn -> a
    com.massvig.ecommerce.widgets.SlideLayout slideLayout -> b
    com.massvig.ecommerce.widgets.LeftMenuView leftMenuView -> c
    android.widget.TextView titleTxt -> d
    com.massvig.ecommerce.activities.CommunityGroupActivity$MyViewOnclick myViewOnclick -> e
    com.massvig.ecommerce.widgets.ContentView contentView -> f
    android.widget.Button rightBtn -> g
    android.widget.Button findPeo -> h
    android.widget.ImageView userIcon -> i
    android.widget.TextView userName -> j
    com.massvig.ecommerce.activities.BaseApplication app -> k
    com.massvig.ecommerce.utilities.MassVigExit exit -> l
    com.massvig.ecommerce.managers.ActionManager manager -> m
    com.massvig.ecommerce.widgets.ActionAdapter adapter -> n
    android.os.Handler mHandler -> o
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void drawView(int,java.lang.String) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void Success(int) -> a
    android.widget.ImageButton access$0(com.massvig.ecommerce.activities.CommunityGroupActivity) -> a
    com.massvig.ecommerce.widgets.SlideLayout access$1(com.massvig.ecommerce.activities.CommunityGroupActivity) -> b
    android.widget.Button access$2(com.massvig.ecommerce.activities.CommunityGroupActivity) -> c
    android.widget.ImageView access$3(com.massvig.ecommerce.activities.CommunityGroupActivity) -> d
    android.widget.TextView access$4(com.massvig.ecommerce.activities.CommunityGroupActivity) -> e
    com.massvig.ecommerce.activities.BaseApplication access$5(com.massvig.ecommerce.activities.CommunityGroupActivity) -> f
    android.widget.Button access$6(com.massvig.ecommerce.activities.CommunityGroupActivity) -> g
    android.os.Handler access$7(com.massvig.ecommerce.activities.CommunityGroupActivity) -> h
com.massvig.ecommerce.activities.CommunityGroupActivity$1 -> com.massvig.ecommerce.activities.an:
    com.massvig.ecommerce.activities.CommunityGroupActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.CommunityGroupActivity$2 -> com.massvig.ecommerce.activities.ao:
    com.massvig.ecommerce.activities.CommunityGroupActivity this$0 -> a
    void callBack() -> a
com.massvig.ecommerce.activities.CommunityGroupActivity$3 -> com.massvig.ecommerce.activities.ap:
    com.massvig.ecommerce.activities.CommunityGroupActivity this$0 -> a
    void run() -> run
com.massvig.ecommerce.activities.CommunityGroupActivity$4 -> com.massvig.ecommerce.activities.aq:
    com.massvig.ecommerce.activities.CommunityGroupActivity this$0 -> a
    android.widget.ImageView val$img -> b
    void imageLoaded$6004fe1d(android.graphics.Bitmap) -> a
com.massvig.ecommerce.activities.CommunityGroupActivity$MyLeftMeunCallBack -> com.massvig.ecommerce.activities.ar:
    com.massvig.ecommerce.activities.CommunityGroupActivity this$0 -> a
    void callBack(int,java.lang.String) -> a
    void listCallBack(int) -> a
com.massvig.ecommerce.activities.CommunityGroupActivity$MyViewOnclick -> com.massvig.ecommerce.activities.as:
    com.massvig.ecommerce.activities.CommunityGroupActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.CommunityGroupActivity$OnActivityGroupResultListener -> com.massvig.ecommerce.activities.at:
    void OnActivityGroupResult(int,int,android.content.Intent) -> a
com.massvig.ecommerce.activities.CommunitySignalActivity -> com.massvig.ecommerce.activities.CommunitySignalActivity:
    com.massvig.ecommerce.activities.BaseApplication app -> a
    com.massvig.ecommerce.managers.CommunityManager mManager -> b
    com.massvig.ecommerce.widgets.RefreshListView listview1 -> c
    com.massvig.ecommerce.widgets.PostAdapter adapter1 -> d
    android.widget.Button notFull -> e
    boolean isScolling -> f
    int tabindex -> g
    boolean isLoadingMore -> h
    java.lang.String keyword -> i
    boolean isNeedRefresh -> j
    int click_postid -> k
    android.os.Handler mHandler -> l
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onResume() -> onResume
    void onClick(android.view.View) -> onClick
    void LoadSuccess(int,int) -> a
    void SessionFailed() -> a
    void onDestroy() -> onDestroy
    void OnActivityGroupResult(int,int,android.content.Intent) -> a
    boolean access$0(com.massvig.ecommerce.activities.CommunitySignalActivity) -> a
    com.massvig.ecommerce.widgets.RefreshListView access$1(com.massvig.ecommerce.activities.CommunitySignalActivity) -> b
    void access$2(com.massvig.ecommerce.activities.CommunitySignalActivity,boolean) -> a
    com.massvig.ecommerce.managers.CommunityManager access$3(com.massvig.ecommerce.activities.CommunitySignalActivity) -> c
    com.massvig.ecommerce.widgets.PostAdapter access$4(com.massvig.ecommerce.activities.CommunitySignalActivity) -> d
    com.massvig.ecommerce.activities.BaseApplication access$5(com.massvig.ecommerce.activities.CommunitySignalActivity) -> e
    android.os.Handler access$6(com.massvig.ecommerce.activities.CommunitySignalActivity) -> f
    int access$7(com.massvig.ecommerce.activities.CommunitySignalActivity) -> g
    java.lang.String access$8(com.massvig.ecommerce.activities.CommunitySignalActivity) -> h
    void access$9(com.massvig.ecommerce.activities.CommunitySignalActivity,boolean) -> b
    boolean access$10(com.massvig.ecommerce.activities.CommunitySignalActivity) -> i
com.massvig.ecommerce.activities.CommunitySignalActivity$1 -> com.massvig.ecommerce.activities.au:
    com.massvig.ecommerce.activities.CommunitySignalActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.CommunitySignalActivity$2 -> com.massvig.ecommerce.activities.av:
    com.massvig.ecommerce.activities.CommunitySignalActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.CommunitySignalActivity$3 -> com.massvig.ecommerce.activities.aw:
    com.massvig.ecommerce.activities.CommunitySignalActivity this$0 -> a
    com.massvig.ecommerce.widgets.PostAdapter val$adapter22 -> b
    void startRefresh() -> a
    void startLoadMore() -> b
    void scrollStop() -> c
    void scrollStart() -> d
com.massvig.ecommerce.activities.CommunityUserInfoActivity -> com.massvig.ecommerce.activities.CommunityUserInfoActivity:
    android.widget.TabHost tabHost -> a
    android.widget.RadioGroup tabWidget -> b
    com.massvig.ecommerce.managers.CommunityUserManager manager -> c
    com.massvig.ecommerce.widgets.NetImageView userimg -> d
    android.widget.ImageView sex -> e
    android.widget.TextView username -> f
    android.widget.TextView message_number -> g
    android.widget.Button attentionBtn -> h
    android.widget.Button fansBtn -> i
    android.widget.Button actionBtn -> j
    android.graphics.Bitmap shopDefaultImg -> k
    com.massvig.ecommerce.activities.CommunityUserInfoActivity$MyBroadCast receiver -> l
    com.massvig.ecommerce.activities.BaseApplication app -> m
    android.widget.LinearLayout myself -> n
    android.widget.LinearLayout others -> o
    android.widget.RelativeLayout scan_message -> p
    android.widget.RelativeLayout ignor_message -> q
    android.widget.RelativeLayout chat -> r
    android.widget.RelativeLayout add_fans -> s
    android.widget.RelativeLayout remove_fans -> t
    android.os.Handler mHandler -> u
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onResume() -> onResume
    void Success$13462e() -> a
    void SessionFailed() -> b
    void LoadData(com.massvig.ecommerce.managers.CommunityUserManager$UserInfo) -> a
    void onClick(android.view.View) -> onClick
    void Already() -> c
    void access$0(com.massvig.ecommerce.activities.CommunityUserInfoActivity,com.massvig.ecommerce.managers.CommunityUserManager$UserInfo) -> a
    com.massvig.ecommerce.managers.CommunityUserManager access$1(com.massvig.ecommerce.activities.CommunityUserInfoActivity) -> a
    com.massvig.ecommerce.activities.BaseApplication access$2(com.massvig.ecommerce.activities.CommunityUserInfoActivity) -> b
    android.widget.TextView access$3(com.massvig.ecommerce.activities.CommunityUserInfoActivity) -> c
    android.widget.TabHost access$4(com.massvig.ecommerce.activities.CommunityUserInfoActivity) -> d
com.massvig.ecommerce.activities.CommunityUserInfoActivity$1 -> com.massvig.ecommerce.activities.ax:
    com.massvig.ecommerce.activities.CommunityUserInfoActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.CommunityUserInfoActivity$2 -> com.massvig.ecommerce.activities.ay:
    com.massvig.ecommerce.activities.CommunityUserInfoActivity this$0 -> a
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
com.massvig.ecommerce.activities.CommunityUserInfoActivity$MyBroadCast -> com.massvig.ecommerce.activities.CommunityUserInfoActivity$MyBroadCast:
    com.massvig.ecommerce.activities.CommunityUserInfoActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.massvig.ecommerce.activities.CopyOfGoodsListActivity -> com.massvig.ecommerce.activities.CopyOfGoodsListActivity:
    com.massvig.ecommerce.managers.GoodsListManager mManager -> d
    android.widget.ListView listview -> e
    com.massvig.ecommerce.widgets.GoodsAdapter mAdapter -> f
    android.widget.LinearLayout cateGoryBarBtn1 -> g
    android.widget.LinearLayout cateGoryBarBtn2 -> h
    com.massvig.ecommerce.widgets.CategoryDialogView categoryDialogView -> a
    java.lang.String subCategoryName -> b
    java.lang.Double latitude -> i
    java.lang.Double longitude -> j
    com.massvig.ecommerce.location.LocationManage mLocationManage -> k
    int categoryID -> l
    int subCategoryID -> m
    boolean isScolling -> n
    com.massvig.ecommerce.utilities.MassVigExit exit -> o
    android.app.ProgressDialog dialog -> p
    com.massvig.ecommerce.location.LocationManage$MyLocationListener mmMyLocationListener -> c
    android.os.Handler mHandler -> q
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onDestroy() -> onDestroy
    void onClick(android.view.View) -> onClick
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void access$0(com.massvig.ecommerce.activities.CopyOfGoodsListActivity,java.lang.Double) -> a
    void access$1(com.massvig.ecommerce.activities.CopyOfGoodsListActivity,java.lang.Double) -> b
    java.lang.Double access$2(com.massvig.ecommerce.activities.CopyOfGoodsListActivity) -> a
    java.lang.Double access$3(com.massvig.ecommerce.activities.CopyOfGoodsListActivity) -> b
    com.massvig.ecommerce.location.LocationManage access$4(com.massvig.ecommerce.activities.CopyOfGoodsListActivity) -> c
    android.app.ProgressDialog access$5(com.massvig.ecommerce.activities.CopyOfGoodsListActivity) -> d
    android.widget.LinearLayout access$6(com.massvig.ecommerce.activities.CopyOfGoodsListActivity) -> e
    android.widget.LinearLayout access$7(com.massvig.ecommerce.activities.CopyOfGoodsListActivity) -> f
    void access$8(com.massvig.ecommerce.activities.CopyOfGoodsListActivity,int) -> a
    void access$9(com.massvig.ecommerce.activities.CopyOfGoodsListActivity,int) -> b
    int access$10(com.massvig.ecommerce.activities.CopyOfGoodsListActivity) -> g
    int access$11(com.massvig.ecommerce.activities.CopyOfGoodsListActivity) -> h
    com.massvig.ecommerce.managers.GoodsListManager access$12(com.massvig.ecommerce.activities.CopyOfGoodsListActivity) -> i
    com.massvig.ecommerce.widgets.GoodsAdapter access$13(com.massvig.ecommerce.activities.CopyOfGoodsListActivity) -> j
    android.os.Handler access$14(com.massvig.ecommerce.activities.CopyOfGoodsListActivity) -> k
    void access$15(com.massvig.ecommerce.activities.CopyOfGoodsListActivity,boolean) -> a
    boolean access$16(com.massvig.ecommerce.activities.CopyOfGoodsListActivity) -> l
com.massvig.ecommerce.activities.CopyOfGoodsListActivity$1 -> com.massvig.ecommerce.activities.az:
    com.massvig.ecommerce.activities.CopyOfGoodsListActivity this$0 -> a
    void location(double,double) -> a
    void isAllow(java.lang.Boolean) -> a
    void address(java.lang.String) -> a
com.massvig.ecommerce.activities.CopyOfGoodsListActivity$2 -> com.massvig.ecommerce.activities.ba:
    com.massvig.ecommerce.activities.CopyOfGoodsListActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.CopyOfGoodsListActivity$3 -> com.massvig.ecommerce.activities.bb:
    com.massvig.ecommerce.activities.CopyOfGoodsListActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.CopyOfGoodsListActivity$4 -> com.massvig.ecommerce.activities.bc:
    com.massvig.ecommerce.activities.CopyOfGoodsListActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.CopyOfGoodsListActivity$5 -> com.massvig.ecommerce.activities.bd:
    com.massvig.ecommerce.activities.CopyOfGoodsListActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.CopyOfGoodsListActivity$6 -> com.massvig.ecommerce.activities.be:
    android.widget.TextView cateName -> b
    android.widget.TextView orderName -> c
    com.massvig.ecommerce.activities.CopyOfGoodsListActivity this$0 -> a
    void setBarText(int,java.lang.String) -> b
    void cateGorycallBack(int,int,java.lang.String) -> a
    void orderCallBack$2f2e9c64(int,java.lang.String) -> a
com.massvig.ecommerce.activities.CopyOfGoodsListActivity$7 -> com.massvig.ecommerce.activities.bf:
    com.massvig.ecommerce.activities.CopyOfGoodsListActivity this$0 -> a
    void LoadSuccess() -> a
    void LoadFailed() -> b
    void NoData() -> c
com.massvig.ecommerce.activities.CopyOfGoodsListActivity$8 -> com.massvig.ecommerce.activities.bg:
    com.massvig.ecommerce.activities.CopyOfGoodsListActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.CopyOfGoodsListActivity$9 -> com.massvig.ecommerce.activities.bh:
    com.massvig.ecommerce.activities.CopyOfGoodsListActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.massvig.ecommerce.activities.CouponActivity -> com.massvig.ecommerce.activities.CouponActivity:
    android.widget.LinearLayout couponLayout -> b
    android.view.LayoutInflater mInflater -> c
    com.massvig.ecommerce.managers.CouponManager manager -> d
    android.widget.TextView clickView -> e
    android.widget.TextView info_text -> f
    int count -> g
    com.massvig.ecommerce.entities.ProductList product -> h
    com.massvig.ecommerce.activities.BaseApplication app -> i
    java.lang.String ids -> j
    java.lang.String quantities -> k
    float totalMoney -> a
    java.lang.String payment -> l
    java.lang.String billTitle -> m
    int customerAddressID -> n
    int billType -> o
    int expressage -> p
    void onCreate(android.os.Bundle) -> onCreate
    void initCoupons() -> c
    void addCouponToLayout() -> d
    void onClick(android.view.View) -> onClick
    void refreshInfoText() -> e
    void Success() -> a
    void Failed(java.lang.String) -> a
    java.lang.String getCouponsPrice() -> f
    java.lang.String getCoupons() -> g
    void access$0(com.massvig.ecommerce.activities.CouponActivity,android.widget.TextView) -> a
    void access$1(com.massvig.ecommerce.activities.CouponActivity) -> a
    android.widget.TextView access$2(com.massvig.ecommerce.activities.CouponActivity) -> b
    void access$3(com.massvig.ecommerce.activities.CouponActivity,android.view.View) -> a
    com.massvig.ecommerce.managers.CouponManager access$4(com.massvig.ecommerce.activities.CouponActivity) -> c
    void access$5(com.massvig.ecommerce.activities.CouponActivity) -> d
com.massvig.ecommerce.activities.CouponActivity$1 -> com.massvig.ecommerce.activities.bi:
    com.massvig.ecommerce.activities.CouponActivity this$0 -> a
    android.widget.EditText val$content -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.CouponActivity$2 -> com.massvig.ecommerce.activities.bj:
    com.massvig.ecommerce.activities.CouponActivity this$0 -> a
    android.widget.EditText val$content -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.CouponActivity$MyTag -> com.massvig.ecommerce.activities.bk:
    boolean isUsed -> a
    com.massvig.ecommerce.activities.CouponActivity this$0 -> b
com.massvig.ecommerce.activities.CouponManageActivity -> com.massvig.ecommerce.activities.CouponManageActivity:
    android.app.ProgressDialog dialog -> b
    com.massvig.ecommerce.widgets.AdGallery gallery -> c
    android.widget.ListView listview -> d
    android.widget.Button settleaccounts -> e
    android.widget.TextView totalMoney -> f
    android.widget.TextView info -> g
    com.massvig.ecommerce.entities.CouponList couponList -> h
    com.massvig.ecommerce.activities.CouponManageActivity$CouponAdapter mAdapter -> i
    android.view.LayoutInflater mInflater -> j
    boolean isLoaddone -> k
    com.massvig.ecommerce.activities.BaseApplication app -> l
    int expressage -> m
    java.lang.String productSpecID -> n
    java.lang.String quantity -> o
    com.massvig.ecommerce.activities.CouponManageActivity$MyImageAdapter mImageAdapter -> p
    java.util.ArrayList imageItemsList -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onClick(android.view.View) -> onClick
    java.lang.String getCouponsPrice() -> a
    java.lang.String getCoupons() -> c
    com.massvig.ecommerce.activities.BaseApplication access$0(com.massvig.ecommerce.activities.CouponManageActivity) -> a
    boolean access$1(com.massvig.ecommerce.activities.CouponManageActivity) -> b
    com.massvig.ecommerce.entities.CouponList access$2(com.massvig.ecommerce.activities.CouponManageActivity) -> c
    java.lang.String access$3(com.massvig.ecommerce.activities.CouponManageActivity) -> d
    java.lang.String access$4(com.massvig.ecommerce.activities.CouponManageActivity) -> e
    int access$5(com.massvig.ecommerce.activities.CouponManageActivity) -> f
    com.massvig.ecommerce.activities.CouponManageActivity$MyImageAdapter access$6(com.massvig.ecommerce.activities.CouponManageActivity) -> g
    com.massvig.ecommerce.widgets.AdGallery access$7(com.massvig.ecommerce.activities.CouponManageActivity) -> h
    android.view.LayoutInflater access$8(com.massvig.ecommerce.activities.CouponManageActivity) -> i
    void access$9(com.massvig.ecommerce.activities.CouponManageActivity) -> j
    android.app.ProgressDialog access$10(com.massvig.ecommerce.activities.CouponManageActivity) -> k
    com.massvig.ecommerce.activities.CouponManageActivity$CouponAdapter access$11(com.massvig.ecommerce.activities.CouponManageActivity) -> l
    com.massvig.ecommerce.entities.Coupon access$12$59e15775(org.json.JSONObject) -> a
com.massvig.ecommerce.activities.CouponManageActivity$1 -> com.massvig.ecommerce.activities.bl:
    com.massvig.ecommerce.activities.CouponManageActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.CouponManageActivity$CheckCoupon -> com.massvig.ecommerce.activities.bm:
    com.massvig.ecommerce.activities.CouponManageActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Integer doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.CouponManageActivity$CouponAdapter -> com.massvig.ecommerce.activities.bn:
    com.massvig.ecommerce.activities.CouponManageActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    com.massvig.ecommerce.activities.CouponManageActivity access$0(com.massvig.ecommerce.activities.CouponManageActivity$CouponAdapter) -> a
com.massvig.ecommerce.activities.CouponManageActivity$CouponAdapter$ViewHolder -> com.massvig.ecommerce.activities.bo:
    android.view.View itemView -> b
    android.widget.CheckBox check -> c
    android.widget.TextView title -> d
    android.widget.TextView time -> e
    android.widget.TextView price -> f
    android.widget.TextView status -> g
    android.widget.TextView text -> h
    com.massvig.ecommerce.widgets.NetImageView image -> i
    android.widget.LinearLayout imageView -> j
    com.massvig.ecommerce.activities.CouponManageActivity$CouponAdapter this$1 -> a
    android.view.View getView(int) -> a
    android.widget.CheckBox access$0(com.massvig.ecommerce.activities.CouponManageActivity$CouponAdapter$ViewHolder) -> a
com.massvig.ecommerce.activities.CouponManageActivity$CouponAdapter$ViewHolder$1 -> com.massvig.ecommerce.activities.bp:
    com.massvig.ecommerce.activities.CouponManageActivity$CouponAdapter$ViewHolder this$2 -> a
    com.massvig.ecommerce.entities.Coupon val$c -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.CouponManageActivity$CouponAdapter$ViewHolder$2 -> com.massvig.ecommerce.activities.bq:
    com.massvig.ecommerce.activities.CouponManageActivity$CouponAdapter$ViewHolder this$2 -> a
    com.massvig.ecommerce.entities.Coupon val$c -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.CouponManageActivity$CreateNewCoupon -> com.massvig.ecommerce.activities.br:
    com.massvig.ecommerce.activities.CouponManageActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.CouponManageActivity$GetCouponAsync -> com.massvig.ecommerce.activities.bs:
    com.massvig.ecommerce.activities.CouponManageActivity this$0 -> a
    com.massvig.ecommerce.entities.AdItem ItemAnaly(org.json.JSONObject) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.CouponManageActivity$MyImageAdapter -> com.massvig.ecommerce.activities.bt:
    com.massvig.ecommerce.activities.CouponManageActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    java.lang.String getItemUrl(int) -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.massvig.ecommerce.activities.CropActivity -> com.massvig.ecommerce.activities.CropActivity:
    android.widget.ImageView image -> a
    android.widget.Button not -> b
    android.widget.Button yes -> c
    android.net.Uri u -> d
    android.graphics.Bitmap bitmap -> e
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onClick(android.view.View) -> onClick
    android.graphics.Bitmap decodeUriAsBitmap(android.net.Uri) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
com.massvig.ecommerce.activities.FansListActivity -> com.massvig.ecommerce.activities.FansListActivity:
    int type -> a
    int userId -> b
    int count -> c
    com.massvig.ecommerce.activities.FansListActivity$MyOnclick mMyOnclick -> d
    com.massvig.ecommerce.activities.FansListActivity$UserInfoAdapter userInfoAdapter -> e
    android.widget.ListView userListView -> f
    android.widget.EditText editText -> g
    android.widget.ImageButton subBtn -> h
    com.massvig.ecommerce.widgets.LoadView loadView -> i
    int loginUserId -> j
    int operateAttentionCount -> k
    android.widget.LinearLayout searchLayout -> l
    com.massvig.ecommerce.activities.BaseApplication app -> m
    java.lang.String keyWord -> n
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void LoadData() -> a
    void GoToLogin() -> c
    void onBackPressed() -> onBackPressed
    com.massvig.ecommerce.activities.BaseApplication access$0(com.massvig.ecommerce.activities.FansListActivity) -> a
    int access$1(com.massvig.ecommerce.activities.FansListActivity) -> b
    int access$2(com.massvig.ecommerce.activities.FansListActivity) -> c
    int access$3(com.massvig.ecommerce.activities.FansListActivity) -> d
    android.widget.ImageButton access$4(com.massvig.ecommerce.activities.FansListActivity) -> e
    android.widget.EditText access$5(com.massvig.ecommerce.activities.FansListActivity) -> f
    void access$6(com.massvig.ecommerce.activities.FansListActivity,java.lang.String) -> a
    com.massvig.ecommerce.activities.FansListActivity$UserInfoAdapter access$7(com.massvig.ecommerce.activities.FansListActivity) -> g
    com.massvig.ecommerce.widgets.LoadView access$8(com.massvig.ecommerce.activities.FansListActivity) -> h
    java.lang.String access$9(com.massvig.ecommerce.activities.FansListActivity) -> i
    int access$10(com.massvig.ecommerce.activities.FansListActivity) -> j
com.massvig.ecommerce.activities.FansListActivity$1 -> com.massvig.ecommerce.activities.bu:
    com.massvig.ecommerce.activities.FansListActivity this$0 -> a
    void callBack() -> a
com.massvig.ecommerce.activities.FansListActivity$2 -> com.massvig.ecommerce.activities.bv:
    com.massvig.ecommerce.activities.FansListActivity this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.FansListActivity$MyOnclick -> com.massvig.ecommerce.activities.bw:
    com.massvig.ecommerce.activities.FansListActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.FansListActivity$UserInfoAdapter -> com.massvig.ecommerce.activities.bx:
    java.util.List lists -> b
    com.massvig.ecommerce.activities.FansListActivity$UserInfoAdapter$ListMyOnclick listMyOnclick -> c
    android.graphics.Bitmap defaultUserIcon -> d
    com.massvig.ecommerce.activities.FansListActivity this$0 -> a
    void setData(java.util.List) -> a
    void clearData() -> a
    void clearData(int) -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void access$0(com.massvig.ecommerce.activities.FansListActivity$UserInfoAdapter,android.view.View) -> a
    com.massvig.ecommerce.activities.FansListActivity access$1(com.massvig.ecommerce.activities.FansListActivity$UserInfoAdapter) -> a
com.massvig.ecommerce.activities.FansListActivity$UserInfoAdapter$1 -> com.massvig.ecommerce.activities.by:
    com.massvig.ecommerce.activities.FansListActivity$UserInfoAdapter this$1 -> a
    com.massvig.ecommerce.entities.Friend val$userinfo -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.FansListActivity$UserInfoAdapter$2 -> com.massvig.ecommerce.activities.bz:
    com.massvig.ecommerce.activities.FansListActivity$UserInfoAdapter this$1 -> a
    com.massvig.ecommerce.entities.Friend val$userinfo -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.FansListActivity$UserInfoAdapter$3 -> com.massvig.ecommerce.activities.ca:
    com.massvig.ecommerce.activities.FansListActivity$UserInfoAdapter this$1 -> a
    int[] val$action -> b
    android.view.View val$v -> c
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.FansListActivity$UserInfoAdapter$ListMyOnclick -> com.massvig.ecommerce.activities.cb:
    com.massvig.ecommerce.activities.FansListActivity$UserInfoAdapter this$1 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.FindPasswordActivity -> com.massvig.ecommerce.activities.FindPasswordActivity:
    java.util.Timer timer -> a
    java.util.TimerTask task -> b
    boolean timeout -> c
    int timeCount -> d
    com.massvig.ecommerce.managers.FindPasswordManager mManager -> e
    android.view.View view1 -> f
    android.view.View view2 -> g
    android.view.View view3 -> h
    int index -> i
    android.app.ProgressDialog dialog -> j
    android.widget.TextView title -> k
    android.widget.Button finish -> l
    java.lang.String name -> m
    java.lang.String codeText -> n
    android.widget.EditText username1 -> o
    android.widget.EditText code -> p
    android.widget.TextView mobile -> q
    android.widget.TextView send -> r
    android.widget.EditText password1 -> s
    android.widget.EditText password2 -> t
    boolean sendCode -> u
    android.os.Handler mHandler -> v
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void startTime() -> d
    void start(int) -> a
    void end(int) -> b
    void Success(int) -> c
    void Failed(int) -> d
    void empty() -> a
    void accountErr() -> c
    void onResume() -> onResume
    void onPause() -> onPause
    android.widget.TextView access$0(com.massvig.ecommerce.activities.FindPasswordActivity) -> a
    android.widget.EditText access$1(com.massvig.ecommerce.activities.FindPasswordActivity) -> b
    void access$2(com.massvig.ecommerce.activities.FindPasswordActivity,boolean) -> a
    android.widget.TextView access$3(com.massvig.ecommerce.activities.FindPasswordActivity) -> c
    android.view.View access$4(com.massvig.ecommerce.activities.FindPasswordActivity) -> d
    android.view.View access$5(com.massvig.ecommerce.activities.FindPasswordActivity) -> e
    android.widget.Button access$6(com.massvig.ecommerce.activities.FindPasswordActivity) -> f
    int access$7(com.massvig.ecommerce.activities.FindPasswordActivity) -> g
    void access$8(com.massvig.ecommerce.activities.FindPasswordActivity,int) -> a
    android.app.ProgressDialog access$9(com.massvig.ecommerce.activities.FindPasswordActivity) -> h
    boolean access$10(com.massvig.ecommerce.activities.FindPasswordActivity) -> i
    android.view.View access$11(com.massvig.ecommerce.activities.FindPasswordActivity) -> j
    void access$12(com.massvig.ecommerce.activities.FindPasswordActivity) -> k
    android.widget.TextView access$13(com.massvig.ecommerce.activities.FindPasswordActivity) -> l
    void access$14$aa20401(com.massvig.ecommerce.activities.FindPasswordActivity) -> m
    int access$15(com.massvig.ecommerce.activities.FindPasswordActivity) -> n
    void access$16(com.massvig.ecommerce.activities.FindPasswordActivity,int) -> b
    android.os.Handler access$17(com.massvig.ecommerce.activities.FindPasswordActivity) -> o
com.massvig.ecommerce.activities.FindPasswordActivity$1 -> com.massvig.ecommerce.activities.cc:
    com.massvig.ecommerce.activities.FindPasswordActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.FindPasswordActivity$2 -> com.massvig.ecommerce.activities.cd:
    com.massvig.ecommerce.activities.FindPasswordActivity this$0 -> a
    void onTick(long) -> onTick
    void onFinish() -> onFinish
com.massvig.ecommerce.activities.FindPeopleActivity -> com.massvig.ecommerce.activities.FindPeopleActivity:
    android.widget.TabHost tabHost -> a
    android.widget.RadioGroup tabWidget -> b
    int userId -> c
    int index -> d
    void onCreate(android.os.Bundle) -> onCreate
    void setCurrentTab(int) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.FindPeopleActivity$1 -> com.massvig.ecommerce.activities.ce:
    com.massvig.ecommerce.activities.FindPeopleActivity this$0 -> a
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
com.massvig.ecommerce.activities.FriendTabActivity -> com.massvig.ecommerce.activities.FriendTabActivity:
    android.widget.TabHost tabHost -> a
    android.widget.RadioGroup tabWidget -> b
    int userId -> c
    int index -> d
    void onCreate(android.os.Bundle) -> onCreate
    void setCurrentTab(int) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.FriendTabActivity$1 -> com.massvig.ecommerce.activities.cf:
    com.massvig.ecommerce.activities.FriendTabActivity this$0 -> a
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
com.massvig.ecommerce.activities.FullScreenActivity -> com.massvig.ecommerce.activities.FullScreenActivity:
    com.massvig.ecommerce.widgets.NetImageView imageView -> a
    void onCreate(android.os.Bundle) -> onCreate
com.massvig.ecommerce.activities.FullScreenActivity$1 -> com.massvig.ecommerce.activities.cg:
    com.massvig.ecommerce.activities.FullScreenActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.GalleryActivity -> com.massvig.ecommerce.activities.GalleryActivity:
    java.util.ArrayList imageList -> a
    android.widget.Gallery mGallery -> b
    com.massvig.ecommerce.widgets.ImageAdapter imageAdapter -> c
    void onCreate(android.os.Bundle) -> onCreate
    java.util.ArrayList access$0(com.massvig.ecommerce.activities.GalleryActivity) -> a
    android.widget.Gallery access$1(com.massvig.ecommerce.activities.GalleryActivity) -> b
    com.massvig.ecommerce.widgets.ImageAdapter access$2(com.massvig.ecommerce.activities.GalleryActivity) -> c
com.massvig.ecommerce.activities.GalleryActivity$1 -> com.massvig.ecommerce.activities.ch:
    com.massvig.ecommerce.activities.GalleryActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.GalleryActivity$2 -> com.massvig.ecommerce.activities.ci:
    com.massvig.ecommerce.activities.GalleryActivity this$0 -> a
    void imageLoaded$6004fe1d(android.graphics.Bitmap) -> a
com.massvig.ecommerce.activities.GoodsDetailActivity -> com.massvig.ecommerce.activities.GoodsDetailActivity:
    com.massvig.ecommerce.managers.GoodsDetailManager mManager -> a
    android.view.animation.TranslateAnimation mAnimation -> b
    android.widget.ImageView m_ivMove -> c
    android.app.ProgressDialog dialog -> d
    com.massvig.ecommerce.activities.BaseApplication app -> e
    android.support.v4.view.ViewPager mViewPager -> f
    android.view.LayoutInflater mInflater -> g
    android.view.View view1 -> h
    android.view.View view2 -> i
    android.view.View view3 -> j
    android.widget.TextView total -> k
    android.widget.ListView listView -> l
    boolean isLoadAdvise -> m
    boolean isRefresh -> n
    com.massvig.ecommerce.widgets.CommentListAdapter mAdapter -> o
    android.widget.EditText commentText -> p
    android.view.GestureDetector detector -> q
    android.widget.TextView tab1 -> r
    android.widget.TextView tab2 -> s
    android.widget.TextView tab3 -> t
    android.widget.TextView no_comment -> u
    com.massvig.ecommerce.activities.GoodsDetailActivity$GoodCommentAdapter commentAdapter -> v
    android.widget.ListView goodListView -> w
    android.widget.ImageView imageView -> x
    android.widget.TextView price -> y
    android.widget.TextView praise_text -> z
    android.widget.TextView collect_text -> A
    android.widget.ProgressBar pb -> B
    android.widget.EditText goodComment -> C
    android.widget.TextView goodCommentSend -> D
    android.webkit.WebView webview -> E
    boolean isLoad -> F
    boolean isLoaddone -> G
    boolean click -> H
    android.os.Handler mHandler -> I
    com.massvig.ecommerce.entities.GoodCommentList commentList -> J
    com.massvig.ecommerce.entities.GoodCommentList tempList -> K
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void showText() -> o
    void tabClickListener(int) -> a
    void onClick(android.view.View) -> onClick
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    boolean onDown(android.view.MotionEvent) -> onDown
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void LoadSuccess() -> a
    void LoadParamsSuccess() -> c
    void LoadCommentSuccess() -> d
    void LoadCommentFailed() -> e
    void AddCommentFailed() -> f
    void AddCommentSuccess() -> g
    void PraiseSuccess$13462e() -> h
    void collapseSoftInputMethod(android.widget.EditText) -> a
    void PraiseFailed$13462e() -> i
    void SessionVailed() -> j
    void Already() -> k
    void GoodsDown() -> l
    void addCollectsucess() -> m
    void addCollectfailed() -> n
    android.widget.EditText access$0(com.massvig.ecommerce.activities.GoodsDetailActivity) -> a
    com.massvig.ecommerce.managers.GoodsDetailManager access$1(com.massvig.ecommerce.activities.GoodsDetailActivity) -> b
    android.widget.TextView access$2(com.massvig.ecommerce.activities.GoodsDetailActivity) -> c
    com.massvig.ecommerce.activities.BaseApplication access$3(com.massvig.ecommerce.activities.GoodsDetailActivity) -> d
    android.view.LayoutInflater access$4(com.massvig.ecommerce.activities.GoodsDetailActivity) -> e
    com.massvig.ecommerce.entities.GoodCommentList access$5(com.massvig.ecommerce.activities.GoodsDetailActivity) -> f
    void access$6(com.massvig.ecommerce.activities.GoodsDetailActivity,boolean) -> a
    com.massvig.ecommerce.entities.GoodCommentList access$7(com.massvig.ecommerce.activities.GoodsDetailActivity) -> g
    com.massvig.ecommerce.activities.GoodsDetailActivity$GoodCommentAdapter access$8(com.massvig.ecommerce.activities.GoodsDetailActivity) -> h
    void access$9$3816e970(com.massvig.ecommerce.activities.GoodsDetailActivity) -> i
    android.app.ProgressDialog access$10(com.massvig.ecommerce.activities.GoodsDetailActivity) -> j
    boolean access$11(com.massvig.ecommerce.activities.GoodsDetailActivity) -> k
    void access$12$3816e970(com.massvig.ecommerce.activities.GoodsDetailActivity) -> l
    android.view.GestureDetector access$13(com.massvig.ecommerce.activities.GoodsDetailActivity) -> m
    boolean access$14(com.massvig.ecommerce.activities.GoodsDetailActivity) -> n
    void access$15$3816e970(com.massvig.ecommerce.activities.GoodsDetailActivity) -> o
    boolean access$16(com.massvig.ecommerce.activities.GoodsDetailActivity) -> p
    android.widget.TextView access$17(com.massvig.ecommerce.activities.GoodsDetailActivity) -> q
    android.widget.TextView access$18(com.massvig.ecommerce.activities.GoodsDetailActivity) -> r
    android.widget.TextView access$19(com.massvig.ecommerce.activities.GoodsDetailActivity) -> s
    void access$20(com.massvig.ecommerce.activities.GoodsDetailActivity) -> t
    boolean access$21(com.massvig.ecommerce.activities.GoodsDetailActivity) -> u
    void access$22$3816e970(com.massvig.ecommerce.activities.GoodsDetailActivity) -> v
    android.webkit.WebView access$23(com.massvig.ecommerce.activities.GoodsDetailActivity) -> w
com.massvig.ecommerce.activities.GoodsDetailActivity$1 -> com.massvig.ecommerce.activities.cj:
    com.massvig.ecommerce.activities.GoodsDetailActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.GoodsDetailActivity$2 -> com.massvig.ecommerce.activities.ck:
    com.massvig.ecommerce.activities.GoodsDetailActivity this$0 -> a
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
com.massvig.ecommerce.activities.GoodsDetailActivity$3 -> com.massvig.ecommerce.activities.cl:
    com.massvig.ecommerce.activities.GoodsDetailActivity this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.massvig.ecommerce.activities.GoodsDetailActivity$4 -> com.massvig.ecommerce.activities.cm:
    com.massvig.ecommerce.activities.GoodsDetailActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.massvig.ecommerce.activities.GoodsDetailActivity$5 -> com.massvig.ecommerce.activities.cn:
    com.massvig.ecommerce.activities.GoodsDetailActivity this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.massvig.ecommerce.activities.GoodsDetailActivity$6 -> com.massvig.ecommerce.activities.co:
    com.massvig.ecommerce.activities.GoodsDetailActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.massvig.ecommerce.activities.GoodsDetailActivity$7 -> com.massvig.ecommerce.activities.cp:
    com.massvig.ecommerce.activities.GoodsDetailActivity this$0 -> a
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    int getCount() -> a
    void destroyItem$7e55ba3e(android.view.View,int) -> b
com.massvig.ecommerce.activities.GoodsDetailActivity$8 -> com.massvig.ecommerce.activities.cq:
    com.massvig.ecommerce.activities.GoodsDetailActivity this$0 -> a
    void onPageSelected(int) -> a
com.massvig.ecommerce.activities.GoodsDetailActivity$9 -> com.massvig.ecommerce.activities.cr:
    com.massvig.ecommerce.activities.GoodsDetailActivity this$0 -> a
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
com.massvig.ecommerce.activities.GoodsDetailActivity$AddAdviseAsync -> com.massvig.ecommerce.activities.cs:
    com.massvig.ecommerce.activities.GoodsDetailActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Integer doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.GoodsDetailActivity$GetCountAsync -> com.massvig.ecommerce.activities.ct:
    com.massvig.ecommerce.activities.GoodsDetailActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Integer doInBackground$5cbeabcf() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.GoodsDetailActivity$GoodCommentAdapter -> com.massvig.ecommerce.activities.cu:
    com.massvig.ecommerce.activities.GoodsDetailActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    com.massvig.ecommerce.activities.GoodsDetailActivity access$0(com.massvig.ecommerce.activities.GoodsDetailActivity$GoodCommentAdapter) -> a
com.massvig.ecommerce.activities.GoodsDetailActivity$GoodCommentAdapter$ViewHolder -> com.massvig.ecommerce.activities.cv:
    android.view.View itemView -> b
    android.widget.TextView question -> c
    android.widget.TextView answer -> d
    android.widget.TextView information -> e
    com.massvig.ecommerce.activities.GoodsDetailActivity$GoodCommentAdapter this$1 -> a
    android.view.View getView(int) -> a
com.massvig.ecommerce.activities.GoodsDetailActivity$LoadCommentAsync -> com.massvig.ecommerce.activities.cw:
    com.massvig.ecommerce.activities.GoodsDetailActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.GoodsListActivity -> com.massvig.ecommerce.activities.GoodsListActivity:
    com.massvig.ecommerce.managers.GoodsListManager mManager -> b
    android.widget.ListView listview -> c
    com.massvig.ecommerce.widgets.GoodsAdapter mAdapter -> d
    java.lang.Double latitude -> e
    java.lang.Double longitude -> f
    com.massvig.ecommerce.location.LocationManage mLocationManage -> g
    boolean isScolling -> h
    android.app.ProgressDialog dialog -> i
    android.widget.TextView price_order -> j
    int priceOrder -> k
    android.widget.RadioGroup radioGroup -> l
    boolean isClickPrice -> m
    boolean isFirst -> n
    android.widget.LinearLayout layout -> o
    android.widget.TextView text -> p
    com.massvig.ecommerce.location.LocationManage$MyLocationListener mmMyLocationListener -> a
    android.os.Handler mHandler -> q
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    void onClick(android.view.View) -> onClick
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
    void access$0(com.massvig.ecommerce.activities.GoodsListActivity,java.lang.Double) -> a
    void access$1(com.massvig.ecommerce.activities.GoodsListActivity,java.lang.Double) -> b
    java.lang.Double access$2(com.massvig.ecommerce.activities.GoodsListActivity) -> a
    java.lang.Double access$3(com.massvig.ecommerce.activities.GoodsListActivity) -> b
    com.massvig.ecommerce.location.LocationManage access$4(com.massvig.ecommerce.activities.GoodsListActivity) -> c
    android.app.ProgressDialog access$5(com.massvig.ecommerce.activities.GoodsListActivity) -> d
    com.massvig.ecommerce.managers.GoodsListManager access$6(com.massvig.ecommerce.activities.GoodsListActivity) -> e
    android.widget.LinearLayout access$7(com.massvig.ecommerce.activities.GoodsListActivity) -> f
    android.widget.TextView access$8(com.massvig.ecommerce.activities.GoodsListActivity) -> g
    com.massvig.ecommerce.widgets.GoodsAdapter access$9(com.massvig.ecommerce.activities.GoodsListActivity) -> h
    android.os.Handler access$10(com.massvig.ecommerce.activities.GoodsListActivity) -> i
    void access$11(com.massvig.ecommerce.activities.GoodsListActivity,boolean) -> a
    boolean access$12(com.massvig.ecommerce.activities.GoodsListActivity) -> j
com.massvig.ecommerce.activities.GoodsListActivity$1 -> com.massvig.ecommerce.activities.cx:
    com.massvig.ecommerce.activities.GoodsListActivity this$0 -> a
    void location(double,double) -> a
    void isAllow(java.lang.Boolean) -> a
    void address(java.lang.String) -> a
com.massvig.ecommerce.activities.GoodsListActivity$2 -> com.massvig.ecommerce.activities.cy:
    com.massvig.ecommerce.activities.GoodsListActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.GoodsListActivity$3 -> com.massvig.ecommerce.activities.cz:
    com.massvig.ecommerce.activities.GoodsListActivity this$0 -> a
    void LoadSuccess() -> a
    void LoadFailed() -> b
    void NoData() -> c
com.massvig.ecommerce.activities.GoodsListActivity$4 -> com.massvig.ecommerce.activities.da:
    com.massvig.ecommerce.activities.GoodsListActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.GoodsListActivity$5 -> com.massvig.ecommerce.activities.db:
    com.massvig.ecommerce.activities.GoodsListActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.massvig.ecommerce.activities.InsertPost -> com.massvig.ecommerce.activities.InsertPost:
    int sinaOauthRequestCode -> b
    int qqOauthRequestCode -> c
    int loginRequestCode -> d
    android.widget.EditText editContent -> e
    android.widget.TextView mtxtCount -> f
    android.widget.Button mCamera -> g
    android.widget.CheckBox mShareQQCheckBox -> h
    android.widget.CheckBox mShareSianCheckBox -> i
    android.widget.CheckBox mShareLocationCheckBox -> j
    com.massvig.ecommerce.widgets.NetImageView uploadImg -> k
    com.massvig.ecommerce.activities.InsertPost$MyOnclick mMyOnclick -> l
    com.massvig.ecommerce.activities.InsertPost$SelectPic mSelectPic -> m
    android.widget.Button addPostBtn -> n
    android.graphics.Bitmap muploadImgBitmap -> o
    com.massvig.ecommerce.activities.BaseApplication app -> p
    com.massvig.ecommerce.location.LocationManage mLocationManage -> q
    com.massvig.ecommerce.managers.InsertManager manager -> r
    java.lang.String imageUrl -> s
    java.lang.String uploadImgUrl -> t
    java.lang.String uploadImgUrlSd -> u
    com.tencent.weibo.oauthv2.OAuthV2 oAuth -> v
    java.lang.Boolean isShareSina -> w
    java.lang.Boolean isShareQQ -> x
    android.app.ProgressDialog progress -> y
    int index -> z
    com.massvig.ecommerce.location.LocationManage$MyLocationListener mmMyLocationListener -> a
    android.net.Uri imageUri -> A
    android.os.Handler mHandler -> B
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    void subMitForm() -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    android.graphics.Bitmap decodeUriAsBitmap(android.net.Uri) -> a
    void Success(int) -> a
    void Failed(int) -> b
    void SessionFailed() -> c
    void onClick(android.view.View) -> onClick
    com.massvig.ecommerce.managers.InsertManager access$0(com.massvig.ecommerce.activities.InsertPost) -> a
    com.massvig.ecommerce.location.LocationManage access$1(com.massvig.ecommerce.activities.InsertPost) -> b
    void access$2$604383d7() -> d
    android.app.ProgressDialog access$3(com.massvig.ecommerce.activities.InsertPost) -> c
    android.widget.EditText access$4(com.massvig.ecommerce.activities.InsertPost) -> d
    com.massvig.ecommerce.activities.BaseApplication access$5(com.massvig.ecommerce.activities.InsertPost) -> e
    android.graphics.Bitmap access$6(com.massvig.ecommerce.activities.InsertPost) -> f
    android.widget.Button access$7(com.massvig.ecommerce.activities.InsertPost) -> g
    com.massvig.ecommerce.widgets.NetImageView access$8(com.massvig.ecommerce.activities.InsertPost) -> h
    com.massvig.ecommerce.activities.InsertPost$SelectPic access$9(com.massvig.ecommerce.activities.InsertPost) -> i
    android.widget.CheckBox access$10(com.massvig.ecommerce.activities.InsertPost) -> j
    android.widget.CheckBox access$11(com.massvig.ecommerce.activities.InsertPost) -> k
    com.tencent.weibo.oauthv2.OAuthV2 access$12(com.massvig.ecommerce.activities.InsertPost) -> l
    android.widget.CheckBox access$13(com.massvig.ecommerce.activities.InsertPost) -> m
    android.widget.Button access$14(com.massvig.ecommerce.activities.InsertPost) -> n
    java.lang.String access$15(com.massvig.ecommerce.activities.InsertPost) -> o
    int access$16(com.massvig.ecommerce.activities.InsertPost) -> p
    void access$17(com.massvig.ecommerce.activities.InsertPost,android.net.Uri) -> a
    void access$18(com.massvig.ecommerce.activities.InsertPost,java.lang.String) -> a
    void access$19(com.massvig.ecommerce.activities.InsertPost,java.lang.String) -> b
    void access$20(com.massvig.ecommerce.activities.InsertPost,int) -> a
    android.widget.TextView access$21(com.massvig.ecommerce.activities.InsertPost) -> q
    java.lang.String access$22(com.massvig.ecommerce.activities.InsertPost) -> r
    java.lang.Boolean access$23(com.massvig.ecommerce.activities.InsertPost) -> s
    java.lang.Boolean access$24(com.massvig.ecommerce.activities.InsertPost) -> t
com.massvig.ecommerce.activities.InsertPost$1 -> com.massvig.ecommerce.activities.dc:
    com.massvig.ecommerce.activities.InsertPost this$0 -> a
    void location(double,double) -> a
    void isAllow(java.lang.Boolean) -> a
    void address(java.lang.String) -> a
com.massvig.ecommerce.activities.InsertPost$2 -> com.massvig.ecommerce.activities.dd:
    com.massvig.ecommerce.activities.InsertPost this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.InsertPost$3 -> com.massvig.ecommerce.activities.de:
    com.massvig.ecommerce.activities.InsertPost this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.massvig.ecommerce.activities.InsertPost$4 -> com.massvig.ecommerce.activities.df:
    com.massvig.ecommerce.activities.InsertPost this$0 -> a
    java.lang.String val$content -> b
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onPreExecute() -> onPreExecute
com.massvig.ecommerce.activities.InsertPost$MMyLocationListener -> com.massvig.ecommerce.activities.dg:
    com.massvig.ecommerce.activities.InsertPost this$0 -> a
    void isAllow(java.lang.Boolean) -> a
    void location(double,double) -> a
    void address(java.lang.String) -> a
com.massvig.ecommerce.activities.InsertPost$MyOnclick -> com.massvig.ecommerce.activities.dh:
    com.massvig.ecommerce.activities.InsertPost this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.InsertPost$SelectPic -> com.massvig.ecommerce.activities.di:
    com.massvig.ecommerce.activities.InsertPost this$0 -> a
    void selectFromSd() -> a
    void selectFormCamera() -> b
    void showDialog() -> c
    void completeFromCamera(android.content.Intent) -> a
    void completeFromSd(android.content.Intent) -> b
com.massvig.ecommerce.activities.InsertPost$SelectPic$1 -> com.massvig.ecommerce.activities.dj:
    com.massvig.ecommerce.activities.InsertPost$SelectPic this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.InsertPost$ShareAsync -> com.massvig.ecommerce.activities.dk:
    com.massvig.ecommerce.activities.InsertPost this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.InvalidProductsActivity -> com.massvig.ecommerce.activities.InvalidProductsActivity:
    com.massvig.ecommerce.entities.ProductList list -> a
    android.widget.ListView listview -> b
    com.massvig.ecommerce.activities.InvalidProductsActivity$GoodsAdapter adapter -> c
    int valid -> d
    int xiajia -> e
    int kucun -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    com.massvig.ecommerce.entities.ProductList access$0(com.massvig.ecommerce.activities.InvalidProductsActivity) -> a
    int access$1(com.massvig.ecommerce.activities.InvalidProductsActivity) -> b
com.massvig.ecommerce.activities.InvalidProductsActivity$1 -> com.massvig.ecommerce.activities.dl:
    com.massvig.ecommerce.activities.InvalidProductsActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.InvalidProductsActivity$GoodsAdapter -> com.massvig.ecommerce.activities.dm:
    android.view.LayoutInflater mInflater -> b
    java.util.ArrayList imageList -> c
    android.graphics.Bitmap shopDefaultImg -> d
    android.content.Context mContext -> e
    com.massvig.ecommerce.activities.InvalidProductsActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.LayoutInflater access$0(com.massvig.ecommerce.activities.InvalidProductsActivity$GoodsAdapter) -> a
    android.content.Context access$1(com.massvig.ecommerce.activities.InvalidProductsActivity$GoodsAdapter) -> b
    android.graphics.Bitmap access$2(com.massvig.ecommerce.activities.InvalidProductsActivity$GoodsAdapter) -> c
    com.massvig.ecommerce.activities.InvalidProductsActivity access$3(com.massvig.ecommerce.activities.InvalidProductsActivity$GoodsAdapter) -> d
com.massvig.ecommerce.activities.InvalidProductsActivity$GoodsAdapter$ViewHolder -> com.massvig.ecommerce.activities.dn:
    com.massvig.ecommerce.widgets.NetImageView image -> b
    android.widget.TextView name -> c
    android.widget.TextView price -> d
    android.widget.TextView text -> e
    android.widget.TextView infor -> f
    com.massvig.ecommerce.widgets.LineTextView realPrice -> g
    android.widget.LinearLayout priceLayout -> h
    android.view.View itemView -> i
    android.widget.TextView commentCount -> j
    com.massvig.ecommerce.activities.InvalidProductsActivity$GoodsAdapter this$1 -> a
    android.view.View getView(int) -> a
    com.massvig.ecommerce.widgets.NetImageView access$0(com.massvig.ecommerce.activities.InvalidProductsActivity$GoodsAdapter$ViewHolder) -> a
com.massvig.ecommerce.activities.LaunchingActivity -> com.massvig.ecommerce.activities.LaunchingActivity:
    com.massvig.ecommerce.activities.BaseApplication app -> b
    android.os.Handler delayCall -> a
    void onCreate(android.os.Bundle) -> onCreate
    void showSoftDialog() -> a
    void downApk() -> b
    void showHardDialog() -> c
    com.massvig.ecommerce.activities.BaseApplication access$0(com.massvig.ecommerce.activities.LaunchingActivity) -> a
    java.lang.String access$1(com.massvig.ecommerce.activities.LaunchingActivity) -> b
    boolean access$2$107edb8c(java.lang.String,java.lang.String) -> a
    void access$3(com.massvig.ecommerce.activities.LaunchingActivity) -> c
com.massvig.ecommerce.activities.LaunchingActivity$1 -> com.massvig.ecommerce.activities.do:
    com.massvig.ecommerce.activities.LaunchingActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.LaunchingActivity$2 -> com.massvig.ecommerce.activities.dp:
    com.massvig.ecommerce.activities.LaunchingActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.LaunchingActivity$3 -> com.massvig.ecommerce.activities.dq:
    com.massvig.ecommerce.activities.LaunchingActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.LaunchingActivity$4 -> com.massvig.ecommerce.activities.dr:
    com.massvig.ecommerce.activities.LaunchingActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.LaunchingActivity$5 -> com.massvig.ecommerce.activities.ds:
    com.massvig.ecommerce.activities.LaunchingActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.LaunchingActivity$checkVersionAsync -> com.massvig.ecommerce.activities.dt:
    com.massvig.ecommerce.activities.LaunchingActivity this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    com.massvig.ecommerce.activities.LaunchingActivity access$3(com.massvig.ecommerce.activities.LaunchingActivity$checkVersionAsync) -> a
com.massvig.ecommerce.activities.LaunchingActivity$checkVersionAsync$1 -> com.massvig.ecommerce.activities.du:
    com.massvig.ecommerce.activities.LaunchingActivity$checkVersionAsync this$1 -> a
    void TimeOutListener() -> a
com.massvig.ecommerce.activities.LoginActivity -> com.massvig.ecommerce.activities.LoginActivity:
    android.widget.EditText username -> a
    android.widget.EditText password -> b
    com.massvig.ecommerce.managers.LoginManager mManager -> c
    android.app.ProgressDialog dialog -> d
    com.massvig.ecommerce.activities.BaseApplication app -> e
    android.os.Handler mHandler -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void start() -> a
    void end() -> c
    void LoginSuccess() -> d
    void LoginFailed() -> e
    void empty() -> f
    void accountErr() -> g
    void GetInfoSuccess() -> h
    void GetInfoFailed() -> i
    com.massvig.ecommerce.managers.LoginManager access$0(com.massvig.ecommerce.activities.LoginActivity) -> a
    android.app.ProgressDialog access$1(com.massvig.ecommerce.activities.LoginActivity) -> b
    com.massvig.ecommerce.activities.BaseApplication access$2(com.massvig.ecommerce.activities.LoginActivity) -> c
    android.widget.EditText access$3(com.massvig.ecommerce.activities.LoginActivity) -> d
    android.widget.EditText access$4(com.massvig.ecommerce.activities.LoginActivity) -> e
    void access$5(com.massvig.ecommerce.activities.LoginActivity) -> f
com.massvig.ecommerce.activities.LoginActivity$1 -> com.massvig.ecommerce.activities.dv:
    com.massvig.ecommerce.activities.LoginActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.LoginActivity$2 -> com.massvig.ecommerce.activities.dw:
    com.massvig.ecommerce.activities.LoginActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.massvig.ecommerce.activities.LogisticsWebViewActivity -> com.massvig.ecommerce.activities.LogisticsWebViewActivity:
    android.webkit.WebView mWebView -> a
    java.lang.String url -> b
    void onCreate(android.os.Bundle) -> onCreate
    java.lang.String access$0(com.massvig.ecommerce.activities.LogisticsWebViewActivity) -> a
    android.webkit.WebView access$1(com.massvig.ecommerce.activities.LogisticsWebViewActivity) -> b
com.massvig.ecommerce.activities.LogisticsWebViewActivity$1 -> com.massvig.ecommerce.activities.dx:
    com.massvig.ecommerce.activities.LogisticsWebViewActivity this$0 -> a
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
com.massvig.ecommerce.activities.LogisticsWebViewActivity$2 -> com.massvig.ecommerce.activities.dy:
    com.massvig.ecommerce.activities.LogisticsWebViewActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.LogisticsWebViewActivity$GetContentAsync -> com.massvig.ecommerce.activities.dz:
    com.massvig.ecommerce.activities.LogisticsWebViewActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.LogisticsWebViewActivity$PutContentAsync -> com.massvig.ecommerce.activities.ea:
    com.massvig.ecommerce.activities.LogisticsWebViewActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.LoveShopActivity -> com.massvig.ecommerce.activities.LoveShopActivity:
    android.app.ProgressDialog dialog -> a
    com.massvig.ecommerce.widgets.TaobaoWaterFall waterfall -> b
    boolean isLoading -> c
    boolean isLoadDone -> d
    com.massvig.ecommerce.activities.BaseApplication app -> e
    java.util.ArrayList items -> f
    int customerID -> g
    int campaignID -> h
    int flag -> i
    android.os.Handler mHandler -> j
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void loadData(int) -> a
    void GoToLogin() -> a
    void onDestroy() -> onDestroy
    com.massvig.ecommerce.activities.BaseApplication access$0(com.massvig.ecommerce.activities.LoveShopActivity) -> a
    com.massvig.ecommerce.widgets.TaobaoWaterFall access$1(com.massvig.ecommerce.activities.LoveShopActivity) -> b
    java.util.ArrayList access$2(com.massvig.ecommerce.activities.LoveShopActivity) -> c
    android.os.Handler access$3(com.massvig.ecommerce.activities.LoveShopActivity) -> d
    boolean access$4(com.massvig.ecommerce.activities.LoveShopActivity) -> e
    boolean access$5(com.massvig.ecommerce.activities.LoveShopActivity) -> f
    void access$6(com.massvig.ecommerce.activities.LoveShopActivity,java.lang.String,int,int) -> a
com.massvig.ecommerce.activities.LoveShopActivity$1 -> com.massvig.ecommerce.activities.eb:
    com.massvig.ecommerce.activities.LoveShopActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.LoveShopActivity$2 -> com.massvig.ecommerce.activities.ec:
    com.massvig.ecommerce.activities.LoveShopActivity this$0 -> a
    void onScrollBottom() -> a
    void onClickItemImage$605d8a5e(com.massvig.ecommerce.widgets.FlowTag) -> a
    void onClickPraise(com.massvig.ecommerce.widgets.FlowTag) -> b
    void onClickShare(com.massvig.ecommerce.widgets.FlowTag) -> c
    void onClickUserImg(com.massvig.ecommerce.widgets.FlowTag) -> d
com.massvig.ecommerce.activities.LoveShopActivity$PraiseAsync -> com.massvig.ecommerce.activities.ed:
    com.massvig.ecommerce.activities.LoveShopActivity this$0 -> a
    java.lang.Void doInBackground(java.lang.String[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.MainActivity -> com.massvig.ecommerce.activities.MainActivity:
    com.massvig.ecommerce.managers.MainActivityManager mManager -> a
    com.massvig.ecommerce.widgets.AdGallery gallery -> b
    android.widget.LinearLayout dotLayout -> c
    com.massvig.ecommerce.activities.MainActivity$MyImageAdapter mImageAdapter -> d
    com.massvig.ecommerce.widgets.ADAdapter adAdapter -> e
    int imageIndex -> f
    java.util.Timer mTimer -> g
    java.util.TimerTask task -> h
    android.widget.EditText edit_content -> i
    com.massvig.ecommerce.utilities.MassVigExit exit -> j
    boolean click -> k
    com.massvig.ecommerce.activities.BaseApplication app -> l
    android.widget.ListView listview -> m
    android.os.Handler mHandler -> n
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onResume() -> onResume
    void onPause() -> onPause
    void setDotImage(int) -> a
    void onClick(android.view.View) -> onClick
    void Success() -> a
    com.massvig.ecommerce.widgets.AdGallery access$0(com.massvig.ecommerce.activities.MainActivity) -> a
    int access$1(com.massvig.ecommerce.activities.MainActivity) -> b
    void access$2(com.massvig.ecommerce.activities.MainActivity,int) -> a
    com.massvig.ecommerce.managers.MainActivityManager access$3(com.massvig.ecommerce.activities.MainActivity) -> c
    android.os.Handler access$4(com.massvig.ecommerce.activities.MainActivity) -> d
com.massvig.ecommerce.activities.MainActivity$1 -> com.massvig.ecommerce.activities.ee:
    com.massvig.ecommerce.activities.MainActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.MainActivity$2 -> com.massvig.ecommerce.activities.ef:
    com.massvig.ecommerce.activities.MainActivity this$0 -> a
    void run() -> run
com.massvig.ecommerce.activities.MainActivity$3 -> com.massvig.ecommerce.activities.eg:
    com.massvig.ecommerce.activities.MainActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.MainActivity$4 -> com.massvig.ecommerce.activities.eh:
    com.massvig.ecommerce.activities.MainActivity this$0 -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
com.massvig.ecommerce.activities.MainActivity$5 -> com.massvig.ecommerce.activities.ei:
    com.massvig.ecommerce.activities.MainActivity this$0 -> a
    java.lang.String[] val$numbers -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.MainActivity$MyImageAdapter -> com.massvig.ecommerce.activities.ej:
    com.massvig.ecommerce.activities.MainActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    java.lang.String getItemUrl(int) -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.massvig.ecommerce.activities.MainTabActivity -> com.massvig.ecommerce.activities.MainTabActivity:
    android.widget.TabHost tabHost -> a
    android.widget.Button tab1 -> b
    android.widget.Button tab2 -> c
    android.widget.Button tab3 -> d
    android.widget.Button tab4 -> e
    android.widget.Button tab5 -> f
    android.widget.LinearLayout tabHostLayout -> g
    int tabindex -> h
    com.massvig.ecommerce.activities.BaseApplication app -> i
    android.widget.TextView total -> j
    void onCreate(android.os.Bundle) -> onCreate
    void setTotal(int) -> a
    void setBottomGone() -> a
    void setBottomVisible() -> b
    void setTabHostIndex(int) -> b
    void onClick(android.view.View) -> onClick
    android.widget.TextView access$0(com.massvig.ecommerce.activities.MainTabActivity) -> a
    com.massvig.ecommerce.activities.BaseApplication access$1(com.massvig.ecommerce.activities.MainTabActivity) -> b
com.massvig.ecommerce.activities.MainTabActivity$GetCountAsync -> com.massvig.ecommerce.activities.ek:
    com.massvig.ecommerce.activities.MainTabActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Integer doInBackground$5cbeabcf() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.ManageAddressActivity -> com.massvig.ecommerce.activities.ManageAddressActivity:
    com.massvig.ecommerce.managers.AddressManager mManager -> a
    android.widget.ListView listView -> b
    android.view.LayoutInflater mInflater -> c
    com.massvig.ecommerce.activities.ManageAddressActivity$AddressAdapter mAdapter -> d
    com.massvig.ecommerce.activities.BaseApplication app -> e
    int tempID -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onClick(android.view.View) -> onClick
    void Success(int) -> a
    void Failed(int) -> b
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void SessionidFail() -> a
    com.massvig.ecommerce.managers.AddressManager access$0(com.massvig.ecommerce.activities.ManageAddressActivity) -> a
    android.view.LayoutInflater access$1(com.massvig.ecommerce.activities.ManageAddressActivity) -> b
    void access$2(com.massvig.ecommerce.activities.ManageAddressActivity,int) -> a
com.massvig.ecommerce.activities.ManageAddressActivity$1 -> com.massvig.ecommerce.activities.el:
    com.massvig.ecommerce.activities.ManageAddressActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.ManageAddressActivity$AddressAdapter -> com.massvig.ecommerce.activities.em:
    com.massvig.ecommerce.activities.ManageAddressActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.massvig.ecommerce.activities.ManageAddressActivity$AddressAdapter$ViewHolder -> com.massvig.ecommerce.activities.en:
    android.widget.TextView userName -> a
    android.widget.TextView detailText -> b
    com.massvig.ecommerce.activities.ManageAddressActivity$AddressAdapter this$1 -> c
com.massvig.ecommerce.activities.ManageCouponActivity -> com.massvig.ecommerce.activities.ManageCouponActivity:
    android.app.ProgressDialog dialog -> b
    com.massvig.ecommerce.widgets.AdGallery gallery -> c
    android.widget.ListView listview -> d
    com.massvig.ecommerce.entities.CouponList couponList -> e
    com.massvig.ecommerce.entities.CouponList tempList -> f
    com.massvig.ecommerce.activities.ManageCouponActivity$CouponAdapter mAdapter -> g
    android.view.LayoutInflater mInflater -> h
    boolean isLoaddone -> i
    com.massvig.ecommerce.activities.BaseApplication app -> j
    android.widget.EditText coupon_number -> k
    int delete_position -> l
    boolean isEdit -> m
    com.massvig.ecommerce.activities.ManageCouponActivity$MyImageAdapter mImageAdapter -> n
    java.util.ArrayList imageItemsList -> a
    int width -> o
    int height -> p
    android.os.Handler mHandler -> q
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onClick(android.view.View) -> onClick
    com.massvig.ecommerce.activities.BaseApplication access$0(com.massvig.ecommerce.activities.ManageCouponActivity) -> a
    com.massvig.ecommerce.entities.CouponList access$1(com.massvig.ecommerce.activities.ManageCouponActivity) -> b
    com.massvig.ecommerce.widgets.AdGallery access$2(com.massvig.ecommerce.activities.ManageCouponActivity) -> c
    com.massvig.ecommerce.activities.ManageCouponActivity$MyImageAdapter access$3(com.massvig.ecommerce.activities.ManageCouponActivity) -> d
    int access$4(com.massvig.ecommerce.activities.ManageCouponActivity) -> e
    int access$5(com.massvig.ecommerce.activities.ManageCouponActivity) -> f
    android.view.LayoutInflater access$6(com.massvig.ecommerce.activities.ManageCouponActivity) -> g
    boolean access$7(com.massvig.ecommerce.activities.ManageCouponActivity) -> h
    void access$8(com.massvig.ecommerce.activities.ManageCouponActivity,int) -> a
    android.app.ProgressDialog access$9(com.massvig.ecommerce.activities.ManageCouponActivity) -> i
    com.massvig.ecommerce.entities.CouponList access$10(com.massvig.ecommerce.activities.ManageCouponActivity) -> j
    com.massvig.ecommerce.activities.ManageCouponActivity$CouponAdapter access$11(com.massvig.ecommerce.activities.ManageCouponActivity) -> k
    void access$12$5e3c4008(com.massvig.ecommerce.activities.ManageCouponActivity) -> l
    android.os.Handler access$13(com.massvig.ecommerce.activities.ManageCouponActivity) -> m
    int access$14(com.massvig.ecommerce.activities.ManageCouponActivity) -> n
com.massvig.ecommerce.activities.ManageCouponActivity$1 -> com.massvig.ecommerce.activities.eo:
    com.massvig.ecommerce.activities.ManageCouponActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.ManageCouponActivity$2 -> com.massvig.ecommerce.activities.ep:
    com.massvig.ecommerce.activities.ManageCouponActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.ManageCouponActivity$CouponAdapter -> com.massvig.ecommerce.activities.eq:
    com.massvig.ecommerce.activities.ManageCouponActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    com.massvig.ecommerce.activities.ManageCouponActivity access$0(com.massvig.ecommerce.activities.ManageCouponActivity$CouponAdapter) -> a
com.massvig.ecommerce.activities.ManageCouponActivity$CouponAdapter$ViewHolder -> com.massvig.ecommerce.activities.er:
    android.view.View itemView -> b
    android.widget.Button delete -> c
    android.widget.TextView title -> d
    android.widget.TextView time -> e
    android.widget.TextView price -> f
    android.widget.TextView status -> g
    com.massvig.ecommerce.activities.ManageCouponActivity$CouponAdapter this$1 -> a
    android.view.View getView(int) -> a
com.massvig.ecommerce.activities.ManageCouponActivity$CouponAdapter$ViewHolder$1 -> com.massvig.ecommerce.activities.es:
    com.massvig.ecommerce.activities.ManageCouponActivity$CouponAdapter$ViewHolder this$2 -> a
    int val$position -> b
    com.massvig.ecommerce.entities.Coupon val$c -> c
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.ManageCouponActivity$CreateAsync -> com.massvig.ecommerce.activities.et:
    com.massvig.ecommerce.activities.ManageCouponActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Boolean doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.ManageCouponActivity$CreateNewCoupon -> com.massvig.ecommerce.activities.eu:
    com.massvig.ecommerce.activities.ManageCouponActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.ManageCouponActivity$DeleteAsync -> com.massvig.ecommerce.activities.ev:
    com.massvig.ecommerce.activities.ManageCouponActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Boolean doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.ManageCouponActivity$GetCouponAsync -> com.massvig.ecommerce.activities.ew:
    com.massvig.ecommerce.activities.ManageCouponActivity this$0 -> a
    com.massvig.ecommerce.entities.AdItem ItemAnaly(org.json.JSONObject) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.ManageCouponActivity$LoadDataAsync -> com.massvig.ecommerce.activities.ex:
    com.massvig.ecommerce.activities.ManageCouponActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.ManageCouponActivity$MyImageAdapter -> com.massvig.ecommerce.activities.ey:
    com.massvig.ecommerce.activities.ManageCouponActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    java.lang.String getItemUrl(int) -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.massvig.ecommerce.activities.ManageOrderActivity -> com.massvig.ecommerce.activities.ManageOrderActivity:
    com.massvig.ecommerce.activities.BaseApplication app -> a
    com.massvig.ecommerce.managers.OrdersManager mManager -> b
    android.view.animation.TranslateAnimation mAnimation -> c
    android.widget.ImageView m_ivMove -> d
    android.support.v4.view.ViewPager mViewPager -> e
    android.view.LayoutInflater mInflater -> f
    android.view.View view1 -> g
    android.view.View view2 -> h
    android.view.View view3 -> i
    android.view.View view4 -> j
    com.massvig.ecommerce.widgets.RefreshListView listview1 -> k
    com.massvig.ecommerce.widgets.RefreshListView listview2 -> l
    com.massvig.ecommerce.widgets.RefreshListView listview3 -> m
    com.massvig.ecommerce.widgets.RefreshListView listview4 -> n
    com.massvig.ecommerce.widgets.OrderAdapter adapter1 -> o
    com.massvig.ecommerce.widgets.OrderAdapter adapter2 -> p
    com.massvig.ecommerce.widgets.OrderAdapter adapter3 -> q
    com.massvig.ecommerce.widgets.OrderAdapter adapter4 -> r
    int orderTab -> s
    int tabs -> t
    boolean isScolling -> u
    boolean isLoadingMore -> v
    android.widget.LinearLayout nodata -> w
    android.os.Handler mHandler -> x
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void initListView(com.massvig.ecommerce.widgets.RefreshListView,com.massvig.ecommerce.widgets.OrderAdapter) -> a
    void tabClickListener(int) -> c
    void onClick(android.view.View) -> onClick
    void LoadSuccess(int) -> a
    void LoadFailed(int) -> b
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    boolean access$0(com.massvig.ecommerce.activities.ManageOrderActivity) -> a
    com.massvig.ecommerce.widgets.RefreshListView access$1(com.massvig.ecommerce.activities.ManageOrderActivity) -> b
    com.massvig.ecommerce.managers.OrdersManager access$2(com.massvig.ecommerce.activities.ManageOrderActivity) -> c
    com.massvig.ecommerce.widgets.OrderAdapter access$3(com.massvig.ecommerce.activities.ManageOrderActivity) -> d
    android.widget.LinearLayout access$4(com.massvig.ecommerce.activities.ManageOrderActivity) -> e
    com.massvig.ecommerce.widgets.RefreshListView access$5(com.massvig.ecommerce.activities.ManageOrderActivity) -> f
    com.massvig.ecommerce.widgets.OrderAdapter access$6(com.massvig.ecommerce.activities.ManageOrderActivity) -> g
    com.massvig.ecommerce.widgets.RefreshListView access$7(com.massvig.ecommerce.activities.ManageOrderActivity) -> h
    com.massvig.ecommerce.widgets.OrderAdapter access$8(com.massvig.ecommerce.activities.ManageOrderActivity) -> i
    com.massvig.ecommerce.widgets.RefreshListView access$9(com.massvig.ecommerce.activities.ManageOrderActivity) -> j
    com.massvig.ecommerce.widgets.OrderAdapter access$10(com.massvig.ecommerce.activities.ManageOrderActivity) -> k
    void access$11(com.massvig.ecommerce.activities.ManageOrderActivity) -> l
    com.massvig.ecommerce.activities.BaseApplication access$12(com.massvig.ecommerce.activities.ManageOrderActivity) -> m
    void access$13(com.massvig.ecommerce.activities.ManageOrderActivity,int) -> a
    int access$14(com.massvig.ecommerce.activities.ManageOrderActivity) -> n
    void access$15(com.massvig.ecommerce.activities.ManageOrderActivity) -> o
    void access$16(com.massvig.ecommerce.activities.ManageOrderActivity,boolean) -> a
    void access$17(com.massvig.ecommerce.activities.ManageOrderActivity,boolean) -> b
    boolean access$18(com.massvig.ecommerce.activities.ManageOrderActivity) -> p
com.massvig.ecommerce.activities.ManageOrderActivity$1 -> com.massvig.ecommerce.activities.ez:
    com.massvig.ecommerce.activities.ManageOrderActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.ManageOrderActivity$2 -> com.massvig.ecommerce.activities.fa:
    com.massvig.ecommerce.activities.ManageOrderActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.ManageOrderActivity$3 -> com.massvig.ecommerce.activities.fb:
    com.massvig.ecommerce.activities.ManageOrderActivity this$0 -> a
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    com.massvig.ecommerce.activities.ManageOrderActivity access$0(com.massvig.ecommerce.activities.ManageOrderActivity$3) -> a
com.massvig.ecommerce.activities.ManageOrderActivity$3$1 -> com.massvig.ecommerce.activities.fc:
    com.massvig.ecommerce.activities.ManageOrderActivity$3 this$1 -> a
    int val$position -> b
    void onClick(android.content.DialogInterface,int) -> onClick
    com.massvig.ecommerce.activities.ManageOrderActivity$3 access$0(com.massvig.ecommerce.activities.ManageOrderActivity$3$1) -> a
com.massvig.ecommerce.activities.ManageOrderActivity$3$1$1 -> com.massvig.ecommerce.activities.fd:
    com.massvig.ecommerce.activities.ManageOrderActivity$3$1 this$2 -> a
    int val$position -> b
    void Success(int) -> a
    void Failed(int) -> b
    void Payment(java.lang.String) -> a
    void SessionFailed() -> a
com.massvig.ecommerce.activities.ManageOrderActivity$4 -> com.massvig.ecommerce.activities.fe:
    com.massvig.ecommerce.activities.ManageOrderActivity this$0 -> a
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    int getCount() -> a
    void destroyItem$7e55ba3e(android.view.View,int) -> b
com.massvig.ecommerce.activities.ManageOrderActivity$5 -> com.massvig.ecommerce.activities.ff:
    com.massvig.ecommerce.activities.ManageOrderActivity this$0 -> a
    void onPageSelected(int) -> a
com.massvig.ecommerce.activities.ManageOrderActivity$6 -> com.massvig.ecommerce.activities.fg:
    com.massvig.ecommerce.activities.ManageOrderActivity this$0 -> a
    com.massvig.ecommerce.widgets.OrderAdapter val$adapter32 -> b
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.ManageOrderActivity$7 -> com.massvig.ecommerce.activities.fh:
    com.massvig.ecommerce.activities.ManageOrderActivity this$0 -> a
    com.massvig.ecommerce.widgets.OrderAdapter val$adapter32 -> b
    void startRefresh() -> a
    void startLoadMore() -> b
    void scrollStop() -> c
    void scrollStart() -> d
com.massvig.ecommerce.activities.ManageOrderActivity$8 -> com.massvig.ecommerce.activities.fi:
    com.massvig.ecommerce.activities.ManageOrderActivity this$0 -> a
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
com.massvig.ecommerce.activities.MessagesActivity -> com.massvig.ecommerce.activities.MessagesActivity:
    android.widget.ListView listview -> a
    com.massvig.ecommerce.widgets.MessageAdapter adapter -> b
    com.massvig.ecommerce.managers.MessageManager manager -> c
    com.massvig.ecommerce.activities.BaseApplication app -> d
    android.widget.LinearLayout nodata -> e
    android.os.Handler mHandler -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onClick(android.view.View) -> onClick
    void LoadSuccess(int) -> a
    void LoadFailed$13462e() -> a
com.massvig.ecommerce.activities.MessagesActivity$1 -> com.massvig.ecommerce.activities.fj:
    com.massvig.ecommerce.activities.MessagesActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.ModifyActivity -> com.massvig.ecommerce.activities.ModifyActivity:
    com.massvig.ecommerce.activities.BaseApplication app -> a
    int flag -> b
    java.util.Timer timer -> c
    java.util.TimerTask task -> d
    boolean timeout -> e
    int timeCount -> f
    com.massvig.ecommerce.managers.ModifyManager mManager -> g
    android.view.View view1 -> h
    android.view.View view2 -> i
    int index -> j
    android.app.ProgressDialog dialog -> k
    android.widget.TextView title -> l
    android.widget.Button finish -> m
    java.lang.String name -> n
    java.lang.String codeText -> o
    android.widget.EditText username1 -> p
    android.widget.EditText code -> q
    android.widget.TextView mobile -> r
    android.widget.TextView send -> s
    android.os.Handler mHandler -> t
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void start(int) -> a
    void end(int) -> b
    void Success(int) -> c
    void Failed(int) -> d
    void empty() -> a
    void accountErr() -> c
    void timeDecrease() -> d
    void onResume() -> onResume
    void onPause() -> onPause
    void alreadyExit() -> e
    android.app.ProgressDialog access$0(com.massvig.ecommerce.activities.ModifyActivity) -> a
    boolean access$1(com.massvig.ecommerce.activities.ModifyActivity) -> b
    void access$2(com.massvig.ecommerce.activities.ModifyActivity,boolean) -> a
    void access$3(com.massvig.ecommerce.activities.ModifyActivity,int) -> a
    android.widget.TextView access$4(com.massvig.ecommerce.activities.ModifyActivity) -> c
    android.view.View access$5(com.massvig.ecommerce.activities.ModifyActivity) -> d
    android.view.View access$6(com.massvig.ecommerce.activities.ModifyActivity) -> e
    android.widget.TextView access$7(com.massvig.ecommerce.activities.ModifyActivity) -> f
    android.widget.Button access$8(com.massvig.ecommerce.activities.ModifyActivity) -> g
    void access$9$213b7df6(com.massvig.ecommerce.activities.ModifyActivity) -> h
    android.widget.TextView access$10(com.massvig.ecommerce.activities.ModifyActivity) -> i
    android.widget.EditText access$11(com.massvig.ecommerce.activities.ModifyActivity) -> j
    java.util.TimerTask access$12(com.massvig.ecommerce.activities.ModifyActivity) -> k
    int access$13(com.massvig.ecommerce.activities.ModifyActivity) -> l
    android.os.Handler access$14(com.massvig.ecommerce.activities.ModifyActivity) -> m
com.massvig.ecommerce.activities.ModifyActivity$1 -> com.massvig.ecommerce.activities.fk:
    com.massvig.ecommerce.activities.ModifyActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.ModifyActivity$2 -> com.massvig.ecommerce.activities.fl:
    com.massvig.ecommerce.activities.ModifyActivity this$0 -> a
    void onTick(long) -> onTick
    void onFinish() -> onFinish
com.massvig.ecommerce.activities.ModifyUserInfoActivity -> com.massvig.ecommerce.activities.ModifyUserInfoActivity:
    com.massvig.ecommerce.managers.UserInfoManager manager -> a
    com.massvig.ecommerce.activities.BaseApplication app -> b
    com.massvig.ecommerce.widgets.NetImageView headImg -> c
    android.widget.ImageView head -> d
    android.graphics.Bitmap myBitmap -> e
    boolean isOriginalPic -> f
    android.widget.EditText username -> g
    android.graphics.drawable.Drawable drawable -> h
    android.graphics.drawable.Drawable drawable_uncheck -> i
    android.app.ProgressDialog dialog -> j
    android.widget.TextView man -> k
    android.widget.TextView woman -> l
    android.widget.TextView mobile -> m
    android.widget.TextView email -> n
    android.widget.TextView modify_email -> o
    android.widget.TextView modify_mobile -> p
    android.net.Uri imageUri -> q
    android.os.Handler mHandler -> r
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onResume() -> onResume
    void onClick(android.view.View) -> onClick
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    android.graphics.Bitmap decodeUriAsBitmap(android.net.Uri) -> a
    void Success(int) -> a
    void Failed(int) -> b
    void SessionFailed() -> a
    void Dialog(boolean) -> a
    void LoadData(com.massvig.ecommerce.managers.UserInfoManager$Numbers) -> a
    void NickName() -> c
    android.app.ProgressDialog access$0(com.massvig.ecommerce.activities.ModifyUserInfoActivity) -> a
    com.massvig.ecommerce.managers.UserInfoManager access$1(com.massvig.ecommerce.activities.ModifyUserInfoActivity) -> b
com.massvig.ecommerce.activities.ModifyUserInfoActivity$1 -> com.massvig.ecommerce.activities.fm:
    com.massvig.ecommerce.activities.ModifyUserInfoActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.ModifyUserInfoActivity$2 -> com.massvig.ecommerce.activities.fn:
    com.massvig.ecommerce.activities.ModifyUserInfoActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.ModifyUserInfoActivity$3 -> com.massvig.ecommerce.activities.fo:
    com.massvig.ecommerce.activities.ModifyUserInfoActivity this$0 -> a
    android.app.AlertDialog val$dialog -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.ModifyUserInfoActivity$4 -> com.massvig.ecommerce.activities.fp:
    com.massvig.ecommerce.activities.ModifyUserInfoActivity this$0 -> a
    android.widget.EditText val$ori_psd -> b
    android.widget.EditText val$new_psd -> c
    android.widget.EditText val$conf_psd -> d
    android.app.AlertDialog val$dialog -> e
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.NearPersonAcvitity -> com.massvig.ecommerce.activities.NearPersonAcvitity:
    com.massvig.ecommerce.widgets.NearRefreshListView listView -> c
    boolean isScrolling -> d
    boolean isLoadingMore -> e
    com.massvig.ecommerce.managers.NearPersonManager manager -> f
    com.massvig.ecommerce.widgets.NearPersonAdapter adapter -> g
    com.massvig.ecommerce.activities.BaseApplication app -> h
    com.massvig.ecommerce.location.LocationManage mLocationManage -> a
    com.massvig.ecommerce.utilities.MassVigExit exit -> i
    com.massvig.ecommerce.location.LocationManage$MyLocationListener mmMyLocationListener -> b
    android.os.Handler mHandler -> j
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onResume() -> onResume
    void initLocation() -> d
    void onClick(android.view.View) -> onClick
    void LoadSuccess$13462e() -> a
    void SessionVailed() -> c
    com.massvig.ecommerce.managers.NearPersonManager access$0(com.massvig.ecommerce.activities.NearPersonAcvitity) -> a
    void access$1(com.massvig.ecommerce.activities.NearPersonAcvitity,boolean) -> a
    com.massvig.ecommerce.activities.BaseApplication access$2(com.massvig.ecommerce.activities.NearPersonAcvitity) -> b
    boolean access$3(com.massvig.ecommerce.activities.NearPersonAcvitity) -> c
    com.massvig.ecommerce.widgets.NearRefreshListView access$4(com.massvig.ecommerce.activities.NearPersonAcvitity) -> d
    com.massvig.ecommerce.widgets.NearPersonAdapter access$5(com.massvig.ecommerce.activities.NearPersonAcvitity) -> e
    void access$6(com.massvig.ecommerce.activities.NearPersonAcvitity) -> f
    void access$7(com.massvig.ecommerce.activities.NearPersonAcvitity,boolean) -> b
    boolean access$8(com.massvig.ecommerce.activities.NearPersonAcvitity) -> g
com.massvig.ecommerce.activities.NearPersonAcvitity$1 -> com.massvig.ecommerce.activities.fq:
    com.massvig.ecommerce.activities.NearPersonAcvitity this$0 -> a
    void location(double,double) -> a
    void isAllow(java.lang.Boolean) -> a
    void address(java.lang.String) -> a
com.massvig.ecommerce.activities.NearPersonAcvitity$2 -> com.massvig.ecommerce.activities.fr:
    com.massvig.ecommerce.activities.NearPersonAcvitity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.NearPersonAcvitity$3 -> com.massvig.ecommerce.activities.fs:
    com.massvig.ecommerce.activities.NearPersonAcvitity this$0 -> a
    void startRefresh() -> a
    void startLoadMore() -> b
    void scrollStop() -> c
    void scrollStart() -> d
com.massvig.ecommerce.activities.NearPersonAcvitity$4 -> com.massvig.ecommerce.activities.ft:
    com.massvig.ecommerce.activities.NearPersonAcvitity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.NewActionDetailActivity -> com.massvig.ecommerce.activities.NewActionDetailActivity:
    android.widget.TextView title -> a
    android.widget.TextView text -> b
    android.widget.GridView grid -> c
    android.widget.SlidingDrawer drawer -> d
    android.widget.ListView category -> e
    android.widget.LinearLayout background -> f
    com.massvig.ecommerce.widgets.NewActionAdapter mAdapter -> g
    com.massvig.ecommerce.entities.GoodsList goodsList -> h
    com.massvig.ecommerce.entities.GoodsList tempList -> i
    boolean isScolling -> j
    boolean isLoading -> k
    boolean isLoaddone -> l
    int orderby -> m
    java.lang.String mcids -> n
    java.lang.String minPrice -> o
    java.lang.String maxPrice -> p
    org.json.JSONArray cateGoryData -> q
    android.view.LayoutInflater mInflater -> r
    android.app.ProgressDialog dialog -> s
    android.widget.ScrollView scroll -> t
    java.util.Timer timer -> u
    java.util.TimerTask task -> v
    int height -> w
    int y -> x
    android.os.Handler mHandler -> y
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    void onResume() -> onResume
    org.json.JSONArray getCategory() -> c
    void onClick(android.view.View) -> onClick
    android.graphics.Bitmap getBitmapFromView() -> a
    android.widget.ScrollView access$0(com.massvig.ecommerce.activities.NewActionDetailActivity) -> a
    int access$1(com.massvig.ecommerce.activities.NewActionDetailActivity) -> b
    android.widget.LinearLayout access$2(com.massvig.ecommerce.activities.NewActionDetailActivity) -> c
    boolean access$3(com.massvig.ecommerce.activities.NewActionDetailActivity) -> d
    boolean access$4(com.massvig.ecommerce.activities.NewActionDetailActivity) -> e
    org.json.JSONArray access$5(com.massvig.ecommerce.activities.NewActionDetailActivity) -> f
    android.view.LayoutInflater access$6(com.massvig.ecommerce.activities.NewActionDetailActivity) -> g
    void access$7(com.massvig.ecommerce.activities.NewActionDetailActivity,boolean) -> a
    com.massvig.ecommerce.entities.GoodsList access$8(com.massvig.ecommerce.activities.NewActionDetailActivity) -> h
    com.massvig.ecommerce.entities.GoodsList access$9(com.massvig.ecommerce.activities.NewActionDetailActivity) -> i
    android.widget.GridView access$10(com.massvig.ecommerce.activities.NewActionDetailActivity) -> j
    com.massvig.ecommerce.widgets.NewActionAdapter access$11(com.massvig.ecommerce.activities.NewActionDetailActivity) -> k
    java.lang.String access$12(com.massvig.ecommerce.activities.NewActionDetailActivity) -> l
    java.lang.String access$13(com.massvig.ecommerce.activities.NewActionDetailActivity) -> m
    java.lang.String access$14(com.massvig.ecommerce.activities.NewActionDetailActivity) -> n
    int access$15(com.massvig.ecommerce.activities.NewActionDetailActivity) -> o
    void access$16$20dde0f0(com.massvig.ecommerce.activities.NewActionDetailActivity) -> p
    android.os.Handler access$17(com.massvig.ecommerce.activities.NewActionDetailActivity) -> q
    void access$18(com.massvig.ecommerce.activities.NewActionDetailActivity,boolean) -> b
    boolean access$19(com.massvig.ecommerce.activities.NewActionDetailActivity) -> r
    void access$20(com.massvig.ecommerce.activities.NewActionDetailActivity,java.lang.String) -> a
    android.widget.SlidingDrawer access$21(com.massvig.ecommerce.activities.NewActionDetailActivity) -> s
com.massvig.ecommerce.activities.NewActionDetailActivity$1 -> com.massvig.ecommerce.activities.fu:
    com.massvig.ecommerce.activities.NewActionDetailActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.NewActionDetailActivity$2 -> com.massvig.ecommerce.activities.fv:
    com.massvig.ecommerce.activities.NewActionDetailActivity this$0 -> a
    void run() -> run
com.massvig.ecommerce.activities.NewActionDetailActivity$3 -> com.massvig.ecommerce.activities.fw:
    com.massvig.ecommerce.activities.NewActionDetailActivity this$0 -> a
    void run() -> run
com.massvig.ecommerce.activities.NewActionDetailActivity$4 -> com.massvig.ecommerce.activities.fx:
    com.massvig.ecommerce.activities.NewActionDetailActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.NewActionDetailActivity$5 -> com.massvig.ecommerce.activities.fy:
    com.massvig.ecommerce.activities.NewActionDetailActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.massvig.ecommerce.activities.NewActionDetailActivity$6 -> com.massvig.ecommerce.activities.fz:
    com.massvig.ecommerce.activities.NewActionDetailActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.NewActionDetailActivity$LoadDataAsync -> com.massvig.ecommerce.activities.ga:
    com.massvig.ecommerce.activities.NewActionDetailActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.NewActionDetailActivity$LoadNumberAsync -> com.massvig.ecommerce.activities.gb:
    com.massvig.ecommerce.activities.NewActionDetailActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.NewActionDetailActivity$MyListAdapter -> com.massvig.ecommerce.activities.gc:
    com.massvig.ecommerce.activities.NewActionDetailActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.massvig.ecommerce.activities.NewActionDetailActivity$MyListAdapter$ViewHolder -> com.massvig.ecommerce.activities.gd:
    android.widget.TextView name -> a
    com.massvig.ecommerce.activities.NewActionDetailActivity$MyListAdapter this$1 -> b
com.massvig.ecommerce.activities.OrderConfirmActivity -> com.massvig.ecommerce.activities.OrderConfirmActivity:
    com.massvig.ecommerce.managers.OrderManager manager -> c
    java.lang.String prices -> d
    com.massvig.ecommerce.activities.BaseApplication app -> e
    android.widget.TextView username -> f
    android.widget.TextView address -> g
    android.widget.TextView mobile -> h
    android.widget.TextView zipcode -> i
    android.widget.TextView coupon -> j
    android.widget.TextView paytype -> k
    android.widget.TextView carriage -> l
    android.widget.TextView bill -> m
    android.widget.TextView price -> n
    android.widget.TextView info -> o
    android.widget.TextView realpay -> p
    android.widget.TextView saved -> q
    android.widget.TextView defaultText -> r
    android.widget.TextView express -> s
    android.widget.LinearLayout addressLayout -> t
    android.app.ProgressDialog mDialog -> u
    com.massvig.ecommerce.service.MassVigOnlinePaymentService pay -> v
    boolean isUnionPaying -> w
    android.widget.ListView layout -> x
    android.view.LayoutInflater mInflater -> y
    java.lang.String ids -> z
    java.lang.String quantities -> A
    float totalMoney -> a
    float PromotionDiscount -> b
    boolean isHuodao -> B
    com.massvig.ecommerce.widgets.OrderItemAdapter adapter -> C
    java.util.ArrayList pList -> D
    com.massvig.ecommerce.entities.ProductList pl -> E
    android.widget.ScrollView scroll -> F
    android.os.Handler handler -> G
    java.util.ArrayList expressageList -> H
    android.os.Handler mHandler -> I
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void initAddressLayout(com.massvig.ecommerce.entities.Address) -> a
    void onClick(android.view.View) -> onClick
    void getOrderPromotion() -> c
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void GoToLogin() -> d
    void Success(int) -> a
    void SetInfoText() -> g
    void Failed(int) -> b
    void paySuccess() -> e
    void orderDoneSuccess(int,java.lang.String) -> a
    void orderDoneFailed(java.lang.String) -> b
    void Payment(java.lang.String) -> a
    void initPayText() -> h
    com.massvig.ecommerce.entities.Product GiftAnalyse(org.json.JSONObject) -> a
    void SessionFailed() -> a
    void sessionFailed() -> f
    void orderdoneFailed(java.lang.String) -> c
    android.widget.ScrollView access$0(com.massvig.ecommerce.activities.OrderConfirmActivity) -> a
    android.app.ProgressDialog access$1(com.massvig.ecommerce.activities.OrderConfirmActivity) -> b
    com.massvig.ecommerce.managers.OrderManager access$2(com.massvig.ecommerce.activities.OrderConfirmActivity) -> c
    com.massvig.ecommerce.service.MassVigOnlinePaymentService access$3(com.massvig.ecommerce.activities.OrderConfirmActivity) -> d
    java.util.ArrayList access$4(com.massvig.ecommerce.activities.OrderConfirmActivity) -> e
    com.massvig.ecommerce.activities.BaseApplication access$5(com.massvig.ecommerce.activities.OrderConfirmActivity) -> f
    java.lang.String access$6(com.massvig.ecommerce.activities.OrderConfirmActivity) -> g
    java.lang.String access$7(com.massvig.ecommerce.activities.OrderConfirmActivity) -> h
    android.widget.ListView access$8(com.massvig.ecommerce.activities.OrderConfirmActivity) -> i
    com.massvig.ecommerce.widgets.OrderItemAdapter access$9(com.massvig.ecommerce.activities.OrderConfirmActivity) -> j
    void access$10(com.massvig.ecommerce.activities.OrderConfirmActivity) -> k
    java.util.ArrayList access$11(com.massvig.ecommerce.activities.OrderConfirmActivity) -> l
    void access$12(com.massvig.ecommerce.activities.OrderConfirmActivity,java.util.ArrayList) -> a
    android.widget.TextView access$13(com.massvig.ecommerce.activities.OrderConfirmActivity) -> m
    android.widget.TextView access$14(com.massvig.ecommerce.activities.OrderConfirmActivity) -> n
    void access$15(com.massvig.ecommerce.activities.OrderConfirmActivity,boolean) -> a
    boolean access$16(com.massvig.ecommerce.activities.OrderConfirmActivity) -> o
com.massvig.ecommerce.activities.OrderConfirmActivity$1 -> com.massvig.ecommerce.activities.ge:
    com.massvig.ecommerce.activities.OrderConfirmActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.OrderConfirmActivity$1UnionPayResultHandler -> com.massvig.ecommerce.activities.gf:
    java.lang.String content -> c
    java.lang.String resultString -> a
    com.massvig.ecommerce.activities.OrderConfirmActivity this$0 -> b
    void characters(char[],int,int) -> characters
    void startDocument() -> startDocument
    void endDocument() -> endDocument
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void endPrefixMapping(java.lang.String) -> endPrefixMapping
    void ignorableWhitespace(char[],int,int) -> ignorableWhitespace
    void processingInstruction(java.lang.String,java.lang.String) -> processingInstruction
    void setDocumentLocator(org.xml.sax.Locator) -> setDocumentLocator
    void skippedEntity(java.lang.String) -> skippedEntity
    void startPrefixMapping(java.lang.String,java.lang.String) -> startPrefixMapping
com.massvig.ecommerce.activities.OrderConfirmActivity$2 -> com.massvig.ecommerce.activities.gg:
    com.massvig.ecommerce.activities.OrderConfirmActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.OrderConfirmActivity$3 -> com.massvig.ecommerce.activities.gh:
    com.massvig.ecommerce.activities.OrderConfirmActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.OrderConfirmActivity$Expressage -> com.massvig.ecommerce.activities.gi:
    int expressage -> a
    java.lang.String name -> b
    com.massvig.ecommerce.activities.OrderConfirmActivity this$0 -> c
com.massvig.ecommerce.activities.OrderConfirmActivity$OrderPromotionAsync -> com.massvig.ecommerce.activities.gj:
    com.massvig.ecommerce.activities.OrderConfirmActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Integer doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.OrderConfirmActivity$alipayAsync -> com.massvig.ecommerce.activities.gk:
    com.massvig.ecommerce.service.MassVigOnlinePaymentService pay -> b
    com.massvig.ecommerce.activities.OrderConfirmActivity this$0 -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.OrderConfirmActivity$getExpressAsync -> com.massvig.ecommerce.activities.gl:
    com.massvig.ecommerce.activities.OrderConfirmActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Integer doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.OrderConfirmActivity$huodaoAsync -> com.massvig.ecommerce.activities.gm:
    com.massvig.ecommerce.activities.OrderConfirmActivity this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.OrderConfirmActivity$realipayAsync -> com.massvig.ecommerce.activities.gn:
    com.massvig.ecommerce.service.MassVigOnlinePaymentService pay -> b
    com.massvig.ecommerce.activities.OrderConfirmActivity this$0 -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.OrderConfirmActivity$realiwebpayAsync -> com.massvig.ecommerce.activities.go:
    com.massvig.ecommerce.service.MassVigOnlinePaymentService pay -> b
    com.massvig.ecommerce.activities.OrderConfirmActivity this$0 -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.OrderConfirmActivity$rehuodaoAsync -> com.massvig.ecommerce.activities.gp:
    com.massvig.ecommerce.activities.OrderConfirmActivity this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.OrderConfirmActivity$reunionpayAsync -> com.massvig.ecommerce.activities.gq:
    com.massvig.ecommerce.service.MassVigOnlinePaymentService pay -> b
    com.massvig.ecommerce.activities.OrderConfirmActivity this$0 -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.OrderConfirmActivity$unionpayAsync -> com.massvig.ecommerce.activities.gr:
    com.massvig.ecommerce.service.MassVigOnlinePaymentService pay -> b
    com.massvig.ecommerce.activities.OrderConfirmActivity this$0 -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.OrderDetailActivity -> com.massvig.ecommerce.activities.OrderDetailActivity:
    com.massvig.ecommerce.managers.OrderManager manager -> d
    java.lang.String prices -> e
    com.massvig.ecommerce.activities.BaseApplication app -> f
    android.widget.TextView username -> g
    android.widget.TextView address -> h
    android.widget.TextView mobile -> i
    android.widget.TextView zipcode -> j
    android.widget.TextView coupon -> k
    android.widget.TextView paytype -> l
    android.widget.TextView info -> m
    android.widget.TextView realpay -> n
    android.widget.TextView saved -> o
    android.app.ProgressDialog mDialog -> p
    com.massvig.ecommerce.service.MassVigOnlinePaymentService pay -> q
    android.widget.TextView order_status -> r
    boolean isUnionPaying -> s
    android.widget.ListView layout -> t
    android.view.LayoutInflater mInflater -> u
    com.massvig.ecommerce.widgets.OrderItemAdapter adapter -> v
    java.util.ArrayList pList -> w
    float PromotionDiscount -> a
    float discount -> b
    java.lang.String ids -> x
    java.lang.String quantities -> y
    android.widget.ScrollView scroll -> z
    android.os.Handler handler -> A
    java.lang.String dataurl -> c
    android.os.Handler mHandler -> B
    void onCreate(android.os.Bundle) -> onCreate
    void initData(com.massvig.ecommerce.entities.MyOrder) -> a
    void initView(com.massvig.ecommerce.entities.MyOrder) -> b
    void onClick(android.view.View) -> onClick
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void GoToLogin() -> c
    void SetInfoText() -> d
    void paySuccess() -> e
    void orderDoneSuccess(int,java.lang.String) -> a
    void orderDoneFailed(java.lang.String) -> b
    void Success(int) -> a
    void Failed(int) -> b
    void Payment(java.lang.String) -> a
    void initPayText() -> g
    void onResume() -> onResume
    void SessionFailed() -> a
    void sessionFailed() -> f
    void orderdoneFailed(java.lang.String) -> c
    android.widget.ScrollView access$0(com.massvig.ecommerce.activities.OrderDetailActivity) -> a
    android.app.ProgressDialog access$1(com.massvig.ecommerce.activities.OrderDetailActivity) -> b
    com.massvig.ecommerce.managers.OrderManager access$2(com.massvig.ecommerce.activities.OrderDetailActivity) -> c
    com.massvig.ecommerce.service.MassVigOnlinePaymentService access$3(com.massvig.ecommerce.activities.OrderDetailActivity) -> d
    com.massvig.ecommerce.activities.BaseApplication access$4(com.massvig.ecommerce.activities.OrderDetailActivity) -> e
com.massvig.ecommerce.activities.OrderDetailActivity$1 -> com.massvig.ecommerce.activities.gs:
    com.massvig.ecommerce.activities.OrderDetailActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.OrderDetailActivity$1UnionPayResultHandler -> com.massvig.ecommerce.activities.gt:
    java.lang.String content -> c
    java.lang.String resultString -> a
    com.massvig.ecommerce.activities.OrderDetailActivity this$0 -> b
    void characters(char[],int,int) -> characters
    void startDocument() -> startDocument
    void endDocument() -> endDocument
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void endPrefixMapping(java.lang.String) -> endPrefixMapping
    void ignorableWhitespace(char[],int,int) -> ignorableWhitespace
    void processingInstruction(java.lang.String,java.lang.String) -> processingInstruction
    void setDocumentLocator(org.xml.sax.Locator) -> setDocumentLocator
    void skippedEntity(java.lang.String) -> skippedEntity
    void startPrefixMapping(java.lang.String,java.lang.String) -> startPrefixMapping
com.massvig.ecommerce.activities.OrderDetailActivity$2 -> com.massvig.ecommerce.activities.gu:
    com.massvig.ecommerce.activities.OrderDetailActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.OrderDetailActivity$3 -> com.massvig.ecommerce.activities.gv:
    com.massvig.ecommerce.activities.OrderDetailActivity this$0 -> a
    void clickImg(com.massvig.ecommerce.entities.Goods) -> a
com.massvig.ecommerce.activities.OrderDetailActivity$alipayAsync -> com.massvig.ecommerce.activities.gw:
    com.massvig.ecommerce.service.MassVigOnlinePaymentService pay -> b
    com.massvig.ecommerce.activities.OrderDetailActivity this$0 -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.OrderDetailActivity$aliwebpayAsync -> com.massvig.ecommerce.activities.gx:
    com.massvig.ecommerce.service.MassVigOnlinePaymentService pay -> b
    com.massvig.ecommerce.activities.OrderDetailActivity this$0 -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.OrderDetailActivity$huodaoAsync -> com.massvig.ecommerce.activities.gy:
    com.massvig.ecommerce.activities.OrderDetailActivity this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.OrderDetailActivity$unionpayAsync -> com.massvig.ecommerce.activities.gz:
    com.massvig.ecommerce.service.MassVigOnlinePaymentService pay -> b
    com.massvig.ecommerce.activities.OrderDetailActivity this$0 -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.PayTypeActivity -> com.massvig.ecommerce.activities.PayTypeActivity:
    int payType -> a
    android.widget.TextView icon1 -> b
    android.widget.TextView icon2 -> c
    android.widget.TextView icon3 -> d
    android.widget.TextView icon4 -> e
    android.widget.RelativeLayout layout1 -> f
    android.widget.RelativeLayout layout2 -> g
    android.widget.RelativeLayout layout3 -> h
    android.widget.RelativeLayout layout4 -> i
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void clear() -> a
com.massvig.ecommerce.activities.PostDetailActivity -> com.massvig.ecommerce.activities.PostDetailActivity:
    android.widget.LinearLayout dialogLayout -> a
    android.widget.ListView listview -> b
    com.massvig.ecommerce.managers.PostDetailManager manager -> c
    com.massvig.ecommerce.widgets.CommentListAdapter mAdapter -> d
    android.widget.EditText commentText -> e
    android.app.ProgressDialog dialog -> f
    com.massvig.ecommerce.activities.BaseApplication app -> g
    com.massvig.ecommerce.widgets.NetImageView headImg -> h
    com.massvig.ecommerce.widgets.NetImageView postImg -> i
    android.widget.ImageView img_praise -> j
    android.widget.TextView name -> k
    android.widget.TextView text1 -> l
    android.widget.TextView text2 -> m
    android.widget.TextView time -> n
    android.widget.TextView description -> o
    boolean isRefresh -> p
    com.massvig.ecommerce.entities.Post p -> q
    android.widget.LinearLayout hideLayout -> r
    com.tencent.weibo.oauthv2.OAuthV2 oAuth -> s
    com.massvig.ecommerce.utilities.ShareManager sm -> t
    com.tencent.mm.sdk.openapi.IWXAPI api -> u
    android.widget.LinearLayout frame_layout -> v
    android.os.Handler mHandler -> w
    void onCreate(android.os.Bundle) -> onCreate
    void shareToWeixin(java.lang.String,boolean) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onResume() -> onResume
    void openInput(java.lang.String) -> a
    java.lang.String GetTimeStamp(java.lang.String) -> b
    void onClick(android.view.View) -> onClick
    void AddCommentFailed() -> a
    void AddCommentSuccess() -> c
    void LoadCommentSuccess() -> d
    void LoadCommentFailed() -> e
    void PraiseSuccess$13462e() -> f
    void PraiseFailed$13462e() -> g
    void SessionVailed() -> h
    void Already() -> i
    void DeletePost(int) -> a
    android.widget.EditText access$0(com.massvig.ecommerce.activities.PostDetailActivity) -> a
    com.massvig.ecommerce.managers.PostDetailManager access$1(com.massvig.ecommerce.activities.PostDetailActivity) -> b
    void access$2(com.massvig.ecommerce.activities.PostDetailActivity,java.lang.String) -> a
    boolean access$3(com.massvig.ecommerce.activities.PostDetailActivity) -> c
    void access$4$67e5d962(com.massvig.ecommerce.activities.PostDetailActivity) -> d
com.massvig.ecommerce.activities.PostDetailActivity$1 -> com.massvig.ecommerce.activities.ha:
    com.massvig.ecommerce.activities.PostDetailActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.PostDetailActivity$2 -> com.massvig.ecommerce.activities.hb:
    com.massvig.ecommerce.activities.PostDetailActivity this$0 -> a
    void run() -> run
com.massvig.ecommerce.activities.PostDetailActivity$3 -> com.massvig.ecommerce.activities.hc:
    com.massvig.ecommerce.activities.PostDetailActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.massvig.ecommerce.activities.PraisedActivity -> com.massvig.ecommerce.activities.PraisedActivity:
    com.massvig.ecommerce.widgets.PraisedListView mPraisedListView -> a
    com.massvig.ecommerce.widgets.LoadView mLoadView -> b
    com.massvig.ecommerce.activities.BaseApplication app -> c
    int customerID -> d
    boolean isFirst -> e
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void initFooterView() -> a
    void getPraiseList() -> c
    void GoToLogin() -> d
    void onClick(android.view.View) -> onClick
    com.massvig.ecommerce.activities.BaseApplication access$0(com.massvig.ecommerce.activities.PraisedActivity) -> a
    int access$1(com.massvig.ecommerce.activities.PraisedActivity) -> b
    com.massvig.ecommerce.widgets.PraisedListView access$2(com.massvig.ecommerce.activities.PraisedActivity) -> c
    com.massvig.ecommerce.widgets.LoadView access$3(com.massvig.ecommerce.activities.PraisedActivity) -> d
    void access$4$5bf2e611(com.massvig.ecommerce.activities.PraisedActivity) -> e
com.massvig.ecommerce.activities.PraisedActivity$1 -> com.massvig.ecommerce.activities.hd:
    com.massvig.ecommerce.activities.PraisedActivity this$0 -> a
    void callBack() -> a
com.massvig.ecommerce.activities.PraisedActivity$2 -> com.massvig.ecommerce.activities.he:
    com.massvig.ecommerce.activities.PraisedActivity this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.PriceFilterActivity -> com.massvig.ecommerce.activities.PriceFilterActivity:
    com.massvig.ecommerce.widgets.SeekBar mSeekBar -> a
    android.widget.TextView seekLeftValue -> b
    android.widget.TextView seekRightValue -> c
    android.widget.Button finishButton -> d
    com.massvig.ecommerce.activities.PriceFilterActivity$MyClick mMyClick -> e
    int minPirce -> f
    int maxPirec -> g
    java.util.Timer timer -> h
    java.util.TimerTask task -> i
    android.os.Handler mHandler -> j
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    com.massvig.ecommerce.widgets.SeekBar access$0(com.massvig.ecommerce.activities.PriceFilterActivity) -> a
    int access$1(com.massvig.ecommerce.activities.PriceFilterActivity) -> b
    int access$2(com.massvig.ecommerce.activities.PriceFilterActivity) -> c
    android.widget.Button access$3(com.massvig.ecommerce.activities.PriceFilterActivity) -> d
    android.widget.TextView access$4(com.massvig.ecommerce.activities.PriceFilterActivity) -> e
    android.widget.TextView access$5(com.massvig.ecommerce.activities.PriceFilterActivity) -> f
    void access$6(com.massvig.ecommerce.activities.PriceFilterActivity,int) -> a
    void access$7(com.massvig.ecommerce.activities.PriceFilterActivity,int) -> b
    android.os.Handler access$8(com.massvig.ecommerce.activities.PriceFilterActivity) -> g
com.massvig.ecommerce.activities.PriceFilterActivity$1 -> com.massvig.ecommerce.activities.hf:
    com.massvig.ecommerce.activities.PriceFilterActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.PriceFilterActivity$2 -> com.massvig.ecommerce.activities.hg:
    com.massvig.ecommerce.activities.PriceFilterActivity this$0 -> a
    void callBack(java.lang.String,java.lang.String) -> a
com.massvig.ecommerce.activities.PriceFilterActivity$3 -> com.massvig.ecommerce.activities.hh:
    com.massvig.ecommerce.activities.PriceFilterActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.PriceFilterActivity$4 -> com.massvig.ecommerce.activities.hi:
    com.massvig.ecommerce.activities.PriceFilterActivity this$0 -> a
    void run() -> run
com.massvig.ecommerce.activities.PriceFilterActivity$MyClick -> com.massvig.ecommerce.activities.hj:
    com.massvig.ecommerce.activities.PriceFilterActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.RecommendActivity -> com.massvig.ecommerce.activities.RecommendActivity:
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.RefundActivity -> com.massvig.ecommerce.activities.RefundActivity:
    android.app.ProgressDialog dialog -> a
    android.widget.ListView listview -> b
    com.massvig.ecommerce.entities.ProductList productList -> c
    android.view.LayoutInflater mInflater -> d
    android.graphics.Bitmap shopDefaultImg -> e
    android.widget.EditText totalMoney -> f
    android.widget.CheckBox check -> g
    com.massvig.ecommerce.activities.RefundActivity$ShoppingAdapter adapter -> h
    java.lang.String orderID -> i
    java.lang.String orderNO -> j
    double freight -> k
    void onCreate(android.os.Bundle) -> onCreate
    void setTotal() -> a
    void onClick(android.view.View) -> onClick
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    android.view.LayoutInflater access$0(com.massvig.ecommerce.activities.RefundActivity) -> a
    void access$1(com.massvig.ecommerce.activities.RefundActivity) -> b
    com.massvig.ecommerce.entities.ProductList access$2(com.massvig.ecommerce.activities.RefundActivity) -> c
    android.graphics.Bitmap access$3(com.massvig.ecommerce.activities.RefundActivity) -> d
    com.massvig.ecommerce.activities.RefundActivity$ShoppingAdapter access$4(com.massvig.ecommerce.activities.RefundActivity) -> e
com.massvig.ecommerce.activities.RefundActivity$1 -> com.massvig.ecommerce.activities.hk:
    com.massvig.ecommerce.activities.RefundActivity this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.massvig.ecommerce.activities.RefundActivity$2 -> com.massvig.ecommerce.activities.hl:
    com.massvig.ecommerce.activities.RefundActivity this$0 -> a
    java.lang.String[] val$numbers -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.RefundActivity$ShoppingAdapter -> com.massvig.ecommerce.activities.hm:
    java.util.ArrayList imageList -> b
    com.massvig.ecommerce.activities.RefundActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    com.massvig.ecommerce.activities.RefundActivity access$0(com.massvig.ecommerce.activities.RefundActivity$ShoppingAdapter) -> a
com.massvig.ecommerce.activities.RefundActivity$ShoppingAdapter$ViewHolder -> com.massvig.ecommerce.activities.hn:
    com.massvig.ecommerce.widgets.NetImageView image -> b
    android.widget.TextView title -> c
    android.widget.TextView detail -> d
    android.widget.TextView price -> e
    android.widget.TextView oriprice -> f
    android.widget.CheckBox check -> g
    android.widget.Button delete -> h
    android.view.View itemView -> i
    com.massvig.ecommerce.activities.RefundActivity$ShoppingAdapter this$1 -> a
    android.view.View getView(int) -> a
    com.massvig.ecommerce.widgets.NetImageView access$0(com.massvig.ecommerce.activities.RefundActivity$ShoppingAdapter$ViewHolder) -> a
com.massvig.ecommerce.activities.RefundActivity$ShoppingAdapter$ViewHolder$1 -> com.massvig.ecommerce.activities.ho:
    com.massvig.ecommerce.activities.RefundActivity$ShoppingAdapter$ViewHolder this$2 -> a
    com.massvig.ecommerce.entities.Product val$p -> b
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.massvig.ecommerce.activities.RefundActivity$ShoppingAdapter$ViewHolder$2 -> com.massvig.ecommerce.activities.hp:
    com.massvig.ecommerce.activities.RefundActivity$ShoppingAdapter$ViewHolder this$2 -> a
    com.massvig.ecommerce.entities.Product val$p -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.RefundReasonActivity -> com.massvig.ecommerce.activities.RefundReasonActivity:
    android.widget.TextView money -> a
    android.widget.TextView refund_type -> b
    java.lang.String type -> c
    android.widget.EditText refund_reason -> d
    java.lang.String ids -> e
    java.lang.String orderID -> f
    java.lang.String orderNO -> g
    java.lang.String totalMoney -> h
    com.massvig.ecommerce.activities.BaseApplication app -> i
    android.app.ProgressDialog dialog -> j
    android.app.AlertDialog$Builder signalDialog -> k
    android.widget.TextView know -> l
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    android.app.ProgressDialog access$0(com.massvig.ecommerce.activities.RefundReasonActivity) -> a
    com.massvig.ecommerce.activities.BaseApplication access$1(com.massvig.ecommerce.activities.RefundReasonActivity) -> b
    java.lang.String access$2(com.massvig.ecommerce.activities.RefundReasonActivity) -> c
    java.lang.String access$3(com.massvig.ecommerce.activities.RefundReasonActivity) -> d
    java.lang.String access$4(com.massvig.ecommerce.activities.RefundReasonActivity) -> e
    java.lang.String access$5(com.massvig.ecommerce.activities.RefundReasonActivity) -> f
    android.widget.EditText access$6(com.massvig.ecommerce.activities.RefundReasonActivity) -> g
    void access$7(com.massvig.ecommerce.activities.RefundReasonActivity,java.lang.String) -> a
    android.widget.TextView access$8(com.massvig.ecommerce.activities.RefundReasonActivity) -> h
com.massvig.ecommerce.activities.RefundReasonActivity$1 -> com.massvig.ecommerce.activities.hq:
    com.massvig.ecommerce.activities.RefundReasonActivity this$0 -> a
    java.lang.String[] val$numbers -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.RefundReasonActivity$2 -> com.massvig.ecommerce.activities.hr:
    com.massvig.ecommerce.activities.RefundReasonActivity this$0 -> a
    java.lang.String[] val$items -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.RefundReasonActivity$RefundAsync -> com.massvig.ecommerce.activities.hs:
    com.massvig.ecommerce.activities.RefundReasonActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Integer doInBackground$5cbeabcf() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.RefundToknow -> com.massvig.ecommerce.activities.RefundToknow:
    void onCreate(android.os.Bundle) -> onCreate
com.massvig.ecommerce.activities.RefundToknow$1 -> com.massvig.ecommerce.activities.ht:
    com.massvig.ecommerce.activities.RefundToknow this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.RefundToknow$2 -> com.massvig.ecommerce.activities.hu:
    com.massvig.ecommerce.activities.RefundToknow this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.RefundToknow$3 -> com.massvig.ecommerce.activities.hv:
    com.massvig.ecommerce.activities.RefundToknow this$0 -> a
    void onClick(android.view.View) -> onClick
    com.massvig.ecommerce.activities.RefundToknow access$0(com.massvig.ecommerce.activities.RefundToknow$3) -> a
com.massvig.ecommerce.activities.RefundToknow$3$1 -> com.massvig.ecommerce.activities.hw:
    com.massvig.ecommerce.activities.RefundToknow$3 this$1 -> a
    java.lang.String[] val$numbers -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.RegisterActivity -> com.massvig.ecommerce.activities.RegisterActivity:
    java.util.Timer timer -> a
    java.util.TimerTask task -> b
    boolean timeout -> c
    int timeCount -> d
    com.massvig.ecommerce.managers.RegisterManager mManager -> e
    android.view.View view1 -> f
    android.view.View view2 -> g
    android.view.View view3 -> h
    int index -> i
    android.app.ProgressDialog dialog -> j
    android.widget.TextView title -> k
    android.widget.TextView finish -> l
    java.lang.String name -> m
    java.lang.String codeText -> n
    android.widget.EditText username1 -> o
    android.widget.EditText code -> p
    android.widget.TextView mobile -> q
    android.widget.TextView send -> r
    android.widget.EditText password1 -> s
    android.widget.EditText password2 -> t
    com.massvig.ecommerce.activities.BaseApplication app -> u
    boolean ifneed -> v
    android.os.Handler mHandler -> w
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void startTime() -> f
    void start(int) -> a
    void end(int) -> b
    void Success(int) -> c
    void Failed(int) -> d
    void empty() -> a
    void accountErr() -> c
    void onResume() -> onResume
    void onPause() -> onPause
    void alreadyExit() -> d
    void register(com.massvig.ecommerce.entities.User) -> a
    void anotherRegister() -> e
    android.view.View access$0(com.massvig.ecommerce.activities.RegisterActivity) -> a
    android.view.View access$1(com.massvig.ecommerce.activities.RegisterActivity) -> b
    void access$2(com.massvig.ecommerce.activities.RegisterActivity) -> c
    android.widget.TextView access$3(com.massvig.ecommerce.activities.RegisterActivity) -> d
    void access$4(com.massvig.ecommerce.activities.RegisterActivity,int) -> a
    android.widget.TextView access$5(com.massvig.ecommerce.activities.RegisterActivity) -> e
    android.widget.EditText access$6(com.massvig.ecommerce.activities.RegisterActivity) -> f
    android.view.View access$7(com.massvig.ecommerce.activities.RegisterActivity) -> g
    android.widget.TextView access$8(com.massvig.ecommerce.activities.RegisterActivity) -> h
    int access$9(com.massvig.ecommerce.activities.RegisterActivity) -> i
    android.app.ProgressDialog access$10(com.massvig.ecommerce.activities.RegisterActivity) -> j
    android.widget.TextView access$11(com.massvig.ecommerce.activities.RegisterActivity) -> k
    void access$12$d7bae50(com.massvig.ecommerce.activities.RegisterActivity) -> l
    int access$13(com.massvig.ecommerce.activities.RegisterActivity) -> m
    void access$14(com.massvig.ecommerce.activities.RegisterActivity,int) -> b
    android.os.Handler access$15(com.massvig.ecommerce.activities.RegisterActivity) -> n
com.massvig.ecommerce.activities.RegisterActivity$1 -> com.massvig.ecommerce.activities.hx:
    com.massvig.ecommerce.activities.RegisterActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.RegisterActivity$2 -> com.massvig.ecommerce.activities.hy:
    com.massvig.ecommerce.activities.RegisterActivity this$0 -> a
    void onTick(long) -> onTick
    void onFinish() -> onFinish
com.massvig.ecommerce.activities.SearchActivity -> com.massvig.ecommerce.activities.SearchActivity:
    android.widget.ListView listview -> a
    java.util.ArrayList hotKeys -> b
    boolean isLocal -> c
    android.widget.EditText keyEdit -> d
    android.view.LayoutInflater mInflater -> e
    com.massvig.ecommerce.activities.SearchActivity$SearchAdapter adapter -> f
    java.util.ArrayList history -> g
    boolean click -> h
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void collapseSoftInputMethod(android.widget.EditText) -> a
    void onClick(android.view.View) -> onClick
    android.view.LayoutInflater access$0(com.massvig.ecommerce.activities.SearchActivity) -> a
    boolean access$1(com.massvig.ecommerce.activities.SearchActivity) -> b
    java.util.ArrayList access$2(com.massvig.ecommerce.activities.SearchActivity) -> c
    java.util.ArrayList access$3(com.massvig.ecommerce.activities.SearchActivity) -> d
    android.widget.EditText access$4(com.massvig.ecommerce.activities.SearchActivity) -> e
    boolean access$5(com.massvig.ecommerce.activities.SearchActivity) -> f
    void access$6$62474a4b(com.massvig.ecommerce.activities.SearchActivity) -> g
    void access$7(com.massvig.ecommerce.activities.SearchActivity,boolean) -> a
    com.massvig.ecommerce.activities.SearchActivity$SearchAdapter access$8(com.massvig.ecommerce.activities.SearchActivity) -> h
com.massvig.ecommerce.activities.SearchActivity$1 -> com.massvig.ecommerce.activities.hz:
    com.massvig.ecommerce.activities.SearchActivity this$0 -> a
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
com.massvig.ecommerce.activities.SearchActivity$2 -> com.massvig.ecommerce.activities.ia:
    com.massvig.ecommerce.activities.SearchActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.SearchActivity$3 -> com.massvig.ecommerce.activities.ib:
    com.massvig.ecommerce.activities.SearchActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.massvig.ecommerce.activities.SearchActivity$SearchAdapter -> com.massvig.ecommerce.activities.ic:
    com.massvig.ecommerce.activities.SearchActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    com.massvig.ecommerce.activities.SearchActivity access$0(com.massvig.ecommerce.activities.SearchActivity$SearchAdapter) -> a
com.massvig.ecommerce.activities.SearchActivity$SearchAdapter$ViewHolder -> com.massvig.ecommerce.activities.id:
    android.widget.TextView key -> b
    android.view.View itemView -> c
    com.massvig.ecommerce.activities.SearchActivity$SearchAdapter this$1 -> a
    android.view.View getView(int) -> a
com.massvig.ecommerce.activities.SelectAddressActivity -> com.massvig.ecommerce.activities.SelectAddressActivity:
    com.massvig.ecommerce.managers.AddressManager mManager -> a
    android.widget.ListView listView -> b
    android.view.LayoutInflater mInflater -> c
    com.massvig.ecommerce.activities.SelectAddressActivity$AddressAdapter mAdapter -> d
    com.massvig.ecommerce.activities.BaseApplication app -> e
    int flag -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onClick(android.view.View) -> onClick
    void Success(int) -> a
    void Failed(int) -> b
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void SessionidFail() -> a
    com.massvig.ecommerce.activities.BaseApplication access$0(com.massvig.ecommerce.activities.SelectAddressActivity) -> a
    com.massvig.ecommerce.managers.AddressManager access$1(com.massvig.ecommerce.activities.SelectAddressActivity) -> b
    android.view.LayoutInflater access$2(com.massvig.ecommerce.activities.SelectAddressActivity) -> c
    com.massvig.ecommerce.activities.SelectAddressActivity$AddressAdapter access$3(com.massvig.ecommerce.activities.SelectAddressActivity) -> d
com.massvig.ecommerce.activities.SelectAddressActivity$1 -> com.massvig.ecommerce.activities.ie:
    com.massvig.ecommerce.activities.SelectAddressActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.SelectAddressActivity$AddressAdapter -> com.massvig.ecommerce.activities.if:
    com.massvig.ecommerce.activities.SelectAddressActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.massvig.ecommerce.activities.SelectAddressActivity$AddressAdapter$ViewHolder -> com.massvig.ecommerce.activities.ig:
    android.widget.TextView userName -> a
    android.widget.TextView detailText -> b
    android.widget.TextView selected -> c
    com.massvig.ecommerce.activities.SelectAddressActivity$AddressAdapter this$1 -> d
com.massvig.ecommerce.activities.SelectAddressActivity$setDefault -> com.massvig.ecommerce.activities.ih:
    com.massvig.ecommerce.entities.Address a -> b
    com.massvig.ecommerce.activities.SelectAddressActivity this$0 -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.SettingActivity -> com.massvig.ecommerce.activities.SettingActivity:
    com.massvig.ecommerce.activities.BaseApplication app -> a
    android.app.ProgressDialog mDialog -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void downApk() -> a
    void showSoftDialog() -> c
    void showHardDialog() -> d
    com.massvig.ecommerce.activities.BaseApplication access$0(com.massvig.ecommerce.activities.SettingActivity) -> a
    java.lang.String access$1(com.massvig.ecommerce.activities.SettingActivity) -> b
    boolean access$2$537797d3(java.lang.String,java.lang.String) -> a
    android.app.ProgressDialog access$3(com.massvig.ecommerce.activities.SettingActivity) -> c
com.massvig.ecommerce.activities.SettingActivity$1 -> com.massvig.ecommerce.activities.ii:
    com.massvig.ecommerce.activities.SettingActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.SettingActivity$2 -> com.massvig.ecommerce.activities.ij:
    com.massvig.ecommerce.activities.SettingActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.SettingActivity$3 -> com.massvig.ecommerce.activities.ik:
    com.massvig.ecommerce.activities.SettingActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.SettingActivity$4 -> com.massvig.ecommerce.activities.il:
    com.massvig.ecommerce.activities.SettingActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.activities.SettingActivity$checkVersionAsync -> com.massvig.ecommerce.activities.im:
    com.massvig.ecommerce.activities.SettingActivity this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.SettingActivity$checkVersionAsync$1 -> com.massvig.ecommerce.activities.in:
    com.massvig.ecommerce.activities.SettingActivity$checkVersionAsync this$1 -> a
    void TimeOutListener() -> a
com.massvig.ecommerce.activities.SettingActivity$clearCacheAsync -> com.massvig.ecommerce.activities.io:
    com.massvig.ecommerce.activities.SettingActivity this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.SettingActivity$logoutAsync -> com.massvig.ecommerce.activities.ip:
    com.massvig.ecommerce.activities.SettingActivity this$0 -> a
    java.lang.Void doInBackground$10299ca() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.ShareAccountActivity -> com.massvig.ecommerce.activities.ShareAccountActivity:
    android.widget.TextView text1 -> a
    android.widget.TextView text2 -> b
    com.tencent.weibo.oauthv2.OAuthV2 oAuth -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.ShareWebSinaActivity -> com.massvig.ecommerce.activities.ShareWebSinaActivity:
    android.webkit.WebView webView -> a
    com.weibo.net.Weibo mWeibo -> b
    void onCreate(android.os.Bundle) -> onCreate
    void access$0$5f2e44a(com.massvig.ecommerce.activities.ShareWebSinaActivity,java.lang.String) -> a
com.massvig.ecommerce.activities.ShareWebSinaActivity$1 -> com.massvig.ecommerce.activities.iq:
    com.massvig.ecommerce.activities.ShareWebSinaActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.ShareWebSinaActivity$2 -> com.massvig.ecommerce.activities.ir:
    com.massvig.ecommerce.activities.ShareWebSinaActivity this$0 -> a
    com.weibo.net.WeiboParameters val$params -> b
    java.lang.Object runFuncation() -> a
    void resutl$5d527811() -> b
com.massvig.ecommerce.activities.ShareWebSinaActivity$AsyncOauth -> com.massvig.ecommerce.activities.is:
    android.app.ProgressDialog pd -> a
    com.massvig.ecommerce.activities.ShareWebSinaActivity$ResultCallBack callback -> c
    com.massvig.ecommerce.activities.ShareWebSinaActivity this$0 -> b
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onPostExecute(java.lang.Object) -> onPostExecute
    void onPreExecute() -> onPreExecute
com.massvig.ecommerce.activities.ShareWebSinaActivity$ResultCallBack -> com.massvig.ecommerce.activities.it:
    java.lang.Object runFuncation() -> a
    void resutl$5d527811() -> b
com.massvig.ecommerce.activities.ShareWebSinaActivity$WeiboWebViewClient -> com.massvig.ecommerce.activities.iu:
    com.massvig.ecommerce.activities.ShareWebSinaActivity this$0 -> a
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
    void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String) -> onReceivedError
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
com.massvig.ecommerce.activities.ShopMapActivity -> com.massvig.ecommerce.activities.ShopMapActivity:
    com.amap.mapapi.map.MapView mMapView -> b
    com.massvig.ecommerce.location.LocationManage mLocationManage -> c
    java.lang.Double latitude -> d
    java.lang.Double longitude -> e
    com.massvig.ecommerce.activities.ShopMapActivity$GoToLocationOverlay myCurrentLation -> f
    com.massvig.ecommerce.activities.ShopMapActivity$GoToLocationOverlay myGoToLation -> g
    java.util.ArrayList areas -> h
    java.util.ArrayList streets -> i
    android.widget.ListView listview -> o
    android.widget.RelativeLayout mapBox -> j
    android.widget.LinearLayout listBox -> k
    com.massvig.ecommerce.managers.MapManager manager -> p
    com.massvig.ecommerce.activities.BaseApplication app -> q
    com.massvig.ecommerce.widgets.MerchantAdapter adapter -> r
    com.amap.mapapi.map.MapController mMapController -> l
    com.massvig.ecommerce.activities.ShopMapActivity$MyOverItem myOverItem -> m
    com.massvig.ecommerce.location.LocationManage$MyLocationListener mmMyLocationListener -> n
    void onCreate(android.os.Bundle) -> onCreate
    void drawMycurrentLation(com.amap.mapapi.core.GeoPoint) -> a
    void onResume() -> onResume
    void onClick(android.view.View) -> onClick
    void ShowMessage(boolean) -> a
    void Success() -> a
    void onDestroy() -> onDestroy
    void access$0(com.massvig.ecommerce.activities.ShopMapActivity,com.amap.mapapi.core.GeoPoint) -> a
    com.massvig.ecommerce.managers.MapManager access$1(com.massvig.ecommerce.activities.ShopMapActivity) -> a
    com.massvig.ecommerce.activities.BaseApplication access$2(com.massvig.ecommerce.activities.ShopMapActivity) -> b
    android.widget.ListView access$3(com.massvig.ecommerce.activities.ShopMapActivity) -> c
    void access$4(com.massvig.ecommerce.activities.ShopMapActivity,com.amap.mapapi.core.GeoPoint) -> b
com.massvig.ecommerce.activities.ShopMapActivity$1 -> com.massvig.ecommerce.activities.iv:
    com.massvig.ecommerce.activities.ShopMapActivity this$0 -> a
    void location(double,double) -> a
    void isAllow(java.lang.Boolean) -> a
    void address(java.lang.String) -> a
com.massvig.ecommerce.activities.ShopMapActivity$2 -> com.massvig.ecommerce.activities.iw:
    com.massvig.ecommerce.activities.ShopMapActivity this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.massvig.ecommerce.activities.ShopMapActivity$3 -> com.massvig.ecommerce.activities.ix:
    com.massvig.ecommerce.activities.ShopMapActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.ShopMapActivity$4 -> com.massvig.ecommerce.activities.iy:
    com.massvig.ecommerce.activities.ShopMapActivity this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.massvig.ecommerce.activities.ShopMapActivity$5 -> com.massvig.ecommerce.activities.iz:
    com.massvig.ecommerce.activities.ShopMapActivity this$0 -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.massvig.ecommerce.activities.ShopMapActivity$GoToLocationOverlay -> com.massvig.ecommerce.activities.ja:
    com.amap.mapapi.core.GeoPoint geoPointTemp -> b
    android.graphics.Bitmap bmpCompany -> c
    com.massvig.ecommerce.activities.ShopMapActivity this$0 -> a
    void setGeoPoint(com.amap.mapapi.core.GeoPoint) -> a
    void draw(android.graphics.Canvas,com.amap.mapapi.map.MapView,boolean) -> draw
com.massvig.ecommerce.activities.ShopMapActivity$LongPressOverlay -> com.massvig.ecommerce.activities.jb:
    android.view.GestureDetector gestureScanner -> b
    com.massvig.ecommerce.activities.ShopMapActivity this$0 -> a
    boolean onTouchEvent(android.view.MotionEvent,com.amap.mapapi.map.MapView) -> onTouchEvent
    com.massvig.ecommerce.activities.ShopMapActivity access$0(com.massvig.ecommerce.activities.ShopMapActivity$LongPressOverlay) -> a
com.massvig.ecommerce.activities.ShopMapActivity$LongPressOverlay$1 -> com.massvig.ecommerce.activities.jc:
    com.massvig.ecommerce.activities.ShopMapActivity$LongPressOverlay this$1 -> a
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    boolean onDown(android.view.MotionEvent) -> onDown
com.massvig.ecommerce.activities.ShopMapActivity$MyOverItem -> com.massvig.ecommerce.activities.jd:
    java.util.List overlayItems -> c
    android.graphics.drawable.Drawable marker -> d
    int drawableHeight -> e
    com.massvig.ecommerce.activities.ShopMapActivity mContext -> f
    android.widget.LinearLayout viewPop -> a
    android.widget.TextView mPopTextView_local -> g
    android.widget.TextView shopName_local -> h
    com.massvig.ecommerce.activities.ShopMapActivity this$0 -> b
    void clearOverlay() -> a
    void setOverlayItem(java.util.List) -> a
    void draw(android.graphics.Canvas,com.amap.mapapi.map.MapView,boolean) -> draw
    com.amap.mapapi.core.OverlayItem createItem(int) -> createItem
    int size() -> size
    boolean onTap(int) -> onTap
    boolean onTouchEvent(android.view.MotionEvent,com.amap.mapapi.map.MapView) -> onTouchEvent
    com.massvig.ecommerce.activities.ShopMapActivity access$0(com.massvig.ecommerce.activities.ShopMapActivity$MyOverItem) -> a
com.massvig.ecommerce.activities.ShopMapActivity$MyOverItem$1 -> com.massvig.ecommerce.activities.je:
    com.massvig.ecommerce.activities.ShopMapActivity$MyOverItem this$1 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.ShoppingCarActivity -> com.massvig.ecommerce.activities.ShoppingCarActivity:
    android.app.ProgressDialog dialog -> a
    android.widget.ListView listview -> b
    com.massvig.ecommerce.entities.ProductList productList -> c
    android.view.LayoutInflater mInflater -> d
    android.graphics.Bitmap shopDefaultImg -> e
    android.widget.TextView totalMoney -> f
    android.widget.TextView totalYuan -> g
    android.widget.CheckBox check -> h
    com.massvig.ecommerce.activities.ShoppingCarActivity$ShoppingAdapter adapter -> i
    com.massvig.ecommerce.activities.BaseApplication app -> j
    com.massvig.ecommerce.entities.ProductList InvalidList -> k
    android.widget.LinearLayout invalidLayout -> l
    android.widget.TextView information -> m
    com.massvig.ecommerce.utilities.MassVigExit exit -> n
    android.widget.LinearLayout nodata -> o
    android.widget.LinearLayout shoppingLayout -> p
    boolean isFirstIn -> q
    android.widget.TextView discount -> r
    int customerAddressID -> s
    int expressage -> t
    float promotionDiscount -> u
    java.lang.String coupons -> v
    java.lang.String payment -> w
    java.lang.String billType -> x
    java.lang.String billTitle -> y
    java.lang.String productSpecID -> z
    java.lang.String quantity -> A
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onResume() -> onResume
    java.lang.String getIDs() -> a
    void onClick(android.view.View) -> onClick
    com.massvig.ecommerce.entities.Product GiftAnalyse(org.json.JSONObject) -> a
    com.massvig.ecommerce.entities.Product DataAnalyse(org.json.JSONObject) -> b
    android.app.ProgressDialog access$0(com.massvig.ecommerce.activities.ShoppingCarActivity) -> a
    com.massvig.ecommerce.entities.ProductList access$1(com.massvig.ecommerce.activities.ShoppingCarActivity) -> b
    android.widget.LinearLayout access$2(com.massvig.ecommerce.activities.ShoppingCarActivity) -> c
    android.widget.TextView access$3(com.massvig.ecommerce.activities.ShoppingCarActivity) -> d
    com.massvig.ecommerce.entities.ProductList access$4(com.massvig.ecommerce.activities.ShoppingCarActivity) -> e
    void access$5(com.massvig.ecommerce.activities.ShoppingCarActivity) -> f
    android.widget.LinearLayout access$6(com.massvig.ecommerce.activities.ShoppingCarActivity) -> g
    com.massvig.ecommerce.activities.ShoppingCarActivity$ShoppingAdapter access$7(com.massvig.ecommerce.activities.ShoppingCarActivity) -> h
    boolean access$8(com.massvig.ecommerce.activities.ShoppingCarActivity) -> i
    void access$9$426c83f5(com.massvig.ecommerce.activities.ShoppingCarActivity) -> j
    android.view.LayoutInflater access$10(com.massvig.ecommerce.activities.ShoppingCarActivity) -> k
    com.massvig.ecommerce.activities.BaseApplication access$11(com.massvig.ecommerce.activities.ShoppingCarActivity) -> l
    android.graphics.Bitmap access$12(com.massvig.ecommerce.activities.ShoppingCarActivity) -> m
    android.widget.TextView access$13(com.massvig.ecommerce.activities.ShoppingCarActivity) -> n
    float access$14(com.massvig.ecommerce.activities.ShoppingCarActivity) -> o
    void access$15(com.massvig.ecommerce.activities.ShoppingCarActivity) -> p
    void access$16(com.massvig.ecommerce.activities.ShoppingCarActivity,float) -> a
com.massvig.ecommerce.activities.ShoppingCarActivity$1 -> com.massvig.ecommerce.activities.jf:
    com.massvig.ecommerce.activities.ShoppingCarActivity this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.massvig.ecommerce.activities.ShoppingCarActivity$DeleteProductsAsync -> com.massvig.ecommerce.activities.jg:
    com.massvig.ecommerce.activities.ShoppingCarActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Integer doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.ShoppingCarActivity$GetProductsAsync -> com.massvig.ecommerce.activities.jh:
    com.massvig.ecommerce.activities.ShoppingCarActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Integer doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.ShoppingCarActivity$ModifyProductsAsync -> com.massvig.ecommerce.activities.ji:
    com.massvig.ecommerce.activities.ShoppingCarActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Integer doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.ShoppingCarActivity$OrderPromotionAsync -> com.massvig.ecommerce.activities.jj:
    com.massvig.ecommerce.activities.ShoppingCarActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Integer doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.ShoppingCarActivity$ShoppingAdapter -> com.massvig.ecommerce.activities.jk:
    java.util.ArrayList imageList -> b
    com.massvig.ecommerce.activities.ShoppingCarActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    com.massvig.ecommerce.activities.ShoppingCarActivity access$0(com.massvig.ecommerce.activities.ShoppingCarActivity$ShoppingAdapter) -> a
com.massvig.ecommerce.activities.ShoppingCarActivity$ShoppingAdapter$ViewHolder -> com.massvig.ecommerce.activities.jl:
    com.massvig.ecommerce.widgets.NetImageView image -> b
    android.widget.TextView title -> c
    android.widget.TextView price -> d
    android.widget.TextView detail -> e
    android.widget.TextView gift -> f
    com.massvig.ecommerce.widgets.LineTextView oriprice -> g
    android.widget.CheckBox check -> h
    android.widget.Button asc -> i
    android.widget.Button desc -> j
    android.widget.TextView number -> k
    android.view.View itemView -> l
    android.widget.LinearLayout numberLayout -> m
    com.massvig.ecommerce.activities.ShoppingCarActivity$ShoppingAdapter this$1 -> a
    android.view.View getView(int) -> a
    android.widget.TextView access$0(com.massvig.ecommerce.activities.ShoppingCarActivity$ShoppingAdapter$ViewHolder) -> a
    com.massvig.ecommerce.widgets.NetImageView access$1(com.massvig.ecommerce.activities.ShoppingCarActivity$ShoppingAdapter$ViewHolder) -> b
com.massvig.ecommerce.activities.ShoppingCarActivity$ShoppingAdapter$ViewHolder$1 -> com.massvig.ecommerce.activities.jm:
    com.massvig.ecommerce.activities.ShoppingCarActivity$ShoppingAdapter$ViewHolder this$2 -> a
    com.massvig.ecommerce.entities.Product val$p -> b
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.massvig.ecommerce.activities.ShoppingCarActivity$ShoppingAdapter$ViewHolder$2 -> com.massvig.ecommerce.activities.jn:
    com.massvig.ecommerce.activities.ShoppingCarActivity$ShoppingAdapter$ViewHolder this$2 -> a
    com.massvig.ecommerce.entities.Product val$p -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.ShoppingCarActivity$ShoppingAdapter$ViewHolder$3 -> com.massvig.ecommerce.activities.jo:
    com.massvig.ecommerce.activities.ShoppingCarActivity$ShoppingAdapter$ViewHolder this$2 -> a
    com.massvig.ecommerce.entities.Product val$p -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.ShoppingCarActivity$ShoppingAdapter$ViewHolder$4 -> com.massvig.ecommerce.activities.jp:
    com.massvig.ecommerce.activities.ShoppingCarActivity$ShoppingAdapter$ViewHolder this$2 -> a
    com.massvig.ecommerce.entities.Product val$p -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.SortListActivity -> com.massvig.ecommerce.activities.SortListActivity:
    android.widget.ListView listView -> a
    org.json.JSONArray cateGoryData -> b
    com.massvig.ecommerce.utilities.MassVigExit exit -> c
    android.view.LayoutInflater mInflater -> d
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onResume() -> onResume
    org.json.JSONArray getCategory() -> a
    org.json.JSONArray access$0(com.massvig.ecommerce.activities.SortListActivity) -> a
    android.view.LayoutInflater access$1(com.massvig.ecommerce.activities.SortListActivity) -> b
com.massvig.ecommerce.activities.SortListActivity$1 -> com.massvig.ecommerce.activities.jq:
    com.massvig.ecommerce.activities.SortListActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.SortListActivity$MyAdapter -> com.massvig.ecommerce.activities.jr:
    com.massvig.ecommerce.activities.SortListActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.massvig.ecommerce.activities.SortListActivity$MyAdapter$ViewHolder -> com.massvig.ecommerce.activities.js:
    com.massvig.ecommerce.widgets.NetImageView image -> a
    android.widget.TextView detail -> b
    android.widget.TextView name -> c
    com.massvig.ecommerce.activities.SortListActivity$MyAdapter this$1 -> d
com.massvig.ecommerce.activities.SpecActivity -> com.massvig.ecommerce.activities.SpecActivity:
    android.widget.EditText count -> a
    android.widget.TextView money -> b
    android.widget.TextView total -> c
    com.massvig.ecommerce.managers.DealActivityManager mManager -> d
    android.widget.LinearLayout params_layout -> e
    int LayoutID -> f
    java.util.ArrayList buttons -> g
    com.massvig.ecommerce.entities.GoodsDetail goodsdetail -> h
    int imgsize -> i
    com.massvig.ecommerce.widgets.NetImageView product_img -> j
    com.massvig.ecommerce.activities.BaseApplication app -> k
    android.app.ProgressDialog dialog -> l
    android.widget.Button asc -> m
    android.widget.Button desc -> n
    android.widget.TextView detail -> o
    void onCreate(android.os.Bundle) -> onCreate
    void addLayoutToParent(android.view.ViewGroup,android.view.View) -> a
    void addTextViewToParent(android.view.ViewGroup,android.widget.TextView,java.lang.String) -> a
    void addItemToLayout(android.widget.TextView,java.lang.String) -> a
    void refreshViews$13462e() -> a
    void SetEnable(android.widget.TextView,boolean) -> a
    void setButtonsSingleChoose(java.util.ArrayList,android.widget.TextView) -> a
    void CalculatePrice() -> c
    void onClick(android.view.View) -> onClick
    java.util.ArrayList access$0(com.massvig.ecommerce.activities.SpecActivity) -> a
    android.app.ProgressDialog access$1(com.massvig.ecommerce.activities.SpecActivity) -> b
    com.massvig.ecommerce.activities.BaseApplication access$2(com.massvig.ecommerce.activities.SpecActivity) -> c
    com.massvig.ecommerce.managers.DealActivityManager access$3(com.massvig.ecommerce.activities.SpecActivity) -> d
    android.widget.EditText access$4(com.massvig.ecommerce.activities.SpecActivity) -> e
    void access$5(com.massvig.ecommerce.activities.SpecActivity) -> f
    android.widget.TextView access$6(com.massvig.ecommerce.activities.SpecActivity) -> g
com.massvig.ecommerce.activities.SpecActivity$1 -> com.massvig.ecommerce.activities.jt:
    com.massvig.ecommerce.activities.SpecActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.SpecActivity$2 -> com.massvig.ecommerce.activities.ju:
    com.massvig.ecommerce.activities.SpecActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.SpecActivity$3 -> com.massvig.ecommerce.activities.jv:
    com.massvig.ecommerce.activities.SpecActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.massvig.ecommerce.activities.SpecActivity$AddToShoppingCarAsync -> com.massvig.ecommerce.activities.jw:
    com.massvig.ecommerce.activities.SpecActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Integer doInBackground$9ecd34e() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.activities.SpecActivity$MyButton -> com.massvig.ecommerce.activities.jx:
    android.widget.TextView view -> a
    int categoryID -> b
    boolean enable -> c
    boolean selected -> d
    java.lang.String imgurl -> e
    com.massvig.ecommerce.activities.SpecActivity this$0 -> f
com.massvig.ecommerce.activities.SpecActivity$MyClick -> com.massvig.ecommerce.activities.jy:
    com.massvig.ecommerce.activities.SpecActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.SubSortListActivity -> com.massvig.ecommerce.activities.SubSortListActivity:
    android.widget.ListView listView -> a
    android.view.LayoutInflater mInflater -> b
    org.json.JSONArray categoryData -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    org.json.JSONArray access$0(com.massvig.ecommerce.activities.SubSortListActivity) -> a
    android.view.LayoutInflater access$1(com.massvig.ecommerce.activities.SubSortListActivity) -> b
com.massvig.ecommerce.activities.SubSortListActivity$1 -> com.massvig.ecommerce.activities.jz:
    com.massvig.ecommerce.activities.SubSortListActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.SubSortListActivity$MyAdapter -> com.massvig.ecommerce.activities.ka:
    com.massvig.ecommerce.activities.SubSortListActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.massvig.ecommerce.activities.SubSortListActivity$MyAdapter$ViewHolder -> com.massvig.ecommerce.activities.kb:
    android.widget.TextView name -> a
    com.massvig.ecommerce.activities.SubSortListActivity$MyAdapter this$1 -> b
com.massvig.ecommerce.activities.TouchUsActivity -> com.massvig.ecommerce.activities.TouchUsActivity:
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.activities.UserInformationActivity -> com.massvig.ecommerce.activities.UserInformationActivity:
    com.massvig.ecommerce.managers.UserInfoManager manager -> a
    com.massvig.ecommerce.activities.BaseApplication app -> b
    com.massvig.ecommerce.widgets.NetImageView headImg -> c
    android.widget.ImageView sexImg -> d
    android.widget.LinearLayout unLogin_layout -> e
    android.widget.RelativeLayout login_layout -> f
    android.widget.TextView username -> g
    android.widget.TextView attention -> h
    android.widget.TextView fans -> i
    android.widget.TextView message_number -> j
    android.widget.TextView unpay_number -> k
    android.widget.TextView payed_number -> l
    android.widget.TextView refund_number -> m
    android.widget.TextView huodao_number -> n
    com.massvig.ecommerce.activities.UserInformationActivity$MyBroadCast receiver -> o
    com.massvig.ecommerce.utilities.MassVigExit exit -> p
    android.os.Handler mHandler -> q
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onResume() -> onResume
    void onClick(android.view.View) -> onClick
    void Success(int) -> a
    void Failed(int) -> b
    void SessionFailed() -> a
    void Dialog(boolean) -> a
    void LoadData(com.massvig.ecommerce.managers.UserInfoManager$Numbers) -> a
    void NickName() -> c
    android.widget.TextView access$0(com.massvig.ecommerce.activities.UserInformationActivity) -> a
    android.widget.TextView access$1(com.massvig.ecommerce.activities.UserInformationActivity) -> b
    android.widget.TextView access$2(com.massvig.ecommerce.activities.UserInformationActivity) -> c
    android.widget.TextView access$3(com.massvig.ecommerce.activities.UserInformationActivity) -> d
    android.widget.TextView access$4(com.massvig.ecommerce.activities.UserInformationActivity) -> e
    android.widget.TextView access$5(com.massvig.ecommerce.activities.UserInformationActivity) -> f
    com.massvig.ecommerce.managers.UserInfoManager access$6(com.massvig.ecommerce.activities.UserInformationActivity) -> g
    com.massvig.ecommerce.activities.BaseApplication access$7(com.massvig.ecommerce.activities.UserInformationActivity) -> h
    android.widget.TextView access$8(com.massvig.ecommerce.activities.UserInformationActivity) -> i
com.massvig.ecommerce.activities.UserInformationActivity$1 -> com.massvig.ecommerce.activities.kc:
    com.massvig.ecommerce.activities.UserInformationActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.activities.UserInformationActivity$MyBroadCast -> com.massvig.ecommerce.activities.UserInformationActivity$MyBroadCast:
    com.massvig.ecommerce.activities.UserInformationActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.massvig.ecommerce.activities.UserManageAddressActivity -> com.massvig.ecommerce.activities.UserManageAddressActivity:
    com.massvig.ecommerce.managers.AddressManager mManager -> a
    android.widget.ListView listView -> b
    android.view.LayoutInflater mInflater -> c
    com.massvig.ecommerce.activities.UserManageAddressActivity$AddressAdapter mAdapter -> d
    com.massvig.ecommerce.activities.BaseApplication app -> e
    int tempID -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onClick(android.view.View) -> onClick
    void Success(int) -> a
    void Failed(int) -> b
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void SessionidFail() -> a
    com.massvig.ecommerce.managers.AddressManager access$0(com.massvig.ecommerce.activities.UserManageAddressActivity) -> a
    android.view.LayoutInflater access$1(com.massvig.ecommerce.activities.UserManageAddressActivity) -> b
    void access$2(com.massvig.ecommerce.activities.UserManageAddressActivity,int) -> a
com.massvig.ecommerce.activities.UserManageAddressActivity$1 -> com.massvig.ecommerce.activities.kd:
    com.massvig.ecommerce.activities.UserManageAddressActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.activities.UserManageAddressActivity$AddressAdapter -> com.massvig.ecommerce.activities.ke:
    com.massvig.ecommerce.activities.UserManageAddressActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.massvig.ecommerce.activities.UserManageAddressActivity$AddressAdapter$ViewHolder -> com.massvig.ecommerce.activities.kf:
    android.widget.TextView userName -> a
    android.widget.TextView detailText -> b
    com.massvig.ecommerce.activities.UserManageAddressActivity$AddressAdapter this$1 -> c
com.massvig.ecommerce.activities.WebViewActivity -> com.massvig.ecommerce.activities.WebViewActivity:
    android.webkit.WebView mWebView -> a
    java.lang.String url -> b
    void onCreate(android.os.Bundle) -> onCreate
com.massvig.ecommerce.activities.WebViewActivity$1 -> com.massvig.ecommerce.activities.kg:
    com.massvig.ecommerce.activities.WebViewActivity this$0 -> a
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
com.massvig.ecommerce.activities.WebViewActivity$2 -> com.massvig.ecommerce.activities.kh:
    com.massvig.ecommerce.activities.WebViewActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.base64.BASE64Decoder -> com.massvig.ecommerce.a.a:
    char[] pem_array -> b
    byte[] pem_convert_array -> c
    byte[] decode_buffer -> a
    void decodeAtom(java.io.PushbackInputStream,java.io.OutputStream,int) -> a
com.massvig.ecommerce.base64.BASE64Encoder -> com.massvig.ecommerce.a.b:
    char[] pem_array -> b
    void encodeAtom(java.io.OutputStream,byte[],int,int) -> a
com.massvig.ecommerce.base64.CEFormatException -> com.massvig.ecommerce.a.c:
com.massvig.ecommerce.base64.CEStreamExhausted -> com.massvig.ecommerce.a.d:
com.massvig.ecommerce.base64.CharacterDecoder -> com.massvig.ecommerce.a.e:
    void decodeAtom(java.io.PushbackInputStream,java.io.OutputStream,int) -> a
    void decodeBuffer(java.io.InputStream,java.io.OutputStream) -> a
    byte[] decodeBuffer(java.lang.String) -> a
com.massvig.ecommerce.base64.CharacterEncoder -> com.massvig.ecommerce.a.f:
    java.io.PrintStream pStream -> a
    void encodeAtom(java.io.OutputStream,byte[],int,int) -> a
    int readFully(java.io.InputStream,byte[]) -> a
    void encodeBuffer(java.io.InputStream,java.io.OutputStream) -> a
    java.lang.String encodeBuffer(byte[]) -> a
com.massvig.ecommerce.boqi.R -> com.massvig.ecommerce.boqi.R:
com.massvig.ecommerce.boqi.R$anim -> com.massvig.ecommerce.boqi.R$anim:
    int anim_enter -> anim_enter
    int anim_exit -> anim_exit
    int back_enter -> back_enter
    int back_exit -> back_exit
com.massvig.ecommerce.boqi.R$array -> com.massvig.ecommerce.boqi.R$array:
    int numbers -> numbers
    int qq_numbers -> qq_numbers
    int refund_reason -> refund_reason
    int share_fs -> share_fs
com.massvig.ecommerce.boqi.R$attr -> com.massvig.ecommerce.boqi.R$attr:
com.massvig.ecommerce.boqi.R$bool -> com.massvig.ecommerce.boqi.R$bool:
    int ga_autoActivityTracking -> ga_autoActivityTracking
    int ga_reportUncaughtExceptions -> ga_reportUncaughtExceptions
com.massvig.ecommerce.boqi.R$color -> com.massvig.ecommerce.boqi.R$color:
    int action_green -> action_green
    int action_red -> action_red
    int action_yellow -> action_yellow
    int color_address_text -> color_address_text
    int color_bg_page -> color_bg_page
    int color_black -> color_black
    int color_black_text -> color_black_text
    int color_cancel -> color_cancel
    int color_light_text -> color_light_text
    int color_red -> color_red
    int color_refund -> color_refund
    int color_sure -> color_sure
    int color_text -> color_text
    int color_title_text -> color_title_text
    int color_white -> color_white
com.massvig.ecommerce.boqi.R$drawable -> com.massvig.ecommerce.boqi.R$drawable:
    int action_bottom -> action_bottom
    int action_line -> action_line
    int add_post_bg2 -> add_post_bg2
    int add_post_bg2_r -> add_post_bg2_r
    int add_post_pic1_btn_d -> add_post_pic1_btn_d
    int add_post_pic1_btn_p -> add_post_pic1_btn_p
    int add_post_pic_btn1 -> add_post_pic_btn1
    int add_post_share_l_btn -> add_post_share_l_btn
    int add_post_share_l_d -> add_post_share_l_d
    int add_post_share_l_p -> add_post_share_l_p
    int add_post_share_qq_btn -> add_post_share_qq_btn
    int add_post_share_qq_btn_d -> add_post_share_qq_btn_d
    int add_post_share_qq_btn_p -> add_post_share_qq_btn_p
    int add_post_share_sina_btn -> add_post_share_sina_btn
    int add_post_share_sina_btn_d -> add_post_share_sina_btn_d
    int add_post_share_sina_btn_p -> add_post_share_sina_btn_p
    int add_post_sj_btn_d -> add_post_sj_btn_d
    int add_post_sj_btn_p -> add_post_sj_btn_p
    int add_share_01 -> add_share_01
    int add_share_02 -> add_share_02
    int all_select -> all_select
    int all_select_01 -> all_select_01
    int all_select_02 -> all_select_02
    int all_select_03 -> all_select_03
    int all_select_04 -> all_select_04
    int all_select_other -> all_select_other
    int bg_asc -> bg_asc
    int bg_big_btn -> bg_big_btn
    int bg_big_btn_01 -> bg_big_btn_01
    int bg_big_btn_02 -> bg_big_btn_02
    int bg_big_btn_white -> bg_big_btn_white
    int bg_big_btn_white_01 -> bg_big_btn_white_01
    int bg_big_btn_white_02 -> bg_big_btn_white_02
    int bg_bottom_2 -> bg_bottom_2
    int bg_buy_btn -> bg_buy_btn
    int bg_buy_btn_01 -> bg_buy_btn_01
    int bg_buy_btn_02 -> bg_buy_btn_02
    int bg_chat -> bg_chat
    int bg_chat_left -> bg_chat_left
    int bg_chat_right -> bg_chat_right
    int bg_chat_title -> bg_chat_title
    int bg_community_bottom -> bg_community_bottom
    int bg_coupon -> bg_coupon
    int bg_delete_01 -> bg_delete_01
    int bg_delete_02 -> bg_delete_02
    int bg_delete_btn -> bg_delete_btn
    int bg_desc -> bg_desc
    int bg_dialog -> bg_dialog
    int bg_dialog_btn -> bg_dialog_btn
    int bg_edit_chat -> bg_edit_chat
    int bg_edit_number -> bg_edit_number
    int bg_edit_post -> bg_edit_post
    int bg_enable -> bg_enable
    int bg_frame_title -> bg_frame_title
    int bg_friend_nodata -> bg_friend_nodata
    int bg_goods_outside -> bg_goods_outside
    int bg_imageview -> bg_imageview
    int bg_insert_bottom -> bg_insert_bottom
    int bg_invalid -> bg_invalid
    int bg_line -> bg_line
    int bg_main_ad -> bg_main_ad
    int bg_main_image -> bg_main_image
    int bg_main_search -> bg_main_search
    int bg_main_second -> bg_main_second
    int bg_main_up -> bg_main_up
    int bg_map_left -> bg_map_left
    int bg_map_left_01 -> bg_map_left_01
    int bg_map_left_02 -> bg_map_left_02
    int bg_map_right -> bg_map_right
    int bg_map_right_01 -> bg_map_right_01
    int bg_map_right_02 -> bg_map_right_02
    int bg_merchant_map -> bg_merchant_map
    int bg_message_number -> bg_message_number
    int bg_modify_pass -> bg_modify_pass
    int bg_num -> bg_num
    int bg_number -> bg_number
    int bg_order_alipay_pay -> bg_order_alipay_pay
    int bg_order_alipay_safe_pay -> bg_order_alipay_safe_pay
    int bg_order_alipay_safe_unpay -> bg_order_alipay_safe_unpay
    int bg_order_alipay_unpay -> bg_order_alipay_unpay
    int bg_order_bank_pay -> bg_order_bank_pay
    int bg_order_bank_unpay -> bg_order_bank_unpay
    int bg_order_zhaoh -> bg_order_zhaoh
    int bg_order_zhaoh_unpay -> bg_order_zhaoh_unpay
    int bg_orders_nodata -> bg_orders_nodata
    int bg_price_filter -> bg_price_filter
    int bg_qipao -> bg_qipao
    int bg_radio -> bg_radio
    int bg_search_bottom -> bg_search_bottom
    int bg_search_btn -> bg_search_btn
    int bg_searh_pic -> bg_searh_pic
    int bg_selected -> bg_selected
    int bg_settle -> bg_settle
    int bg_shadow -> bg_shadow
    int bg_share_line -> bg_share_line
    int bg_share_post_bottom -> bg_share_post_bottom
    int bg_shopping_bottom -> bg_shopping_bottom
    int bg_shopping_list -> bg_shopping_list
    int bg_shopping_nodata -> bg_shopping_nodata
    int bg_taobao_search -> bg_taobao_search
    int bg_three_bottom -> bg_three_bottom
    int bg_title -> bg_title
    int bg_unselected -> bg_unselected
    int bg_user -> bg_user
    int bg_user_modify -> bg_user_modify
    int browsing_deals_near_map_item_bg -> browsing_deals_near_map_item_bg
    int browsing_deals_near_map_item_content_button_bg -> browsing_deals_near_map_item_content_button_bg
    int browsing_deals_near_map_location_bg -> browsing_deals_near_map_location_bg
    int browsing_deals_near_map_location_bg1 -> browsing_deals_near_map_location_bg1
    int browsing_near_map_view_nor -> browsing_near_map_view_nor
    int browsing_near_map_view_normal -> browsing_near_map_view_normal
    int browsing_near_map_view_pressed -> browsing_near_map_view_pressed
    int btn_delete -> btn_delete
    int cate_dialog_item_bg1 -> cate_dialog_item_bg1
    int cate_dialog_item_color1 -> cate_dialog_item_color1
    int category_dialog_view_bg1 -> category_dialog_view_bg1
    int category_dialog_view_bg2 -> category_dialog_view_bg2
    int category_dialog_view_bg3 -> category_dialog_view_bg3
    int category_dialog_view_icon -> category_dialog_view_icon
    int category_dialog_view_icon2 -> category_dialog_view_icon2
    int category_dialog_view_icon3 -> category_dialog_view_icon3
    int check -> check
    int community_attention_btn_add -> community_attention_btn_add
    int community_attention_btn_add_01 -> community_attention_btn_add_01
    int community_attention_btn_add_02 -> community_attention_btn_add_02
    int community_attention_btn_remove -> community_attention_btn_remove
    int community_attention_btn_remove_01 -> community_attention_btn_remove_01
    int community_attention_btn_remove_02 -> community_attention_btn_remove_02
    int community_fans_bg4 -> community_fans_bg4
    int community_fans_btn1 -> community_fans_btn1
    int community_fans_btn1_d -> community_fans_btn1_d
    int community_fans_btn1_p -> community_fans_btn1_p
    int community_fans_tab1 -> community_fans_tab1
    int community_fans_tab1_d -> community_fans_tab1_d
    int community_fans_tab1_p -> community_fans_tab1_p
    int community_fans_tab2 -> community_fans_tab2
    int community_fans_tab2_d -> community_fans_tab2_d
    int community_fans_tab2_p -> community_fans_tab2_p
    int community_fans_tab3 -> community_fans_tab3
    int community_fans_tab3_d -> community_fans_tab3_d
    int community_fans_tab3_p -> community_fans_tab3_p
    int community_icon3 -> community_icon3
    int community_menu_bg_1 -> community_menu_bg_1
    int community_menu_bg_2 -> community_menu_bg_2
    int community_menu_icon1 -> community_menu_icon1
    int community_menu_icon11 -> community_menu_icon11
    int community_menu_icon2 -> community_menu_icon2
    int community_menu_icon3 -> community_menu_icon3
    int community_menu_icon4 -> community_menu_icon4
    int community_menu_icon5 -> community_menu_icon5
    int community_menu_icon6 -> community_menu_icon6
    int community_menu_icon7 -> community_menu_icon7
    int community_menu_icon8 -> community_menu_icon8
    int community_menu_item -> community_menu_item
    int community_menu_item_d -> community_menu_item_d
    int community_menu_item_p -> community_menu_item_p
    int community_menu_type_bg -> community_menu_type_bg
    int community_menu_user_icon -> community_menu_user_icon
    int community_user_info_bc -> community_user_info_bc
    int community_user_info_bc1 -> community_user_info_bc1
    int community_user_info_bc2 -> community_user_info_bc2
    int community_user_info_bl -> community_user_info_bl
    int community_user_info_bl1 -> community_user_info_bl1
    int community_user_info_bl2 -> community_user_info_bl2
    int community_user_info_br -> community_user_info_br
    int community_user_info_br1 -> community_user_info_br1
    int community_user_info_br2 -> community_user_info_br2
    int commutity_user_icon_d -> commutity_user_icon_d
    int commutity_user_icon_new_d -> commutity_user_icon_new_d
    int deal_map_view_location -> deal_map_view_location
    int deals_list_item_ic_loc_v1 -> deals_list_item_ic_loc_v1
    int default_icon -> default_icon
    int discount_01 -> discount_01
    int discount_02 -> discount_02
    int discount_btn -> discount_btn
    int fc_icon_01 -> fc_icon_01
    int fc_icon_02 -> fc_icon_02
    int fc_icon_03 -> fc_icon_03
    int fc_icon_04 -> fc_icon_04
    int fc_icon_05 -> fc_icon_05
    int fc_icon_06 -> fc_icon_06
    int fc_icon_07 -> fc_icon_07
    int fc_icon_08 -> fc_icon_08
    int fc_icon_09 -> fc_icon_09
    int goods_item_bg -> goods_item_bg
    int goods_item_bg_arr -> goods_item_bg_arr
    int goods_item_bg_d -> goods_item_bg_d
    int goods_item_bg_icon -> goods_item_bg_icon
    int goods_item_bg_p -> goods_item_bg_p
    int goods_item_bg_pic -> goods_item_bg_pic
    int goods_item_bg_pic_1 -> goods_item_bg_pic_1
    int ic_action_back -> ic_action_back
    int ic_add -> ic_add
    int ic_add_fans -> ic_add_fans
    int ic_add_share -> ic_add_share
    int ic_address -> ic_address
    int ic_ali -> ic_ali
    int ic_all_category -> ic_all_category
    int ic_asc_01 -> ic_asc_01
    int ic_asc_02 -> ic_asc_02
    int ic_back -> ic_back
    int ic_back_01 -> ic_back_01
    int ic_back_02 -> ic_back_02
    int ic_black -> ic_black
    int ic_black_01 -> ic_black_01
    int ic_black_02 -> ic_black_02
    int ic_bottom_btn -> ic_bottom_btn
    int ic_btn_shopping_01 -> ic_btn_shopping_01
    int ic_btn_shopping_02 -> ic_btn_shopping_02
    int ic_btn_shopping_03 -> ic_btn_shopping_03
    int ic_btn_tao_search -> ic_btn_tao_search
    int ic_buottom_btn_01 -> ic_buottom_btn_01
    int ic_buottom_btn_02 -> ic_buottom_btn_02
    int ic_buy -> ic_buy
    int ic_buy_01 -> ic_buy_01
    int ic_buy_02 -> ic_buy_02
    int ic_chat -> ic_chat
    int ic_checked -> ic_checked
    int ic_clock -> ic_clock
    int ic_close -> ic_close
    int ic_collect_01 -> ic_collect_01
    int ic_collect_02 -> ic_collect_02
    int ic_comment -> ic_comment
    int ic_comment_01 -> ic_comment_01
    int ic_comment_02 -> ic_comment_02
    int ic_community_camera -> ic_community_camera
    int ic_delete -> ic_delete
    int ic_delete_01 -> ic_delete_01
    int ic_delete_02 -> ic_delete_02
    int ic_desc_01 -> ic_desc_01
    int ic_desc_02 -> ic_desc_02
    int ic_dot_black -> ic_dot_black
    int ic_dot_red -> ic_dot_red
    int ic_down -> ic_down
    int ic_find_password -> ic_find_password
    int ic_good_detail_cai -> ic_good_detail_cai
    int ic_good_detail_collect -> ic_good_detail_collect
    int ic_good_detail_collect_01 -> ic_good_detail_collect_01
    int ic_good_detail_collect_02 -> ic_good_detail_collect_02
    int ic_good_detail_praise_01 -> ic_good_detail_praise_01
    int ic_good_detail_praise_02 -> ic_good_detail_praise_02
    int ic_good_detail_zan -> ic_good_detail_zan
    int ic_good_line -> ic_good_line
    int ic_goode_detail_background -> ic_goode_detail_background
    int ic_goode_detail_cai_01 -> ic_goode_detail_cai_01
    int ic_goode_detail_cai_02 -> ic_goode_detail_cai_02
    int ic_goode_detail_zan_01 -> ic_goode_detail_zan_01
    int ic_goode_detail_zan_02 -> ic_goode_detail_zan_02
    int ic_goodslist_comment -> ic_goodslist_comment
    int ic_hor -> ic_hor
    int ic_huo -> ic_huo
    int ic_huodao -> ic_huodao
    int ic_ignore -> ic_ignore
    int ic_insert_default -> ic_insert_default
    int ic_invalid -> ic_invalid
    int ic_jiantou -> ic_jiantou
    int ic_launcher -> ic_launcher
    int ic_left_pressed -> ic_left_pressed
    int ic_left_unpressed -> ic_left_unpressed
    int ic_left_userinfo_btn -> ic_left_userinfo_btn
    int ic_line -> ic_line
    int ic_location_check -> ic_location_check
    int ic_location_close -> ic_location_close
    int ic_location_open -> ic_location_open
    int ic_login -> ic_login
    int ic_login_01 -> ic_login_01
    int ic_login_02 -> ic_login_02
    int ic_login_delete -> ic_login_delete
    int ic_main_line -> ic_main_line
    int ic_merchant_map -> ic_merchant_map
    int ic_message -> ic_message
    int ic_message_01 -> ic_message_01
    int ic_message_02 -> ic_message_02
    int ic_message_o -> ic_message_o
    int ic_money -> ic_money
    int ic_more_p -> ic_more_p
    int ic_move -> ic_move
    int ic_open -> ic_open
    int ic_payed -> ic_payed
    int ic_pengyou -> ic_pengyou
    int ic_pengyou_01 -> ic_pengyou_01
    int ic_pengyou_02 -> ic_pengyou_02
    int ic_post_send -> ic_post_send
    int ic_post_send_01 -> ic_post_send_01
    int ic_post_send_02 -> ic_post_send_02
    int ic_praise_01 -> ic_praise_01
    int ic_praise_02 -> ic_praise_02
    int ic_reason_icon -> ic_reason_icon
    int ic_refresh -> ic_refresh
    int ic_refresh_01 -> ic_refresh_01
    int ic_refresh_02 -> ic_refresh_02
    int ic_register -> ic_register
    int ic_remore -> ic_remore
    int ic_right_pressed -> ic_right_pressed
    int ic_right_unpressed -> ic_right_unpressed
    int ic_right_userinfo_btn -> ic_right_userinfo_btn
    int ic_safe -> ic_safe
    int ic_send -> ic_send
    int ic_send_01 -> ic_send_01
    int ic_send_02 -> ic_send_02
    int ic_send_message -> ic_send_message
    int ic_share -> ic_share
    int ic_share_01 -> ic_share_01
    int ic_share_02 -> ic_share_02
    int ic_share_comment -> ic_share_comment
    int ic_share_comment_01 -> ic_share_comment_01
    int ic_share_comment_02 -> ic_share_comment_02
    int ic_share_detail -> ic_share_detail
    int ic_share_detail_01 -> ic_share_detail_01
    int ic_share_detail_02 -> ic_share_detail_02
    int ic_share_location -> ic_share_location
    int ic_share_new -> ic_share_new
    int ic_share_new_01 -> ic_share_new_01
    int ic_share_new_02 -> ic_share_new_02
    int ic_share_praise -> ic_share_praise
    int ic_share_praise_01 -> ic_share_praise_01
    int ic_share_praise_02 -> ic_share_praise_02
    int ic_share_qq -> ic_share_qq
    int ic_share_sina -> ic_share_sina
    int ic_shopping_checked -> ic_shopping_checked
    int ic_shopping_unckecked -> ic_shopping_unckecked
    int ic_sina -> ic_sina
    int ic_sina_01 -> ic_sina_01
    int ic_sina_02 -> ic_sina_02
    int ic_soft -> ic_soft
    int ic_taobao_01 -> ic_taobao_01
    int ic_taobao_02 -> ic_taobao_02
    int ic_taobao_03 -> ic_taobao_03
    int ic_taobao_04 -> ic_taobao_04
    int ic_taobao_05 -> ic_taobao_05
    int ic_taobao_06 -> ic_taobao_06
    int ic_taobao_share -> ic_taobao_share
    int ic_tencent -> ic_tencent
    int ic_tencent_01 -> ic_tencent_01
    int ic_tencent_02 -> ic_tencent_02
    int ic_transport -> ic_transport
    int ic_transport_01 -> ic_transport_01
    int ic_transport_02 -> ic_transport_02
    int ic_unchecked -> ic_unchecked
    int ic_union -> ic_union
    int ic_unpay -> ic_unpay
    int ic_up -> ic_up
    int ic_ver -> ic_ver
    int ic_weixin -> ic_weixin
    int ic_weixin_01 -> ic_weixin_01
    int ic_weixin_02 -> ic_weixin_02
    int ic_xuxian -> ic_xuxian
    int icon -> icon
    int icon_area_item -> icon_area_item
    int info -> info
    int infoicon -> infoicon
    int launching -> launching
    int left_btn -> left_btn
    int left_btn_01 -> left_btn_01
    int left_btn_02 -> left_btn_02
    int line -> line
    int list_search_01 -> list_search_01
    int list_search_02 -> list_search_02
    int msg_state_failed -> msg_state_failed
    int newest_01 -> newest_01
    int newest_02 -> newest_02
    int newest_btn -> newest_btn
    int notify_btn -> notify_btn
    int post_back -> post_back
    int post_bottom -> post_bottom
    int post_comment -> post_comment
    int post_down -> post_down
    int post_icon -> post_icon
    int post_line -> post_line
    int post_praise -> post_praise
    int post_qq_n -> post_qq_n
    int post_qq_p -> post_qq_p
    int post_share -> post_share
    int post_sina_n -> post_sina_n
    int post_sina_p -> post_sina_p
    int post_up -> post_up
    int post_weixin_n -> post_weixin_n
    int post_weixin_p -> post_weixin_p
    int post_wenxin_p -> post_wenxin_p
    int price_01 -> price_01
    int price_02 -> price_02
    int price_default -> price_default
    int qq_btn -> qq_btn
    int renqi_01 -> renqi_01
    int renqi_02 -> renqi_02
    int renqi_btn -> renqi_btn
    int right_btn -> right_btn
    int right_btn_01 -> right_btn_01
    int right_btn_02 -> right_btn_02
    int saled_01 -> saled_01
    int saled_02 -> saled_02
    int saled_btn -> saled_btn
    int scroll_line -> scroll_line
    int search_btn -> search_btn
    int sex_m -> sex_m
    int sex_w -> sex_w
    int share_praise_bottom -> share_praise_bottom
    int sharp -> sharp
    int shopping_check -> shopping_check
    int sina_btn -> sina_btn
    int tab_1 -> tab_1
    int tab_1_p -> tab_1_p
    int tab_2 -> tab_2
    int tab_2_p -> tab_2_p
    int tab_3 -> tab_3
    int tab_3_p -> tab_3_p
    int tab_4 -> tab_4
    int tab_4_p -> tab_4_p
    int tab_5 -> tab_5
    int tab_5_p -> tab_5_p
    int tao_bao_list_lien -> tao_bao_list_lien
    int tao_filter_bg_m -> tao_filter_bg_m
    int tao_filter_bg_top -> tao_filter_bg_top
    int tao_search_bottom -> tao_search_bottom
    int tao_search_pressed -> tao_search_pressed
    int tao_search_unpressed -> tao_search_unpressed
    int tao_seek_bar_bg -> tao_seek_bar_bg
    int tao_seek_bar_btn -> tao_seek_bar_btn
    int tao_seek_bar_m_bg -> tao_seek_bar_m_bg
    int taobao_08 -> taobao_08
    int taobao_10 -> taobao_10
    int title_bg -> title_bg
    int weixin_btn -> weixin_btn
com.massvig.ecommerce.boqi.R$id -> com.massvig.ecommerce.boqi.R$id:
    int CancelApplyRefunding -> CancelApplyRefunding
    int CancelOrder -> CancelOrder
    int LogisticsInfo -> LogisticsInfo
    int SeekBar -> SeekBar
    int actin -> actin
    int actionimg -> actionimg
    int add -> add
    int add_fans -> add_fans
    int add_post_btn1 -> add_post_btn1
    int add_post_img -> add_post_img
    int add_post_share_location -> add_post_share_location
    int add_post_share_qq -> add_post_share_qq
    int add_post_share_sina -> add_post_share_sina
    int address -> address
    int address_layout -> address_layout
    int address_row -> address_row
    int again_psd -> again_psd
    int agree -> agree
    int aimai -> aimai
    int allselect -> allselect
    int answer -> answer
    int appicon -> appicon
    int applyforrefund -> applyforrefund
    int asc -> asc
    int back -> back
    int background -> background
    int bill -> bill
    int bill1 -> bill1
    int bill2 -> bill2
    int bill3 -> bill3
    int bill4 -> bill4
    int bill5 -> bill5
    int bill6 -> bill6
    int bottom_layout -> bottom_layout
    int bottomlayout -> bottomlayout
    int browsing_map_deal_list -> browsing_map_deal_list
    int browsing_map_deal_quaninty -> browsing_map_deal_quaninty
    int browsing_near_map_list_button -> browsing_near_map_list_button
    int browsing_near_map_view_re -> browsing_near_map_view_re
    int browsing_near_mapview_con_id -> browsing_near_mapview_con_id
    int buy -> buy
    int buy_info -> buy_info
    int cancel -> cancel
    int carriage -> carriage
    int cate_gory_bar_btn1 -> cate_gory_bar_btn1
    int cate_gory_bar_btn2 -> cate_gory_bar_btn2
    int cate_gory_bar_btn3 -> cate_gory_bar_btn3
    int cate_gory_dialog_view -> cate_gory_dialog_view
    int category -> category
    int category_list -> category_list
    int chat -> chat
    int check -> check
    int check1 -> check1
    int check2 -> check2
    int check3 -> check3
    int check4 -> check4
    int checkversion_row -> checkversion_row
    int city -> city
    int city_index_list -> city_index_list
    int city_select_list -> city_select_list
    int city_text -> city_text
    int clear -> clear
    int clear2 -> clear2
    int clear3 -> clear3
    int clearcache_row -> clearcache_row
    int clickIcon -> clickIcon
    int click_btn -> click_btn
    int code -> code
    int collect -> collect
    int collect_list -> collect_list
    int collect_row -> collect_row
    int color -> color
    int comfirm -> comfirm
    int comment -> comment
    int commentCount -> commentCount
    int comment_reply -> comment_reply
    int commentbtn -> commentbtn
    int commentedit -> commentedit
    int community_content -> community_content
    int community_fans_btn -> community_fans_btn
    int community_group_right_btn -> community_group_right_btn
    int community_left_menu -> community_left_menu
    int community_slidelayout -> community_slidelayout
    int compa -> compa
    int company -> company
    int confirm -> confirm
    int confirmRefund -> confirmRefund
    int content -> content
    int contentedit -> contentedit
    int count -> count
    int coupon -> coupon
    int coupon_content -> coupon_content
    int coupon_layout -> coupon_layout
    int coupon_name -> coupon_name
    int coupon_number -> coupon_number
    int coupon_row -> coupon_row
    int create_coupon -> create_coupon
    int current_city -> current_city
    int customerName -> customerName
    int date -> date
    int deal_map_item_content -> deal_map_item_content
    int deals_list_bar_box -> deals_list_bar_box
    int defaultText -> defaultText
    int del -> del
    int delete -> delete
    int delete_item -> delete_item
    int desc -> desc
    int description -> description
    int detail -> detail
    int detail_text -> detail_text
    int discount -> discount
    int distance -> distance
    int dot_images -> dot_images
    int edit -> edit
    int edit_content -> edit_content
    int email -> email
    int express -> express
    int fans -> fans
    int fans_layout -> fans_layout
    int fans_list_attention_count -> fans_list_attention_count
    int fans_list_content -> fans_list_content
    int fans_list_fans_count -> fans_list_fans_count
    int fans_list_img -> fans_list_img
    int fans_list_img1 -> fans_list_img1
    int fans_list_name -> fans_list_name
    int fans_list_time -> fans_list_time
    int fans_user_list -> fans_user_list
    int fc_01 -> fc_01
    int fc_02 -> fc_02
    int fc_03 -> fc_03
    int fc_05 -> fc_05
    int fc_06 -> fc_06
    int fc_07 -> fc_07
    int fc_08 -> fc_08
    int fc_09 -> fc_09
    int feedback_row -> feedback_row
    int find_password -> find_password
    int find_peo -> find_peo
    int finish -> finish
    int follow -> follow
    int fram_button -> fram_button
    int frame_layout -> frame_layout
    int friend_tab1 -> friend_tab1
    int friend_tab2 -> friend_tab2
    int friend_tab3 -> friend_tab3
    int full_screen_btn -> full_screen_btn
    int gallery -> gallery
    int gift -> gift
    int go_back -> go_back
    int go_finish -> go_finish
    int go_in_tag -> go_in_tag
    int goodcommentbtn -> goodcommentbtn
    int goodcommentedit -> goodcommentedit
    int gotobtn -> gotobtn
    int gotobuy -> gotobuy
    int grid -> grid
    int grid1 -> grid1
    int grid2 -> grid2
    int head -> head
    int head_img -> head_img
    int headimg -> headimg
    int hide -> hide
    int hidelayout -> hidelayout
    int huodao_number -> huodao_number
    int huodao_row -> huodao_row
    int icon -> icon
    int icon1 -> icon1
    int icon2 -> icon2
    int icon3 -> icon3
    int icon4 -> icon4
    int igonre_message -> igonre_message
    int image -> image
    int image1 -> image1
    int image2 -> image2
    int image3 -> image3
    int imageview -> imageview
    int imageview1 -> imageview1
    int img -> img
    int img2 -> img2
    int img_praise -> img_praise
    int info -> info
    int info_text -> info_text
    int infor -> infor
    int information -> information
    int invalid -> invalid
    int jiantou -> jiantou
    int key -> key
    int know -> know
    int layout -> layout
    int layout1 -> layout1
    int layout2 -> layout2
    int layout3 -> layout3
    int layout4 -> layout4
    int left_button -> left_button
    int left_layout -> left_layout
    int left_meun_user_icon -> left_meun_user_icon
    int left_meun_user_name -> left_meun_user_name
    int left_tab_radio -> left_tab_radio
    int linear1 -> linear1
    int linear_layout1 -> linear_layout1
    int linear_layout2 -> linear_layout2
    int linear_layout3 -> linear_layout3
    int listview -> listview
    int load_btn_load -> load_btn_load
    int load_btn_loading -> load_btn_loading
    int load_btn_no_data -> load_btn_no_data
    int location -> location
    int location_refresh -> location_refresh
    int location_row -> location_row
    int login -> login
    int login_layout -> login_layout
    int logistics_status -> logistics_status
    int logout -> logout
    int loveshop_count -> loveshop_count
    int man -> man
    int mask -> mask
    int message -> message
    int message_content -> message_content
    int message_number -> message_number
    int message_row -> message_row
    int mobile -> mobile
    int modify -> modify
    int modify_email -> modify_email
    int modify_mobile -> modify_mobile
    int modify_password -> modify_password
    int money -> money
    int more -> more
    int moveimg -> moveimg
    int movelayout -> movelayout
    int my_location_button_id -> my_location_button_id
    int my_mapview_btn_addr -> my_mapview_btn_addr
    int myself -> myself
    int name -> name
    int navi_back_button -> navi_back_button
    int need_bill -> need_bill
    int new_psd -> new_psd
    int newest -> newest
    int nickname -> nickname
    int no -> no
    int no_comment -> no_comment
    int no_full_screen_btn -> no_full_screen_btn
    int no_search_data -> no_search_data
    int nodata -> nodata
    int notify -> notify
    int notify_row -> notify_row
    int number -> number
    int number_layout -> number_layout
    int order_status -> order_status
    int order_time -> order_time
    int orderid -> orderid
    int ori_psd -> ori_psd
    int origin_price -> origin_price
    int oriprice -> oriprice
    int others -> others
    int params_layout -> params_layout
    int parent -> parent
    int password -> password
    int password1 -> password1
    int password2 -> password2
    int pay -> pay
    int payed_number -> payed_number
    int payed_row -> payed_row
    int paytype -> paytype
    int pb -> pb
    int pengyou -> pengyou
    int person -> person
    int person_layout -> person_layout
    int praise -> praise
    int praise_layout -> praise_layout
    int praised_list_view -> praised_list_view
    int praisenum -> praisenum
    int price -> price
    int price_layout -> price_layout
    int price_order -> price_order
    int product_img -> product_img
    int publish_time -> publish_time
    int pull_to_load_progress -> pull_to_load_progress
    int pull_to_load_text -> pull_to_load_text
    int qq -> qq
    int qq_layout -> qq_layout
    int qq_row -> qq_row
    int quality -> quality
    int question -> question
    int radio -> radio
    int real_linear -> real_linear
    int real_price -> real_price
    int realpay -> realpay
    int reason -> reason
    int refresh_list_footer_progressbar -> refresh_list_footer_progressbar
    int refresh_list_footer_text -> refresh_list_footer_text
    int refresh_list_header_last_update -> refresh_list_header_last_update
    int refresh_list_header_progressbar -> refresh_list_header_progressbar
    int refresh_list_header_text -> refresh_list_header_text
    int refund_money -> refund_money
    int refund_number -> refund_number
    int refund_row -> refund_row
    int refund_type -> refund_type
    int region_1 -> region_1
    int region_2 -> region_2
    int region_3 -> region_3
    int register -> register
    int register_1 -> register_1
    int register_2 -> register_2
    int register_3 -> register_3
    int remove_fans -> remove_fans
    int resotre -> resotre
    int right_tab_radio -> right_tab_radio
    int rule -> rule
    int rule_layout -> rule_layout
    int rule_text -> rule_text
    int saled -> saled
    int saved -> saved
    int scan_message -> scan_message
    int score_row -> score_row
    int scroll -> scroll
    int search -> search
    int searchLayout -> searchLayout
    int search_btn -> search_btn
    int search_edit -> search_edit
    int search_fans_edit -> search_fans_edit
    int search_fans_sub_btn -> search_fans_sub_btn
    int search_layout -> search_layout
    int search_text -> search_text
    int seek_left_value -> seek_left_value
    int seek_right_value -> seek_right_value
    int select_express -> select_express
    int select_paytype -> select_paytype
    int selected -> selected
    int send -> send
    int sendbtn -> sendbtn
    int settleaccounts -> settleaccounts
    int sex -> sex
    int sexImg -> sexImg
    int share -> share
    int share_icon -> share_icon
    int share_layout -> share_layout
    int share_new -> share_new
    int share_row -> share_row
    int sharenum -> sharenum
    int shop_name_content -> shop_name_content
    int shopmap -> shopmap
    int shopping_layout -> shopping_layout
    int show_community_left_menu -> show_community_left_menu
    int sina -> sina
    int sina_row -> sina_row
    int slide_btn -> slide_btn
    int sliding -> sliding
    int soft_row -> soft_row
    int status -> status
    int storename -> storename
    int subtitle -> subtitle
    int tab1 -> tab1
    int tab2 -> tab2
    int tab3 -> tab3
    int tab4 -> tab4
    int tabLayout -> tabLayout
    int tab_layout -> tab_layout
    int tab_radio -> tab_radio
    int tab_radio_1 -> tab_radio_1
    int tab_radio_2 -> tab_radio_2
    int tab_radio_3 -> tab_radio_3
    int tab_radio_4 -> tab_radio_4
    int tab_radio_5 -> tab_radio_5
    int tabhost -> tabhost
    int tablayout -> tablayout
    int take_picture_button -> take_picture_button
    int tao_seek_Right_btn -> tao_seek_Right_btn
    int tao_seek_left_btn -> tao_seek_left_btn
    int tao_seek_middel_btn -> tao_seek_middel_btn
    int taobaowaterfall -> taobaowaterfall
    int tele -> tele
    int tele_layout -> tele_layout
    int tencent -> tencent
    int text -> text
    int text1 -> text1
    int text2 -> text2
    int text_count -> text_count
    int text_praise -> text_praise
    int text_share -> text_share
    int textpraise -> textpraise
    int time -> time
    int title -> title
    int title_text -> title_text
    int titlelayout -> titlelayout
    int tolook -> tolook
    int top_bar_box -> top_bar_box
    int topay -> topay
    int total -> total
    int total_money -> total_money
    int total_yuan -> total_yuan
    int touchus_row -> touchus_row
    int txt -> txt
    int unlogin_layout -> unlogin_layout
    int unpay_number -> unpay_number
    int unpay_row -> unpay_row
    int use_coupon -> use_coupon
    int userImg -> userImg
    int user_info_action_txt -> user_info_action_txt
    int user_info_attention_txt -> user_info_attention_txt
    int user_info_box -> user_info_box
    int user_info_fans_txt -> user_info_fans_txt
    int user_info_icon -> user_info_icon
    int user_info_name -> user_info_name
    int userimg -> userimg
    int userinfobox -> userinfobox
    int username -> username
    int username1 -> username1
    int viewPager1 -> viewPager1
    int volume -> volume
    int waterfall_container -> waterfall_container
    int waterfall_scroll -> waterfall_scroll
    int web -> web
    int web_address -> web_address
    int web_info -> web_info
    int web_trans -> web_trans
    int web_view -> web_view
    int webview -> webview
    int weixin -> weixin
    int woman -> woman
    int write -> write
    int yes -> yes
    int zipcode -> zipcode
com.massvig.ecommerce.boqi.R$layout -> com.massvig.ecommerce.boqi.R$layout:
    int action_detail -> action_detail
    int action_item -> action_item
    int ad_item -> ad_item
    int ad_item1 -> ad_item1
    int address_detail -> address_detail
    int address_item -> address_item
    int adgoodslist -> adgoodslist
    int aliweb -> aliweb
    int area_item -> area_item
    int bill -> bill
    int browsing_deals_near_map_item_content -> browsing_deals_near_map_item_content
    int category_dialog_bar -> category_dialog_bar
    int category_dialog_view -> category_dialog_view
    int category_dialog_view_item -> category_dialog_view_item
    int category_dialog_view_item2 -> category_dialog_view_item2
    int chat_activity -> chat_activity
    int chat_msg_item_left -> chat_msg_item_left
    int chat_msg_item_right -> chat_msg_item_right
    int city_item -> city_item
    int collect -> collect
    int collect_item -> collect_item
    int comment_item -> comment_item
    int community_fans_list -> community_fans_list
    int community_fans_list_item -> community_fans_list_item
    int community_friend_tab -> community_friend_tab
    int community_item -> community_item
    int community_left_menu -> community_left_menu
    int community_load_view -> community_load_view
    int community_main -> community_main
    int community_main_group -> community_main_group
    int community_my_attention -> community_my_attention
    int community_praised -> community_praised
    int community_praised_item -> community_praised_item
    int community_share -> community_share
    int community_signal_main -> community_signal_main
    int community_user_detail_item -> community_user_detail_item
    int copyofmain -> copyofmain
    int coupon -> coupon
    int coupon_item -> coupon_item
    int coupon_manager -> coupon_manager
    int coupon_manager_item -> coupon_manager_item
    int crop -> crop
    int find_password -> find_password
    int find_people -> find_people
    int full -> full
    int gallerylayout -> gallerylayout
    int good_comment_item -> good_comment_item
    int goods_comment -> goods_comment
    int goods_detail -> goods_detail
    int goods_detail_head -> goods_detail_head
    int goods_info -> goods_info
    int goods_item -> goods_item
    int goods_params -> goods_params
    int goodslist -> goodslist
    int goodswater -> goodswater
    int insert_post -> insert_post
    int invalid_item -> invalid_item
    int invalid_product -> invalid_product
    int launching -> launching
    int login -> login
    int main -> main
    int maintab -> maintab
    int manage_address -> manage_address
    int manager_coupon -> manager_coupon
    int manager_coupon_item -> manager_coupon_item
    int manager_order -> manager_order
    int merchant_item -> merchant_item
    int message -> message
    int message_item -> message_item
    int modify -> modify
    int modify_user_info -> modify_user_info
    int my_modify_password -> my_modify_password
    int near_person -> near_person
    int near_person_item -> near_person_item
    int near_refresh_list_header -> near_refresh_list_header
    int new_action_detail -> new_action_detail
    int new_action_detail_head -> new_action_detail_head
    int new_action_item -> new_action_item
    int option -> option
    int order_confirm -> order_confirm
    int order_detail -> order_detail
    int order_item -> order_item
    int order_item_layout -> order_item_layout
    int orders -> orders
    int paytype -> paytype
    int post_detail -> post_detail
    int post_headview -> post_headview
    int post_item -> post_item
    int price_filter -> price_filter
    int recommend -> recommend
    int refresh_list_footer -> refresh_list_footer
    int refresh_list_header -> refresh_list_header
    int refund -> refund
    int refund_item -> refund_item
    int refund_reason -> refund_reason
    int register -> register
    int register_1 -> register_1
    int register_2 -> register_2
    int register_3 -> register_3
    int search -> search
    int search_item -> search_item
    int select_address -> select_address
    int select_address_item -> select_address_item
    int select_city -> select_city
    int select_city_index_item -> select_city_index_item
    int select_city_item -> select_city_item
    int select_city_tag_item -> select_city_tag_item
    int setting -> setting
    int share_account -> share_account
    int share_web_view -> share_web_view
    int sharegoodsview -> sharegoodsview
    int shopmap -> shopmap
    int shopping_item -> shopping_item
    int shoppoingcar -> shoppoingcar
    int simple_listitem -> simple_listitem
    int sort -> sort
    int sort_item -> sort_item
    int spec -> spec
    int subsort -> subsort
    int subsort_item -> subsort_item
    int toknow -> toknow
    int touchus -> touchus
    int type_one -> type_one
    int type_three -> type_three
    int user_info -> user_info
    int waterfall -> waterfall
    int web -> web
com.massvig.ecommerce.boqi.R$string -> com.massvig.ecommerce.boqi.R$string:
    int AddOption_title -> AddOption_title
    int accomplished_text -> accomplished_text
    int account_failed -> account_failed
    int action -> action
    int action_hot -> action_hot
    int action_new -> action_new
    int action_rebate -> action_rebate
    int addCollect_failed -> addCollect_failed
    int addCollect_success -> addCollect_success
    int add_fail -> add_fail
    int add_fans_fail -> add_fans_fail
    int add_fans_succeed -> add_fans_succeed
    int addoption_failed -> addoption_failed
    int addoption_success -> addoption_success
    int address_unsupport -> address_unsupport
    int addressdetail -> addressdetail
    int alipay -> alipay
    int alipay_confirm_install -> alipay_confirm_install
    int alipay_confirm_install_hint -> alipay_confirm_install_hint
    int alipay_remote_call_failed -> alipay_remote_call_failed
    int alipay_tips -> alipay_tips
    int aliwappay -> aliwappay
    int aliwebpay -> aliwebpay
    int all -> all
    int already -> already
    int already_buy -> already_buy
    int already_down -> already_down
    int already_exist -> already_exist
    int already_newest -> already_newest
    int already_use -> already_use
    int app_name -> app_name
    int atone -> atone
    int attention -> attention
    int bind -> bind
    int binded -> binded
    int browse_deals_loading -> browse_deals_loading
    int buyed -> buyed
    int cai -> cai
    int camera -> camera
    int campaign_day_ago -> campaign_day_ago
    int campaign_hour_ago -> campaign_hour_ago
    int campaign_minute_ago -> campaign_minute_ago
    int campaign_month_ago -> campaign_month_ago
    int campaign_second_ago -> campaign_second_ago
    int campaign_week_ago -> campaign_week_ago
    int campaign_year_ago -> campaign_year_ago
    int cancel -> cancel
    int cancel_order -> cancel_order
    int change -> change
    int channel -> channel
    int chat -> chat
    int ci -> ci
    int clearcache -> clearcache
    int closed_text -> closed_text
    int collect -> collect
    int collect_title -> collect_title
    int comment -> comment
    int comment_failed -> comment_failed
    int comment_infor -> comment_infor
    int comment_success -> comment_success
    int commenting -> commenting
    int community_main -> community_main
    int communitysignal_1 -> communitysignal_1
    int communitysignal_2 -> communitysignal_2
    int confirm_goods -> confirm_goods
    int confirm_psd_error -> confirm_psd_error
    int copy -> copy
    int coupon -> coupon
    int coupon_ac -> coupon_ac
    int coupon_empty -> coupon_empty
    int coupon_manager -> coupon_manager
    int coupon_name -> coupon_name
    int current_city_tips -> current_city_tips
    int cut_city -> cut_city
    int day -> day
    int day_ago -> day_ago
    int default_city -> default_city
    int deleteCollect_failed -> deleteCollect_failed
    int deleteCollect_success -> deleteCollect_success
    int delete_fail -> delete_fail
    int delete_order -> delete_order
    int delete_post -> delete_post
    int deleted_text -> deleted_text
    int diff_password -> diff_password
    int discount -> discount
    int distance -> distance
    int down_pull_refresh -> down_pull_refresh
    int enter_code -> enter_code
    int enter_coupon -> enter_coupon
    int enter_email -> enter_email
    int enter_mobile -> enter_mobile
    int enter_password -> enter_password
    int exit_message -> exit_message
    int fans -> fans
    int fanslist -> fanslist
    int findpassword -> findpassword
    int finish -> finish
    int ga_appName -> ga_appName
    int ga_trackingId -> ga_trackingId
    int goods_price -> goods_price
    int goodsdetail -> goodsdetail
    int goodslist -> goodslist
    int hello -> hello
    int hot_good -> hot_good
    int hour_ago -> hour_ago
    int huodao -> huodao
    int information_error -> information_error
    int information_success -> information_success
    int insert_pic -> insert_pic
    int insertpost -> insertpost
    int invalid -> invalid
    int invalidproducts -> invalidproducts
    int isnotemail -> isnotemail
    int isnotmobi -> isnotmobi
    int isnotmobile -> isnotmobile
    int jiesuan -> jiesuan
    int know -> know
    int know_left -> know_left
    int know_right -> know_right
    int load_bautique -> load_bautique
    int load_more -> load_more
    int loading_data -> loading_data
    int location_locating -> location_locating
    int location_permission -> location_permission
    int location_shi -> location_shi
    int location_succ -> location_succ
    int login -> login
    int login_fail -> login_fail
    int login_first -> login_first
    int login_succ -> login_succ
    int logisticswebview -> logisticswebview
    int love_shop -> love_shop
    int main -> main
    int man -> man
    int manageraddress -> manageraddress
    int managerorder -> managerorder
    int market -> market
    int messages -> messages
    int minute_ago -> minute_ago
    int mobile_text -> mobile_text
    int modify -> modify
    int modify_ac -> modify_ac
    int modify_fail -> modify_fail
    int modify_text -> modify_text
    int modifying -> modifying
    int modifyuserinfo -> modifyuserinfo
    int money -> money
    int money_text -> money_text
    int month -> month
    int month_ago -> month_ago
    int nearperson -> nearperson
    int network_unable -> network_unable
    int network_unconnect -> network_unconnect
    int new_action_detail -> new_action_detail
    int new_good -> new_good
    int next -> next
    int no_collects -> no_collects
    int no_data -> no_data
    int no_key -> no_key
    int no_message -> no_message
    int no_option -> no_option
    int no_sdcard -> no_sdcard
    int no_telephone -> no_telephone
    int none -> none
    int none_exist -> none_exist
    int not_bind -> not_bind
    int not_location -> not_location
    int not_use -> not_use
    int notsupport -> notsupport
    int number -> number
    int oauth_fail -> oauth_fail
    int open_gps -> open_gps
    int option -> option
    int option_null -> option_null
    int order_data -> order_data
    int order_fail -> order_fail
    int order_no -> order_no
    int orderconfirm -> orderconfirm
    int orderdetail -> orderdetail
    int ori_psd_error -> ori_psd_error
    int password_error -> password_error
    int password_success -> password_success
    int paying -> paying
    int paytype -> paytype
    int person -> person
    int phone_gallery -> phone_gallery
    int please_upload_pic -> please_upload_pic
    int please_wait -> please_wait
    int postdetail -> postdetail
    int praise -> praise
    int praise_shop -> praise_shop
    int praised -> praised
    int pricefilter -> pricefilter
    int pro_total_money -> pro_total_money
    int promotion_discount -> promotion_discount
    int qu -> qu
    int question -> question
    int question_commit -> question_commit
    int real_money -> real_money
    int rebate_good -> rebate_good
    int receive -> receive
    int receive_message -> receive_message
    int recharge -> recharge
    int recommend -> recommend
    int refresh_failed -> refresh_failed
    int refund -> refund
    int refunded_text -> refunded_text
    int refundreason -> refundreason
    int refundtoknow -> refundtoknow
    int register -> register
    int register_ac -> register_ac
    int remote_call_failed -> remote_call_failed
    int remove_fans_failed -> remove_fans_failed
    int remove_fans_succeed -> remove_fans_succeed
    int reselect -> reselect
    int saved -> saved
    int say -> say
    int second_ago -> second_ago
    int select_address -> select_address
    int select_city_city_index -> select_city_city_index
    int select_city_current_city -> select_city_current_city
    int select_city_hot_city -> select_city_hot_city
    int select_city_loading -> select_city_loading
    int select_city_title -> select_city_title
    int select_express -> select_express
    int select_head_img -> select_head_img
    int select_no_coupon -> select_no_coupon
    int select_opts -> select_opts
    int select_paytype -> select_paytype
    int select_telephone -> select_telephone
    int selectaddress -> selectaddress
    int sended_mobile -> sended_mobile
    int setting -> setting
    int shanghai -> shanghai
    int share -> share
    int share_content -> share_content
    int share_failed -> share_failed
    int share_good -> share_good
    int share_selector -> share_selector
    int share_success -> share_success
    int share_text_content -> share_text_content
    int share_text_title -> share_text_title
    int share_txt10 -> share_txt10
    int shareaccount -> shareaccount
    int shi -> shi
    int shipped_text -> shipped_text
    int shoppingcar -> shoppingcar
    int small_distance -> small_distance
    int sortlist -> sortlist
    int spec -> spec
    int status_invalid -> status_invalid
    int step_1 -> step_1
    int step_11 -> step_11
    int step_2 -> step_2
    int step_22 -> step_22
    int step_3 -> step_3
    int sure -> sure
    int tele_num -> tele_num
    int thanks -> thanks
    int tips -> tips
    int to -> to
    int to_refresh -> to_refresh
    int toselect -> toselect
    int total -> total
    int total_goods -> total_goods
    int touchus -> touchus
    int trans -> trans
    int unionkey -> unionkey
    int unionpay -> unionpay
    int unknown -> unknown
    int unpay_text -> unpay_text
    int unuse -> unuse
    int update_hard -> update_hard
    int update_soft -> update_soft
    int update_time -> update_time
    int update_tips -> update_tips
    int upload_img -> upload_img
    int upload_img_failed -> upload_img_failed
    int use -> use
    int use_c -> use_c
    int use_coupon -> use_coupon
    int used -> used
    int userinformation -> userinformation
    int usermanageraddress -> usermanageraddress
    int volumn_not_enough -> volumn_not_enough
    int wait -> wait
    int wait_second -> wait_second
    int waitingCustomerReturn_text -> waitingCustomerReturn_text
    int waitingMerchantDeliver_text -> waitingMerchantDeliver_text
    int waitingMerchantRefund_text -> waitingMerchantRefund_text
    int week_ago -> week_ago
    int woman -> woman
    int wx_v_d -> wx_v_d
    int wx_v_d_d -> wx_v_d_d
    int year_ago -> year_ago
    int your_current_city -> your_current_city
    int yse_locationing -> yse_locationing
    int yuan -> yuan
    int zan -> zan
com.massvig.ecommerce.boqi.R$style -> com.massvig.ecommerce.boqi.R$style:
    int AnimationActivity -> AnimationActivity
    int ThemeActivity -> ThemeActivity
    int coupon_enable_time -> coupon_enable_time
    int coupon_enable_title -> coupon_enable_title
    int coupon_unable_time -> coupon_unable_time
    int coupon_unable_title -> coupon_unable_title
com.massvig.ecommerce.database.DatabaseHelper -> com.massvig.ecommerce.b.a:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.massvig.ecommerce.database.DatabaseUtil -> com.massvig.ecommerce.b.b:
    long timestamp -> a
    long lastTimestamp -> b
    com.massvig.ecommerce.database.DatabaseUtil instance -> c
    com.massvig.ecommerce.database.DatabaseUtil getInstance() -> a
    int getIntFromCursor(android.database.Cursor,java.lang.String) -> a
    java.lang.String getStringFromCursor(android.database.Cursor,java.lang.String) -> b
    int GetAllUnReadCount(android.database.sqlite.SQLiteDatabase,java.lang.String) -> a
    int GetOneUnReadCount(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String) -> a
    java.util.ArrayList GetOneMessage(android.database.sqlite.SQLiteDatabase,java.lang.String) -> b
    java.util.ArrayList GetChat(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String) -> b
    void UpdateUnreadMessage(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String) -> c
    void UpdateAllUnreadMessage(android.database.sqlite.SQLiteDatabase) -> a
    void InsertMessage(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int) -> a
com.massvig.ecommerce.entities.Action -> com.massvig.ecommerce.c.a:
    int actionID -> a
    java.lang.String title -> b
    java.lang.String detail -> c
    java.lang.String imgUrl -> d
com.massvig.ecommerce.entities.ActionDetail -> com.massvig.ecommerce.c.b:
    int CampaignID -> a
    java.lang.String CampaignImgUrl -> b
    java.lang.String Description -> c
    boolean AllowShare -> d
    java.lang.String CampaignTitle -> e
    java.lang.String CampaignSubTitle -> f
    java.lang.String CampaignRule -> g
com.massvig.ecommerce.entities.ActionsList -> com.massvig.ecommerce.c.c:
    java.util.ArrayList actionsList -> a
    int getCount() -> a
    com.massvig.ecommerce.entities.Action getAction(int) -> a
    java.lang.String getActionID(int) -> b
    boolean GetUserCampaigns(java.lang.String) -> a
    com.massvig.ecommerce.entities.Action DataAnalyse(org.json.JSONObject) -> a
com.massvig.ecommerce.entities.AdItem -> com.massvig.ecommerce.c.d:
    int AdItemID -> a
    int AdTemplate -> b
    int Position -> c
    int Rank -> d
    java.lang.String AdRegions -> e
com.massvig.ecommerce.entities.Address -> com.massvig.ecommerce.c.e:
    int customerAddressID -> a
    java.lang.String name -> b
    java.lang.String mobile -> c
    int regionID -> d
    java.lang.String address -> e
    java.lang.String zipcode -> f
    java.lang.String email -> g
    java.lang.String shengshiqu -> h
    boolean isDefault -> i
    void StringToAddress(java.lang.String) -> a
    java.lang.String toString() -> toString
    int AddAddress(java.lang.String) -> b
    int DeleteAddress(java.lang.String) -> c
    int ModifyAddress(java.lang.String) -> d
    int SetDefaultAddress(java.lang.String) -> e
com.massvig.ecommerce.entities.AddressList -> com.massvig.ecommerce.c.f:
    java.util.ArrayList addressList -> a
    void deleteAddress(int) -> a
    void addAddress(com.massvig.ecommerce.entities.Address) -> a
    int getCount() -> a
    com.massvig.ecommerce.entities.Address getAddress(int) -> b
    java.lang.String getAddressID(int) -> c
    int FetchAddressList(java.lang.String) -> a
    com.massvig.ecommerce.entities.Address DataAnalyse(org.json.JSONObject) -> a
com.massvig.ecommerce.entities.Advertise -> com.massvig.ecommerce.c.g:
    int LinkType -> a
    java.lang.String Link -> b
com.massvig.ecommerce.entities.Chater -> com.massvig.ecommerce.c.h:
    java.lang.String headimg -> a
    int unread -> b
    int gender -> c
    java.lang.String EJResource -> d
    int CustomerID -> e
    java.lang.String nickname -> f
    java.lang.String time -> g
    java.lang.String content -> h
    java.lang.String EJID -> i
com.massvig.ecommerce.entities.ChaterList -> com.massvig.ecommerce.c.i:
    java.util.ArrayList chaterList -> a
    void clearchaterList() -> a
    void addChater(com.massvig.ecommerce.entities.Chater) -> a
    int getCount() -> b
    com.massvig.ecommerce.entities.Chater getChater(int) -> a
com.massvig.ecommerce.entities.City -> com.massvig.ecommerce.c.j:
    int ResionID -> a
    java.lang.String RegionName -> b
    int ParentID -> c
    int Depth -> d
com.massvig.ecommerce.entities.CollectList -> com.massvig.ecommerce.c.k:
    java.util.ArrayList collectlist -> a
    void clearCollectList() -> a
    void delete(int) -> a
    com.massvig.ecommerce.entities.Goods getcollect(int) -> b
    void addCollectList(com.massvig.ecommerce.entities.CollectList) -> a
    int getCount() -> b
    int deleteCollect(java.lang.String,int) -> a
    int AddCollect(int,java.lang.String) -> a
    int fetchcollectlist(java.lang.String) -> a
    com.massvig.ecommerce.entities.Goods DataAnalyse(org.json.JSONObject) -> a
com.massvig.ecommerce.entities.Comment -> com.massvig.ecommerce.c.l:
    int CommentID -> a
    int CustomerID -> b
    java.lang.String NickName -> c
    java.lang.String HeadImgUrl -> d
    int ProductID -> e
    java.lang.String Content -> f
    java.lang.String CreateTime -> g
com.massvig.ecommerce.entities.CommentList -> com.massvig.ecommerce.c.m:
    java.util.ArrayList commentList -> a
    void clearCommentList() -> a
    void addCommentList(com.massvig.ecommerce.entities.CommentList) -> a
    int getCount() -> b
    com.massvig.ecommerce.entities.Comment getComment(int) -> a
    boolean FetchCommentList$4868d312(int,int) -> a
    boolean GetCommentList$4868d312(int,int) -> b
    com.massvig.ecommerce.entities.Comment DataAnalyse(org.json.JSONObject) -> a
com.massvig.ecommerce.entities.Coupon -> com.massvig.ecommerce.c.n:
    java.lang.String CouponNo -> a
    java.lang.String PromotionType -> b
    java.lang.String StartTime -> c
    java.lang.String EndTime -> d
    java.lang.String CreateTime -> e
    int ViewStatus -> f
    int Discount -> g
    java.lang.String imageUrl -> h
    int id -> i
    java.lang.String content -> j
    boolean IsUseed -> k
    boolean CanUse -> l
    boolean isCheck -> m
    java.lang.String CheckCoupon$5c141966(java.lang.String,int,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,int) -> a
com.massvig.ecommerce.entities.CouponList -> com.massvig.ecommerce.c.o:
    java.util.ArrayList couponList -> a
    void clearList() -> a
    void addCouponList(com.massvig.ecommerce.entities.CouponList) -> a
    boolean FetchCouponList$505cff18(java.lang.String) -> a
com.massvig.ecommerce.entities.Friend -> com.massvig.ecommerce.c.p:
    int CustomerID -> a
    java.lang.String HeadImgUrl -> b
    java.lang.String NickName -> c
    int Gender -> d
    int SharedCount -> e
    int FollowingCustomerCount -> f
    int FansCustomerCount -> g
    int Relation -> h
    com.massvig.ecommerce.entities.Friend friend -> i
    com.massvig.ecommerce.entities.Friend getInstance() -> a
    com.massvig.ecommerce.entities.Friend UserInfoJSONToBean(org.json.JSONObject) -> a
    java.util.List UserInfoJSONToBean(org.json.JSONArray) -> a
com.massvig.ecommerce.entities.GoodComment -> com.massvig.ecommerce.c.q:
    java.lang.String Question -> a
    java.lang.String Answer -> b
    java.lang.String NickName -> c
    java.lang.String CreateTime -> d
com.massvig.ecommerce.entities.GoodCommentList -> com.massvig.ecommerce.c.r:
    java.util.ArrayList commentList -> a
    void clearList() -> a
    void addCommentList(com.massvig.ecommerce.entities.GoodCommentList) -> a
    boolean FetchCommentList(java.lang.String,java.lang.String,java.lang.String) -> a
com.massvig.ecommerce.entities.Goods -> com.massvig.ecommerce.c.s:
    int productID -> a
    java.lang.String name -> b
    double minPrice -> c
    int volume -> d
    int Inventory -> e
    java.lang.String imageUrl -> f
    double realPrice -> g
    int commentCount -> h
    int ProductPromotionTag -> i
com.massvig.ecommerce.entities.GoodsDetail -> com.massvig.ecommerce.c.t:
    int productID -> a
    java.lang.String name -> b
    double minPrice -> c
    int volume -> d
    java.lang.String imageUrl -> e
    double originPrice -> f
    java.lang.String description -> g
    java.lang.String productData -> h
    java.lang.String specInfo -> i
    java.lang.String imageLists -> j
    int CommentCount -> k
    int PraiseCount -> l
    int ShareCount -> m
    int StampCount -> n
    boolean CanPraise -> o
    boolean CanStamp -> p
    java.lang.String DescUrl -> q
    com.massvig.ecommerce.entities.CommentList commentList -> r
    boolean CanShoppingCart -> s
    boolean NeedLogistics -> t
    int ProductPromotionTag -> u
    int FetchData(java.lang.String) -> a
    boolean FetchImgs() -> a
    boolean FetchComment(int,int) -> a
    int AddComment(java.lang.String,java.lang.String,java.lang.String) -> a
    boolean FetchParams() -> b
com.massvig.ecommerce.entities.GoodsList -> com.massvig.ecommerce.c.u:
    java.util.ArrayList goodsList -> a
    void clearGoodsList() -> a
    void addGoods(com.massvig.ecommerce.entities.Goods) -> a
    void addGoodsList(com.massvig.ecommerce.entities.GoodsList) -> a
    int getCount() -> b
    com.massvig.ecommerce.entities.Goods getGoods(int) -> a
    java.lang.String getGoodsID(int) -> b
    boolean FetchGoodsList(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int) -> a
    int FetchActivityGoodsNumber$fb59caf(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    boolean SearchProduct(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    com.massvig.ecommerce.entities.Goods DataAnalyse(org.json.JSONObject) -> a
com.massvig.ecommerce.entities.Item -> com.massvig.ecommerce.c.v:
    java.lang.String EJID -> a
    int unread -> b
com.massvig.ecommerce.entities.Merchant -> com.massvig.ecommerce.c.w:
    int StoreID -> a
    int MerchantID -> b
    java.lang.String StoreName -> c
    java.lang.String Description -> d
    double Distance -> e
    double Lon -> f
    double Lat -> g
com.massvig.ecommerce.entities.MerchantList -> com.massvig.ecommerce.c.x:
    java.util.ArrayList merchantList -> a
    void clearmerchantList() -> a
    void addmerchantList(com.massvig.ecommerce.entities.MerchantList) -> a
    int getCount() -> b
    com.massvig.ecommerce.entities.Merchant getMerchant(int) -> a
    java.lang.String getMerchantID(int) -> b
    boolean FetchmerchantList$2d412a3(java.lang.String,double,double,int) -> a
    com.massvig.ecommerce.entities.Merchant DataAnalyse(org.json.JSONObject) -> a
com.massvig.ecommerce.entities.Message -> com.massvig.ecommerce.c.y:
    java.lang.String FromEJID -> a
    java.lang.String ToEJID -> b
    java.lang.String MessageBody -> c
    java.lang.String CreateTime -> d
    int IsRead -> e
    boolean IsComMsg -> f
    int IsShowTime -> g
    boolean isFailed -> h
com.massvig.ecommerce.entities.MessageList -> com.massvig.ecommerce.c.z:
    java.util.ArrayList messageList -> a
    void setMessageList(java.util.ArrayList) -> a
    void addMessage(com.massvig.ecommerce.entities.Message) -> a
    int getCount() -> a
    com.massvig.ecommerce.entities.Message getMessage(int) -> a
com.massvig.ecommerce.entities.MyOrder -> com.massvig.ecommerce.c.aa:
    int OrderID -> a
    boolean IsWebOrder -> b
    java.lang.String Address -> c
    java.lang.String BillTitle -> d
    int BillType -> e
    java.lang.String Consignee -> f
    double DiscountAmount -> g
    java.lang.String Email -> h
    int FreightCharges -> i
    java.lang.String Mobile -> j
    java.lang.String OrderNo -> k
    int OrderStatus -> l
    float PayAmount -> m
    int PaymentMethod -> n
    int ProductAmount -> o
    int RegionID -> p
    java.lang.String ZipCode -> q
    java.lang.String CreateTime -> r
    java.lang.String OrderDetails -> s
    java.lang.String OrderCoupons -> t
    int LogisticsStatus -> u
    int PayStatus -> v
    java.lang.String OrderAction -> w
    java.lang.String LogisticsInfoList -> x
    double PromotionDiscount -> y
com.massvig.ecommerce.entities.MyOrderList -> com.massvig.ecommerce.c.ab:
    java.util.ArrayList myorderList -> a
    void clearMyOrderList() -> a
    void deleteMyOrder(int) -> a
    void addMyOrderList(com.massvig.ecommerce.entities.MyOrderList) -> a
    int getCount() -> b
    com.massvig.ecommerce.entities.MyOrder getMyOrder(int) -> b
    java.lang.String getMyOrderID(int) -> c
    boolean FetchMyOrderList(java.lang.String,int,int) -> a
com.massvig.ecommerce.entities.NearPerson -> com.massvig.ecommerce.c.ac:
    int CustomerID -> a
    java.lang.String NickName -> b
    int Gender -> c
    java.lang.String HeadImgUrl -> d
    java.lang.String Distance -> e
    int Relation -> f
    java.lang.String LastLocationTime -> g
    int ProductID -> h
    java.lang.String ProductName -> i
    int FansCustomerCount -> j
    int FollowingCustomerCount -> k
com.massvig.ecommerce.entities.NearPersonList -> com.massvig.ecommerce.c.ad:
    java.util.ArrayList nearList -> a
    void clearNearPersonList() -> a
    void addNearPersonList(com.massvig.ecommerce.entities.NearPersonList) -> a
    int getCount() -> b
    com.massvig.ecommerce.entities.NearPerson getNearPerson(int) -> a
    java.lang.String getNearPersonID(int) -> b
    int FetchNearPersonList(java.lang.String,int,double,double,int,int) -> a
    com.massvig.ecommerce.entities.NearPerson DataAnalyse(org.json.JSONObject) -> a
com.massvig.ecommerce.entities.Post -> com.massvig.ecommerce.c.ae:
    int postID -> a
    int RefID -> b
    int ShareSourceType -> c
    java.lang.String imageUrl -> d
    java.lang.String username -> e
    java.lang.String detail -> f
    java.lang.String userimgurl -> g
    java.lang.String address -> h
    int shared -> i
    int praise -> j
    boolean CanPraise -> k
    boolean CanShare -> l
    int customerID -> m
    java.lang.String ShareSourceMsg1 -> n
    java.lang.String ShareSourceMsg2 -> o
    java.lang.String createTime -> p
    int CommentCount -> q
com.massvig.ecommerce.entities.PostDetail -> com.massvig.ecommerce.c.af:
    com.massvig.ecommerce.entities.CommentList commentList -> r
    boolean FetchComment(int,int) -> a
    int AddPostComment(java.lang.String,java.lang.String,java.lang.String) -> a
com.massvig.ecommerce.entities.PostList -> com.massvig.ecommerce.c.ag:
    java.util.ArrayList postsList -> a
    void clearPostList() -> a
    void addPostList(com.massvig.ecommerce.entities.PostList) -> a
    int getCount() -> b
    com.massvig.ecommerce.entities.Post getPost(int) -> a
    java.lang.String getPostID(int) -> b
    boolean FetchSearchPostList(java.lang.String,int) -> a
    boolean FetchPostList(java.lang.String,int) -> b
    int FetchAttentionPostList(java.lang.String,int) -> c
    com.massvig.ecommerce.entities.Post DataAnalyse(org.json.JSONObject) -> a
com.massvig.ecommerce.entities.Praised -> com.massvig.ecommerce.c.ah:
    int CustomerID -> a
    java.lang.String NickName -> b
    java.lang.String HeadImgUrl -> c
    int RefID -> d
    int ShareSourceType -> e
    java.lang.String ImgUrl -> f
    int Gender -> g
    java.lang.String Content -> h
    java.lang.String CreateTime -> i
    com.massvig.ecommerce.entities.Praised praised -> j
    com.massvig.ecommerce.entities.Praised UserInfoJSONToBean(org.json.JSONObject) -> a
    java.util.List UserInfoJSONToBean(org.json.JSONArray) -> a
com.massvig.ecommerce.entities.Product -> com.massvig.ecommerce.c.ai:
    int id -> a
    java.lang.String name -> b
    java.util.HashMap selectedProperties -> c
    float totalMoney -> d
    java.lang.String imageUrl -> e
    int count -> f
    int productSpecID -> g
    boolean isChecked -> h
    int Inventory -> i
    float oriPrice -> j
    float signalPrice -> k
    int ShoppingCartProductStatus -> l
    java.lang.String specInfo -> m
    int OrderDetailStatus -> n
    int OrderDetailID -> o
    boolean IsGift -> p
com.massvig.ecommerce.entities.ProductList -> com.massvig.ecommerce.c.aj:
    java.util.ArrayList productList -> a
    void deleteProduct(com.massvig.ecommerce.entities.Product) -> a
    void clearProductList() -> a
    void addProduct(com.massvig.ecommerce.entities.Product) -> b
    void addProductList(com.massvig.ecommerce.entities.ProductList) -> a
    int getCount() -> b
    com.massvig.ecommerce.entities.Product getProduct(int) -> a
    java.lang.String getProductID(int) -> b
com.massvig.ecommerce.entities.User -> com.massvig.ecommerce.c.ak:
    java.lang.String sessionID -> a
    java.lang.String mobile -> b
    java.lang.String email -> c
    java.lang.String password -> d
    java.lang.String nickName -> e
    java.lang.String headImage -> f
    int gender -> g
    java.lang.String EJID -> h
    java.lang.String EJPassword -> i
    java.lang.String EJResource -> j
    int customerID -> k
    java.lang.String EJServerIP -> l
    java.lang.String EJServerPort -> m
    java.lang.String EJServerDomaim -> n
    int ShoppingCartTotalNum -> o
    java.lang.String newMobile -> p
    java.lang.String newEmail -> q
    java.lang.String newPassword -> r
    int CheckLoginNameAndSendVerifyCode() -> a
    boolean SendVerifyCodeWithCheck() -> b
    boolean Register(java.lang.String) -> a
    boolean Login(java.lang.String,java.lang.String) -> a
    boolean FindPassword(java.lang.String) -> b
    int ModifyPassword(java.lang.String,java.lang.String) -> b
    int ModifyCustomInfo$78a4d1c3(java.lang.String,java.lang.String,int) -> a
    int ModifyMobile(java.lang.String) -> c
    int ModifyEmail(java.lang.String) -> d
    boolean CheckVerifyCode(java.lang.String) -> e
    boolean GetEJServerInfo() -> c
com.massvig.ecommerce.location.LocationListenerProxy -> com.massvig.ecommerce.location.a:
    com.amap.mapapi.location.LocationManagerProxy mLocationManager -> a
    android.location.LocationListener mListener -> b
    boolean startListening$7e6f84d7(android.location.LocationListener) -> a
    void stopListening() -> a
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
com.massvig.ecommerce.location.LocationManage -> com.massvig.ecommerce.location.b:
    com.amap.mapapi.location.LocationManagerProxy locationManager -> c
    com.massvig.ecommerce.location.LocationListenerProxy mLocationListenerProxy -> d
    com.massvig.ecommerce.location.LocationManage$MapAbcLocationListener mMapAbcLocationListener -> e
    java.lang.Double latitude -> a
    java.lang.Double longitude -> b
    com.massvig.ecommerce.location.LocationManage mLocationManage -> f
    java.lang.String address -> g
    com.massvig.ecommerce.location.LocationManage$MyLocationListener mMyLocationListener -> h
    android.os.Handler handler -> i
    com.massvig.ecommerce.location.LocationManage getInstance() -> a
    java.lang.Boolean startLocation(android.content.Context,java.lang.Boolean,com.massvig.ecommerce.location.LocationManage$MyLocationListener) -> a
    void stopLocation() -> b
    void getAddress(com.massvig.ecommerce.location.LocationManage$MyLocationListener,boolean) -> a
    void setAllow(android.content.Context,java.lang.Boolean) -> a
    com.massvig.ecommerce.location.LocationManage$MyLocationListener access$0(com.massvig.ecommerce.location.LocationManage) -> a
    com.amap.mapapi.location.LocationManagerProxy access$1(com.massvig.ecommerce.location.LocationManage) -> b
    void access$2$1532a5a2(com.massvig.ecommerce.location.LocationManage) -> c
    android.os.Handler access$3(com.massvig.ecommerce.location.LocationManage) -> d
    void access$4(com.massvig.ecommerce.location.LocationManage,java.lang.String) -> a
    java.lang.String access$5(com.massvig.ecommerce.location.LocationManage) -> e
com.massvig.ecommerce.location.LocationManage$1 -> com.massvig.ecommerce.location.c:
    com.massvig.ecommerce.location.LocationManage this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.location.LocationManage$2 -> com.massvig.ecommerce.location.d:
    com.massvig.ecommerce.location.LocationManage$MyLocationListener mMyLocationListener -> b
    com.massvig.ecommerce.location.LocationManage this$0 -> a
    boolean val$isShort -> c
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.location.LocationManage$3 -> com.massvig.ecommerce.location.e:
    com.massvig.ecommerce.location.LocationManage this$0 -> a
    android.content.Context val$context -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.location.LocationManage$4 -> com.massvig.ecommerce.location.f:
    com.massvig.ecommerce.location.LocationManage this$0 -> a
    android.content.Context val$context -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.location.LocationManage$MapAbcLocationListener -> com.massvig.ecommerce.location.g:
    com.massvig.ecommerce.location.LocationManage this$0 -> a
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
com.massvig.ecommerce.location.LocationManage$MyLocationListener -> com.massvig.ecommerce.location.h:
    void isAllow(java.lang.Boolean) -> a
    void location(double,double) -> a
    void address(java.lang.String) -> a
com.massvig.ecommerce.location.LocationManagerac -> com.massvig.ecommerce.location.LocationManagerac:
    com.amap.mapapi.location.LocationManagerProxy locationManager -> b
    android.os.Handler handler -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
com.massvig.ecommerce.location.LocationManagerac$1 -> com.massvig.ecommerce.location.i:
    com.massvig.ecommerce.location.LocationManagerac this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.logic.notification.MassVigNetworkBroadcastReceiver -> com.massvig.ecommerce.logic.notification.MassVigNetworkBroadcastReceiver:
    com.massvig.ecommerce.logic.notification.MassVigNetworkBroadcastReceiver$NetworkListener listener -> a
    int times -> b
    int min -> c
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.massvig.ecommerce.logic.notification.MassVigNetworkBroadcastReceiver$NetworkListener -> com.massvig.ecommerce.logic.notification.a:
    void available() -> a
    void timesChanged() -> b
    void notAvailable() -> c
    void bootComplete() -> d
com.massvig.ecommerce.logic.notification.MassVigNotificationManager -> com.massvig.ecommerce.logic.notification.b:
    android.app.Notification m_Notification -> b
    android.app.NotificationManager m_NotificationManager -> c
    android.content.Context context -> a
    void notify(java.lang.String,java.lang.String) -> a
com.massvig.ecommerce.logic.notification.MassVigPushService -> com.massvig.ecommerce.logic.notification.MassVigPushService:
    com.massvig.ecommerce.logic.notification.MassVigNetworkBroadcastReceiver receiver -> b
    java.net.Socket socket -> c
    java.lang.String message -> d
    boolean isConnectToServer -> e
    boolean isConnecting -> f
    com.massvig.ecommerce.logic.notification.MassVigPushService$MyTask mTask -> g
    boolean isFirstStart -> h
    com.massvig.ecommerce.logic.notification.MassVigPushService$MyBroadcast receive -> i
    android.os.PowerManager$WakeLock mWakeLock -> j
    java.util.Timer timer -> a
    void onCreate() -> onCreate
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void onDestroy() -> onDestroy
    void DisConnectToServer() -> a
    void ConnectToServer() -> b
    android.os.IBinder onBind(android.content.Intent) -> onBind
    boolean access$0(com.massvig.ecommerce.logic.notification.MassVigPushService) -> a
    void access$1(com.massvig.ecommerce.logic.notification.MassVigPushService) -> b
    void access$2(com.massvig.ecommerce.logic.notification.MassVigPushService) -> c
    void access$3(com.massvig.ecommerce.logic.notification.MassVigPushService,boolean) -> a
    void access$4(com.massvig.ecommerce.logic.notification.MassVigPushService,java.net.Socket) -> a
    java.net.Socket access$5(com.massvig.ecommerce.logic.notification.MassVigPushService) -> d
    void access$6(com.massvig.ecommerce.logic.notification.MassVigPushService) -> e
    void access$7(com.massvig.ecommerce.logic.notification.MassVigPushService,boolean) -> b
    void access$8(com.massvig.ecommerce.logic.notification.MassVigPushService) -> f
    java.lang.String access$9(com.massvig.ecommerce.logic.notification.MassVigPushService) -> g
    void access$10(com.massvig.ecommerce.logic.notification.MassVigPushService,java.lang.String) -> a
    boolean access$11(com.massvig.ecommerce.logic.notification.MassVigPushService) -> h
    void access$12$6d048176(com.massvig.ecommerce.logic.notification.MassVigPushService) -> i
com.massvig.ecommerce.logic.notification.MassVigPushService$1 -> com.massvig.ecommerce.logic.notification.c:
    com.massvig.ecommerce.logic.notification.MassVigPushService this$0 -> a
    void available() -> a
    void notAvailable() -> c
    void timesChanged() -> b
    void bootComplete() -> d
com.massvig.ecommerce.logic.notification.MassVigPushService$ConnectToServer -> com.massvig.ecommerce.logic.notification.d:
    com.massvig.ecommerce.logic.notification.MassVigPushService this$0 -> a
    void run() -> run
com.massvig.ecommerce.logic.notification.MassVigPushService$MyBroadcast -> com.massvig.ecommerce.logic.notification.e:
    com.massvig.ecommerce.logic.notification.MassVigPushService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    com.massvig.ecommerce.logic.notification.MassVigPushService access$0(com.massvig.ecommerce.logic.notification.MassVigPushService$MyBroadcast) -> a
com.massvig.ecommerce.logic.notification.MassVigPushService$MyBroadcast$1 -> com.massvig.ecommerce.logic.notification.f:
    com.massvig.ecommerce.logic.notification.MassVigPushService$MyBroadcast this$1 -> a
    void run() -> run
com.massvig.ecommerce.logic.notification.MassVigPushService$MyTask -> com.massvig.ecommerce.logic.notification.g:
    com.massvig.ecommerce.logic.notification.MassVigPushService this$0 -> a
    void run() -> run
com.massvig.ecommerce.logic.notification.MassVigPushService$ServerListener -> com.massvig.ecommerce.logic.notification.h:
    com.massvig.ecommerce.logic.notification.MassVigPushService this$0 -> a
    void run() -> run
com.massvig.ecommerce.logic.notification.MassVigSystemBroadcastReceiver -> com.massvig.ecommerce.logic.notification.MassVigSystemBroadcastReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.massvig.ecommerce.managers.ActionManager -> com.massvig.ecommerce.d.a:
    com.massvig.ecommerce.managers.ActionManager$LoadListener listener -> d
    com.massvig.ecommerce.entities.ActionsList actionList -> a
    com.massvig.ecommerce.entities.Action action -> b
    com.massvig.ecommerce.entities.ActionDetail detail -> c
    void setListener(com.massvig.ecommerce.managers.ActionManager$LoadListener) -> a
    void FetchActions(java.lang.String) -> a
    void LoadData(java.lang.String) -> b
    com.massvig.ecommerce.managers.ActionManager$LoadListener access$0(com.massvig.ecommerce.managers.ActionManager) -> a
com.massvig.ecommerce.managers.ActionManager$1 -> com.massvig.ecommerce.d.b:
    com.massvig.ecommerce.managers.ActionManager this$0 -> a
    java.lang.String val$sessionid -> b
    java.lang.Boolean doInBackground$5f8445a4() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.ActionManager$FetchActionsAsync -> com.massvig.ecommerce.d.c:
    com.massvig.ecommerce.managers.ActionManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.ActionManager$LoadListener -> com.massvig.ecommerce.d.d:
    void Success(int) -> a
com.massvig.ecommerce.managers.AddOptionManager -> com.massvig.ecommerce.d.e:
    com.massvig.ecommerce.managers.AddOptionManager$loadListener listener -> a
    void Addoption(java.lang.String,java.lang.String) -> a
    void setListener(com.massvig.ecommerce.managers.AddOptionManager$loadListener) -> a
    int AddOption(java.lang.String,java.lang.String) -> b
    com.massvig.ecommerce.managers.AddOptionManager$loadListener access$0(com.massvig.ecommerce.managers.AddOptionManager) -> a
com.massvig.ecommerce.managers.AddOptionManager$AddOptionAnsyc -> com.massvig.ecommerce.d.f:
    com.massvig.ecommerce.managers.AddOptionManager this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.AddOptionManager$loadListener -> com.massvig.ecommerce.d.g:
    void AddOptionSuccess() -> a
    void SessionVailed() -> b
    void AddOptionFailed() -> c
com.massvig.ecommerce.managers.AddressManager -> com.massvig.ecommerce.d.h:
    com.massvig.ecommerce.managers.AddressManager$LoadListener listener -> e
    com.massvig.ecommerce.entities.AddressList addressList -> f
    com.massvig.ecommerce.entities.Address address -> g
    java.util.ArrayList allCities -> a
    java.util.ArrayList provinceList -> b
    java.util.ArrayList cityList -> c
    java.util.ArrayList townList -> d
    void setListener(com.massvig.ecommerce.managers.AddressManager$LoadListener) -> a
    com.massvig.ecommerce.entities.Address getAddress() -> a
    void setAddress(com.massvig.ecommerce.entities.Address) -> a
    com.massvig.ecommerce.entities.AddressList getAddressList() -> b
    void setAddressList(com.massvig.ecommerce.entities.AddressList) -> a
    void FetchAddress(java.lang.String) -> a
    void addAddress(java.lang.String) -> b
    void modifyAddress(java.lang.String) -> c
    void deleteAddress(java.lang.String) -> d
    com.massvig.ecommerce.entities.AddressList access$0(com.massvig.ecommerce.managers.AddressManager) -> a
    com.massvig.ecommerce.managers.AddressManager$LoadListener access$1(com.massvig.ecommerce.managers.AddressManager) -> b
    com.massvig.ecommerce.entities.Address access$2(com.massvig.ecommerce.managers.AddressManager) -> c
com.massvig.ecommerce.managers.AddressManager$AddAddressAsync -> com.massvig.ecommerce.d.i:
    com.massvig.ecommerce.managers.AddressManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.AddressManager$DeleteAddressAsync -> com.massvig.ecommerce.d.j:
    com.massvig.ecommerce.managers.AddressManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.AddressManager$FetchAddressAsync -> com.massvig.ecommerce.d.k:
    com.massvig.ecommerce.managers.AddressManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.AddressManager$LoadListener -> com.massvig.ecommerce.d.l:
    void Success(int) -> a
    void Failed(int) -> b
    void SessionidFail() -> a
com.massvig.ecommerce.managers.AddressManager$ModifyAddressAsync -> com.massvig.ecommerce.d.m:
    com.massvig.ecommerce.managers.AddressManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.ChatManager -> com.massvig.ecommerce.d.n:
    int customerID -> a
    com.massvig.ecommerce.entities.MessageList list -> b
com.massvig.ecommerce.managers.CollectManager -> com.massvig.ecommerce.d.o:
    com.massvig.ecommerce.entities.CollectList collectlist -> a
    com.massvig.ecommerce.entities.CollectList tempList -> d
    boolean isLoadDone -> b
    boolean isLoading -> e
    com.massvig.ecommerce.managers.CollectManager$LoadListener listener -> f
    java.lang.String SessionID -> c
    void refreshGoodsList() -> a
    void setmanagerListener(com.massvig.ecommerce.managers.CollectManager$LoadListener) -> a
    int fetchCollectlist(java.lang.String) -> a
    com.massvig.ecommerce.managers.CollectManager$LoadListener access$0(com.massvig.ecommerce.managers.CollectManager) -> a
com.massvig.ecommerce.managers.CollectManager$LoadListener -> com.massvig.ecommerce.d.p:
    void loadCollectSucess() -> d
    void loadCollectfailed() -> e
    void SessionVailed() -> c
    void deleteCollectSucess() -> a
    void deleteCollectFailed() -> b
    void noData() -> f
com.massvig.ecommerce.managers.CollectManager$deletecollect -> com.massvig.ecommerce.d.q:
    com.massvig.ecommerce.managers.CollectManager this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.CollectManager$getCollectListAsync -> com.massvig.ecommerce.d.r:
    com.massvig.ecommerce.managers.CollectManager this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.CommunityManager -> com.massvig.ecommerce.d.s:
    com.massvig.ecommerce.managers.CommunityManager$LoadListener listener -> i
    int maxHeight -> j
    int maxWidth -> k
    int mFromX -> l
    int mToX -> m
    int moveWidth -> n
    int index -> o
    java.util.ArrayList views -> p
    com.massvig.ecommerce.entities.PostList allPostList -> a
    com.massvig.ecommerce.entities.PostList myAttentionList -> b
    com.massvig.ecommerce.entities.PostList mySearchList -> c
    com.massvig.ecommerce.entities.PostList tempList -> d
    boolean isLoadDoneAll -> e
    boolean isLoadDoneAttention -> f
    boolean isLoadDoneSearch -> g
    boolean isLoading -> h
    int tempIndex -> q
    int type -> r
    int GetAllUnread(android.content.Context,java.lang.String) -> a
    void refreshPostList() -> a
    void loadData(java.lang.String,int,int) -> a
    void setListener(com.massvig.ecommerce.managers.CommunityManager$LoadListener) -> a
    java.util.ArrayList getViews() -> b
    int getMaxWidth() -> c
    void setMaxWidth(int) -> a
    int getmFromX() -> d
    int getmToX() -> e
    void setMoveWidth(int) -> b
    void setIndex(int) -> c
    void Praise(java.lang.String,int) -> a
    void clearData() -> f
    com.massvig.ecommerce.managers.CommunityManager$LoadListener access$0(com.massvig.ecommerce.managers.CommunityManager) -> a
    int access$1(com.massvig.ecommerce.managers.CommunityManager) -> b
com.massvig.ecommerce.managers.CommunityManager$GetAllAsync -> com.massvig.ecommerce.d.t:
    com.massvig.ecommerce.managers.CommunityManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.CommunityManager$GetAttentionAsync -> com.massvig.ecommerce.d.u:
    com.massvig.ecommerce.managers.CommunityManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.CommunityManager$GetSearchAsync -> com.massvig.ecommerce.d.v:
    com.massvig.ecommerce.managers.CommunityManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.CommunityManager$LoadListener -> com.massvig.ecommerce.d.w:
    void LoadSuccess(int,int) -> a
    void SessionFailed() -> a
com.massvig.ecommerce.managers.CommunityManager$PraiseAsync -> com.massvig.ecommerce.d.x:
    com.massvig.ecommerce.managers.CommunityManager this$0 -> a
    java.lang.Void doInBackground(java.lang.String[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.CommunityUserManager -> com.massvig.ecommerce.d.y:
    com.massvig.ecommerce.managers.CommunityUserManager$Listener listener -> c
    int customerID -> a
    com.massvig.ecommerce.managers.CommunityUserManager$UserInfo userinfo -> b
    void setListener(com.massvig.ecommerce.managers.CommunityUserManager$Listener) -> a
    void LoadData() -> a
    void AddAndRemoveFans(int,java.lang.String,int) -> a
    int GetAllUnread(android.content.Context,java.lang.String) -> a
    com.massvig.ecommerce.managers.CommunityUserManager$Listener access$0(com.massvig.ecommerce.managers.CommunityUserManager) -> a
com.massvig.ecommerce.managers.CommunityUserManager$AddAndRemoveFansAsync -> com.massvig.ecommerce.d.z:
    com.massvig.ecommerce.managers.CommunityUserManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.CommunityUserManager$Listener -> com.massvig.ecommerce.d.aa:
    void LoadData(com.massvig.ecommerce.managers.CommunityUserManager$UserInfo) -> a
    void Success$13462e() -> a
    void SessionFailed() -> b
    void Already() -> c
com.massvig.ecommerce.managers.CommunityUserManager$LoadDataAsync -> com.massvig.ecommerce.d.ab:
    com.massvig.ecommerce.managers.CommunityUserManager this$0 -> a
    java.lang.Void doInBackground(java.lang.Integer[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.CommunityUserManager$UserInfo -> com.massvig.ecommerce.d.ac:
    int CustomerID -> a
    java.lang.String NickName -> b
    java.lang.String HeadImgUrl -> c
    int Gender -> d
    int FollowingCustomerCount -> e
    int FansCustomerCount -> f
    int SharePraisedCount -> g
    int SharedCount -> h
    int PraiseCount -> i
    int Relation -> j
    java.lang.String EJID -> k
    java.lang.String EJResource -> l
    com.massvig.ecommerce.managers.CommunityUserManager this$0 -> m
com.massvig.ecommerce.managers.CouponManager -> com.massvig.ecommerce.d.ad:
    com.massvig.ecommerce.managers.CouponManager$Listener listener -> c
    com.massvig.ecommerce.entities.Coupon coupon -> a
    java.util.HashMap map -> b
    void setListener(com.massvig.ecommerce.managers.CouponManager$Listener) -> a
    com.massvig.ecommerce.managers.CouponManager$Listener access$0(com.massvig.ecommerce.managers.CouponManager) -> a
com.massvig.ecommerce.managers.CouponManager$CheckCouponAsync -> com.massvig.ecommerce.d.ae:
    com.massvig.ecommerce.managers.CouponManager this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.CouponManager$Listener -> com.massvig.ecommerce.d.af:
    void Success() -> a
    void Failed(java.lang.String) -> a
com.massvig.ecommerce.managers.DealActivityManager -> com.massvig.ecommerce.d.ag:
    int count -> a
    java.lang.String paramsInfo -> b
    java.util.ArrayList specItems -> c
    java.util.ArrayList propertyItems -> d
    int width -> e
    int[] selectProperties -> f
    java.util.HashMap hasNotContains -> g
    com.massvig.ecommerce.entities.Goods goods -> h
    void setGoods(com.massvig.ecommerce.entities.Goods) -> a
    boolean isUseful(java.lang.String) -> a
    int getCount() -> a
    void setCount(int) -> a
    int getVolumn() -> b
    float getMoney() -> c
    java.util.HashMap getSelectedPropertiesString() -> d
    java.lang.String getSelectProperties() -> e
    void setSelected(int,int) -> a
    java.util.List getDescartes(java.lang.String[]) -> a
    java.util.HashMap HasNotContains() -> i
    java.lang.String Descartes(java.util.List,int,java.util.List,java.lang.String) -> a
    void setParamsInfo(java.lang.String) -> b
    java.util.ArrayList getPropertyItems() -> f
    int getProductSpecID() -> g
    int getWidth() -> h
    void setWidth(int) -> b
com.massvig.ecommerce.managers.DealActivityManager$Item -> com.massvig.ecommerce.d.ah:
    int id -> a
    java.lang.String name -> b
    java.lang.String imgurl -> c
    com.massvig.ecommerce.managers.DealActivityManager this$0 -> d
com.massvig.ecommerce.managers.DealActivityManager$ProductProperty -> com.massvig.ecommerce.d.ai:
    int id -> a
    java.lang.String name -> b
    java.util.ArrayList items -> c
    com.massvig.ecommerce.managers.DealActivityManager this$0 -> d
com.massvig.ecommerce.managers.DealActivityManager$ProductSpec -> com.massvig.ecommerce.d.aj:
    int id -> a
    double price -> b
    java.lang.String properties -> c
    int volumn -> d
    com.massvig.ecommerce.managers.DealActivityManager this$0 -> e
com.massvig.ecommerce.managers.FindPasswordManager -> com.massvig.ecommerce.d.ak:
    com.massvig.ecommerce.entities.User user -> a
    com.massvig.ecommerce.managers.FindPasswordManager$Listener listener -> b
    void SendCode(java.lang.String) -> a
    void CheckCode(java.lang.String) -> b
    void FindPassword$30c4c46f(java.lang.String,java.lang.String,java.lang.String) -> a
    com.massvig.ecommerce.managers.FindPasswordManager$Listener access$0(com.massvig.ecommerce.managers.FindPasswordManager) -> a
com.massvig.ecommerce.managers.FindPasswordManager$CheckCodeAsync -> com.massvig.ecommerce.d.al:
    com.massvig.ecommerce.managers.FindPasswordManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.FindPasswordManager$FindPasswordAsync -> com.massvig.ecommerce.d.am:
    com.massvig.ecommerce.managers.FindPasswordManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.FindPasswordManager$Listener -> com.massvig.ecommerce.d.an:
    void start(int) -> a
    void end(int) -> b
    void Success(int) -> c
    void Failed(int) -> d
    void empty() -> a
    void accountErr() -> c
com.massvig.ecommerce.managers.FindPasswordManager$SendCodeAsync -> com.massvig.ecommerce.d.ao:
    com.massvig.ecommerce.managers.FindPasswordManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.GoodsDetailManager -> com.massvig.ecommerce.d.ap:
    com.massvig.ecommerce.managers.GoodsDetailManager$LoadListener listener -> c
    java.lang.String atCustomerID -> a
    int maxHeight -> d
    int maxWidth -> e
    int mFromX -> f
    int mToX -> g
    int moveWidth -> h
    int index -> i
    com.massvig.ecommerce.entities.GoodsDetail goodsDetail -> j
    com.massvig.ecommerce.entities.GoodsDetail tempGoodsDetail -> k
    java.util.ArrayList views -> l
    boolean isLoadDone -> b
    com.massvig.ecommerce.entities.CollectList collectlist -> m
    void Praise(java.lang.String) -> a
    void refreshCommentsList() -> a
    com.massvig.ecommerce.entities.CommentList getComments() -> b
    void setListener(com.massvig.ecommerce.managers.GoodsDetailManager$LoadListener) -> a
    java.util.ArrayList getViews() -> c
    com.massvig.ecommerce.entities.GoodsDetail getGoodsDetail() -> d
    void setMaxHeight(int) -> a
    void setMaxWidth(int) -> b
    int getmFromX() -> e
    int getmToX() -> f
    void setMoveWidth(int) -> c
    void setIndex(int) -> d
    android.widget.RelativeLayout$LayoutParams compare(int,int) -> a
    void LoadImg(android.widget.ProgressBar,android.widget.ImageView,java.lang.String) -> a
    void FetchComment() -> g
    void AddComment(java.lang.String,java.lang.String) -> a
    void FetchData(java.lang.String) -> b
    void FetchImgs() -> h
    void AddCollect(java.lang.String) -> c
    void FetchParams() -> i
    com.massvig.ecommerce.entities.GoodsDetail access$0(com.massvig.ecommerce.managers.GoodsDetailManager) -> a
    com.massvig.ecommerce.managers.GoodsDetailManager$LoadListener access$1(com.massvig.ecommerce.managers.GoodsDetailManager) -> b
    com.massvig.ecommerce.entities.GoodsDetail access$2(com.massvig.ecommerce.managers.GoodsDetailManager) -> c
    com.massvig.ecommerce.entities.CollectList access$3(com.massvig.ecommerce.managers.GoodsDetailManager) -> d
com.massvig.ecommerce.managers.GoodsDetailManager$AddCommentAsync -> com.massvig.ecommerce.d.aq:
    com.massvig.ecommerce.managers.GoodsDetailManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.GoodsDetailManager$FetchCommentAsync -> com.massvig.ecommerce.d.ar:
    com.massvig.ecommerce.managers.GoodsDetailManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.GoodsDetailManager$FetchDataAsync -> com.massvig.ecommerce.d.as:
    com.massvig.ecommerce.managers.GoodsDetailManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.GoodsDetailManager$FetchParamsAsync -> com.massvig.ecommerce.d.at:
    com.massvig.ecommerce.managers.GoodsDetailManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.GoodsDetailManager$GetProdcutImgsAsync -> com.massvig.ecommerce.d.au:
    com.massvig.ecommerce.managers.GoodsDetailManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.GoodsDetailManager$ImageloadCallback -> com.massvig.ecommerce.d.av:
    android.widget.ImageView imageView -> a
    android.widget.ProgressBar pb -> b
    com.massvig.ecommerce.managers.GoodsDetailManager this$0 -> c
    void imageLoaded$6004fe1d(android.graphics.Bitmap) -> a
com.massvig.ecommerce.managers.GoodsDetailManager$LoadListener -> com.massvig.ecommerce.d.aw:
    void GoodsDown() -> l
    void LoadSuccess() -> a
    void AddCommentFailed() -> f
    void AddCommentSuccess() -> g
    void LoadParamsSuccess() -> c
    void LoadCommentSuccess() -> d
    void LoadCommentFailed() -> e
    void PraiseSuccess$13462e() -> h
    void PraiseFailed$13462e() -> i
    void SessionVailed() -> j
    void Already() -> k
    void addCollectsucess() -> m
    void addCollectfailed() -> n
com.massvig.ecommerce.managers.GoodsDetailManager$PraiseAsync -> com.massvig.ecommerce.d.ax:
    com.massvig.ecommerce.managers.GoodsDetailManager this$0 -> a
    java.lang.Integer doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.GoodsDetailManager$addCollectasync -> com.massvig.ecommerce.d.ay:
    com.massvig.ecommerce.managers.GoodsDetailManager this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.GoodsListManager -> com.massvig.ecommerce.d.az:
    com.massvig.ecommerce.managers.GoodsListManager$LoadListener listener -> d
    com.massvig.ecommerce.entities.GoodsList goodsList -> e
    com.massvig.ecommerce.entities.GoodsList tempList -> f
    boolean isLoading -> g
    java.lang.String mcids -> h
    java.lang.String minPrice -> i
    java.lang.String maxPrice -> j
    int orderby -> k
    boolean isLoadDone -> a
    java.lang.String keyWord -> b
    boolean isFirst -> l
    boolean isScroll -> c
    void setListener(com.massvig.ecommerce.managers.GoodsListManager$LoadListener) -> a
    boolean isRefresh() -> a
    void setMcids(java.lang.String) -> a
    java.lang.String getMinPrice() -> b
    void setMinPrice(java.lang.String) -> b
    java.lang.String getMaxPrice() -> c
    void setMaxPrice(java.lang.String) -> c
    void setOrderby(int) -> a
    com.massvig.ecommerce.entities.GoodsList getGoodsList() -> d
    com.massvig.ecommerce.entities.Goods getGoods(int) -> b
    void refreshGoodsList() -> e
    void loadAdData(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void loadData() -> f
    void clearData() -> g
    java.lang.String FetchAdList(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String) -> b
    com.massvig.ecommerce.entities.Goods DataAnalyse(org.json.JSONObject) -> b
    void access$0(com.massvig.ecommerce.managers.GoodsListManager,boolean) -> a
    java.lang.String access$1$2855217f(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String) -> a
    void access$2$132ee582(com.massvig.ecommerce.managers.GoodsListManager) -> a
    com.massvig.ecommerce.entities.Goods access$3$422daca9(org.json.JSONObject) -> a
    com.massvig.ecommerce.entities.GoodsList access$4(com.massvig.ecommerce.managers.GoodsListManager) -> b
    boolean access$5(com.massvig.ecommerce.managers.GoodsListManager) -> c
    com.massvig.ecommerce.managers.GoodsListManager$LoadListener access$6(com.massvig.ecommerce.managers.GoodsListManager) -> d
    boolean access$7(com.massvig.ecommerce.managers.GoodsListManager,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    boolean access$8(com.massvig.ecommerce.managers.GoodsListManager,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
com.massvig.ecommerce.managers.GoodsListManager$FetchAdGoodsListAsync -> com.massvig.ecommerce.d.ba:
    com.massvig.ecommerce.managers.GoodsListManager this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Boolean doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.GoodsListManager$LoadListener -> com.massvig.ecommerce.d.bb:
    void LoadSuccess() -> a
    void LoadFailed() -> b
    void NoData() -> c
com.massvig.ecommerce.managers.GoodsListManager$fetchGoodsListAsync -> com.massvig.ecommerce.d.bc:
    com.massvig.ecommerce.managers.GoodsListManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.InsertManager -> com.massvig.ecommerce.d.bd:
    com.massvig.ecommerce.managers.InsertManager$Listener listener -> m
    int productID -> a
    int campaignID -> b
    int shareID -> c
    java.lang.String comment -> d
    java.lang.String imgUrl -> e
    double lat -> f
    double lon -> g
    java.lang.String address -> h
    java.lang.String uploadUrl -> i
    java.lang.String fileKey -> j
    boolean isCanUpload -> k
    int flag -> l
    void setListener(com.massvig.ecommerce.managers.InsertManager$Listener) -> a
    void Share(java.lang.String) -> a
    void UploadImage(android.graphics.Bitmap) -> a
    void GetUploadImageUrl() -> a
    com.massvig.ecommerce.managers.InsertManager$Listener access$0(com.massvig.ecommerce.managers.InsertManager) -> a
com.massvig.ecommerce.managers.InsertManager$GetUploadAsync -> com.massvig.ecommerce.d.be:
    com.massvig.ecommerce.managers.InsertManager this$0 -> a
    java.lang.Void doInBackground$10299ca() -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.InsertManager$Listener -> com.massvig.ecommerce.d.bf:
    void Success(int) -> a
    void Failed(int) -> b
    void SessionFailed() -> c
com.massvig.ecommerce.managers.InsertManager$UploadAsync -> com.massvig.ecommerce.d.bg:
    android.graphics.Bitmap bitmap -> b
    com.massvig.ecommerce.managers.InsertManager this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Boolean doInBackground$5f8445a4() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.LoginManager -> com.massvig.ecommerce.d.bh:
    com.massvig.ecommerce.entities.User user -> a
    com.massvig.ecommerce.managers.LoginManager$Listener listener -> b
    void GetEJServerInfo() -> a
    void Login(java.lang.String,java.lang.String) -> a
    com.massvig.ecommerce.managers.LoginManager$Listener access$0(com.massvig.ecommerce.managers.LoginManager) -> a
com.massvig.ecommerce.managers.LoginManager$1 -> com.massvig.ecommerce.d.bi:
    com.massvig.ecommerce.managers.LoginManager this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.LoginManager$Listener -> com.massvig.ecommerce.d.bj:
    void start() -> a
    void end() -> c
    void LoginSuccess() -> d
    void LoginFailed() -> e
    void empty() -> f
    void accountErr() -> g
    void GetInfoSuccess() -> h
    void GetInfoFailed() -> i
com.massvig.ecommerce.managers.LoginManager$LoginAsync -> com.massvig.ecommerce.d.bk:
    com.massvig.ecommerce.managers.LoginManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.MainActivityManager -> com.massvig.ecommerce.d.bl:
    java.util.ArrayList imageItemsList -> a
    java.util.ArrayList adList -> b
    com.massvig.ecommerce.managers.MainActivityManager$LoadListener listener -> c
    android.content.Context mContext -> d
    void setListener(com.massvig.ecommerce.managers.MainActivityManager$LoadListener) -> a
    com.massvig.ecommerce.entities.AdItem ItemAnaly(org.json.JSONObject) -> b
    void SetData() -> a
    void RefreshImageItemsList() -> b
    android.content.Context access$0(com.massvig.ecommerce.managers.MainActivityManager) -> a
    com.massvig.ecommerce.entities.AdItem access$1$29ebedc5(org.json.JSONObject) -> a
    com.massvig.ecommerce.managers.MainActivityManager$LoadListener access$2(com.massvig.ecommerce.managers.MainActivityManager) -> b
com.massvig.ecommerce.managers.MainActivityManager$1 -> com.massvig.ecommerce.d.bm:
    com.massvig.ecommerce.managers.MainActivityManager this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.MainActivityManager$2 -> com.massvig.ecommerce.d.bn:
    com.massvig.ecommerce.managers.MainActivityManager this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.MainActivityManager$LoadListener -> com.massvig.ecommerce.d.bo:
    void Success() -> a
com.massvig.ecommerce.managers.MapManager -> com.massvig.ecommerce.d.bp:
    double lat -> a
    double lon -> b
    com.massvig.ecommerce.managers.MapManager$LoadListener listener -> e
    com.massvig.ecommerce.entities.MerchantList list -> c
    com.massvig.ecommerce.entities.MerchantList tempList -> d
    void setListener(com.massvig.ecommerce.managers.MapManager$LoadListener) -> a
    void GetAroundMerchantStore(java.lang.String) -> a
    com.massvig.ecommerce.managers.MapManager$LoadListener access$0(com.massvig.ecommerce.managers.MapManager) -> a
com.massvig.ecommerce.managers.MapManager$LoadListener -> com.massvig.ecommerce.d.bq:
    void Success() -> a
com.massvig.ecommerce.managers.MapManager$MerchantAsync -> com.massvig.ecommerce.d.br:
    com.massvig.ecommerce.managers.MapManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.MessageManager -> com.massvig.ecommerce.d.bs:
    android.content.Context context -> b
    com.massvig.ecommerce.entities.ChaterList chatList -> a
    com.massvig.ecommerce.managers.MessageManager$LoadListener listener -> c
    void setListener(com.massvig.ecommerce.managers.MessageManager$LoadListener) -> a
    void GetMessagePageCustomerInfo$44bb35ff(java.lang.String) -> a
    void GetAllChatList(java.lang.String) -> b
    com.massvig.ecommerce.managers.MessageManager$LoadListener access$0(com.massvig.ecommerce.managers.MessageManager) -> a
com.massvig.ecommerce.managers.MessageManager$1 -> com.massvig.ecommerce.d.bt:
    com.massvig.ecommerce.managers.MessageManager this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.MessageManager$LoadListener -> com.massvig.ecommerce.d.bu:
    void LoadSuccess(int) -> a
    void LoadFailed$13462e() -> a
com.massvig.ecommerce.managers.ModifyManager -> com.massvig.ecommerce.d.bv:
    com.massvig.ecommerce.entities.User user -> a
    com.massvig.ecommerce.managers.ModifyManager$Listener listener -> b
    void SendCode(java.lang.String) -> a
    void Modify(java.lang.String,int) -> a
    com.massvig.ecommerce.managers.ModifyManager$Listener access$0(com.massvig.ecommerce.managers.ModifyManager) -> a
com.massvig.ecommerce.managers.ModifyManager$Listener -> com.massvig.ecommerce.d.bw:
    void start(int) -> a
    void end(int) -> b
    void Success(int) -> c
    void Failed(int) -> d
    void empty() -> a
    void accountErr() -> c
    void alreadyExit() -> e
com.massvig.ecommerce.managers.ModifyManager$ModifyAsync -> com.massvig.ecommerce.d.bx:
    com.massvig.ecommerce.managers.ModifyManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.ModifyManager$SendCodeAsync -> com.massvig.ecommerce.d.by:
    com.massvig.ecommerce.managers.ModifyManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.NearPersonManager -> com.massvig.ecommerce.d.bz:
    com.massvig.ecommerce.managers.NearPersonManager$LoadListener listener -> f
    int gender -> a
    com.massvig.ecommerce.entities.NearPersonList list -> b
    com.massvig.ecommerce.entities.NearPersonList tempList -> c
    boolean isLoadDone -> g
    double lon -> d
    double lat -> e
    int type -> h
    void loadDate(java.lang.String,int) -> a
    void setListener(com.massvig.ecommerce.managers.NearPersonManager$LoadListener) -> a
    void SubmitLocation(java.lang.String) -> a
    void AddAndRemoveFans(int,java.lang.String,int) -> a
    com.massvig.ecommerce.managers.NearPersonManager$LoadListener access$0(com.massvig.ecommerce.managers.NearPersonManager) -> a
    boolean access$1(com.massvig.ecommerce.managers.NearPersonManager,java.lang.String,int,double,double,int,int) -> a
    int access$2(com.massvig.ecommerce.managers.NearPersonManager) -> b
com.massvig.ecommerce.managers.NearPersonManager$1 -> com.massvig.ecommerce.d.ca:
    com.massvig.ecommerce.managers.NearPersonManager this$0 -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.NearPersonManager$AddAndRemoveFansAsync -> com.massvig.ecommerce.d.cb:
    int customerID -> b
    int type -> c
    com.massvig.ecommerce.managers.NearPersonManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.NearPersonManager$LoadListener -> com.massvig.ecommerce.d.cc:
    void LoadSuccess$13462e() -> a
    void SessionVailed() -> c
com.massvig.ecommerce.managers.NearPersonManager$fetchPersonListAsync -> com.massvig.ecommerce.d.cd:
    com.massvig.ecommerce.managers.NearPersonManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.OrderManager -> com.massvig.ecommerce.d.ce:
    java.lang.String coupons -> a
    java.util.ArrayList products -> p
    com.massvig.ecommerce.managers.OrderManager$LoadListener listener -> q
    com.massvig.ecommerce.entities.AddressList addressList -> b
    android.content.Context context -> r
    com.massvig.ecommerce.entities.Address address -> c
    double freight -> d
    int payType -> e
    java.lang.String billText -> f
    java.lang.String billType -> g
    int orderID -> h
    int status -> i
    java.lang.String orderNO -> j
    java.lang.String LogisticsInfoList -> k
    java.lang.String payment -> l
    java.lang.String billTitle -> m
    int expressage -> n
    boolean isWebOrder -> o
    com.massvig.ecommerce.entities.Address GetDefalultAddress() -> a
    void setListener(com.massvig.ecommerce.managers.OrderManager$LoadListener) -> a
    void addProduct(com.massvig.ecommerce.entities.Product) -> a
    java.util.ArrayList getProducts() -> b
    void CalculateFreight(java.lang.String,java.lang.String,java.lang.String) -> a
    android.content.SharedPreferences getSharedPreferences() -> e
    com.massvig.ecommerce.entities.Address GetLocalAddress() -> c
    void SaveLocalAddress(com.massvig.ecommerce.entities.Address) -> a
    void GetAddressList(java.lang.String) -> a
    void GetPayType() -> d
    void ConfirmShiped(java.lang.String) -> b
    void CancelOrder(java.lang.String) -> c
    com.massvig.ecommerce.managers.OrderManager$LoadListener access$0(com.massvig.ecommerce.managers.OrderManager) -> a
com.massvig.ecommerce.managers.OrderManager$1 -> com.massvig.ecommerce.d.cf:
    com.massvig.ecommerce.managers.OrderManager this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.OrderManager$2 -> com.massvig.ecommerce.d.cg:
    com.massvig.ecommerce.managers.OrderManager this$0 -> a
    java.lang.String val$sessionid -> b
    java.lang.Integer doInBackground$9ecd34e() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.OrderManager$3 -> com.massvig.ecommerce.d.ch:
    com.massvig.ecommerce.managers.OrderManager this$0 -> a
    java.lang.String val$sessionid -> b
    java.lang.Integer doInBackground$9ecd34e() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.OrderManager$CalculateFreightAsync -> com.massvig.ecommerce.d.ci:
    com.massvig.ecommerce.managers.OrderManager this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.OrderManager$GetAddressAsync -> com.massvig.ecommerce.d.cj:
    com.massvig.ecommerce.managers.OrderManager this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.OrderManager$LoadListener -> com.massvig.ecommerce.d.ck:
    void Success(int) -> a
    void Failed(int) -> b
    void Payment(java.lang.String) -> a
    void SessionFailed() -> a
com.massvig.ecommerce.managers.OrdersManager -> com.massvig.ecommerce.d.cl:
    com.massvig.ecommerce.managers.OrdersManager$LoadListener listener -> j
    int mFromX -> k
    int mToX -> l
    int moveWidth -> m
    int maxWidth -> n
    int index -> o
    java.util.ArrayList views -> p
    com.massvig.ecommerce.entities.MyOrderList unpayList -> a
    com.massvig.ecommerce.entities.MyOrderList paidList -> b
    com.massvig.ecommerce.entities.MyOrderList huodaoList -> c
    com.massvig.ecommerce.entities.MyOrderList refundList -> d
    com.massvig.ecommerce.entities.MyOrderList unpaytempList -> e
    com.massvig.ecommerce.entities.MyOrderList paidtempList -> f
    com.massvig.ecommerce.entities.MyOrderList refundtempList -> g
    com.massvig.ecommerce.entities.MyOrderList huodaotempList -> h
    boolean unpay_isLoadDone -> q
    boolean paid_isLoadDone -> r
    boolean huodao_isLoadDone -> s
    boolean refund_isLoadDone -> t
    boolean isLoading -> i
    void setListener(com.massvig.ecommerce.managers.OrdersManager$LoadListener) -> a
    java.util.ArrayList getViews() -> a
    int getmFromX() -> b
    int getmToX() -> c
    void setMoveWidth(int) -> a
    int getMaxWidth() -> d
    void setMaxWidth(int) -> b
    void setIndex(int) -> c
    void LoadData(java.lang.String,int,int) -> a
    void clearData(int) -> d
    void clearUnpayData() -> e
    void clearPaidData() -> f
    void clearHuodaoData() -> g
    void clearRefundData() -> h
    void access$0$5c6a4abb(com.massvig.ecommerce.managers.OrdersManager) -> a
    void access$1$5c6a4abb(com.massvig.ecommerce.managers.OrdersManager) -> b
    void access$2$5c6a4abb(com.massvig.ecommerce.managers.OrdersManager) -> c
    void access$3$5c6a4abb(com.massvig.ecommerce.managers.OrdersManager) -> d
    com.massvig.ecommerce.managers.OrdersManager$LoadListener access$4(com.massvig.ecommerce.managers.OrdersManager) -> e
com.massvig.ecommerce.managers.OrdersManager$GetOrdersAsync -> com.massvig.ecommerce.d.cm:
    int orderTab -> b
    int type -> c
    com.massvig.ecommerce.managers.OrdersManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.OrdersManager$LoadListener -> com.massvig.ecommerce.d.cn:
    void LoadSuccess(int) -> a
    void LoadFailed(int) -> b
com.massvig.ecommerce.managers.PostDetailManager -> com.massvig.ecommerce.d.co:
    com.massvig.ecommerce.managers.PostDetailManager$LoadListener listener -> e
    java.lang.String atCustomerID -> a
    int maxHeight -> f
    int maxWidth -> g
    com.massvig.ecommerce.entities.PostDetail postDetail -> b
    com.massvig.ecommerce.entities.PostDetail tempPostDetail -> c
    boolean isLoadDone -> d
    void Praise(java.lang.String) -> a
    void setListener(com.massvig.ecommerce.managers.PostDetailManager$LoadListener) -> a
    void DeletePost(java.lang.String) -> b
    void FetchComment() -> a
    void AddComment(java.lang.String,java.lang.String) -> a
    com.massvig.ecommerce.managers.PostDetailManager$LoadListener access$0(com.massvig.ecommerce.managers.PostDetailManager) -> a
com.massvig.ecommerce.managers.PostDetailManager$1 -> com.massvig.ecommerce.d.cp:
    com.massvig.ecommerce.managers.PostDetailManager this$0 -> a
    java.lang.String val$sessionid -> b
    java.lang.Integer doInBackground$9ecd34e() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.PostDetailManager$AddCommentAsync -> com.massvig.ecommerce.d.cq:
    com.massvig.ecommerce.managers.PostDetailManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.PostDetailManager$FetchCommentAsync -> com.massvig.ecommerce.d.cr:
    com.massvig.ecommerce.managers.PostDetailManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.PostDetailManager$LoadListener -> com.massvig.ecommerce.d.cs:
    void AddCommentFailed() -> a
    void AddCommentSuccess() -> c
    void LoadCommentSuccess() -> d
    void LoadCommentFailed() -> e
    void PraiseSuccess$13462e() -> f
    void PraiseFailed$13462e() -> g
    void SessionVailed() -> h
    void Already() -> i
    void DeletePost(int) -> a
com.massvig.ecommerce.managers.PostDetailManager$PraiseAsync -> com.massvig.ecommerce.d.ct:
    com.massvig.ecommerce.managers.PostDetailManager this$0 -> a
    java.lang.Integer doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.RegisterManager -> com.massvig.ecommerce.d.cu:
    com.massvig.ecommerce.entities.User user -> a
    com.massvig.ecommerce.managers.RegisterManager$Listener listener -> c
    java.lang.String responsedata -> b
    void SendCode(java.lang.String) -> a
    void CheckCode(java.lang.String) -> b
    void Register(java.lang.String,java.lang.String,java.lang.String) -> a
    void needregistercode(java.lang.String) -> c
    com.massvig.ecommerce.managers.RegisterManager$Listener access$0(com.massvig.ecommerce.managers.RegisterManager) -> a
com.massvig.ecommerce.managers.RegisterManager$CheckCodeAsync -> com.massvig.ecommerce.d.cv:
    com.massvig.ecommerce.managers.RegisterManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.RegisterManager$Listener -> com.massvig.ecommerce.d.cw:
    void start(int) -> a
    void end(int) -> b
    void Success(int) -> c
    void Failed(int) -> d
    void empty() -> a
    void accountErr() -> c
    void alreadyExit() -> d
    void register(com.massvig.ecommerce.entities.User) -> a
    void anotherRegister() -> e
com.massvig.ecommerce.managers.RegisterManager$Needcodeasync -> com.massvig.ecommerce.d.cx:
    java.lang.String v -> a
    com.massvig.ecommerce.managers.RegisterManager this$0 -> b
    java.lang.Integer doInBackground$9ecd34e() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.RegisterManager$RegisterAsync -> com.massvig.ecommerce.d.cy:
    com.massvig.ecommerce.managers.RegisterManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.RegisterManager$SendCodeAsync -> com.massvig.ecommerce.d.cz:
    com.massvig.ecommerce.managers.RegisterManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.UserInfoManager -> com.massvig.ecommerce.d.da:
    com.massvig.ecommerce.managers.UserInfoManager$Listener listener -> d
    com.massvig.ecommerce.entities.User user -> e
    java.lang.String uploadUrl -> a
    java.lang.String fileKey -> b
    boolean isCanUpload -> c
    java.lang.String filePath -> f
    void ModifyPassword(java.lang.String,java.lang.String) -> a
    void GetUploadImageUrl() -> a
    void GetCustomerCenter() -> b
    void UploadImage(android.graphics.Bitmap) -> a
    int GetAllUnread(android.content.Context,java.lang.String) -> a
    void ModifyInformation() -> c
    void setListener(com.massvig.ecommerce.managers.UserInfoManager$Listener) -> a
    com.massvig.ecommerce.entities.User access$0(com.massvig.ecommerce.managers.UserInfoManager) -> a
    com.massvig.ecommerce.managers.UserInfoManager$Listener access$1(com.massvig.ecommerce.managers.UserInfoManager) -> b
    void access$2(com.massvig.ecommerce.managers.UserInfoManager,java.lang.String) -> a
    java.lang.String access$3(com.massvig.ecommerce.managers.UserInfoManager) -> c
com.massvig.ecommerce.managers.UserInfoManager$GetCustomerCenter -> com.massvig.ecommerce.d.db:
    com.massvig.ecommerce.managers.UserInfoManager this$0 -> a
    java.lang.Void doInBackground$10299ca() -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.UserInfoManager$GetUploadAsync -> com.massvig.ecommerce.d.dc:
    com.massvig.ecommerce.managers.UserInfoManager this$0 -> a
    java.lang.Void doInBackground$10299ca() -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.UserInfoManager$Listener -> com.massvig.ecommerce.d.dd:
    void Success(int) -> a
    void Failed(int) -> b
    void SessionFailed() -> a
    void Dialog(boolean) -> a
    void LoadData(com.massvig.ecommerce.managers.UserInfoManager$Numbers) -> a
    void NickName() -> c
com.massvig.ecommerce.managers.UserInfoManager$ModifyAsync -> com.massvig.ecommerce.d.de:
    com.massvig.ecommerce.managers.UserInfoManager this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.managers.UserInfoManager$Numbers -> com.massvig.ecommerce.d.df:
    int OnlineUnpayCount -> a
    int OnlinePaidCount -> b
    int OnlineRefundCount -> c
    int OfflineCashCount -> d
    int FollowingCustomerCount -> e
    int FansCustomerCount -> f
    com.massvig.ecommerce.managers.UserInfoManager this$0 -> g
com.massvig.ecommerce.managers.UserInfoManager$UploadAsync -> com.massvig.ecommerce.d.dg:
    android.graphics.Bitmap bitmap -> b
    com.massvig.ecommerce.managers.UserInfoManager this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Void doInBackground$10299ca() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.network.MassVigClientHelper -> com.massvig.ecommerce.e.a:
    java.lang.String httpUrl -> c
    java.lang.String method -> d
    java.lang.String POST -> a
    java.lang.String GET -> b
    com.massvig.ecommerce.network.MassVigRequestParameters mRequestParameters -> e
    com.massvig.ecommerce.network.MassVigClientHelper instance -> f
    com.massvig.ecommerce.network.MassVigClientHelper$TimeOutListener listener -> g
    com.massvig.ecommerce.network.MassVigClientHelper getInstance() -> a
    void setTimeoutListener(com.massvig.ecommerce.network.MassVigClientHelper$TimeOutListener) -> a
    void set(java.lang.String,com.massvig.ecommerce.network.MassVigRequestParameters,java.lang.String) -> b
    java.lang.String execute(java.lang.String,com.massvig.ecommerce.network.MassVigRequestParameters,java.lang.String) -> a
com.massvig.ecommerce.network.MassVigClientHelper$TimeOutListener -> com.massvig.ecommerce.e.b:
    void timeoutListener() -> a
com.massvig.ecommerce.network.MassVigRequestParameters -> com.massvig.ecommerce.e.c:
    java.util.HashMap mParameters -> a
    java.util.List mKeys -> b
    void add(java.lang.String,java.lang.String) -> a
    java.lang.String getRquestParam() -> a
    java.lang.String toString() -> toString
com.massvig.ecommerce.service.EcommerceNetworkBroadcastReceiver -> com.massvig.ecommerce.service.EcommerceNetworkBroadcastReceiver:
    com.massvig.ecommerce.service.EcommerceNetworkBroadcastReceiver$NetworkListener listener -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.massvig.ecommerce.service.EcommerceNetworkBroadcastReceiver$NetworkListener -> com.massvig.ecommerce.service.a:
    void available() -> a
    void notAvailable() -> b
    void bootComplete() -> c
com.massvig.ecommerce.service.EcommercePushService -> com.massvig.ecommerce.service.EcommercePushService:
    com.massvig.ecommerce.service.EcommerceNetworkBroadcastReceiver receiver -> b
    boolean isFirstStart -> c
    com.massvig.ecommerce.service.EcommercePushService$MyBroadcast receive -> d
    android.os.PowerManager$WakeLock mWakeLock -> e
    com.massvig.ecommerce.activities.BaseApplication app -> f
    com.massvig.ecommerce.service.EcommercePushService$MyTask mTask -> g
    java.util.Timer timer -> a
    void onCreate() -> onCreate
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void onDestroy() -> onDestroy
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void restartConnectToServer() -> b
    void access$0(com.massvig.ecommerce.service.EcommercePushService) -> a
    void access$1(com.massvig.ecommerce.service.EcommercePushService) -> b
    boolean access$2(com.massvig.ecommerce.service.EcommercePushService) -> c
    void access$3$38ef6dd1(com.massvig.ecommerce.service.EcommercePushService) -> d
    void access$4$59008e9d() -> a
    com.massvig.ecommerce.activities.BaseApplication access$5(com.massvig.ecommerce.service.EcommercePushService) -> e
com.massvig.ecommerce.service.EcommercePushService$1 -> com.massvig.ecommerce.service.b:
    com.massvig.ecommerce.service.EcommercePushService this$0 -> a
    void available() -> a
    void notAvailable() -> b
    void bootComplete() -> c
com.massvig.ecommerce.service.EcommercePushService$2 -> com.massvig.ecommerce.service.c:
    com.massvig.ecommerce.service.EcommercePushService this$0 -> a
    void run() -> run
    com.massvig.ecommerce.service.EcommercePushService access$0(com.massvig.ecommerce.service.EcommercePushService$2) -> a
com.massvig.ecommerce.service.EcommercePushService$2$1 -> com.massvig.ecommerce.service.d:
    com.massvig.ecommerce.service.EcommercePushService$2 this$1 -> a
    void chatCreated(org.jivesoftware.smack.Chat,boolean) -> chatCreated
    com.massvig.ecommerce.service.EcommercePushService$2 access$0(com.massvig.ecommerce.service.EcommercePushService$2$1) -> a
com.massvig.ecommerce.service.EcommercePushService$2$1$1 -> com.massvig.ecommerce.service.e:
    com.massvig.ecommerce.service.EcommercePushService$2$1 this$2 -> a
    void processMessage(org.jivesoftware.smack.Chat,org.jivesoftware.smack.packet.Message) -> processMessage
com.massvig.ecommerce.service.EcommercePushService$MyBroadcast -> com.massvig.ecommerce.service.f:
    com.massvig.ecommerce.service.EcommercePushService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    com.massvig.ecommerce.service.EcommercePushService access$0(com.massvig.ecommerce.service.EcommercePushService$MyBroadcast) -> a
com.massvig.ecommerce.service.EcommercePushService$MyBroadcast$1 -> com.massvig.ecommerce.service.g:
    com.massvig.ecommerce.service.EcommercePushService$MyBroadcast this$1 -> a
    void run() -> run
com.massvig.ecommerce.service.EcommercePushService$MyTask -> com.massvig.ecommerce.service.h:
    com.massvig.ecommerce.service.EcommercePushService this$0 -> a
    void run() -> run
com.massvig.ecommerce.service.EcommerceSystemBroadcastReceiver -> com.massvig.ecommerce.service.EcommerceSystemBroadcastReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.massvig.ecommerce.service.MassVigOnlinePaymentService -> com.massvig.ecommerce.service.i:
    com.massvig.ecommerce.service.MassVigOnlinePaymentService$PayListener listener -> a
    android.content.Context context -> b
    android.app.ProgressDialog mAlipayProgress -> c
    android.os.Handler mAliHandler -> d
    void payUnion(java.lang.String) -> a
    void rePayUnion$44bd8e9f(java.lang.String,int) -> a
    void rePayAli(java.lang.String,int,int) -> a
    void startLoginUnionPay(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int) -> a
    void UnionDataAnaly(java.lang.String) -> c
    void startUnLoginUnionPay(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void startAlipay(java.lang.String) -> b
    void StartLoginAliPay(java.lang.String,int,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int) -> a
    void AliDataAnaly(java.lang.String) -> d
    void StartUnLoginAliPay(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> b
    void closeProgressForAlipay() -> a
    com.massvig.ecommerce.service.MassVigOnlinePaymentService$PayListener access$0(com.massvig.ecommerce.service.MassVigOnlinePaymentService) -> a
    android.content.Context access$1(com.massvig.ecommerce.service.MassVigOnlinePaymentService) -> b
com.massvig.ecommerce.service.MassVigOnlinePaymentService$1 -> com.massvig.ecommerce.service.j:
    com.massvig.ecommerce.service.MassVigOnlinePaymentService this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.service.MassVigOnlinePaymentService$PayListener -> com.massvig.ecommerce.service.k:
    void paySuccess() -> e
    void orderDoneSuccess(int,java.lang.String) -> a
    void orderDoneFailed(java.lang.String) -> b
    void orderdoneFailed(java.lang.String) -> c
    void sessionFailed() -> f
com.massvig.ecommerce.service.MassVigService -> com.massvig.ecommerce.service.l:
    com.massvig.ecommerce.service.MassVigService instance -> a
    com.massvig.ecommerce.network.MassVigClientHelper clientHelper -> b
    com.massvig.ecommerce.service.MassVigService$timeoutListener listener -> c
    java.lang.String udid -> d
    void setListener(com.massvig.ecommerce.service.MassVigService$timeoutListener) -> a
    com.massvig.ecommerce.service.MassVigService getInstance() -> a
    java.lang.String getpromotionURL(java.lang.String) -> t
    java.lang.String getCollectURL(java.lang.String) -> u
    java.lang.String getProductURL(java.lang.String) -> v
    java.lang.String getAccountURL(java.lang.String) -> w
    java.lang.String getAddressURL(java.lang.String) -> x
    java.lang.String getPromotionURL(java.lang.String) -> y
    java.lang.String getOrderURL(java.lang.String) -> z
    java.lang.String getSharedURL(java.lang.String) -> A
    java.lang.String getFollowURL(java.lang.String) -> B
    java.lang.String getShoppingURL(java.lang.String) -> C
    java.lang.String HttpConnect(java.net.URL) -> a
    java.lang.String getAddByLocation(java.lang.String,java.lang.String,boolean) -> a
    java.lang.String Follow(java.lang.String,int) -> a
    java.lang.String CancelFollow(java.lang.String,int) -> b
    java.lang.String GetFollows$31f3b324(java.lang.String,int,int) -> a
    java.lang.String GetFans$31f3b324(java.lang.String,int,int) -> b
    java.lang.String ShareProduct(java.lang.String,int,java.lang.String,java.lang.String,double,double,java.lang.String) -> a
    java.lang.String Share(java.lang.String,int,java.lang.String,java.lang.String,double,double,java.lang.String) -> b
    java.lang.String Praise(java.lang.String,int) -> c
    java.lang.String GetAll$782597e1(java.lang.String,int) -> d
    java.lang.String GetFollowShares$782597e1(java.lang.String,int) -> e
    java.lang.String GetShares$31f3b324(java.lang.String,int,int) -> c
    java.lang.String GetHavePaisedShares$31f3b324(java.lang.String,int,int) -> d
    java.lang.String GetPraisedShareRecords$31f3b324(java.lang.String,int,int) -> e
    java.lang.String Getcategory() -> b
    java.lang.String CalculateFreight(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int) -> a
    java.lang.String GetSpecificRegionExpress(java.lang.String,java.lang.String) -> a
    java.lang.String SubmitUnloginOrder(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String SubmitLoginOrder(java.lang.String,int,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int) -> a
    java.lang.String GetOrders$31f3b324(java.lang.String,int,int) -> f
    java.lang.String DefrayOrder(java.lang.String,int,int) -> g
    java.lang.String ConfirmShiped(java.lang.String,int) -> f
    java.lang.String ApplyForRefund(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String CancelOrder(java.lang.String,int) -> g
    java.lang.String GetPaymentMethod() -> c
    java.lang.String getCouponList(java.lang.String) -> a
    java.lang.String CreateNewCoupon(java.lang.String) -> b
    java.lang.String OrderPromotion(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int) -> a
    java.lang.String CheckCoupon2(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> b
    java.lang.String CheckCouponLogin(java.lang.String,int,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,int) -> a
    java.lang.String DeleteCoupon(java.lang.String,java.lang.String) -> b
    java.lang.String CreateCoupon(java.lang.String,java.lang.String) -> c
    java.lang.String GetCustomerAddresses(java.lang.String) -> c
    java.lang.String AddAddress(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String ModifyAddress(java.lang.String,int,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String SetDefaultAddress(java.lang.String,int) -> h
    java.lang.String DeleteAddress(java.lang.String,int) -> i
    java.lang.String GetAroundMerchantStore$216793e1(java.lang.String,double,double,int) -> a
    java.lang.String GetProducts(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int) -> a
    java.lang.String SearchActivityProduct$3b11e764(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> c
    java.lang.String addCollection(int,java.lang.String) -> a
    java.lang.String GetCollection(java.lang.String) -> d
    java.lang.String delteCollection(java.lang.String,int) -> j
    java.lang.String AddOption(java.lang.String,java.lang.String) -> d
    java.lang.String AddAdvice(java.lang.String,int,java.lang.String) -> a
    java.lang.String GetAdvices(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String GetHotSearchword() -> d
    java.lang.String SearchProduct(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String GetProduct(java.lang.String,java.lang.String) -> e
    java.lang.String GetProductSpecInfo(java.lang.String) -> e
    java.lang.String GetProdcutImgs(java.lang.String) -> f
    java.lang.String AddComment(java.lang.String,int,java.lang.String,java.lang.String) -> a
    java.lang.String GetComment$24d420ae(int,int) -> a
    java.lang.String PraiseProduct(java.lang.String,int) -> k
    java.lang.String GetAdvertises(java.lang.String) -> g
    java.lang.String GetUserCampaigns(java.lang.String) -> h
    java.lang.String ShareCampaign(java.lang.String,int,java.lang.String,java.lang.String,double,double,java.lang.String) -> c
    java.lang.String ShareOrigin(java.lang.String,java.lang.String,java.lang.String,double,double,java.lang.String) -> a
    java.lang.String DeleteShare(java.lang.String,int) -> l
    java.lang.String GetCampaignInfo(java.lang.String,int) -> m
    java.lang.String GetCampaignShare$31f3b324(java.lang.String,int,int) -> h
    java.lang.String AddPostComment(java.lang.String,int,java.lang.String,java.lang.String) -> b
    java.lang.String GetPostComment$24d420ae(int,int) -> b
    java.lang.String SearchShare$782597e1(java.lang.String,int) -> n
    java.lang.String CheckLoginNameAndSendVerifyCode(java.lang.String) -> i
    java.lang.String SendVerifyCodeWithCheck(java.lang.String) -> j
    java.lang.String NeedRegisterCode(java.lang.String) -> k
    java.lang.String Register(java.lang.String,java.lang.String,java.lang.String) -> b
    java.lang.String Login(java.lang.String,java.lang.String) -> f
    java.lang.String VerifySession(java.lang.String) -> l
    java.lang.String FindPassword(java.lang.String,java.lang.String,java.lang.String) -> c
    java.lang.String ModifyPassword(java.lang.String,java.lang.String,java.lang.String) -> d
    java.lang.String ModifyCustomInfo(java.lang.String,java.lang.String,java.lang.String,int) -> a
    java.lang.String ModifyMobile(java.lang.String,java.lang.String) -> g
    java.lang.String ModifyEmail(java.lang.String,java.lang.String) -> h
    java.lang.String CheckVerifyCode(java.lang.String,java.lang.String) -> i
    java.lang.String GetCustomerStatistics(int) -> a
    java.lang.String SubmitLocation(java.lang.String,double,double) -> a
    java.lang.String GetAroundPersons(java.lang.String,int,double,double,int,int) -> a
    java.lang.String FindPeople$4acf5069(java.lang.String,java.lang.String,int) -> a
    java.lang.String GetMessagePageCustomerInfo(java.lang.String,java.lang.String,double,double) -> a
    java.lang.String GetEJServerInfo(java.lang.String) -> m
    java.lang.String GetCustomerCenter(java.lang.String) -> n
    java.lang.String GetUploadImageUrl() -> e
    java.lang.String AddProduct(java.lang.String,java.lang.String,java.lang.String) -> e
    java.lang.String DeleteProduct(java.lang.String,java.lang.String) -> j
    java.lang.String TotalNum(java.lang.String) -> o
    java.lang.String GetList(java.lang.String) -> p
    java.lang.String ModifyQuantity(java.lang.String,java.lang.String,java.lang.String) -> f
    java.lang.String getWebContent(java.lang.String) -> q
    java.lang.String PicUpload(java.lang.String,java.lang.String,android.graphics.Bitmap) -> a
    java.io.File convertBitmapToFile(java.io.File,android.graphics.Bitmap) -> a
    java.lang.String putWebContent(java.lang.String) -> r
    java.lang.String getAndroidVersion(java.lang.String,java.lang.String) -> k
    java.lang.String getWebUrl(java.lang.String) -> s
    com.massvig.ecommerce.service.MassVigService$timeoutListener access$0() -> f
com.massvig.ecommerce.service.MassVigService$1 -> com.massvig.ecommerce.service.m:
    void timeoutListener() -> a
com.massvig.ecommerce.service.MassVigService$timeoutListener -> com.massvig.ecommerce.service.n:
    void TimeOutListener() -> a
com.massvig.ecommerce.sevice.purchase.BaseHelper -> com.massvig.ecommerce.f.a.a:
    java.lang.String convertStreamToString(java.io.InputStream) -> a
    android.app.ProgressDialog showProgress$6a98ea39$d74a8f7(android.content.Context,java.lang.CharSequence) -> a
    org.json.JSONObject string2JSON(java.lang.String,java.lang.String) -> a
com.massvig.ecommerce.sevice.purchase.BaseHelper$AlixOnCancelListener -> com.massvig.ecommerce.f.a.b:
    android.app.Activity mcontext -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.massvig.ecommerce.sevice.purchase.MobileSecurePayHelper -> com.massvig.ecommerce.f.a.c:
    android.app.ProgressDialog mProgress -> b
    android.content.Context mContext -> a
    android.os.Handler mHandler -> c
    boolean detectMobile_sp() -> a
    boolean isMobile_spExist() -> b
    boolean retrieveApkFromAssets(android.content.Context,java.lang.String,java.lang.String) -> a
    java.lang.String checkNewUpdate() -> c
    org.json.JSONObject sendCheckNewUpdate(java.lang.String) -> a
    org.json.JSONObject sendRequest(java.lang.String) -> b
    boolean retrieveApkFromNet$62dc3a75(java.lang.String,java.lang.String) -> a
    void closeProgress() -> d
    android.os.Handler access$0(com.massvig.ecommerce.sevice.purchase.MobileSecurePayHelper) -> a
com.massvig.ecommerce.sevice.purchase.MobileSecurePayHelper$1 -> com.massvig.ecommerce.f.a.d:
    com.massvig.ecommerce.sevice.purchase.MobileSecurePayHelper this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.sevice.purchase.MobileSecurePayHelper$2 -> com.massvig.ecommerce.f.a.e:
    com.massvig.ecommerce.sevice.purchase.MobileSecurePayHelper this$0 -> a
    java.lang.String val$cachePath -> b
    void run() -> run
com.massvig.ecommerce.sevice.purchase.MobileSecurePayHelper$3 -> com.massvig.ecommerce.f.a.f:
    com.massvig.ecommerce.sevice.purchase.MobileSecurePayHelper this$0 -> a
    java.lang.String val$cachePath -> b
    android.content.Context val$context -> c
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.sevice.purchase.MobileSecurePayHelper$4 -> com.massvig.ecommerce.f.a.g:
    com.massvig.ecommerce.sevice.purchase.MobileSecurePayHelper this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.massvig.ecommerce.sevice.purchase.MobileSecurePayer -> com.massvig.ecommerce.f.a.h:
    java.lang.String TAG -> a
    java.lang.Integer lock -> b
    com.alipay.android.app.IAlixPay mAlixPay -> c
    boolean mbPaying -> d
    android.app.Activity mActivity -> e
    android.content.ServiceConnection mAlixPayConnection -> f
    com.alipay.android.app.IRemoteServiceCallback mCallback -> g
    boolean pay$679d958a(java.lang.String,android.os.Handler,android.app.Activity) -> a
    com.alipay.android.app.IRemoteServiceCallback access$0(com.massvig.ecommerce.sevice.purchase.MobileSecurePayer) -> a
    android.content.ServiceConnection access$1(com.massvig.ecommerce.sevice.purchase.MobileSecurePayer) -> b
com.massvig.ecommerce.sevice.purchase.MobileSecurePayer$1 -> com.massvig.ecommerce.f.a.i:
    com.massvig.ecommerce.sevice.purchase.MobileSecurePayer this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.massvig.ecommerce.sevice.purchase.MobileSecurePayer$2 -> com.massvig.ecommerce.f.a.j:
    com.massvig.ecommerce.sevice.purchase.MobileSecurePayer this$0 -> a
    void startActivity(java.lang.String,java.lang.String,int,android.os.Bundle) -> startActivity
com.massvig.ecommerce.sevice.purchase.MobileSecurePayer$3 -> com.massvig.ecommerce.f.a.k:
    com.massvig.ecommerce.sevice.purchase.MobileSecurePayer this$0 -> a
    java.lang.String val$strOrderInfo -> b
    int val$myWhat -> c
    android.os.Handler val$callback -> d
    void run() -> run
com.massvig.ecommerce.sevice.purchase.NetworkManager -> com.massvig.ecommerce.f.a.l:
    int connectTimeout -> c
    int readTimeout -> d
    java.net.Proxy mProxy -> a
    android.content.Context mContext -> b
    void detectProxy() -> a
    java.lang.String SendAndWaitResponse(java.lang.String,java.lang.String) -> a
    boolean urlDownloadToFile$62dc3a75(java.lang.String,java.lang.String) -> b
com.massvig.ecommerce.sevice.purchase.NetworkManager$1 -> com.massvig.ecommerce.f.a.m:
    com.massvig.ecommerce.sevice.purchase.NetworkManager this$0 -> a
    boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
com.massvig.ecommerce.sevice.purchase.ResultChecker -> com.massvig.ecommerce.f.a.n:
    java.lang.String mContent -> a
    java.lang.String getSuccess() -> b
    boolean isPayOk() -> a
com.massvig.ecommerce.utilities.MassVigContants -> com.massvig.ecommerce.g.a:
    java.lang.String PATH -> a
    java.lang.String MAINPATH -> b
    java.lang.String TEMPPATH -> c
    java.lang.String DOWNLOAD -> d
    java.lang.String VERSION -> e
    java.lang.String MODULUS -> f
    java.lang.String EXPONENT -> g
    int Price_ASC -> h
    int Price_DESC -> i
    int Volume_ASC -> j
    int Volume_DESC -> k
    int OnlineTime_ASC -> l
    int OnlineTime_DESC -> m
com.massvig.ecommerce.utilities.MassVigExit -> com.massvig.ecommerce.g.b:
    boolean isExit -> a
    java.lang.Runnable task -> b
    void doExitInOneSecond() -> a
    boolean isExit() -> b
    void access$0$6c55138b(com.massvig.ecommerce.utilities.MassVigExit) -> a
com.massvig.ecommerce.utilities.MassVigExit$1 -> com.massvig.ecommerce.g.c:
    com.massvig.ecommerce.utilities.MassVigExit this$0 -> a
    void run() -> run
com.massvig.ecommerce.utilities.MassVigSystemSetting -> com.massvig.ecommerce.g.d:
    com.massvig.ecommerce.utilities.MassVigSystemSetting instance -> a
    com.massvig.ecommerce.utilities.MassVigSystemSetting getInstance() -> a
com.massvig.ecommerce.utilities.MassVigUtil -> com.massvig.ecommerce.g.e:
    java.lang.String sID -> a
    void CopyAssets(android.content.Context,java.lang.String,java.lang.String) -> a
    android.graphics.Bitmap getRoundedCornerBitmap$6a260065(android.graphics.Bitmap) -> a
    java.lang.String GetImageUrl(java.lang.String,int,int) -> a
    java.lang.String getMD5(java.lang.String) -> a
    boolean isEmail(java.lang.String) -> b
    boolean isMobileNO(java.lang.String) -> c
    java.lang.String getHeader() -> a
    boolean isWiFiActive(android.content.Context) -> a
    boolean isNetworkAvailable(android.content.Context) -> b
    android.text.SpannableString setCustomText$d6030df(java.lang.CharSequence,int,int,int) -> a
    java.lang.String id(android.content.Context) -> c
    int dip2px(android.content.Context,float) -> a
    android.graphics.Bitmap setBitmapSize$5c843e57(android.graphics.Bitmap) -> b
    void setPreferenceBooleanData(android.content.Context,java.lang.String,java.lang.Boolean) -> a
    boolean getPreferenceData$607b2e85(android.content.Context,java.lang.String) -> a
    void setPreferenceStringData(android.content.Context,java.lang.String,java.lang.String) -> b
    java.lang.String getPreferenceData(android.content.Context,java.lang.String,java.lang.String) -> c
    void outLogin(android.content.Context) -> d
    void deleteFiles(java.lang.String) -> d
    byte[] bmpToByteArray$2448d2a2(android.graphics.Bitmap) -> c
com.massvig.ecommerce.utilities.MassvigLogger -> com.massvig.ecommerce.g.f:
    com.massvig.ecommerce.utilities.MassvigLogger instance -> a
    com.massvig.ecommerce.utilities.MassvigLogger getInstance() -> a
    void v(java.lang.String,java.lang.String) -> a
com.massvig.ecommerce.utilities.ShareManager -> com.massvig.ecommerce.g.g:
    android.content.Context mContext -> a
    boolean shareToQQ(java.lang.String,java.lang.String,double,double) -> a
    boolean shareToSina(java.lang.String,java.lang.String,double,double) -> b
com.massvig.ecommerce.utilities.TimeRender -> com.massvig.ecommerce.g.h:
    java.text.SimpleDateFormat formatBuilder -> a
    java.lang.String getDate() -> a
com.massvig.ecommerce.utilities.Utility -> com.massvig.ecommerce.g.i:
    void setListViewHeightBasedOnChildren(android.content.Context,android.widget.ListView,com.massvig.ecommerce.widgets.ADAdapter) -> a
    void setListViewHeightBasedOnChildren2$3e0e9e89(android.widget.ListView,android.widget.ListAdapter) -> a
com.massvig.ecommerce.utilities.XmppTool -> com.massvig.ecommerce.g.j:
    org.jivesoftware.smack.XMPPConnection con -> a
    org.jivesoftware.smack.XMPPConnection getConnection(java.lang.String,int,java.lang.String) -> a
    void closeConnection() -> a
com.massvig.ecommerce.widgets.ADAdapter -> com.massvig.ecommerce.widgets.a:
    java.util.ArrayList adList -> a
    android.view.LayoutInflater mInflater -> b
    int type_1 -> c
    android.content.Context mContext -> d
    void setDataList(java.util.ArrayList) -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    int getItemViewType(int) -> getItemViewType
    int getViewTypeCount() -> getViewTypeCount
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.LayoutInflater access$0(com.massvig.ecommerce.widgets.ADAdapter) -> a
    int access$1(com.massvig.ecommerce.widgets.ADAdapter) -> b
    android.content.Context access$2(com.massvig.ecommerce.widgets.ADAdapter) -> c
com.massvig.ecommerce.widgets.ADAdapter$ViewHolder -> com.massvig.ecommerce.widgets.b:
    com.massvig.ecommerce.widgets.NetImageView image -> b
    com.massvig.ecommerce.widgets.NetImageView image1 -> c
    com.massvig.ecommerce.widgets.NetImageView image2 -> d
    com.massvig.ecommerce.widgets.NetImageView image3 -> e
    android.view.View itemView -> f
    com.massvig.ecommerce.widgets.ADAdapter this$0 -> a
    android.view.View getView(int) -> a
    void setClick(com.massvig.ecommerce.entities.Advertise) -> a
com.massvig.ecommerce.widgets.ADAdapter$ViewHolder$1 -> com.massvig.ecommerce.widgets.c:
    com.massvig.ecommerce.widgets.ADAdapter$ViewHolder this$1 -> a
    com.massvig.ecommerce.entities.Advertise val$a -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.ADAdapter$ViewHolder$2 -> com.massvig.ecommerce.widgets.d:
    com.massvig.ecommerce.widgets.ADAdapter$ViewHolder this$1 -> a
    com.massvig.ecommerce.entities.Advertise val$a -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.ADAdapter$ViewHolder$3 -> com.massvig.ecommerce.widgets.e:
    com.massvig.ecommerce.widgets.ADAdapter$ViewHolder this$1 -> a
    com.massvig.ecommerce.entities.Advertise val$a -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.ADAdapter$ViewHolder$4 -> com.massvig.ecommerce.widgets.f:
    com.massvig.ecommerce.widgets.ADAdapter$ViewHolder this$1 -> a
    com.massvig.ecommerce.entities.Advertise val$a -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.ActionAdapter -> com.massvig.ecommerce.widgets.g:
    com.massvig.ecommerce.entities.ActionsList actionsList -> a
    android.view.LayoutInflater mInflater -> b
    java.util.ArrayList imageList -> c
    android.graphics.Bitmap shopDefaultImg -> d
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.LayoutInflater access$0(com.massvig.ecommerce.widgets.ActionAdapter) -> a
    com.massvig.ecommerce.entities.ActionsList access$1(com.massvig.ecommerce.widgets.ActionAdapter) -> b
    android.graphics.Bitmap access$2(com.massvig.ecommerce.widgets.ActionAdapter) -> c
com.massvig.ecommerce.widgets.ActionAdapter$ViewHolder -> com.massvig.ecommerce.widgets.h:
    com.massvig.ecommerce.widgets.NetImageView image -> b
    android.widget.TextView title -> c
    android.widget.TextView detail -> d
    android.view.View itemView -> e
    com.massvig.ecommerce.widgets.ActionAdapter this$0 -> a
    android.view.View getView(int) -> a
    com.massvig.ecommerce.widgets.NetImageView access$0(com.massvig.ecommerce.widgets.ActionAdapter$ViewHolder) -> a
com.massvig.ecommerce.widgets.AdGallery -> com.massvig.ecommerce.widgets.AdGallery:
    boolean isTouch -> a
    android.content.Context mContext -> b
    java.util.Timer timer -> c
    java.util.TimerTask task -> d
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
com.massvig.ecommerce.widgets.AdGallery$1 -> com.massvig.ecommerce.widgets.i:
    com.massvig.ecommerce.widgets.AdGallery this$0 -> a
    void run() -> run
com.massvig.ecommerce.widgets.AdGallery$2 -> com.massvig.ecommerce.widgets.j:
    com.massvig.ecommerce.widgets.AdGallery this$0 -> a
    void run() -> run
com.massvig.ecommerce.widgets.AsyncImageLoader -> com.massvig.ecommerce.widgets.k:
    java.util.concurrent.ExecutorService executorService -> a
    android.graphics.Bitmap loadBitmap(java.lang.String,com.massvig.ecommerce.widgets.AsyncImageLoader$ImageCallback) -> a
    android.graphics.Bitmap loadImageFromUrl(java.lang.String) -> a
    java.io.File convertBitmapToFile(java.io.File,android.graphics.Bitmap,java.lang.String) -> b
    java.io.File access$0(java.io.File,android.graphics.Bitmap,java.lang.String) -> a
com.massvig.ecommerce.widgets.AsyncImageLoader$1 -> com.massvig.ecommerce.widgets.l:
    com.massvig.ecommerce.widgets.AsyncImageLoader$ImageCallback val$imageCallback -> a
    java.lang.String val$imageUrl -> b
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.widgets.AsyncImageLoader$2 -> com.massvig.ecommerce.widgets.m:
    java.lang.String val$imageUrl -> a
    android.os.Handler val$handler -> b
    void run() -> run
com.massvig.ecommerce.widgets.AsyncImageLoader$ImageCallback -> com.massvig.ecommerce.widgets.n:
    void imageLoaded$6004fe1d(android.graphics.Bitmap) -> a
com.massvig.ecommerce.widgets.CategoryDialogView -> com.massvig.ecommerce.widgets.CategoryDialogView:
    android.widget.LinearLayout linearLayout1 -> a
    android.widget.LinearLayout linearLayout2 -> b
    android.widget.LinearLayout linearLayout3 -> c
    org.json.JSONArray cateGoryData -> d
    android.content.Context context -> e
    android.view.LayoutInflater mLayoutInflater -> f
    com.massvig.ecommerce.widgets.CategoryDialogView$CateGoryDialogCallBack callBack -> g
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void execute(com.massvig.ecommerce.widgets.CategoryDialogView$CateGoryDialogCallBack) -> a
    void createCategoryChildView(int) -> a
    org.json.JSONArray getCategory() -> b
    void showDialog(int) -> b
    void closeDiaLog() -> a
    void setCateGoryTopView(int,java.lang.String,android.widget.ImageView) -> a
    void setImage$4aef0d64(java.lang.String,android.view.View,android.view.View) -> a
    android.widget.LinearLayout access$0(com.massvig.ecommerce.widgets.CategoryDialogView) -> a
    com.massvig.ecommerce.widgets.CategoryDialogView$CateGoryDialogCallBack access$1(com.massvig.ecommerce.widgets.CategoryDialogView) -> b
    android.widget.LinearLayout access$2(com.massvig.ecommerce.widgets.CategoryDialogView) -> c
    android.widget.LinearLayout access$3(com.massvig.ecommerce.widgets.CategoryDialogView) -> d
com.massvig.ecommerce.widgets.CategoryDialogView$1 -> com.massvig.ecommerce.widgets.o:
    com.massvig.ecommerce.widgets.CategoryDialogView this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.CategoryDialogView$2 -> com.massvig.ecommerce.widgets.p:
    com.massvig.ecommerce.widgets.CategoryDialogView this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.CategoryDialogView$CateGoryDialogCallBack -> com.massvig.ecommerce.widgets.q:
    void cateGorycallBack(int,int,java.lang.String) -> a
    void orderCallBack$2f2e9c64(int,java.lang.String) -> a
com.massvig.ecommerce.widgets.CategoryDialogView$CategoryOnclick -> com.massvig.ecommerce.widgets.r:
    int index -> b
    java.lang.Boolean isParent -> c
    int parentId -> d
    int childId -> e
    java.lang.String name -> f
    com.massvig.ecommerce.widgets.CategoryDialogView this$0 -> a
    void onClick(android.view.View) -> onClick
    void setState(java.lang.Boolean) -> a
com.massvig.ecommerce.widgets.CategoryDialogView$ImageCallback -> com.massvig.ecommerce.widgets.s:
    java.lang.String httpurl -> a
    android.view.View parentViews -> b
    int type -> c
    com.massvig.ecommerce.widgets.CategoryDialogView this$0 -> d
    void imageLoaded$6004fe1d(android.graphics.Bitmap) -> a
com.massvig.ecommerce.widgets.CategoryDialogView$orderOnclick -> com.massvig.ecommerce.widgets.t:
    int orderId -> b
    android.graphics.drawable.Drawable drawable -> c
    java.lang.String name -> d
    com.massvig.ecommerce.widgets.CategoryDialogView this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.ChatAdapter -> com.massvig.ecommerce.widgets.u:
    com.massvig.ecommerce.entities.MessageList messageList -> a
    android.view.LayoutInflater mInflater -> b
    android.graphics.Bitmap fromImg -> c
    android.graphics.Bitmap toImg -> d
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    int getItemViewType(int) -> getItemViewType
    int getViewTypeCount() -> getViewTypeCount
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.LayoutInflater access$0(com.massvig.ecommerce.widgets.ChatAdapter) -> a
    android.graphics.Bitmap access$1(com.massvig.ecommerce.widgets.ChatAdapter) -> b
    android.graphics.Bitmap access$2(com.massvig.ecommerce.widgets.ChatAdapter) -> c
com.massvig.ecommerce.widgets.ChatAdapter$ViewHolder -> com.massvig.ecommerce.widgets.v:
    android.widget.ImageView headimg -> b
    android.widget.TextView messageContent -> c
    android.view.View itemView -> d
    android.widget.TextView timeText -> e
    android.widget.ImageView image -> f
    com.massvig.ecommerce.widgets.ChatAdapter this$0 -> a
    android.view.View getView(int) -> a
com.massvig.ecommerce.widgets.CommentListAdapter -> com.massvig.ecommerce.widgets.w:
    android.content.Context mContext -> a
    android.view.LayoutInflater mInflater -> b
    com.massvig.ecommerce.entities.CommentList commentList -> c
    android.os.Handler mHandler -> d
    void setHandler(android.os.Handler) -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.os.Handler access$0(com.massvig.ecommerce.widgets.CommentListAdapter) -> a
com.massvig.ecommerce.widgets.CommentListAdapter$1 -> com.massvig.ecommerce.widgets.x:
    com.massvig.ecommerce.widgets.CommentListAdapter this$0 -> a
    com.massvig.ecommerce.entities.Comment val$comment -> b
    java.lang.String val$name -> c
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.CommentListAdapter$2 -> com.massvig.ecommerce.widgets.y:
    com.massvig.ecommerce.widgets.CommentListAdapter this$0 -> a
    com.massvig.ecommerce.entities.Comment val$comment -> b
    java.lang.String val$name -> c
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.CommentListAdapter$3 -> com.massvig.ecommerce.widgets.z:
    com.massvig.ecommerce.widgets.CommentListAdapter this$0 -> a
    com.massvig.ecommerce.entities.Comment val$comment -> b
    java.lang.String val$name -> c
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.CommentListAdapter$ImageCallback -> com.massvig.ecommerce.widgets.aa:
    android.widget.ImageView imageView -> a
    com.massvig.ecommerce.widgets.CommentListAdapter this$0 -> b
    void imageLoaded$6004fe1d(android.graphics.Bitmap) -> a
com.massvig.ecommerce.widgets.CommentListAdapter$ViewHolder -> com.massvig.ecommerce.widgets.ab:
    android.widget.ImageView userImg -> a
    android.widget.TextView userName -> b
    android.widget.TextView detailText -> c
    android.widget.TextView publish_time -> d
    android.widget.ImageButton reply -> e
    com.massvig.ecommerce.widgets.CommentListAdapter this$0 -> f
com.massvig.ecommerce.widgets.CommonAdapter -> com.massvig.ecommerce.widgets.ac:
    java.util.List mListData -> a
    android.content.Context mContext -> b
    int itemLayoutId -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void appendData(java.util.List) -> a
    com.massvig.ecommerce.widgets.ViewHolderModel getViewHolderModel() -> a
com.massvig.ecommerce.widgets.CommunityMode -> com.massvig.ecommerce.widgets.ad:
    com.massvig.ecommerce.widgets.CommunityMode communityMode -> a
    java.util.Map GetFollows$204d0379(java.lang.String,int,int) -> a
    java.util.Map GetFans$204d0379(java.lang.String,int,int) -> b
    java.util.Map getUserReceivePraisePostList$204d0379(java.lang.String,int,int) -> c
    java.util.Map getSearchFriends$8b4ed62(java.lang.String,java.lang.String,int) -> a
    int AddAndRemoveFans(int,java.lang.String,int) -> a
    com.massvig.ecommerce.widgets.CommunityMode getInstance() -> a
com.massvig.ecommerce.widgets.ContentView -> com.massvig.ecommerce.widgets.ContentView:
    com.massvig.ecommerce.widgets.ContentView$ContentViewClickCallBack contentViewClickCallBack -> a
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    void setContentViewClickCallBack(com.massvig.ecommerce.widgets.ContentView$ContentViewClickCallBack) -> a
com.massvig.ecommerce.widgets.ContentView$ContentViewClickCallBack -> com.massvig.ecommerce.widgets.ae:
    void callBack() -> a
com.massvig.ecommerce.widgets.FilterButton -> com.massvig.ecommerce.widgets.FilterButton:
    android.graphics.PorterDuffColorFilter porter -> a
    void setBackgroundDrawable(android.graphics.drawable.Drawable) -> setBackgroundDrawable
    android.graphics.drawable.StateListDrawable getStateListDrawable(android.graphics.drawable.Drawable) -> a
com.massvig.ecommerce.widgets.FlowTag -> com.massvig.ecommerce.widgets.af:
    int flowId -> p
    java.lang.String fileName -> q
    int ShareID -> a
    int RefID -> b
    int ShareSourceType -> c
    java.lang.String Address -> d
    java.lang.String Content -> e
    int CustomerID -> f
    java.lang.String ImgUrl -> g
    int PraiseCount -> h
    int SharedCount -> i
    java.lang.String NickName -> j
    java.lang.String HeadImgUrl -> k
    boolean CanPraise -> l
    java.lang.String createTime -> m
    int Height -> n
    int Width -> o
    android.content.res.AssetManager assetManager -> r
    int ItemWidth -> s
    int getFlowId() -> a
    void setFlowId(int) -> a
    java.lang.String getFileName() -> b
    void setFileName(java.lang.String) -> a
    void setAssetManager(android.content.res.AssetManager) -> a
    int getItemWidth() -> c
    void setItemWidth(int) -> b
com.massvig.ecommerce.widgets.GoodsAdapter -> com.massvig.ecommerce.widgets.ag:
    com.massvig.ecommerce.entities.GoodsList goodsList -> a
    android.view.LayoutInflater mInflater -> b
    java.util.ArrayList imageList -> c
    android.graphics.Bitmap shopDefaultImg -> d
    android.content.Context mContext -> e
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.util.ArrayList getImageList() -> a
    android.view.LayoutInflater access$0(com.massvig.ecommerce.widgets.GoodsAdapter) -> a
    com.massvig.ecommerce.entities.GoodsList access$1(com.massvig.ecommerce.widgets.GoodsAdapter) -> b
    android.content.Context access$2(com.massvig.ecommerce.widgets.GoodsAdapter) -> c
    android.graphics.Bitmap access$3(com.massvig.ecommerce.widgets.GoodsAdapter) -> d
com.massvig.ecommerce.widgets.GoodsAdapter$ViewHolder -> com.massvig.ecommerce.widgets.ah:
    com.massvig.ecommerce.widgets.NetImageView image -> b
    android.widget.TextView name -> c
    android.widget.TextView price -> d
    android.widget.TextView volume -> e
    com.massvig.ecommerce.widgets.LineTextView realPrice -> f
    android.view.View itemView -> g
    android.widget.TextView commentCount -> h
    com.massvig.ecommerce.widgets.GoodsAdapter this$0 -> a
    android.view.View getView(int) -> a
    com.massvig.ecommerce.widgets.NetImageView access$0(com.massvig.ecommerce.widgets.GoodsAdapter$ViewHolder) -> a
com.massvig.ecommerce.widgets.GoodsView -> com.massvig.ecommerce.widgets.GoodsView:
    com.massvig.ecommerce.widgets.FlowTag flowTag -> a
    android.content.Context context -> b
    int columnIndex -> c
    int rowIndex -> d
    android.os.Handler viewHandler -> e
    com.massvig.ecommerce.widgets.NetImageView imageView -> f
    android.widget.TextView name -> g
    android.widget.TextView detail -> h
    android.widget.TextView shareNum -> i
    android.widget.TextView praiseNum -> j
    android.widget.TextView address -> k
    android.widget.TextView time -> l
    android.widget.ImageView icon -> m
    com.massvig.ecommerce.widgets.NetImageView userImg -> n
    android.widget.ImageView location -> o
    android.widget.LinearLayout layout_share -> p
    android.widget.LinearLayout layout_praise -> q
    int TAG -> r
    void Init() -> d
    void onClick(android.view.View) -> onClick
    void LoadImage() -> a
    java.lang.String GetTimeStamp(java.lang.String) -> a
    com.massvig.ecommerce.widgets.FlowTag getFlowTag() -> b
    void setFlowTag(com.massvig.ecommerce.widgets.FlowTag) -> a
    void setColumnIndex(int) -> a
    void setRowIndex(int) -> b
    com.massvig.ecommerce.widgets.GoodsView setViewHandler(android.os.Handler) -> a
    void addPraise() -> c
com.massvig.ecommerce.widgets.ImageAdapter -> com.massvig.ecommerce.widgets.ai:
    android.content.Context mContext -> a
    java.util.ArrayList imageList -> b
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.massvig.ecommerce.widgets.LazyScrollView -> com.massvig.ecommerce.widgets.LazyScrollView:
    android.os.Handler handler -> b
    android.view.View view -> c
    android.view.View$OnTouchListener onTouchListener -> a
    com.massvig.ecommerce.widgets.LazyScrollView$OnScrollListener onScrollListener -> d
    void onScrollChanged(int,int,int,int) -> onScrollChanged
    int computeVerticalScrollRange() -> computeVerticalScrollRange
    int computeVerticalScrollOffset() -> computeVerticalScrollOffset
    void getView() -> a
    void setOnScrollListener(com.massvig.ecommerce.widgets.LazyScrollView$OnScrollListener) -> a
    android.view.View access$0(com.massvig.ecommerce.widgets.LazyScrollView) -> a
    com.massvig.ecommerce.widgets.LazyScrollView$OnScrollListener access$1(com.massvig.ecommerce.widgets.LazyScrollView) -> b
    android.os.Handler access$2(com.massvig.ecommerce.widgets.LazyScrollView) -> c
com.massvig.ecommerce.widgets.LazyScrollView$1 -> com.massvig.ecommerce.widgets.aj:
    com.massvig.ecommerce.widgets.LazyScrollView this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.massvig.ecommerce.widgets.LazyScrollView$2 -> com.massvig.ecommerce.widgets.ak:
    com.massvig.ecommerce.widgets.LazyScrollView this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.widgets.LazyScrollView$OnScrollListener -> com.massvig.ecommerce.widgets.al:
    void onBottom() -> a
    void onTop() -> b
com.massvig.ecommerce.widgets.LeftMenuView -> com.massvig.ecommerce.widgets.LeftMenuView:
    int index -> a
    int mLastChildCount -> b
    com.massvig.ecommerce.widgets.LeftMenuView$LeftMeunCallBack leftMeunCallBack -> c
    android.widget.ListView listview -> d
    android.widget.Button search_btn -> e
    android.content.Context mContext -> f
    void setAdapter(com.massvig.ecommerce.widgets.ActionAdapter) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onClick(android.view.View) -> onClick
    void setOnclickCallBack(com.massvig.ecommerce.widgets.LeftMenuView$LeftMeunCallBack) -> a
    com.massvig.ecommerce.widgets.LeftMenuView$LeftMeunCallBack access$0(com.massvig.ecommerce.widgets.LeftMenuView) -> a
    android.content.Context access$1(com.massvig.ecommerce.widgets.LeftMenuView) -> b
    android.widget.ListView access$2(com.massvig.ecommerce.widgets.LeftMenuView) -> c
com.massvig.ecommerce.widgets.LeftMenuView$1 -> com.massvig.ecommerce.widgets.am:
    com.massvig.ecommerce.widgets.LeftMenuView this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.massvig.ecommerce.widgets.LeftMenuView$2 -> com.massvig.ecommerce.widgets.an:
    com.massvig.ecommerce.widgets.LeftMenuView this$0 -> a
    android.widget.EditText val$search_edit -> b
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
com.massvig.ecommerce.widgets.LeftMenuView$3 -> com.massvig.ecommerce.widgets.ao:
    com.massvig.ecommerce.widgets.LeftMenuView this$0 -> a
    android.widget.EditText val$search_edit -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.LeftMenuView$4 -> com.massvig.ecommerce.widgets.ap:
    com.massvig.ecommerce.widgets.LeftMenuView this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.LeftMenuView$LeftMeunCallBack -> com.massvig.ecommerce.widgets.aq:
    void callBack(int,java.lang.String) -> a
    void listCallBack(int) -> a
com.massvig.ecommerce.widgets.LineTextView -> com.massvig.ecommerce.widgets.LineTextView:
    boolean isFirst -> b
    android.graphics.Paint mPaint -> a
    void onDraw(android.graphics.Canvas) -> onDraw
com.massvig.ecommerce.widgets.LoadView -> com.massvig.ecommerce.widgets.LoadView:
    android.widget.TextView textView -> a
    android.widget.TextView textView1 -> b
    android.widget.RelativeLayout relativeLayout -> c
    com.massvig.ecommerce.widgets.LoadView$Onload onload -> d
    void onLayout(boolean,int,int,int,int) -> onLayout
    void showLoading() -> a
    void showNoData() -> b
    void showLoad() -> c
    void closeAllView() -> d
    void setOnloadCallBack(com.massvig.ecommerce.widgets.LoadView$Onload) -> a
    void init() -> e
    com.massvig.ecommerce.widgets.LoadView$Onload access$0(com.massvig.ecommerce.widgets.LoadView) -> a
com.massvig.ecommerce.widgets.LoadView$1 -> com.massvig.ecommerce.widgets.ar:
    com.massvig.ecommerce.widgets.LoadView this$0 -> a
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.LoadView$Onload -> com.massvig.ecommerce.widgets.as:
    void callBack() -> a
com.massvig.ecommerce.widgets.MassVigData -> com.massvig.ecommerce.widgets.at:
    org.json.JSONArray categoryData -> a
    org.json.JSONArray cityListData -> b
    org.json.JSONArray hotkeyData -> c
    android.content.Context context -> d
    int searchVersion -> e
    com.massvig.ecommerce.widgets.MassVigData searchKeyInstance -> f
    com.massvig.ecommerce.widgets.MassVigData getinstance(android.content.Context) -> a
    void getHotKey(android.content.Context) -> b
    void execute(android.content.Context) -> c
    java.lang.String getAdCache() -> a
    org.json.JSONArray getCategoryByCache() -> e
    org.json.JSONArray getHotkeyByCache() -> f
    org.json.JSONArray getCityListByCache() -> g
    org.json.JSONArray getHotkeyList() -> b
    org.json.JSONArray getCityList() -> c
    org.json.JSONArray getAllCategory() -> d
    android.content.SharedPreferences getSharedPreferences() -> h
    android.content.SharedPreferences getKeyPreferences() -> i
    void access$0(com.massvig.ecommerce.widgets.MassVigData,org.json.JSONArray) -> a
    org.json.JSONArray access$1(com.massvig.ecommerce.widgets.MassVigData) -> a
    void access$2(com.massvig.ecommerce.widgets.MassVigData) -> b
    void access$3(com.massvig.ecommerce.widgets.MassVigData,org.json.JSONArray) -> b
    org.json.JSONArray access$4(com.massvig.ecommerce.widgets.MassVigData) -> c
    void access$5(com.massvig.ecommerce.widgets.MassVigData) -> d
com.massvig.ecommerce.widgets.MassVigData$1 -> com.massvig.ecommerce.widgets.au:
    com.massvig.ecommerce.widgets.MassVigData this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.widgets.MassVigData$2 -> com.massvig.ecommerce.widgets.av:
    com.massvig.ecommerce.widgets.MassVigData this$0 -> a
    com.massvig.ecommerce.service.MassVigService val$service -> b
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.widgets.MerchantAdapter -> com.massvig.ecommerce.widgets.aw:
    com.massvig.ecommerce.entities.MerchantList merchantList -> a
    android.view.LayoutInflater mInflater -> b
    android.content.Context mContext -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.LayoutInflater access$0(com.massvig.ecommerce.widgets.MerchantAdapter) -> a
    com.massvig.ecommerce.entities.MerchantList access$1(com.massvig.ecommerce.widgets.MerchantAdapter) -> b
    android.content.Context access$2(com.massvig.ecommerce.widgets.MerchantAdapter) -> c
com.massvig.ecommerce.widgets.MerchantAdapter$ViewHolder -> com.massvig.ecommerce.widgets.ax:
    android.widget.TextView color -> b
    android.widget.TextView name -> c
    android.widget.TextView description -> d
    android.widget.TextView distance -> e
    android.view.View itemView -> f
    com.massvig.ecommerce.widgets.MerchantAdapter this$0 -> a
    android.view.View getView(int) -> a
com.massvig.ecommerce.widgets.MessageAdapter -> com.massvig.ecommerce.widgets.ay:
    com.massvig.ecommerce.entities.ChaterList chaterList -> a
    android.view.LayoutInflater mInflater -> b
    android.content.Context mContext -> c
    android.os.Handler mHandler -> d
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.String GetTimeStamp(java.lang.String) -> a
    android.view.LayoutInflater access$0(com.massvig.ecommerce.widgets.MessageAdapter) -> a
    java.lang.String access$1(com.massvig.ecommerce.widgets.MessageAdapter,java.lang.String) -> a
    android.os.Handler access$2(com.massvig.ecommerce.widgets.MessageAdapter) -> b
com.massvig.ecommerce.widgets.MessageAdapter$1 -> com.massvig.ecommerce.widgets.az:
    com.massvig.ecommerce.widgets.MessageAdapter this$0 -> a
    int val$position -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.MessageAdapter$ViewHolder -> com.massvig.ecommerce.widgets.ba:
    com.massvig.ecommerce.widgets.NetImageView headimg -> b
    android.widget.ImageView sex -> c
    android.widget.TextView messageCount -> d
    android.widget.TextView nickName -> e
    android.widget.TextView content -> f
    android.widget.TextView time -> g
    android.view.View itemView -> h
    com.massvig.ecommerce.widgets.MessageAdapter this$0 -> a
    android.view.View getView(int) -> a
com.massvig.ecommerce.widgets.MyScrollView -> com.massvig.ecommerce.widgets.MyScrollView:
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void onScrollChanged(int,int,int,int) -> onScrollChanged
com.massvig.ecommerce.widgets.NearPersonAdapter -> com.massvig.ecommerce.widgets.bb:
    com.massvig.ecommerce.entities.NearPersonList personList -> a
    android.view.LayoutInflater mInflater -> b
    android.content.Context mContext -> c
    java.util.ArrayList imgList -> d
    android.graphics.Bitmap shopDefaultImg -> e
    android.os.Handler mHandler -> f
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.String GetTimeStamp(java.lang.String) -> a
    java.util.ArrayList getImageList() -> a
    android.view.LayoutInflater access$0(com.massvig.ecommerce.widgets.NearPersonAdapter) -> a
    com.massvig.ecommerce.entities.NearPersonList access$1(com.massvig.ecommerce.widgets.NearPersonAdapter) -> b
    android.graphics.Bitmap access$2(com.massvig.ecommerce.widgets.NearPersonAdapter) -> c
    android.content.Context access$3(com.massvig.ecommerce.widgets.NearPersonAdapter) -> d
    java.lang.String access$4(com.massvig.ecommerce.widgets.NearPersonAdapter,java.lang.String) -> a
    android.os.Handler access$5(com.massvig.ecommerce.widgets.NearPersonAdapter) -> e
com.massvig.ecommerce.widgets.NearPersonAdapter$ViewHolder -> com.massvig.ecommerce.widgets.bc:
    com.massvig.ecommerce.widgets.NetImageView headImg -> b
    android.widget.ImageView sex -> c
    android.widget.TextView nickName -> d
    android.widget.TextView distance -> e
    android.widget.TextView buy_info -> f
    android.widget.TextView time -> g
    android.widget.TextView fans_count -> h
    android.widget.TextView attention_count -> i
    android.widget.Button fans_btn -> j
    android.widget.LinearLayout fans_layout -> k
    android.view.View itemView -> l
    com.massvig.ecommerce.widgets.NearPersonAdapter this$0 -> a
    android.view.View getView(int) -> a
    com.massvig.ecommerce.widgets.NetImageView access$0(com.massvig.ecommerce.widgets.NearPersonAdapter$ViewHolder) -> a
com.massvig.ecommerce.widgets.NearPersonAdapter$ViewHolder$1 -> com.massvig.ecommerce.widgets.bd:
    com.massvig.ecommerce.widgets.NearPersonAdapter$ViewHolder this$1 -> a
    com.massvig.ecommerce.entities.NearPerson val$p -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.NearPersonAdapter$ViewHolder$2 -> com.massvig.ecommerce.widgets.be:
    com.massvig.ecommerce.widgets.NearPersonAdapter$ViewHolder this$1 -> a
    com.massvig.ecommerce.entities.NearPerson val$p -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.NearPersonAdapter$ViewHolder$3 -> com.massvig.ecommerce.widgets.bf:
    com.massvig.ecommerce.widgets.NearPersonAdapter$ViewHolder this$1 -> a
    com.massvig.ecommerce.entities.NearPerson val$p -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.NearRefreshListView -> com.massvig.ecommerce.widgets.NearRefreshListView:
    float mDownY -> a
    float mMoveY -> b
    int mHeaderHeight -> c
    int mCurrentScrollState -> d
    int mPullRefreshState -> e
    android.widget.LinearLayout mHeaderLinearLayout -> f
    android.widget.LinearLayout mFooterLinearLayout -> g
    android.widget.TextView mHeaderTextView -> h
    android.widget.TextView mHeaderUpdateText -> i
    android.widget.ProgressBar mHeaderProgressBar -> j
    android.widget.TextView mFooterTextView -> k
    android.widget.ProgressBar mFooterProgressBar -> l
    java.text.SimpleDateFormat mSimpleDateFormat -> m
    com.massvig.ecommerce.widgets.NearRefreshListView$RefreshListener mRefreshListener -> n
    android.content.Context mContext -> o
    android.os.Handler mHandler -> p
    void setOnRefreshListener(com.massvig.ecommerce.widgets.NearRefreshListView$RefreshListener) -> a
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void setAdapter(android.widget.ListAdapter) -> setAdapter
    void setTextShow(java.lang.String) -> a
    void finishHeadView() -> a
    void finishFootView() -> b
    android.widget.LinearLayout access$0(com.massvig.ecommerce.widgets.NearRefreshListView) -> a
    android.widget.TextView access$1(com.massvig.ecommerce.widgets.NearRefreshListView) -> b
    android.content.Context access$2(com.massvig.ecommerce.widgets.NearRefreshListView) -> c
    android.widget.ProgressBar access$3(com.massvig.ecommerce.widgets.NearRefreshListView) -> d
    void access$4(com.massvig.ecommerce.widgets.NearRefreshListView,int) -> a
    com.massvig.ecommerce.widgets.NearRefreshListView$RefreshListener access$5(com.massvig.ecommerce.widgets.NearRefreshListView) -> e
    android.widget.TextView access$6(com.massvig.ecommerce.widgets.NearRefreshListView) -> f
    java.text.SimpleDateFormat access$7(com.massvig.ecommerce.widgets.NearRefreshListView) -> g
    android.widget.ProgressBar access$8(com.massvig.ecommerce.widgets.NearRefreshListView) -> h
    android.widget.TextView access$9(com.massvig.ecommerce.widgets.NearRefreshListView) -> i
    android.os.Handler access$10(com.massvig.ecommerce.widgets.NearRefreshListView) -> j
    int access$11(com.massvig.ecommerce.widgets.NearRefreshListView) -> k
com.massvig.ecommerce.widgets.NearRefreshListView$1 -> com.massvig.ecommerce.widgets.bg:
    com.massvig.ecommerce.widgets.NearRefreshListView this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
    com.massvig.ecommerce.widgets.NearRefreshListView access$0(com.massvig.ecommerce.widgets.NearRefreshListView$1) -> a
com.massvig.ecommerce.widgets.NearRefreshListView$1$1 -> com.massvig.ecommerce.widgets.bh:
    com.massvig.ecommerce.widgets.NearRefreshListView$1 this$1 -> a
    void run() -> run
com.massvig.ecommerce.widgets.NearRefreshListView$2 -> com.massvig.ecommerce.widgets.bi:
    com.massvig.ecommerce.widgets.NearRefreshListView this$0 -> a
    android.content.Context val$context -> b
    void onClick(android.view.View) -> onClick
    com.massvig.ecommerce.widgets.NearRefreshListView access$0(com.massvig.ecommerce.widgets.NearRefreshListView$2) -> a
com.massvig.ecommerce.widgets.NearRefreshListView$2$1 -> com.massvig.ecommerce.widgets.bj:
    com.massvig.ecommerce.widgets.NearRefreshListView$2 this$1 -> a
    void run() -> run
com.massvig.ecommerce.widgets.NearRefreshListView$3 -> com.massvig.ecommerce.widgets.bk:
    com.massvig.ecommerce.widgets.NearRefreshListView this$0 -> a
    void run() -> run
com.massvig.ecommerce.widgets.NearRefreshListView$4 -> com.massvig.ecommerce.widgets.bl:
    com.massvig.ecommerce.widgets.NearRefreshListView this$0 -> a
    void run() -> run
com.massvig.ecommerce.widgets.NearRefreshListView$RefreshListener -> com.massvig.ecommerce.widgets.bm:
    void startRefresh() -> a
    void startLoadMore() -> b
    void scrollStop() -> c
    void scrollStart() -> d
com.massvig.ecommerce.widgets.NetImageView -> com.massvig.ecommerce.widgets.NetImageView:
    java.lang.String imageUrl -> a
    java.lang.String SDPath -> b
    java.lang.Boolean isAutoLoadImges -> c
    android.support.v4.util.LruCache mLruCache -> d
    android.graphics.Bitmap defaultImg -> e
    android.content.Context mContext -> f
    java.lang.Boolean isDrawComplete -> g
    void initCache() -> d
    void clearCache() -> a
    void setImageUrl(java.lang.String,java.lang.String,android.graphics.Bitmap) -> a
    void setImageUrlCorner$179d4c45(java.lang.String,java.lang.String) -> a
    void setIsAutoLoadImage(java.lang.Boolean) -> a
    void updateImage() -> b
    void setImageBitmap(android.graphics.Bitmap) -> setImageBitmap
    android.graphics.Bitmap loadImageFromUrl(java.lang.String) -> a
    void saveFile(android.graphics.Bitmap,java.lang.String) -> a
    java.lang.String access$0(com.massvig.ecommerce.widgets.NetImageView) -> a
    java.lang.String access$1(com.massvig.ecommerce.widgets.NetImageView) -> b
    android.support.v4.util.LruCache access$2() -> c
com.massvig.ecommerce.widgets.NetImageView$1 -> com.massvig.ecommerce.widgets.bn:
    com.massvig.ecommerce.widgets.NetImageView this$0 -> a
    int sizeOf$2838e5a0(java.lang.Object) -> b
    void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object) -> a
com.massvig.ecommerce.widgets.NetImageView$NetWorkAsyncTask -> com.massvig.ecommerce.widgets.bo:
    java.lang.String flag -> b
    com.massvig.ecommerce.widgets.NetImageView this$0 -> a
    android.graphics.Bitmap doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.widgets.NetImageView$NetWorkAsyncTaskCorner -> com.massvig.ecommerce.widgets.bp:
    java.lang.String flag -> b
    com.massvig.ecommerce.widgets.NetImageView this$0 -> a
    android.graphics.Bitmap doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.widgets.NetImageView$SdCardAsyncTask -> com.massvig.ecommerce.widgets.bq:
    java.lang.String flag -> b
    java.lang.String path -> c
    com.massvig.ecommerce.widgets.NetImageView this$0 -> a
    android.graphics.Bitmap doInBackground$22ce9468() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.widgets.NetImageView$SdCardAsyncTaskCorner -> com.massvig.ecommerce.widgets.br:
    java.lang.String flag -> b
    java.lang.String path -> c
    com.massvig.ecommerce.widgets.NetImageView this$0 -> a
    android.graphics.Bitmap doInBackground$22ce9468() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.massvig.ecommerce.widgets.NewActionAdapter -> com.massvig.ecommerce.widgets.bs:
    com.massvig.ecommerce.entities.GoodsList goodsList -> a
    android.view.LayoutInflater mInflater -> b
    java.util.ArrayList imageList -> c
    android.graphics.Bitmap shopDefaultImg -> d
    android.content.Context mContext -> e
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.util.ArrayList getImageList() -> a
    android.view.LayoutInflater access$0(com.massvig.ecommerce.widgets.NewActionAdapter) -> a
    com.massvig.ecommerce.entities.GoodsList access$1(com.massvig.ecommerce.widgets.NewActionAdapter) -> b
    android.content.Context access$2(com.massvig.ecommerce.widgets.NewActionAdapter) -> c
    android.graphics.Bitmap access$3(com.massvig.ecommerce.widgets.NewActionAdapter) -> d
com.massvig.ecommerce.widgets.NewActionAdapter$ViewHolder -> com.massvig.ecommerce.widgets.bt:
    com.massvig.ecommerce.widgets.NetImageView image -> b
    android.widget.TextView name -> c
    android.widget.TextView price -> d
    android.widget.TextView volume -> e
    com.massvig.ecommerce.widgets.LineTextView realPrice -> f
    android.view.View itemView -> g
    com.massvig.ecommerce.widgets.NewActionAdapter this$0 -> a
    android.view.View getView(int) -> a
    com.massvig.ecommerce.widgets.NetImageView access$0(com.massvig.ecommerce.widgets.NewActionAdapter$ViewHolder) -> a
com.massvig.ecommerce.widgets.OrderAdapter -> com.massvig.ecommerce.widgets.bu:
    com.massvig.ecommerce.entities.MyOrderList myorderList -> a
    android.view.LayoutInflater mInflater -> b
    java.util.ArrayList imageList -> c
    android.graphics.Bitmap shopDefaultImg -> d
    android.content.Context mContext -> e
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.util.ArrayList getImageList() -> a
    android.view.LayoutInflater access$0(com.massvig.ecommerce.widgets.OrderAdapter) -> a
    com.massvig.ecommerce.entities.MyOrderList access$1(com.massvig.ecommerce.widgets.OrderAdapter) -> b
    android.graphics.Bitmap access$2(com.massvig.ecommerce.widgets.OrderAdapter) -> c
    android.content.Context access$3(com.massvig.ecommerce.widgets.OrderAdapter) -> d
com.massvig.ecommerce.widgets.OrderAdapter$ViewHolder -> com.massvig.ecommerce.widgets.bv:
    com.massvig.ecommerce.widgets.NetImageView imageview -> b
    android.widget.TextView name -> c
    android.widget.TextView data -> d
    android.widget.TextView no -> e
    android.widget.TextView price -> f
    android.widget.TextView number -> g
    android.widget.TextView status -> h
    android.view.View itemView -> i
    com.massvig.ecommerce.widgets.OrderAdapter this$0 -> a
    android.view.View getView(int) -> a
    com.massvig.ecommerce.widgets.NetImageView access$0(com.massvig.ecommerce.widgets.OrderAdapter$ViewHolder) -> a
com.massvig.ecommerce.widgets.OrderItemAdapter -> com.massvig.ecommerce.widgets.bw:
    java.util.ArrayList ps -> a
    android.view.LayoutInflater mInflater -> b
    java.util.ArrayList imageList -> c
    android.graphics.Bitmap shopDefaultImg -> d
    android.content.Context mContext -> e
    com.massvig.ecommerce.widgets.OrderItemAdapter$ClickListener listener -> f
    boolean isWebOrder -> g
    void setListener(com.massvig.ecommerce.widgets.OrderItemAdapter$ClickListener) -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.LayoutInflater access$0(com.massvig.ecommerce.widgets.OrderItemAdapter) -> a
    java.util.ArrayList access$1(com.massvig.ecommerce.widgets.OrderItemAdapter) -> b
    boolean access$2(com.massvig.ecommerce.widgets.OrderItemAdapter) -> c
    android.graphics.Bitmap access$3(com.massvig.ecommerce.widgets.OrderItemAdapter) -> d
    com.massvig.ecommerce.widgets.OrderItemAdapter$ClickListener access$4(com.massvig.ecommerce.widgets.OrderItemAdapter) -> e
    android.content.Context access$5(com.massvig.ecommerce.widgets.OrderItemAdapter) -> f
com.massvig.ecommerce.widgets.OrderItemAdapter$ClickListener -> com.massvig.ecommerce.widgets.bx:
    void clickImg(com.massvig.ecommerce.entities.Goods) -> a
com.massvig.ecommerce.widgets.OrderItemAdapter$ViewHolder -> com.massvig.ecommerce.widgets.by:
    com.massvig.ecommerce.widgets.NetImageView image -> b
    android.widget.TextView name -> c
    android.widget.TextView detail -> d
    android.widget.TextView price -> e
    android.view.View itemView -> f
    com.massvig.ecommerce.widgets.OrderItemAdapter this$0 -> a
    android.view.View getView(int) -> a
    com.massvig.ecommerce.widgets.NetImageView access$0(com.massvig.ecommerce.widgets.OrderItemAdapter$ViewHolder) -> a
com.massvig.ecommerce.widgets.OrderItemAdapter$ViewHolder$1 -> com.massvig.ecommerce.widgets.bz:
    com.massvig.ecommerce.widgets.OrderItemAdapter$ViewHolder this$1 -> a
    com.massvig.ecommerce.entities.Product val$p -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.PostAdapter -> com.massvig.ecommerce.widgets.ca:
    com.massvig.ecommerce.entities.PostList postList -> a
    android.view.LayoutInflater mInflater -> b
    java.util.ArrayList imageList -> c
    java.util.ArrayList headImageList -> d
    android.graphics.Bitmap shopDefaultImg -> e
    android.graphics.Bitmap headImg -> f
    android.content.Context mContext -> g
    android.os.Handler mHandler -> h
    int width -> i
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.String GetTimeStamp(java.lang.String) -> a
    java.util.ArrayList getHeadImageList() -> a
    java.util.ArrayList getImageList() -> b
    android.view.LayoutInflater access$0(com.massvig.ecommerce.widgets.PostAdapter) -> a
    com.massvig.ecommerce.entities.PostList access$1(com.massvig.ecommerce.widgets.PostAdapter) -> b
    int access$2(com.massvig.ecommerce.widgets.PostAdapter) -> c
    android.graphics.Bitmap access$3(com.massvig.ecommerce.widgets.PostAdapter) -> d
    android.content.Context access$4(com.massvig.ecommerce.widgets.PostAdapter) -> e
    android.graphics.Bitmap access$5(com.massvig.ecommerce.widgets.PostAdapter) -> f
    java.lang.String access$6(com.massvig.ecommerce.widgets.PostAdapter,java.lang.String) -> a
    android.os.Handler access$7(com.massvig.ecommerce.widgets.PostAdapter) -> g
com.massvig.ecommerce.widgets.PostAdapter$ViewHolder -> com.massvig.ecommerce.widgets.cb:
    com.massvig.ecommerce.widgets.NetImageView image -> b
    com.massvig.ecommerce.widgets.NetImageView headimg -> c
    android.widget.TextView detail -> d
    android.widget.TextView name -> e
    android.widget.TextView address -> f
    android.widget.TextView praise -> g
    android.widget.TextView share -> h
    android.widget.TextView text1 -> i
    android.widget.TextView text2 -> j
    android.widget.TextView time -> k
    android.widget.ImageView icon -> l
    android.widget.ImageView share_icon -> m
    android.widget.LinearLayout share_layout -> n
    android.view.View itemView -> o
    com.massvig.ecommerce.widgets.PostAdapter this$0 -> a
    android.view.View getView(int) -> a
    void share(com.massvig.ecommerce.entities.Post) -> a
    com.massvig.ecommerce.widgets.NetImageView access$0(com.massvig.ecommerce.widgets.PostAdapter$ViewHolder) -> a
    com.massvig.ecommerce.widgets.NetImageView access$1(com.massvig.ecommerce.widgets.PostAdapter$ViewHolder) -> b
com.massvig.ecommerce.widgets.PostAdapter$ViewHolder$1 -> com.massvig.ecommerce.widgets.cc:
    com.massvig.ecommerce.widgets.PostAdapter$ViewHolder this$1 -> a
    com.massvig.ecommerce.entities.Post val$post -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.PostAdapter$ViewHolder$2 -> com.massvig.ecommerce.widgets.cd:
    com.massvig.ecommerce.widgets.PostAdapter$ViewHolder this$1 -> a
    com.massvig.ecommerce.entities.Post val$post -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.PostAdapter$ViewHolder$3 -> com.massvig.ecommerce.widgets.ce:
    com.massvig.ecommerce.widgets.PostAdapter$ViewHolder this$1 -> a
    com.massvig.ecommerce.entities.Post val$post -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.PostAdapter$ViewHolder$4 -> com.massvig.ecommerce.widgets.cf:
    com.massvig.ecommerce.widgets.PostAdapter$ViewHolder this$1 -> a
    com.massvig.ecommerce.entities.Post val$post -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.PostAdapter$ViewHolder$5 -> com.massvig.ecommerce.widgets.cg:
    com.massvig.ecommerce.widgets.PostAdapter$ViewHolder this$1 -> a
    com.massvig.ecommerce.entities.Post val$post -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.PostAdapter$ViewHolder$6 -> com.massvig.ecommerce.widgets.ch:
    com.massvig.ecommerce.widgets.PostAdapter$ViewHolder this$1 -> a
    com.massvig.ecommerce.entities.Post val$post -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.PostAdapter$ViewHolder$7 -> com.massvig.ecommerce.widgets.ci:
    com.massvig.ecommerce.widgets.PostAdapter$ViewHolder this$1 -> a
    com.massvig.ecommerce.entities.Post val$post -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.PostAdapter$ViewHolder$8 -> com.massvig.ecommerce.widgets.cj:
    com.massvig.ecommerce.widgets.PostAdapter$ViewHolder this$1 -> a
    com.massvig.ecommerce.entities.Post val$post -> b
    void onClick(android.view.View) -> onClick
com.massvig.ecommerce.widgets.PraisedListView -> com.massvig.ecommerce.widgets.PraisedListView:
    android.graphics.Bitmap defaultUserIcon -> a
    com.massvig.ecommerce.widgets.CommonAdapter mCommonAdapter -> b
    android.content.Context mContext -> c
    java.util.ArrayList imgList -> d
    boolean isScolling -> e
    int getItemsCount() -> a
    void setData(java.util.List) -> a
    java.util.ArrayList access$0(com.massvig.ecommerce.widgets.PraisedListView) -> a
    android.graphics.Bitmap access$1(com.massvig.ecommerce.widgets.PraisedListView) -> b
    void access$2(com.massvig.ecommerce.widgets.PraisedListView,boolean) -> a
    boolean access$3(com.massvig.ecommerce.widgets.PraisedListView) -> c
com.massvig.ecommerce.widgets.PraisedListView$1 -> com.massvig.ecommerce.widgets.ck:
    com.massvig.ecommerce.widgets.PraisedListView this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.massvig.ecommerce.widgets.PraisedListView$MyCommonAdapter -> com.massvig.ecommerce.widgets.cl:
    com.massvig.ecommerce.widgets.PraisedListView this$0 -> b
    com.massvig.ecommerce.widgets.ViewHolderModel getViewHolderModel() -> a
com.massvig.ecommerce.widgets.PraisedListView$MyViewHolderModel -> com.massvig.ecommerce.widgets.cm:
    com.massvig.ecommerce.widgets.NetImageView userIcon -> b
    com.massvig.ecommerce.widgets.NetImageView pic -> c
    android.widget.TextView userName -> d
    android.widget.TextView time -> e
    android.widget.TextView content -> f
    android.widget.ImageView sex -> g
    com.massvig.ecommerce.widgets.PraisedListView this$0 -> a
    void initViewHoler(android.view.View) -> a
    void setViewHolerValues$7e55ba3e(java.lang.Object) -> a
com.massvig.ecommerce.widgets.RefreshListView -> com.massvig.ecommerce.widgets.RefreshListView:
    float mDownY -> a
    float mMoveY -> b
    int mHeaderHeight -> c
    int mCurrentScrollState -> d
    int mPullRefreshState -> e
    android.widget.LinearLayout mHeaderLinearLayout -> f
    android.widget.LinearLayout mFooterLinearLayout -> g
    android.widget.TextView mHeaderTextView -> h
    android.widget.TextView mHeaderUpdateText -> i
    android.widget.ProgressBar mHeaderProgressBar -> j
    android.widget.TextView mFooterTextView -> k
    android.widget.ProgressBar mFooterProgressBar -> l
    java.text.SimpleDateFormat mSimpleDateFormat -> m
    com.massvig.ecommerce.widgets.RefreshListView$RefreshListener mRefreshListener -> n
    android.content.Context mContext -> o
    android.os.Handler mHandler -> p
    void setOnRefreshListener(com.massvig.ecommerce.widgets.RefreshListView$RefreshListener) -> a
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void setAdapter(android.widget.ListAdapter) -> setAdapter
    void setTextShow(java.lang.String) -> a
    void finishHeadView() -> a
    void finishFootView() -> b
    android.widget.LinearLayout access$0(com.massvig.ecommerce.widgets.RefreshListView) -> a
    android.widget.TextView access$1(com.massvig.ecommerce.widgets.RefreshListView) -> b
    android.content.Context access$2(com.massvig.ecommerce.widgets.RefreshListView) -> c
    android.widget.ProgressBar access$3(com.massvig.ecommerce.widgets.RefreshListView) -> d
    void access$4(com.massvig.ecommerce.widgets.RefreshListView,int) -> a
    com.massvig.ecommerce.widgets.RefreshListView$RefreshListener access$5(com.massvig.ecommerce.widgets.RefreshListView) -> e
    android.widget.TextView access$6(com.massvig.ecommerce.widgets.RefreshListView) -> f
    java.text.SimpleDateFormat access$7(com.massvig.ecommerce.widgets.RefreshListView) -> g
    android.widget.ProgressBar access$8(com.massvig.ecommerce.widgets.RefreshListView) -> h
    android.widget.TextView access$9(com.massvig.ecommerce.widgets.RefreshListView) -> i
    android.os.Handler access$10(com.massvig.ecommerce.widgets.RefreshListView) -> j
    int access$11(com.massvig.ecommerce.widgets.RefreshListView) -> k
com.massvig.ecommerce.widgets.RefreshListView$1 -> com.massvig.ecommerce.widgets.cn:
    com.massvig.ecommerce.widgets.RefreshListView this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
    com.massvig.ecommerce.widgets.RefreshListView access$0(com.massvig.ecommerce.widgets.RefreshListView$1) -> a
com.massvig.ecommerce.widgets.RefreshListView$1$1 -> com.massvig.ecommerce.widgets.co:
    com.massvig.ecommerce.widgets.RefreshListView$1 this$1 -> a
    void run() -> run
com.massvig.ecommerce.widgets.RefreshListView$2 -> com.massvig.ecommerce.widgets.cp:
    com.massvig.ecommerce.widgets.RefreshListView this$0 -> a
    android.content.Context val$context -> b
    void onClick(android.view.View) -> onClick
    com.massvig.ecommerce.widgets.RefreshListView access$0(com.massvig.ecommerce.widgets.RefreshListView$2) -> a
com.massvig.ecommerce.widgets.RefreshListView$2$1 -> com.massvig.ecommerce.widgets.cq:
    com.massvig.ecommerce.widgets.RefreshListView$2 this$1 -> a
    void run() -> run
com.massvig.ecommerce.widgets.RefreshListView$3 -> com.massvig.ecommerce.widgets.cr:
    com.massvig.ecommerce.widgets.RefreshListView this$0 -> a
    void run() -> run
com.massvig.ecommerce.widgets.RefreshListView$4 -> com.massvig.ecommerce.widgets.cs:
    com.massvig.ecommerce.widgets.RefreshListView this$0 -> a
    void run() -> run
com.massvig.ecommerce.widgets.RefreshListView$RefreshListener -> com.massvig.ecommerce.widgets.ct:
    void startRefresh() -> a
    void startLoadMore() -> b
    void scrollStop() -> c
    void scrollStart() -> d
com.massvig.ecommerce.widgets.SeekBar -> com.massvig.ecommerce.widgets.SeekBar:
    android.widget.Button leftBtn -> a
    android.widget.Button rightBtn -> b
    android.widget.Button middelBtn -> c
    int defaultMinValue -> d
    int defaultMaxValue -> e
    int minValue -> f
    int maxValue -> g
    float x -> h
    int movespace -> i
    int vleft -> j
    int vright -> k
    int l -> l
    int r -> m
    int width -> n
    float itemScope -> o
    int leftIndex -> p
    int rightIdex -> q
    com.massvig.ecommerce.widgets.SeekBar$SeekBarChange mSeekBarChange -> r
    java.lang.String[] data -> s
    void onFinishInflate() -> onFinishInflate
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void SetBarValue(int,int) -> a
    void setSeekBarChangeListener(com.massvig.ecommerce.widgets.SeekBar$SeekBarChange) -> a
com.massvig.ecommerce.widgets.SeekBar$SeekBarChange -> com.massvig.ecommerce.widgets.cu:
    void callBack(java.lang.String,java.lang.String) -> a
com.massvig.ecommerce.widgets.SlideLayout -> com.massvig.ecommerce.widgets.SlideLayout:
    int leftNavWidth -> a
    int rightNavWidth -> b
    android.view.View leftNavView -> c
    android.view.View rightNavView -> d
    android.view.View centerView -> e
    int index -> f
    int maxIndex -> g
    java.lang.String moveType -> h
    java.lang.String moveLeft -> i
    java.lang.String moveRight -> j
    java.lang.Boolean animationComplete -> k
    java.lang.String _type -> l
    int baseCcount -> m
    android.os.Handler handler -> n
    void onLayout(boolean,int,int,int,int) -> onLayout
    void spreadNav(java.lang.String) -> a
com.massvig.ecommerce.widgets.SlideLayout$1 -> com.massvig.ecommerce.widgets.cv:
    com.massvig.ecommerce.widgets.SlideLayout this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.massvig.ecommerce.widgets.SlideLayout$2 -> com.massvig.ecommerce.widgets.cw:
    com.massvig.ecommerce.widgets.SlideLayout this$0 -> a
    void run() -> run
com.massvig.ecommerce.widgets.TaobaoImages -> com.massvig.ecommerce.widgets.cx:
    int ShareID -> a
    int RefID -> b
    int ShareSourceType -> c
    java.lang.String Address -> d
    java.lang.String createTime -> e
    java.lang.String Content -> f
    int CustomerID -> g
    java.lang.String ImgUrl -> h
    int PraiseCount -> i
    int SharedCount -> j
    java.lang.String NickName -> k
    java.lang.String HeadImgUrl -> l
    boolean CanPraise -> m
    int Height -> n
    int Width -> o
com.massvig.ecommerce.widgets.TaobaoWaterFall -> com.massvig.ecommerce.widgets.TaobaoWaterFall:
    com.massvig.ecommerce.widgets.LazyScrollView waterfall_scroll -> b
    android.widget.LinearLayout waterfall_container -> c
    java.util.ArrayList waterfall_items -> d
    android.content.res.AssetManager asset_manager -> e
    java.util.ArrayList image_filenames -> f
    android.os.Handler handler -> g
    int item_width -> h
    int column_count -> i
    int page_count -> j
    int[] bottomIndex -> k
    int[] lineIndex -> l
    int[] column_height -> m
    java.util.HashMap pins -> n
    int loaded_count -> a
    java.util.HashMap[] pin_mark -> o
    android.content.Context context -> p
    java.util.HashMap iviews -> q
    int loadedNum -> r
    java.util.ArrayList list -> s
    com.massvig.ecommerce.widgets.TaobaoWaterFall$onLoadListener onLoadListener -> t
    void initView() -> b
    void InitLayout() -> c
    void clearViews() -> a
    void addItems(java.util.ArrayList) -> a
    void addPraise(int) -> a
    void setOnLoadListener(com.massvig.ecommerce.widgets.TaobaoWaterFall$onLoadListener) -> a
    com.massvig.ecommerce.widgets.TaobaoWaterFall$onLoadListener access$0(com.massvig.ecommerce.widgets.TaobaoWaterFall) -> a
    int[] access$1(com.massvig.ecommerce.widgets.TaobaoWaterFall) -> b
    int access$2$a1e39ab(int[]) -> a
    java.util.HashMap access$3(com.massvig.ecommerce.widgets.TaobaoWaterFall) -> c
    java.util.HashMap access$4(com.massvig.ecommerce.widgets.TaobaoWaterFall) -> d
    java.util.ArrayList access$5(com.massvig.ecommerce.widgets.TaobaoWaterFall) -> e
    int[] access$6(com.massvig.ecommerce.widgets.TaobaoWaterFall) -> f
    java.util.HashMap[] access$7(com.massvig.ecommerce.widgets.TaobaoWaterFall) -> g
    int[] access$8(com.massvig.ecommerce.widgets.TaobaoWaterFall) -> h
    java.util.ArrayList access$9(com.massvig.ecommerce.widgets.TaobaoWaterFall) -> i
com.massvig.ecommerce.widgets.TaobaoWaterFall$1 -> com.massvig.ecommerce.widgets.cy:
    com.massvig.ecommerce.widgets.TaobaoWaterFall this$0 -> a
    void onTop() -> b
    void onBottom() -> a
com.massvig.ecommerce.widgets.TaobaoWaterFall$2 -> com.massvig.ecommerce.widgets.cz:
    com.massvig.ecommerce.widgets.TaobaoWaterFall this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
    boolean sendMessageAtTime(android.os.Message,long) -> sendMessageAtTime
com.massvig.ecommerce.widgets.TaobaoWaterFall$onLoadListener -> com.massvig.ecommerce.widgets.da:
    void onScrollBottom() -> a
    void onClickItemImage$605d8a5e(com.massvig.ecommerce.widgets.FlowTag) -> a
    void onClickPraise(com.massvig.ecommerce.widgets.FlowTag) -> b
    void onClickShare(com.massvig.ecommerce.widgets.FlowTag) -> c
    void onClickUserImg(com.massvig.ecommerce.widgets.FlowTag) -> d
com.massvig.ecommerce.widgets.ViewHolderModel -> com.massvig.ecommerce.widgets.db:
    void initViewHoler(android.view.View) -> a
    void setViewHolerValues$7e55ba3e(java.lang.Object) -> a
com.novell.sasl.client.DigestChallenge -> com.novell.sasl.client.DigestChallenge:
    int QOP_AUTH -> QOP_AUTH
    int QOP_AUTH_INT -> QOP_AUTH_INT
    int QOP_AUTH_CONF -> QOP_AUTH_CONF
    int QOP_UNRECOGNIZED -> QOP_UNRECOGNIZED
    int CIPHER_3DES -> CIPHER_3DES
    int CIPHER_DES -> CIPHER_DES
    int CIPHER_RC4_40 -> CIPHER_RC4_40
    int CIPHER_RC4 -> CIPHER_RC4
    int CIPHER_RC4_56 -> CIPHER_RC4_56
    int CIPHER_UNRECOGNIZED -> CIPHER_UNRECOGNIZED
    int CIPHER_RECOGNIZED_MASK -> CIPHER_RECOGNIZED_MASK
    java.util.ArrayList m_realms -> m_realms
    java.lang.String m_nonce -> m_nonce
    int m_qop -> m_qop
    boolean m_staleFlag -> m_staleFlag
    int m_maxBuf -> m_maxBuf
    java.lang.String m_characterSet -> m_characterSet
    java.lang.String m_algorithm -> m_algorithm
    int m_cipherOptions -> m_cipherOptions
    void checkSemantics(com.novell.sasl.client.DirectiveList) -> checkSemantics
    void handleNonce(com.novell.sasl.client.ParsedDirective) -> handleNonce
    void handleRealm(com.novell.sasl.client.ParsedDirective) -> handleRealm
    void handleQop(com.novell.sasl.client.ParsedDirective) -> handleQop
    void handleMaxbuf(com.novell.sasl.client.ParsedDirective) -> handleMaxbuf
    void handleCharset(com.novell.sasl.client.ParsedDirective) -> handleCharset
    void handleAlgorithm(com.novell.sasl.client.ParsedDirective) -> handleAlgorithm
    void handleCipher(com.novell.sasl.client.ParsedDirective) -> handleCipher
    void handleStale(com.novell.sasl.client.ParsedDirective) -> handleStale
    java.util.ArrayList getRealms() -> getRealms
    java.lang.String getNonce() -> getNonce
    int getQop() -> getQop
    boolean getStaleFlag() -> getStaleFlag
    int getMaxBuf() -> getMaxBuf
    java.lang.String getCharacterSet() -> getCharacterSet
    java.lang.String getAlgorithm() -> getAlgorithm
    int getCipherOptions() -> getCipherOptions
com.novell.sasl.client.DigestMD5SaslClient -> com.novell.sasl.client.DigestMD5SaslClient:
    java.lang.String m_authorizationId -> m_authorizationId
    java.lang.String m_protocol -> m_protocol
    java.lang.String m_serverName -> m_serverName
    java.util.Map m_props -> m_props
    org.apache.harmony.javax.security.auth.callback.CallbackHandler m_cbh -> m_cbh
    int m_state -> m_state
    java.lang.String m_qopValue -> m_qopValue
    char[] m_HA1 -> m_HA1
    java.lang.String m_digestURI -> m_digestURI
    com.novell.sasl.client.DigestChallenge m_dc -> m_dc
    java.lang.String m_clientNonce -> m_clientNonce
    java.lang.String m_realm -> m_realm
    java.lang.String m_name -> m_name
    int STATE_INITIAL -> STATE_INITIAL
    int STATE_DIGEST_RESPONSE_SENT -> STATE_DIGEST_RESPONSE_SENT
    int STATE_VALID_SERVER_RESPONSE -> STATE_VALID_SERVER_RESPONSE
    int STATE_INVALID_SERVER_RESPONSE -> STATE_INVALID_SERVER_RESPONSE
    int STATE_DISPOSED -> STATE_DISPOSED
    int NONCE_BYTE_COUNT -> NONCE_BYTE_COUNT
    int NONCE_HEX_COUNT -> NONCE_HEX_COUNT
    java.lang.String DIGEST_METHOD -> DIGEST_METHOD
    org.apache.harmony.javax.security.sasl.SaslClient getClient(java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> getClient
    boolean hasInitialResponse() -> hasInitialResponse
    boolean isComplete() -> isComplete
    byte[] unwrap(byte[],int,int) -> unwrap
    byte[] wrap(byte[],int,int) -> wrap
    java.lang.Object getNegotiatedProperty(java.lang.String) -> getNegotiatedProperty
    void dispose() -> dispose
    byte[] evaluateChallenge(byte[]) -> evaluateChallenge
    char[] convertToHex(byte[]) -> convertToHex
    char[] DigestCalcHA1(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> DigestCalcHA1
    char[] DigestCalcResponse(char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean) -> DigestCalcResponse
    java.lang.String createDigestResponse(byte[]) -> createDigestResponse
    boolean checkServerResponseAuth(byte[]) -> checkServerResponseAuth
    char getHexChar(byte) -> getHexChar
    java.lang.String getClientNonce() -> getClientNonce
    java.lang.String getMechanismName() -> getMechanismName
com.novell.sasl.client.DirectiveList -> com.novell.sasl.client.DirectiveList:
    int STATE_LOOKING_FOR_FIRST_DIRECTIVE -> STATE_LOOKING_FOR_FIRST_DIRECTIVE
    int STATE_LOOKING_FOR_DIRECTIVE -> STATE_LOOKING_FOR_DIRECTIVE
    int STATE_SCANNING_NAME -> STATE_SCANNING_NAME
    int STATE_LOOKING_FOR_EQUALS -> STATE_LOOKING_FOR_EQUALS
    int STATE_LOOKING_FOR_VALUE -> STATE_LOOKING_FOR_VALUE
    int STATE_LOOKING_FOR_COMMA -> STATE_LOOKING_FOR_COMMA
    int STATE_SCANNING_QUOTED_STRING_VALUE -> STATE_SCANNING_QUOTED_STRING_VALUE
    int STATE_SCANNING_TOKEN_VALUE -> STATE_SCANNING_TOKEN_VALUE
    int STATE_NO_UTF8_SUPPORT -> STATE_NO_UTF8_SUPPORT
    int m_curPos -> m_curPos
    int m_errorPos -> m_errorPos
    java.lang.String m_directives -> m_directives
    int m_state -> m_state
    java.util.ArrayList m_directiveList -> m_directiveList
    java.lang.String m_curName -> m_curName
    int m_scanStart -> m_scanStart
    void parseDirectives() -> parseDirectives
    boolean isValidTokenChar(char) -> isValidTokenChar
    boolean isWhiteSpace(char) -> isWhiteSpace
    void addDirective(java.lang.String,boolean) -> addDirective
    java.util.Iterator getIterator() -> getIterator
com.novell.sasl.client.ParsedDirective -> com.novell.sasl.client.ParsedDirective:
    int QUOTED_STRING_VALUE -> QUOTED_STRING_VALUE
    int TOKEN_VALUE -> TOKEN_VALUE
    int m_valueType -> m_valueType
    java.lang.String m_name -> m_name
    java.lang.String m_value -> m_value
    java.lang.String getValue() -> getValue
    java.lang.String getName() -> getName
    int getValueType() -> getValueType
com.novell.sasl.client.ResponseAuth -> com.novell.sasl.client.ResponseAuth:
    java.lang.String m_responseValue -> m_responseValue
    void checkSemantics(com.novell.sasl.client.DirectiveList) -> checkSemantics
    java.lang.String getResponseValue() -> getResponseValue
com.novell.sasl.client.TokenParser -> com.novell.sasl.client.TokenParser:
    int STATE_LOOKING_FOR_FIRST_TOKEN -> STATE_LOOKING_FOR_FIRST_TOKEN
    int STATE_LOOKING_FOR_TOKEN -> STATE_LOOKING_FOR_TOKEN
    int STATE_SCANNING_TOKEN -> STATE_SCANNING_TOKEN
    int STATE_LOOKING_FOR_COMMA -> STATE_LOOKING_FOR_COMMA
    int STATE_PARSING_ERROR -> STATE_PARSING_ERROR
    int STATE_DONE -> STATE_DONE
    int m_curPos -> m_curPos
    int m_scanStart -> m_scanStart
    int m_state -> m_state
    java.lang.String m_tokens -> m_tokens
    java.lang.String parseToken() -> parseToken
    boolean isValidTokenChar(char) -> isValidTokenChar
    boolean isWhiteSpace(char) -> isWhiteSpace
com.sina.weibo.sdk.api.BaseMediaObject -> com.sina.weibo.sdk.api.BaseMediaObject:
    java.lang.String actionUrl -> a
    java.lang.String schema -> b
    java.lang.String identify -> c
    java.lang.String title -> d
    java.lang.String description -> e
    byte[] thumbData -> f
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.sina.weibo.sdk.api.CmdObject -> com.sina.weibo.sdk.api.CmdObject:
    java.lang.String cmd -> g
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.sina.weibo.sdk.api.CmdObject$1 -> com.sina.weibo.sdk.api.a:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.sina.weibo.sdk.api.ImageObject -> com.sina.weibo.sdk.api.ImageObject:
    byte[] imageData -> g
    java.lang.String imagePath -> h
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.sina.weibo.sdk.api.ImageObject$1 -> com.sina.weibo.sdk.api.b:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.sina.weibo.sdk.api.MusicObject -> com.sina.weibo.sdk.api.MusicObject:
    java.lang.String h5Url -> g
    java.lang.String dataUrl -> h
    java.lang.String dataHdUrl -> i
    int duration -> j
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.sina.weibo.sdk.api.MusicObject$1 -> com.sina.weibo.sdk.api.c:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.sina.weibo.sdk.api.TextObject -> com.sina.weibo.sdk.api.TextObject:
    java.lang.String text -> g
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.sina.weibo.sdk.api.TextObject$1 -> com.sina.weibo.sdk.api.d:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.sina.weibo.sdk.api.VideoObject -> com.sina.weibo.sdk.api.VideoObject:
    java.lang.String h5Url -> g
    java.lang.String dataUrl -> h
    java.lang.String dataHdUrl -> i
    int duration -> j
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.sina.weibo.sdk.api.VideoObject$1 -> com.sina.weibo.sdk.api.e:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.sina.weibo.sdk.api.VoiceObject -> com.sina.weibo.sdk.api.VoiceObject:
    java.lang.String h5Url -> g
    java.lang.String dataUrl -> h
    java.lang.String dataHdUrl -> i
    int duration -> j
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.sina.weibo.sdk.api.VoiceObject$1 -> com.sina.weibo.sdk.api.f:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.sina.weibo.sdk.api.WebpageObject -> com.sina.weibo.sdk.api.WebpageObject:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.sina.weibo.sdk.api.WebpageObject$1 -> com.sina.weibo.sdk.api.g:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.tencent.mm.algorithm.Base64 -> com.tencent.mm.algorithm.Base64:
    char[] a -> a
    int[] b -> b
    char[] encodeToChar(byte[],boolean) -> encodeToChar
    byte[] decode(char[]) -> decode
    byte[] decodeFast(char[]) -> decodeFast
    byte[] encodeToByte(byte[],boolean) -> encodeToByte
    byte[] decode(byte[]) -> decode
    byte[] decodeFast(byte[]) -> decodeFast
    java.lang.String encodeToString(byte[],boolean) -> encodeToString
    byte[] decode(java.lang.String) -> decode
    byte[] decodeFast(java.lang.String) -> decodeFast
com.tencent.mm.algorithm.LRUMap -> com.tencent.mm.algorithm.LRUMap:
    java.util.Map c -> c
    int d -> d
    int e -> e
    com.tencent.mm.algorithm.LRUMap$PreRemoveCallback f -> f
    int size() -> size
    void setMaxSize(int) -> setMaxSize
    void setPerDeleteSize(int) -> setPerDeleteSize
    boolean check(java.lang.Object) -> check
    boolean checkAndUpTime(java.lang.Object) -> checkAndUpTime
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getAndUptime(java.lang.Object) -> getAndUptime
    void remove(java.lang.Object) -> remove
    void clear() -> clear
    void clear(com.tencent.mm.algorithm.LRUMap$OnClearListener) -> clear
    void update(java.lang.Object,java.lang.Object) -> update
com.tencent.mm.algorithm.LRUMap$1 -> com.tencent.mm.algorithm.LRUMap$1:
    com.tencent.mm.algorithm.LRUMap g -> g
    int compare(java.util.Map$Entry,java.util.Map$Entry) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.tencent.mm.algorithm.LRUMap$OnClearListener -> com.tencent.mm.algorithm.LRUMap$OnClearListener:
    void onClear(java.lang.Object,java.lang.Object) -> onClear
com.tencent.mm.algorithm.LRUMap$PreRemoveCallback -> com.tencent.mm.algorithm.LRUMap$PreRemoveCallback:
    void preRemoveCallback(java.lang.Object,java.lang.Object) -> preRemoveCallback
com.tencent.mm.algorithm.LRUMap$TimeVal -> com.tencent.mm.algorithm.LRUMap$TimeVal:
    java.lang.Object obj -> obj
    java.lang.Long t -> t
    com.tencent.mm.algorithm.LRUMap g -> g
    void UpTime() -> UpTime
com.tencent.mm.algorithm.MD5 -> com.tencent.mm.algorithm.MD5:
    java.lang.String getMessageDigest(byte[]) -> getMessageDigest
    byte[] getRawDigest(byte[]) -> getRawDigest
    java.lang.String getMD5(java.io.FileInputStream,int,int,int) -> getMD5
    java.lang.String getMD5(java.io.FileInputStream,int) -> getMD5
    java.lang.String getMD5(java.lang.String) -> getMD5
    java.lang.String getMD5(java.io.File) -> getMD5
    java.lang.String getMD5(java.io.File,int) -> getMD5
    java.lang.String getMD5(java.lang.String,int,int) -> getMD5
    java.lang.String getMD5(java.io.File,int,int) -> getMD5
com.tencent.mm.algorithm.TypeTransform -> com.tencent.mm.algorithm.TypeTransform:
    byte[] a(byte[]) -> a
    byte[] intToByteArrayLH(int) -> intToByteArrayLH
    byte[] longToByteArrayLH(long) -> longToByteArrayLH
    byte[] intToByteArrayHL(int) -> intToByteArrayHL
    byte[] longToByteArrayHL(long) -> longToByteArrayHL
    int byteArrayLHToInt(byte[]) -> byteArrayLHToInt
    int byteArrayLHToInt(byte[],int) -> byteArrayLHToInt
    long byteArrayLHToLong(byte[]) -> byteArrayLHToLong
    long byteArrayLHToLong(byte[],int) -> byteArrayLHToLong
    int byteArrayHLToInt(byte[]) -> byteArrayHLToInt
    int byteArrayHLToInt(byte[],int) -> byteArrayHLToInt
    long byteArrayHLToLong(byte[],int) -> byteArrayHLToLong
    long byteArrayHLToLong(byte[]) -> byteArrayHLToLong
com.tencent.mm.algorithm.UIN -> com.tencent.mm.algorithm.UIN:
    int h -> h
    int value() -> value
    int valueOf(java.lang.String) -> valueOf
    double doubleValue() -> doubleValue
    float floatValue() -> floatValue
    int intValue() -> intValue
    long longValue() -> longValue
    java.lang.String toString() -> toString
com.tencent.mm.sdk.Build -> com.tencent.mm.sdk.Build:
    int SDK_INT -> SDK_INT
    java.lang.String SDK_VERSION_NAME -> SDK_VERSION_NAME
    int TIMELINE_SUPPORTED_SDK_INT -> TIMELINE_SUPPORTED_SDK_INT
    int EMOJI_SUPPORTED_SDK_INT -> EMOJI_SUPPORTED_SDK_INT
com.tencent.mm.sdk.BuildConfig -> com.tencent.mm.sdk.BuildConfig:
    boolean DEBUG -> DEBUG
com.tencent.mm.sdk.ConstantsUI -> com.tencent.mm.sdk.ConstantsUI:
    java.lang.String PREF_FILE_PATH -> PREF_FILE_PATH
com.tencent.mm.sdk.ConstantsUI$Contact -> com.tencent.mm.sdk.ConstantsUI$Contact:
    java.lang.String KUser -> KUser
com.tencent.mm.sdk.MMAppMgr -> com.tencent.mm.sdk.MMAppMgr:
    void activate(boolean) -> activate
    android.content.SharedPreferences getSharedPreferences(android.content.Context,int) -> getSharedPreferences
    com.tencent.mm.sdk.plugin.IMMPluginAPI getPluginMgr(android.content.Context) -> getPluginMgr
com.tencent.mm.sdk.MMSharedPreferences -> com.tencent.mm.sdk.MMSharedPreferences:
    android.content.ContentResolver i -> i
    java.lang.String[] columns -> columns
    java.util.HashMap j -> j
    com.tencent.mm.sdk.MMSharedPreferences$REditor k -> k
    java.lang.Object getValue(java.lang.String) -> getValue
    java.util.Map getAll() -> getAll
    java.lang.String getString(java.lang.String,java.lang.String) -> getString
    int getInt(java.lang.String,int) -> getInt
    long getLong(java.lang.String,long) -> getLong
    float getFloat(java.lang.String,float) -> getFloat
    boolean getBoolean(java.lang.String,boolean) -> getBoolean
    boolean contains(java.lang.String) -> contains
    android.content.SharedPreferences$Editor edit() -> edit
    void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener) -> registerOnSharedPreferenceChangeListener
    void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener) -> unregisterOnSharedPreferenceChangeListener
    java.util.Set getStringSet(java.lang.String,java.util.Set) -> getStringSet
com.tencent.mm.sdk.MMSharedPreferences$REditor -> com.tencent.mm.sdk.MMSharedPreferences$REditor:
    java.util.Map l -> l
    java.util.Set m -> m
    boolean n -> n
    android.content.ContentResolver i -> i
    android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String) -> putString
    android.content.SharedPreferences$Editor putInt(java.lang.String,int) -> putInt
    android.content.SharedPreferences$Editor putLong(java.lang.String,long) -> putLong
    android.content.SharedPreferences$Editor putFloat(java.lang.String,float) -> putFloat
    android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean) -> putBoolean
    android.content.SharedPreferences$Editor remove(java.lang.String) -> remove
    android.content.SharedPreferences$Editor clear() -> clear
    boolean commit() -> commit
    void apply() -> apply
    android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set) -> putStringSet
com.tencent.mm.sdk.channel.ConstantsMMessage -> com.tencent.mm.sdk.channel.ConstantsMMessage:
    java.lang.String APP_PACKAGE -> APP_PACKAGE
    java.lang.String SDK_VERSION -> SDK_VERSION
    java.lang.String CONTENT -> CONTENT
    java.lang.String CHECK_SUM -> CHECK_SUM
    java.lang.String ACTION_MESSAGE -> ACTION_MESSAGE
com.tencent.mm.sdk.channel.MMessage -> com.tencent.mm.sdk.channel.MMessage:
    boolean send(android.content.Context,java.lang.String,java.lang.String,java.lang.String,android.os.Bundle) -> send
    void send(android.content.Context,java.lang.String,java.lang.String) -> send
    void send(android.content.Context,java.lang.String,java.lang.String,java.lang.String) -> send
com.tencent.mm.sdk.channel.MMessage$CallBack -> com.tencent.mm.sdk.channel.MMessage$CallBack:
    void handleMessage(android.content.Intent) -> handleMessage
com.tencent.mm.sdk.channel.MMessage$Receiver -> com.tencent.mm.sdk.channel.MMessage$Receiver:
    java.util.Map callbacks -> callbacks
    com.tencent.mm.sdk.channel.MMessage$CallBack o -> o
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void registerCallBack(java.lang.String,com.tencent.mm.sdk.channel.MMessage$CallBack) -> registerCallBack
    void unregisterCallBack(java.lang.String) -> unregisterCallBack
com.tencent.mm.sdk.channel.MMessageAct -> com.tencent.mm.sdk.channel.MMessageAct:
    boolean send(android.content.Context,java.lang.String,java.lang.String,java.lang.String,android.os.Bundle) -> send
    boolean send(android.content.Context,java.lang.String,java.lang.String) -> send
    boolean send(android.content.Context,java.lang.String,java.lang.String,android.os.Bundle) -> send
    boolean sendToWx(android.content.Context,java.lang.String,android.os.Bundle) -> sendToWx
    boolean sendToWx(android.content.Context,java.lang.String) -> sendToWx
com.tencent.mm.sdk.channel.MMessageUtil -> com.tencent.mm.sdk.channel.MMessageUtil:
    byte[] a(java.lang.String,java.lang.String) -> a
com.tencent.mm.sdk.channel.package-info -> com.tencent.mm.sdk.channel.package-info:
com.tencent.mm.sdk.contact.RContact -> com.tencent.mm.sdk.contact.RContact:
    java.lang.reflect.Field[] p -> p
    java.lang.String[] COLUMNS -> COLUMNS
    java.lang.String COL_USERNAME -> COL_USERNAME
    java.lang.String COL_ALIAS -> COL_ALIAS
    java.lang.String COL_CONREMARK -> COL_CONREMARK
    java.lang.String COL_DOMAINLIST -> COL_DOMAINLIST
    java.lang.String COL_NICKNAME -> COL_NICKNAME
    java.lang.String COL_PYINITIAL -> COL_PYINITIAL
    java.lang.String COL_QUANPIN -> COL_QUANPIN
    java.lang.String COL_SHOWHEAD -> COL_SHOWHEAD
    java.lang.String COL_TYPE -> COL_TYPE
    java.lang.String COL_WEIBOFLAG -> COL_WEIBOFLAG
    java.lang.String COL_WEIBONICKNAME -> COL_WEIBONICKNAME
    java.lang.String COL_CONREMARK_PYFULL -> COL_CONREMARK_PYFULL
    java.lang.String COL_CONREMARK_PYSHORT -> COL_CONREMARK_PYSHORT
    java.lang.String COL_VERIFY_FLAG -> COL_VERIFY_FLAG
    long contactId -> contactId
    java.lang.String field_username -> field_username
    java.lang.String field_alias -> field_alias
    java.lang.String field_conRemark -> field_conRemark
    java.lang.String field_domainList -> field_domainList
    java.lang.String field_nickname -> field_nickname
    java.lang.String field_pyInitial -> field_pyInitial
    java.lang.String field_quanPin -> field_quanPin
    int field_showHead -> field_showHead
    int field_type -> field_type
    int field_weiboFlag -> field_weiboFlag
    java.lang.String field_weiboNickname -> field_weiboNickname
    java.lang.String field_conRemarkPYFull -> field_conRemarkPYFull
    java.lang.String field_conRemarkPYShort -> field_conRemarkPYShort
    byte[] field_lvbuff -> field_lvbuff
    int field_verifyFlag -> field_verifyFlag
    int q -> q
    int r -> r
    java.lang.String s -> s
    long u -> u
    int h -> h
    java.lang.String v -> v
    java.lang.String w -> w
    int x -> x
    int y -> y
    java.lang.String z -> z
    java.lang.String A -> A
    int B -> B
    int C -> C
    java.lang.String D -> D
    java.lang.String E -> E
    java.lang.String F -> F
    java.lang.String G -> G
    int H -> H
    int I -> I
    java.lang.String J -> J
    java.lang.String K -> K
    java.lang.String L -> L
    java.util.Map M -> M
    java.util.Map N -> N
    int DEL_CONTACT_MSG -> DEL_CONTACT_MSG
    int NOT_IN_CHAT_LIST -> NOT_IN_CHAT_LIST
    int FAVOUR_CONTACT_SHOW_HEAD_CODE -> FAVOUR_CONTACT_SHOW_HEAD_CODE
    java.lang.String FAVOUR_CONTACT_SHOW_HEAD_CHAR -> FAVOUR_CONTACT_SHOW_HEAD_CHAR
    int MM_CONTACTFLAG_NULL -> MM_CONTACTFLAG_NULL
    int MM_SEX_UNKNOWN -> MM_SEX_UNKNOWN
    int MM_SEX_MALE -> MM_SEX_MALE
    int MM_SEX_FEMALE -> MM_SEX_FEMALE
    int MM_CONTACT_WEIXIN -> MM_CONTACT_WEIXIN
    int MM_CONTACT_QQMICROBLOG -> MM_CONTACT_QQMICROBLOG
    int MM_CONTACT_CHATROOM -> MM_CONTACT_CHATROOM
    int MM_CONTACT_EMAIL -> MM_CONTACT_EMAIL
    int MM_CONTACT_QQ -> MM_CONTACT_QQ
    int MM_CONTACT_BOTTLE -> MM_CONTACT_BOTTLE
    int MM_CONTACTFLAG_CONTACT -> MM_CONTACTFLAG_CONTACT
    int MM_CONTACTFLAG_CHATCONTACT -> MM_CONTACTFLAG_CHATCONTACT
    int MM_CONTACTFLAG_CHATROOMCONTACT -> MM_CONTACTFLAG_CHATROOMCONTACT
    int MM_CONTACTFLAG_BLACKLISTCONTACT -> MM_CONTACTFLAG_BLACKLISTCONTACT
    int MM_CONTACTFLAG_DOMAINCONTACT -> MM_CONTACTFLAG_DOMAINCONTACT
    int MM_CONTACTFLAG_HIDECONTACT -> MM_CONTACTFLAG_HIDECONTACT
    int MM_CONTACTFLAG_FAVOURCONTACT -> MM_CONTACTFLAG_FAVOURCONTACT
    int MM_CONTACTFLAG_ALL -> MM_CONTACTFLAG_ALL
    int MM_CONTACTIMGFLAG_NOTMODIFY -> MM_CONTACTIMGFLAG_NOTMODIFY
    int MM_CONTACTIMGFLAG_MODIFY -> MM_CONTACTIMGFLAG_MODIFY
    int MM_CONTACTIMGFLAG_HAS_HEADIMG -> MM_CONTACTIMGFLAG_HAS_HEADIMG
    int MM_CONTACTIMGFLAG_HAS_NO_HEADIMG -> MM_CONTACTIMGFLAG_HAS_NO_HEADIMG
    int MM_CONTACTIMGFLAG_LOCAL_EXIST -> MM_CONTACTIMGFLAG_LOCAL_EXIST
    int COL_ID_INVALID_VALUE -> COL_ID_INVALID_VALUE
    java.lang.reflect.Field[] fields() -> fields
    void reset() -> reset
    void setHardCodeNickMaps(java.util.Map) -> setHardCodeNickMaps
    void setHardCodeAliasMaps(java.util.Map) -> setHardCodeAliasMaps
    int calculateShowHead() -> calculateShowHead
    void setNullContact() -> setNullContact
    void setChatroomContact() -> setChatroomContact
    void setContact() -> setContact
    void unSetContact() -> unSetContact
    void setBlackList() -> setBlackList
    void unSetBlackList() -> unSetBlackList
    void setChatContact() -> setChatContact
    void unSetChatContact() -> unSetChatContact
    void setHidden() -> setHidden
    void unSetHidden() -> unSetHidden
    void setFavour() -> setFavour
    void unSetFavour() -> unSetFavour
    int getContactBit() -> getContactBit
    int getBlackListContactBit() -> getBlackListContactBit
    int getDomainContactBit() -> getDomainContactBit
    int getHiddenContactBit() -> getHiddenContactBit
    boolean isContact() -> isContact
    boolean isContact(int) -> isContact
    boolean isChatContact() -> isChatContact
    boolean isHidden() -> isHidden
    boolean isImgLocalExist() -> isImgLocalExist
    boolean isChatRoomContact() -> isChatRoomContact
    boolean isBlackListContact() -> isBlackListContact
    boolean isDomainContact() -> isDomainContact
    boolean isFavourContact() -> isFavourContact
    boolean isLetter(char) -> isLetter
    int getContactID() -> getContactID
    int getSex() -> getSex
    void setSex(int) -> setSex
    int getType() -> getType
    void setType(int) -> setType
    int getShowHead() -> getShowHead
    void setShowHead(int) -> setShowHead
    java.lang.String getUsername() -> getUsername
    void setUsername(java.lang.String) -> setUsername
    java.lang.String getNickname() -> getNickname
    void setNickname(java.lang.String) -> setNickname
    java.lang.String getFaceBookUsername() -> getFaceBookUsername
    void setFaceBookUsername(java.lang.String) -> setFaceBookUsername
    long getFaceBookId() -> getFaceBookId
    void setFaceBookId(long) -> setFaceBookId
    java.lang.String getPyInitial() -> getPyInitial
    void setPyInitial(java.lang.String) -> setPyInitial
    java.lang.String getQuanPin() -> getQuanPin
    void setQuanPin(java.lang.String) -> setQuanPin
    void setAlias(java.lang.String) -> setAlias
    java.lang.String getAlias() -> getAlias
    java.lang.String getDisplayNick() -> getDisplayNick
    java.lang.String getDisplayRemark() -> getDisplayRemark
    java.lang.String getDisplayUser() -> getDisplayUser
    java.lang.String formatDisplayNick(java.lang.String) -> formatDisplayNick
    int getUin() -> getUin
    java.lang.String getEmail() -> getEmail
    java.lang.String getMobile() -> getMobile
    int getShowFlag() -> getShowFlag
    int getConType() -> getConType
    java.lang.String getConRemark() -> getConRemark
    java.lang.String getConRemarkPYShort() -> getConRemarkPYShort
    java.lang.String getConRemarkPYFull() -> getConRemarkPYFull
    java.lang.String getConSMBlog() -> getConSMBlog
    java.lang.String getConQQMBlog() -> getConQQMBlog
    java.lang.String getDomainList() -> getDomainList
    int getChatroomNotify() -> getChatroomNotify
    int getImgFlag() -> getImgFlag
    int getPersonalCard() -> getPersonalCard
    void setPersonalCard(int) -> setPersonalCard
    java.lang.String getSignature() -> getSignature
    void setSignature(java.lang.String) -> setSignature
    java.lang.String getProvince() -> getProvince
    void setProvince(java.lang.String) -> setProvince
    java.lang.String getCity() -> getCity
    void setCity(java.lang.String) -> setCity
    void setDistance(java.lang.String) -> setDistance
    java.lang.String getDistance() -> getDistance
    void setFromType(int) -> setFromType
    int getFromType() -> getFromType
    void setSource(int) -> setSource
    int getSource() -> getSource
    void setWeibo(java.lang.String) -> setWeibo
    java.lang.String getWeibo() -> getWeibo
    int getWeiboFlag() -> getWeiboFlag
    void setWeiboFlag(int) -> setWeiboFlag
    java.lang.String getWeiboNickName() -> getWeiboNickName
    void setWeiboNickName(java.lang.String) -> setWeiboNickName
    void setUin(int) -> setUin
    void setEmail(java.lang.String) -> setEmail
    void setMobile(java.lang.String) -> setMobile
    void setShowFlag(int) -> setShowFlag
    void setConType(int) -> setConType
    void setConRemark(java.lang.String) -> setConRemark
    void setConRemarkPYShort(java.lang.String) -> setConRemarkPYShort
    void setConRemarkPYFull(java.lang.String) -> setConRemarkPYFull
    void setConSMBlog(java.lang.String) -> setConSMBlog
    void setConQQMBlog(java.lang.String) -> setConQQMBlog
    void setDomainList(java.lang.String) -> setDomainList
    void setChatroomNotify(int) -> setChatroomNotify
    void setImgFlag(int) -> setImgFlag
    int getVerifyFlag() -> getVerifyFlag
    void setVerifyFlag(int) -> setVerifyFlag
    java.lang.String getVerifyInfo() -> getVerifyInfo
    void setVerifyInfo(java.lang.String) -> setVerifyInfo
    java.lang.String getRegionCode() -> getRegionCode
    void setRegionCode(java.lang.String) -> setRegionCode
    byte[] a() -> a
    void convertFrom(android.database.Cursor) -> convertFrom
    android.content.ContentValues convertTo() -> convertTo
com.tencent.mm.sdk.contact.RContactAvatar -> com.tencent.mm.sdk.contact.RContactAvatar:
com.tencent.mm.sdk.contact.RContactDB -> com.tencent.mm.sdk.contact.RContactDB:
    java.util.Map O -> O
    android.net.Uri getUriFromTable(java.lang.String) -> getUriFromTable
com.tencent.mm.sdk.contact.RContactStorage -> com.tencent.mm.sdk.contact.RContactStorage:
    java.lang.String AUTHORITY -> AUTHORITY
    java.lang.String TABLE -> TABLE
    java.lang.String PRIMARY_KEY -> PRIMARY_KEY
    com.tencent.mm.sdk.contact.RContactStorage create(android.content.Context) -> create
    java.lang.String getTableName() -> getTableName
    java.lang.String getPrimaryKey() -> getPrimaryKey
    java.lang.String[] getColumns() -> getColumns
    com.tencent.mm.sdk.contact.RContact get(java.lang.String) -> get
com.tencent.mm.sdk.contact.package-info -> com.tencent.mm.sdk.contact.package-info:
com.tencent.mm.sdk.conversation.RConversation -> com.tencent.mm.sdk.conversation.RConversation:
    java.lang.reflect.Field[] p -> p
    java.lang.String[] COLUMNS -> COLUMNS
    int NOT_SHOWN_TIPS -> NOT_SHOWN_TIPS
    int HAS_SHOWN_TIPS -> HAS_SHOWN_TIPS
    int FLAG_NORMAL -> FLAG_NORMAL
    int ROOM_MUTE_ON -> ROOM_MUTE_ON
    int ROOM_MUTE_OFF -> ROOM_MUTE_OFF
    int field_unReadCount -> field_unReadCount
    int field_chatmode -> field_chatmode
    int field_status -> field_status
    int field_isSend -> field_isSend
    long field_conversationTime -> field_conversationTime
    java.lang.String field_username -> field_username
    java.lang.String field_content -> field_content
    java.lang.String field_msgType -> field_msgType
    java.lang.String field_customNotify -> field_customNotify
    int field_showTips -> field_showTips
    long field_flag -> field_flag
    int COL_UNREAD_COUNT_INVALID_VALUE -> COL_UNREAD_COUNT_INVALID_VALUE
    int INDEX_UNREAD_COUNT -> INDEX_UNREAD_COUNT
    int INDEX_STATUE -> INDEX_STATUE
    int INDEX_IS_SEND -> INDEX_IS_SEND
    int INDEX_CONVERSATION_TIME -> INDEX_CONVERSATION_TIME
    int INDEX_USERNAME -> INDEX_USERNAME
    int INDEX_CONTENT -> INDEX_CONTENT
    int INDEX_MSGTYPE -> INDEX_MSGTYPE
    int INDEX_FLAG -> INDEX_FLAG
    java.lang.String OLD_TABLE -> OLD_TABLE
    java.lang.String OLD_BOTTLE_TABLE -> OLD_BOTTLE_TABLE
    java.lang.String COL_UNREAD_COUNT -> COL_UNREAD_COUNT
    java.lang.String COL_CHATMODE -> COL_CHATMODE
    java.lang.String COL_STATUS -> COL_STATUS
    java.lang.String COL_IS_SEND -> COL_IS_SEND
    java.lang.String COL_CONVERSATION_TIME -> COL_CONVERSATION_TIME
    java.lang.String COL_USERNAME -> COL_USERNAME
    java.lang.String COL_CONTENT -> COL_CONTENT
    java.lang.String COL_MSGTYPE -> COL_MSGTYPE
    java.lang.String COL_FLAG -> COL_FLAG
    long MAX_TIME -> MAX_TIME
    java.lang.reflect.Field[] fields() -> fields
    java.lang.reflect.Field[] getFields() -> getFields
    int getUnReadCount() -> getUnReadCount
    void setUnReadCount(int) -> setUnReadCount
    int getStatus() -> getStatus
    void setStatus(int) -> setStatus
    int getIsSend() -> getIsSend
    void setIsSend(int) -> setIsSend
    int getChatmode() -> getChatmode
    void setChatmode(int) -> setChatmode
    long getConversationTime() -> getConversationTime
    void setConversationTime(long) -> setConversationTime
    java.lang.String getUsername() -> getUsername
    void setUsername(java.lang.String) -> setUsername
    java.lang.String getCustomNotify() -> getCustomNotify
    void setCustomNotify(java.lang.String) -> setCustomNotify
    java.lang.String getContent() -> getContent
    void setContent(java.lang.String) -> setContent
    java.lang.String getMsgType() -> getMsgType
    void setMsgType(java.lang.String) -> setMsgType
    int getShowTips() -> getShowTips
    void setShowTips(int) -> setShowTips
    long getFlag() -> getFlag
    void setFlag(long) -> setFlag
com.tencent.mm.sdk.conversation.RConversationDB -> com.tencent.mm.sdk.conversation.RConversationDB:
    java.util.Map O -> O
    android.net.Uri getUriFromTable(java.lang.String) -> getUriFromTable
com.tencent.mm.sdk.conversation.RConversationStorage -> com.tencent.mm.sdk.conversation.RConversationStorage:
    java.lang.String AUTHORITY -> AUTHORITY
    java.lang.String TABLE -> TABLE
    java.lang.String PRIMARY_KEY -> PRIMARY_KEY
    com.tencent.mm.sdk.conversation.RConversationStorage create(android.content.Context) -> create
    java.lang.String getTableName() -> getTableName
    java.lang.String getPrimaryKey() -> getPrimaryKey
    java.lang.String[] getColumns() -> getColumns
    com.tencent.mm.sdk.conversation.RConversation get(java.lang.String) -> get
com.tencent.mm.sdk.conversation.package-info -> com.tencent.mm.sdk.conversation.package-info:
com.tencent.mm.sdk.message.RMsgInfo -> com.tencent.mm.sdk.message.RMsgInfo:
    java.lang.reflect.Field[] p -> p
    java.lang.String[] COLUMNS -> COLUMNS
    long field_msgId -> field_msgId
    int field_msgSvrId -> field_msgSvrId
    int field_type -> field_type
    int field_status -> field_status
    int field_isSend -> field_isSend
    int field_isShowTimer -> field_isShowTimer
    long field_createTime -> field_createTime
    java.lang.String field_talker -> field_talker
    java.lang.String field_content -> field_content
    java.lang.String field_imgPath -> field_imgPath
    java.lang.String field_reserved -> field_reserved
    byte[] field_lvBuffer -> field_lvBuffer
    java.lang.String commentUrl -> commentUrl
    java.lang.String COL_ID -> COL_ID
    java.lang.String COL_ID_SVR -> COL_ID_SVR
    java.lang.String COL_TYPE -> COL_TYPE
    java.lang.String COL_STATUS -> COL_STATUS
    java.lang.String COL_IS_SEND -> COL_IS_SEND
    java.lang.String COL_IS_SHOWTIMER -> COL_IS_SHOWTIMER
    java.lang.String COL_CREATE_TIME -> COL_CREATE_TIME
    java.lang.String COL_TALKER -> COL_TALKER
    java.lang.String COL_CONTENT -> COL_CONTENT
    java.lang.String COL_IMG_PATH -> COL_IMG_PATH
    java.lang.String COL_RESERVED -> COL_RESERVED
    java.lang.String COL_LVBUFFER -> COL_LVBUFFER
    java.lang.reflect.Field[] fields() -> fields
com.tencent.mm.sdk.message.RMsgInfoDB -> com.tencent.mm.sdk.message.RMsgInfoDB:
    java.util.Map O -> O
    java.lang.String TABLE -> TABLE
    android.net.Uri getUriFromTable(java.lang.String) -> getUriFromTable
com.tencent.mm.sdk.message.RMsgInfoStorage -> com.tencent.mm.sdk.message.RMsgInfoStorage:
    java.lang.String AUTHORITY -> AUTHORITY
    java.lang.String PRIMARY_KEY -> PRIMARY_KEY
    com.tencent.mm.sdk.storage.ISQLiteDatabase P -> P
    com.tencent.mm.sdk.message.RMsgInfoStorage create(android.content.Context) -> create
    long doInsert(com.tencent.mm.sdk.message.RMsgInfo) -> doInsert
    int doDelete(long) -> doDelete
    int doUpdate(long,com.tencent.mm.sdk.message.RMsgInfo) -> doUpdate
    com.tencent.mm.sdk.message.RMsgInfo getMsgById(long) -> getMsgById
    android.database.Cursor getMsgByTalker(java.lang.String) -> getMsgByTalker
com.tencent.mm.sdk.openapi.BaseReq -> com.tencent.mm.sdk.openapi.BaseReq:
    java.lang.String transaction -> transaction
    int getType() -> getType
    void toBundle(android.os.Bundle) -> toBundle
    void fromBundle(android.os.Bundle) -> fromBundle
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.BaseResp -> com.tencent.mm.sdk.openapi.BaseResp:
    int errCode -> errCode
    java.lang.String errStr -> errStr
    java.lang.String transaction -> transaction
    int getType() -> getType
    void toBundle(android.os.Bundle) -> toBundle
    void fromBundle(android.os.Bundle) -> fromBundle
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.BaseResp$ErrCode -> com.tencent.mm.sdk.openapi.BaseResp$ErrCode:
    int ERR_OK -> ERR_OK
    int ERR_COMM -> ERR_COMM
    int ERR_USER_CANCEL -> ERR_USER_CANCEL
    int ERR_SENT_FAILED -> ERR_SENT_FAILED
    int ERR_AUTH_DENIED -> ERR_AUTH_DENIED
    int ERR_UNSUPPORT -> ERR_UNSUPPORT
com.tencent.mm.sdk.openapi.ConstantsAPI -> com.tencent.mm.sdk.openapi.ConstantsAPI:
    java.lang.String ACTION_HANDLE_APP_REGISTER -> ACTION_HANDLE_APP_REGISTER
    java.lang.String ACTION_HANDLE_APP_UNREGISTER -> ACTION_HANDLE_APP_UNREGISTER
    java.lang.String ACTION_REFRESH_WXAPP -> ACTION_REFRESH_WXAPP
    int COMMAND_UNKNOWN -> COMMAND_UNKNOWN
    int COMMAND_SENDAUTH -> COMMAND_SENDAUTH
    int COMMAND_SENDMESSAGE_TO_WX -> COMMAND_SENDMESSAGE_TO_WX
    int COMMAND_GETMESSAGE_FROM_WX -> COMMAND_GETMESSAGE_FROM_WX
    int COMMAND_SHOWMESSAGE_FROM_WX -> COMMAND_SHOWMESSAGE_FROM_WX
    java.lang.String WX_TOKEN_KEY -> WX_TOKEN_KEY
    java.lang.String WX_TOKEN_VALUE -> WX_TOKEN_VALUE
com.tencent.mm.sdk.openapi.GetMessageFromWX -> com.tencent.mm.sdk.openapi.GetMessageFromWX:
com.tencent.mm.sdk.openapi.GetMessageFromWX$Req -> com.tencent.mm.sdk.openapi.GetMessageFromWX$Req:
    java.lang.String username -> username
    int getType() -> getType
    void toBundle(android.os.Bundle) -> toBundle
    void fromBundle(android.os.Bundle) -> fromBundle
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.GetMessageFromWX$Resp -> com.tencent.mm.sdk.openapi.GetMessageFromWX$Resp:
    com.tencent.mm.sdk.openapi.WXMediaMessage message -> message
    int getType() -> getType
    void fromBundle(android.os.Bundle) -> fromBundle
    void toBundle(android.os.Bundle) -> toBundle
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.IWXAPI -> com.tencent.mm.sdk.openapi.IWXAPI:
    boolean registerApp(java.lang.String) -> registerApp
    void unregisterApp() -> unregisterApp
    boolean handleIntent(android.content.Intent,com.tencent.mm.sdk.openapi.IWXAPIEventHandler) -> handleIntent
    boolean isWXAppInstalled() -> isWXAppInstalled
    boolean isWXAppSupportAPI() -> isWXAppSupportAPI
    int getWXAppSupportAPI() -> getWXAppSupportAPI
    boolean openWXApp() -> openWXApp
    boolean sendReq(com.tencent.mm.sdk.openapi.BaseReq) -> sendReq
    boolean sendResp(com.tencent.mm.sdk.openapi.BaseResp) -> sendResp
com.tencent.mm.sdk.openapi.IWXAPIEventHandler -> com.tencent.mm.sdk.openapi.IWXAPIEventHandler:
    void onReq(com.tencent.mm.sdk.openapi.BaseReq) -> onReq
    void onResp(com.tencent.mm.sdk.openapi.BaseResp) -> onResp
com.tencent.mm.sdk.openapi.SendAuth -> com.tencent.mm.sdk.openapi.SendAuth:
com.tencent.mm.sdk.openapi.SendAuth$Req -> com.tencent.mm.sdk.openapi.SendAuth$Req:
    java.lang.String scope -> scope
    java.lang.String state -> state
    int getType() -> getType
    void fromBundle(android.os.Bundle) -> fromBundle
    void toBundle(android.os.Bundle) -> toBundle
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.SendAuth$Resp -> com.tencent.mm.sdk.openapi.SendAuth$Resp:
    java.lang.String userName -> userName
    java.lang.String token -> token
    int expireDate -> expireDate
    java.lang.String state -> state
    java.lang.String resultUrl -> resultUrl
    int getType() -> getType
    void fromBundle(android.os.Bundle) -> fromBundle
    void toBundle(android.os.Bundle) -> toBundle
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.SendMessageToWX -> com.tencent.mm.sdk.openapi.SendMessageToWX:
com.tencent.mm.sdk.openapi.SendMessageToWX$Req -> com.tencent.mm.sdk.openapi.SendMessageToWX$Req:
    int WXSceneSession -> WXSceneSession
    int WXSceneTimeline -> WXSceneTimeline
    com.tencent.mm.sdk.openapi.WXMediaMessage message -> message
    int scene -> scene
    int getType() -> getType
    void fromBundle(android.os.Bundle) -> fromBundle
    void toBundle(android.os.Bundle) -> toBundle
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.SendMessageToWX$Resp -> com.tencent.mm.sdk.openapi.SendMessageToWX$Resp:
    int getType() -> getType
    void fromBundle(android.os.Bundle) -> fromBundle
    void toBundle(android.os.Bundle) -> toBundle
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.ShowMessageFromWX -> com.tencent.mm.sdk.openapi.ShowMessageFromWX:
com.tencent.mm.sdk.openapi.ShowMessageFromWX$Req -> com.tencent.mm.sdk.openapi.ShowMessageFromWX$Req:
    com.tencent.mm.sdk.openapi.WXMediaMessage message -> message
    int getType() -> getType
    void toBundle(android.os.Bundle) -> toBundle
    void fromBundle(android.os.Bundle) -> fromBundle
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.ShowMessageFromWX$Resp -> com.tencent.mm.sdk.openapi.ShowMessageFromWX$Resp:
    int getType() -> getType
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.WXAPIFactory -> com.tencent.mm.sdk.openapi.WXAPIFactory:
    com.tencent.mm.sdk.openapi.WXAPIFactory Q -> Q
    com.tencent.mm.sdk.openapi.IWXAPI createWXAPI(android.content.Context,java.lang.String) -> createWXAPI
    com.tencent.mm.sdk.openapi.IWXAPI createWXAPI(android.content.Context,java.lang.String,boolean) -> createWXAPI
com.tencent.mm.sdk.openapi.WXApiImplV10 -> com.tencent.mm.sdk.openapi.WXApiImplV10:
    android.content.Context R -> R
    java.lang.String S -> S
    boolean T -> T
    boolean registerApp(java.lang.String) -> registerApp
    void unregisterApp() -> unregisterApp
    boolean handleIntent(android.content.Intent,com.tencent.mm.sdk.openapi.IWXAPIEventHandler) -> handleIntent
    boolean isWXAppInstalled() -> isWXAppInstalled
    boolean isWXAppSupportAPI() -> isWXAppSupportAPI
    int getWXAppSupportAPI() -> getWXAppSupportAPI
    boolean openWXApp() -> openWXApp
    boolean sendReq(com.tencent.mm.sdk.openapi.BaseReq) -> sendReq
    boolean sendResp(com.tencent.mm.sdk.openapi.BaseResp) -> sendResp
    boolean a(java.lang.String) -> a
    boolean a(android.content.pm.Signature[]) -> a
    boolean a(byte[],byte[]) -> a
com.tencent.mm.sdk.openapi.WXAppExtendObject -> com.tencent.mm.sdk.openapi.WXAppExtendObject:
    java.lang.String extInfo -> extInfo
    java.lang.String filePath -> filePath
    byte[] fileData -> fileData
    void serialize(android.os.Bundle) -> serialize
    void unserialize(android.os.Bundle) -> unserialize
    int type() -> type
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.WXAppLaunchData -> com.tencent.mm.sdk.openapi.WXAppLaunchData:
    java.lang.String ACTION_HANDLE_WXAPPLAUNCH -> ACTION_HANDLE_WXAPPLAUNCH
    java.lang.String ACTION_HANDLE_WXAPP_RESULT -> ACTION_HANDLE_WXAPP_RESULT
    java.lang.String ACTION_HANDLE_WXAPP_SHOW -> ACTION_HANDLE_WXAPP_SHOW
    int launchType -> launchType
    java.lang.String message -> message
com.tencent.mm.sdk.openapi.WXAppLaunchData$Builder -> com.tencent.mm.sdk.openapi.WXAppLaunchData$Builder:
    com.tencent.mm.sdk.openapi.WXAppLaunchData fromBundle(android.os.Bundle) -> fromBundle
    android.os.Bundle toBundle(com.tencent.mm.sdk.openapi.WXAppLaunchData) -> toBundle
com.tencent.mm.sdk.openapi.WXEmojiObject -> com.tencent.mm.sdk.openapi.WXEmojiObject:
    byte[] emojiData -> emojiData
    java.lang.String emojiPath -> emojiPath
    void setEmojiData(byte[]) -> setEmojiData
    void setEmojiPath(java.lang.String) -> setEmojiPath
    void serialize(android.os.Bundle) -> serialize
    void unserialize(android.os.Bundle) -> unserialize
    int type() -> type
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.WXFileObject -> com.tencent.mm.sdk.openapi.WXFileObject:
    byte[] fileData -> fileData
    java.lang.String filePath -> filePath
    void setFileData(byte[]) -> setFileData
    void setFilePath(java.lang.String) -> setFilePath
    void serialize(android.os.Bundle) -> serialize
    void unserialize(android.os.Bundle) -> unserialize
    int type() -> type
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.WXImageObject -> com.tencent.mm.sdk.openapi.WXImageObject:
    byte[] imageData -> imageData
    java.lang.String imagePath -> imagePath
    java.lang.String imageUrl -> imageUrl
    void setImagePath(java.lang.String) -> setImagePath
    void serialize(android.os.Bundle) -> serialize
    void unserialize(android.os.Bundle) -> unserialize
    int type() -> type
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.WXMediaMessage -> com.tencent.mm.sdk.openapi.WXMediaMessage:
    java.lang.String ACTION_WXAPPMESSAGE -> ACTION_WXAPPMESSAGE
    int sdkVer -> sdkVer
    java.lang.String title -> title
    java.lang.String description -> description
    byte[] thumbData -> thumbData
    com.tencent.mm.sdk.openapi.WXMediaMessage$IMediaObject mediaObject -> mediaObject
    int getType() -> getType
    void setThumbImage(android.graphics.Bitmap) -> setThumbImage
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.WXMediaMessage$Builder -> com.tencent.mm.sdk.openapi.WXMediaMessage$Builder:
    java.lang.String KEY_IDENTIFIER -> KEY_IDENTIFIER
    android.os.Bundle toBundle(com.tencent.mm.sdk.openapi.WXMediaMessage) -> toBundle
    com.tencent.mm.sdk.openapi.WXMediaMessage fromBundle(android.os.Bundle) -> fromBundle
com.tencent.mm.sdk.openapi.WXMediaMessage$IMediaObject -> com.tencent.mm.sdk.openapi.WXMediaMessage$IMediaObject:
    int TYPE_UNKNOWN -> TYPE_UNKNOWN
    int TYPE_TEXT -> TYPE_TEXT
    int TYPE_IMAGE -> TYPE_IMAGE
    int TYPE_MUSIC -> TYPE_MUSIC
    int TYPE_VIDEO -> TYPE_VIDEO
    int TYPE_URL -> TYPE_URL
    int TYPE_FILE -> TYPE_FILE
    int TYPE_APPDATA -> TYPE_APPDATA
    int TYPE_EMOJI -> TYPE_EMOJI
    void serialize(android.os.Bundle) -> serialize
    void unserialize(android.os.Bundle) -> unserialize
    int type() -> type
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.WXMusicObject -> com.tencent.mm.sdk.openapi.WXMusicObject:
    java.lang.String musicUrl -> musicUrl
    java.lang.String musicLowBandUrl -> musicLowBandUrl
    void serialize(android.os.Bundle) -> serialize
    void unserialize(android.os.Bundle) -> unserialize
    int type() -> type
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.WXTextObject -> com.tencent.mm.sdk.openapi.WXTextObject:
    java.lang.String text -> text
    void serialize(android.os.Bundle) -> serialize
    void unserialize(android.os.Bundle) -> unserialize
    int type() -> type
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.WXVideoObject -> com.tencent.mm.sdk.openapi.WXVideoObject:
    java.lang.String videoUrl -> videoUrl
    java.lang.String videoLowBandUrl -> videoLowBandUrl
    void serialize(android.os.Bundle) -> serialize
    void unserialize(android.os.Bundle) -> unserialize
    int type() -> type
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.WXWebpageObject -> com.tencent.mm.sdk.openapi.WXWebpageObject:
    java.lang.String webpageUrl -> webpageUrl
    void serialize(android.os.Bundle) -> serialize
    void unserialize(android.os.Bundle) -> unserialize
    int type() -> type
    boolean checkArgs() -> checkArgs
com.tencent.mm.sdk.openapi.package-info -> com.tencent.mm.sdk.openapi.package-info:
com.tencent.mm.sdk.package-info -> com.tencent.mm.sdk.package-info:
com.tencent.mm.sdk.platformtools.AnimationHelperImpl21below -> com.tencent.mm.sdk.platformtools.AnimationHelperImpl21below:
    void cancelAnimation(android.view.View,android.view.animation.Animation) -> cancelAnimation
com.tencent.mm.sdk.platformtools.AnimationHelperImpl22 -> com.tencent.mm.sdk.platformtools.AnimationHelperImpl22:
    void cancelAnimation(android.view.View,android.view.animation.Animation) -> cancelAnimation
com.tencent.mm.sdk.platformtools.BackwardSupportUtil -> com.tencent.mm.sdk.platformtools.BackwardSupportUtil:
com.tencent.mm.sdk.platformtools.BackwardSupportUtil$AnimationHelper -> com.tencent.mm.sdk.platformtools.BackwardSupportUtil$AnimationHelper:
    void cancelAnimation(android.view.View,android.view.animation.Animation) -> cancelAnimation
    void overridePendingTransition(android.app.Activity,int,int) -> overridePendingTransition
com.tencent.mm.sdk.platformtools.BackwardSupportUtil$AnimationHelper$IHelper -> com.tencent.mm.sdk.platformtools.BackwardSupportUtil$AnimationHelper$IHelper:
    void cancelAnimation(android.view.View,android.view.animation.Animation) -> cancelAnimation
com.tencent.mm.sdk.platformtools.BackwardSupportUtil$BitmapFactory -> com.tencent.mm.sdk.platformtools.BackwardSupportUtil$BitmapFactory:
    android.graphics.Bitmap decodeFile(java.lang.String,float) -> decodeFile
    int fromDPToPix(android.content.Context,float) -> fromDPToPix
    android.graphics.Bitmap decodeStream(java.io.InputStream) -> decodeStream
    android.graphics.Bitmap decodeStream(java.io.InputStream,float) -> decodeStream
    java.lang.String getDisplayDensityType(android.content.Context) -> getDisplayDensityType
    android.graphics.Bitmap getBitmapFromURL(java.lang.String) -> getBitmapFromURL
com.tencent.mm.sdk.platformtools.BackwardSupportUtil$ExifHelper -> com.tencent.mm.sdk.platformtools.BackwardSupportUtil$ExifHelper:
    int getExifOrientation(java.lang.String) -> getExifOrientation
com.tencent.mm.sdk.platformtools.BackwardSupportUtil$SmoothScrollFactory -> com.tencent.mm.sdk.platformtools.BackwardSupportUtil$SmoothScrollFactory:
    void scrollToTop(android.widget.ListView) -> scrollToTop
    void scrollTo(android.widget.ListView,int) -> scrollTo
com.tencent.mm.sdk.platformtools.BackwardSupportUtil$SmoothScrollFactory$IScroll -> com.tencent.mm.sdk.platformtools.BackwardSupportUtil$SmoothScrollFactory$IScroll:
    void doScroll(android.widget.ListView) -> doScroll
    void doScroll(android.widget.ListView,int) -> doScroll
com.tencent.mm.sdk.platformtools.ChannelUtil -> com.tencent.mm.sdk.platformtools.ChannelUtil:
    int FLAG_UPDATE_EXTERNAL -> FLAG_UPDATE_EXTERNAL
    int FLAG_UPDATE_NOTIP -> FLAG_UPDATE_NOTIP
    int FLAG_NULL -> FLAG_NULL
    int channelId -> channelId
    java.lang.String profileDeviceType -> profileDeviceType
    int updateMode -> updateMode
    int buildRev -> buildRev
    java.lang.String marketURL -> marketURL
    boolean fullVersionInfo -> fullVersionInfo
    void setupChannelId(android.content.Context) -> setupChannelId
    void loadProfile(android.content.Context) -> loadProfile
    java.lang.String formatVersion(android.content.Context,int) -> formatVersion
com.tencent.mm.sdk.platformtools.CharSequences -> com.tencent.mm.sdk.platformtools.CharSequences:
    java.lang.CharSequence forAsciiBytes(byte[]) -> forAsciiBytes
    java.lang.CharSequence forAsciiBytes(byte[],int,int) -> forAsciiBytes
    void a(int,int,int) -> a
    boolean equals(java.lang.CharSequence,java.lang.CharSequence) -> equals
    int compareToIgnoreCase(java.lang.CharSequence,java.lang.CharSequence) -> compareToIgnoreCase
com.tencent.mm.sdk.platformtools.CharSequences$1 -> com.tencent.mm.sdk.platformtools.CharSequences$1:
    byte[] U -> U
    char charAt(int) -> charAt
    int length() -> length
    java.lang.CharSequence subSequence(int,int) -> subSequence
    java.lang.String toString() -> toString
com.tencent.mm.sdk.platformtools.CharSequences$2 -> com.tencent.mm.sdk.platformtools.CharSequences$2:
    byte[] U -> U
    int V -> V
    int W -> W
    char charAt(int) -> charAt
    int length() -> length
    java.lang.CharSequence subSequence(int,int) -> subSequence
    java.lang.String toString() -> toString
com.tencent.mm.sdk.platformtools.InetUtil -> com.tencent.mm.sdk.platformtools.InetUtil:
    java.util.regex.Pattern X -> X
    java.util.regex.Pattern Y -> Y
    java.util.regex.Pattern Z -> Z
    boolean isIPv4Address(java.lang.String) -> isIPv4Address
    boolean isIPv6StdAddress(java.lang.String) -> isIPv6StdAddress
    boolean isIPv6HexCompressedAddress(java.lang.String) -> isIPv6HexCompressedAddress
    boolean isIPv6Address(java.lang.String) -> isIPv6Address
    java.net.InetAddress getByDottedAddress(java.lang.String) -> getByDottedAddress
com.tencent.mm.sdk.platformtools.KVConfig -> com.tencent.mm.sdk.platformtools.KVConfig:
    boolean aa -> aa
    java.util.Map parseIni(java.lang.String) -> parseIni
    java.util.Map parseXml(java.lang.String,java.lang.String,java.lang.String) -> parseXml
    void a(java.util.Map,java.lang.String,org.w3c.dom.Node,int) -> a
    void a(java.util.Map) -> a
com.tencent.mm.sdk.platformtools.LBSManager -> com.tencent.mm.sdk.platformtools.LBSManager:
    java.lang.String FILTER_GPS -> FILTER_GPS
    float INVALID_LAT -> INVALID_LAT
    float INVALID_LNG -> INVALID_LNG
    int INVALID_ACC -> INVALID_ACC
    int MM_SOURCE_HARDWARE -> MM_SOURCE_HARDWARE
    int MM_SOURCE_NET -> MM_SOURCE_NET
    int MM_SOURCE_REPORT_HARWARE -> MM_SOURCE_REPORT_HARWARE
    int MM_SOURCE_REPORT_NETWORK -> MM_SOURCE_REPORT_NETWORK
    com.tencent.mm.sdk.platformtools.LBSManager$LocationCache ab -> ab
    com.tencent.mm.sdk.platformtools.LBSManager$OnLocationGotListener ac -> ac
    android.location.LocationManager ad -> ad
    android.content.Context R -> R
    android.app.PendingIntent ae -> ae
    boolean af -> af
    boolean ag -> ag
    boolean ah -> ah
    boolean ai -> ai
    int aj -> aj
    com.tencent.mm.sdk.platformtools.MTimerHandler ak -> ak
    boolean b() -> b
    void start() -> start
    boolean isGpsEnable() -> isGpsEnable
    boolean isNetworkPrividerEnable() -> isNetworkPrividerEnable
    void removeGpsUpdate() -> removeGpsUpdate
    void requestGpsUpdate() -> requestGpsUpdate
    void removeListener() -> removeListener
    void c() -> c
    java.lang.String getTelLocation() -> getTelLocation
    java.lang.String getWIFILocation() -> getWIFILocation
    void setLocationCache(float,float,int,int) -> setLocationCache
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    boolean a(com.tencent.mm.sdk.platformtools.LBSManager) -> a
com.tencent.mm.sdk.platformtools.LBSManager$1 -> com.tencent.mm.sdk.platformtools.LBSManager$1:
    com.tencent.mm.sdk.platformtools.LBSManager al -> al
    boolean onTimerExpired() -> onTimerExpired
com.tencent.mm.sdk.platformtools.LBSManager$LocationCache -> com.tencent.mm.sdk.platformtools.LBSManager$LocationCache:
    float am -> am
    float an -> an
    int ao -> ao
    long time -> time
    int I -> I
com.tencent.mm.sdk.platformtools.LBSManager$OnLocationGotListener -> com.tencent.mm.sdk.platformtools.LBSManager$OnLocationGotListener:
    void onLocationGot(float,float,int,int,java.lang.String,java.lang.String,boolean) -> onLocationGot
com.tencent.mm.sdk.platformtools.LVBuffer -> com.tencent.mm.sdk.platformtools.LVBuffer:
    int LENGTH_ALLOC_PER_NEW -> LENGTH_ALLOC_PER_NEW
    int MAX_STRING_LENGTH -> MAX_STRING_LENGTH
    java.nio.ByteBuffer ap -> ap
    boolean aq -> aq
    int initParse(byte[]) -> initParse
    int getInt() -> getInt
    long getLong() -> getLong
    java.lang.String getString() -> getString
    boolean checkGetFinish() -> checkGetFinish
    int initBuild() -> initBuild
    int a(int) -> a
    int putInt(int) -> putInt
    int putLong(long) -> putLong
    int putString(java.lang.String) -> putString
    byte[] buildFinish() -> buildFinish
com.tencent.mm.sdk.platformtools.LocaleUtil -> com.tencent.mm.sdk.platformtools.LocaleUtil:
    java.lang.String LANGUAGE_DEFAULT -> LANGUAGE_DEFAULT
    java.lang.String LANGUAGE_KEY -> LANGUAGE_KEY
    java.lang.String TAIWAN -> TAIWAN
    java.lang.String HONGKONG -> HONGKONG
    java.lang.String CHINA -> CHINA
    java.lang.String ENGLISH -> ENGLISH
    java.lang.String THAI -> THAI
    java.lang.String INDONESIAN -> INDONESIAN
    java.lang.String VIETNAMESE -> VIETNAMESE
    java.lang.String PORTUGUESE -> PORTUGUESE
    java.lang.String SPANISH -> SPANISH
    java.lang.String RUSSIAN -> RUSSIAN
    java.lang.String ARABIC -> ARABIC
    java.lang.String HEBREW -> HEBREW
    java.lang.String POLISH -> POLISH
    java.lang.String HINDI -> HINDI
    java.lang.String JAPANESE -> JAPANESE
    java.lang.String ITALIAN -> ITALIAN
    java.lang.String KOREAN -> KOREAN
    java.lang.String MALAY -> MALAY
    java.lang.String TURKEY -> TURKEY
    boolean isLanguageSupported(java.lang.String) -> isLanguageSupported
    void updateApplicationResourceLocale(android.content.Context,java.util.Locale) -> updateApplicationResourceLocale
    java.util.Locale transLanguageToLocale(java.lang.String) -> transLanguageToLocale
    java.lang.String getCurrentCountryCode() -> getCurrentCountryCode
    java.lang.String b(java.lang.String) -> b
    java.lang.String getApplicationLanguage() -> getApplicationLanguage
    java.lang.String loadApplicationLanguage(android.content.SharedPreferences,android.content.Context) -> loadApplicationLanguage
    java.lang.String loadApplicationLanguageSettings(android.content.SharedPreferences,android.content.Context) -> loadApplicationLanguageSettings
    void saveApplicationLanguage(android.content.SharedPreferences,android.content.Context,java.lang.String) -> saveApplicationLanguage
com.tencent.mm.sdk.platformtools.Log -> com.tencent.mm.sdk.platformtools.Log:
    int LEVEL_VERBOSE -> LEVEL_VERBOSE
    int LEVEL_DEBUG -> LEVEL_DEBUG
    int LEVEL_INFO -> LEVEL_INFO
    int LEVEL_WARNING -> LEVEL_WARNING
    int LEVEL_ERROR -> LEVEL_ERROR
    int LEVEL_FATAL -> LEVEL_FATAL
    int LEVEL_NONE -> LEVEL_NONE
    int level -> level
    java.io.PrintStream ar -> ar
    byte[] as -> as
    java.lang.String at -> at
    void setOutputPath(java.lang.String,java.lang.String,java.lang.String,int) -> setOutputPath
    void setOutputStream(java.io.InputStream,java.io.OutputStream,java.lang.String,java.lang.String,int) -> setOutputStream
    void reset() -> reset
    void setLevel(int,boolean) -> setLevel
    int getLevel() -> getLevel
    void f(java.lang.String,java.lang.String) -> f
    void e(java.lang.String,java.lang.String) -> e
    void w(java.lang.String,java.lang.String) -> w
    void i(java.lang.String,java.lang.String) -> i
    void d(java.lang.String,java.lang.String) -> d
    void v(java.lang.String,java.lang.String) -> v
    void f(java.lang.String,java.lang.String,java.lang.Object[]) -> f
    void e(java.lang.String,java.lang.String,java.lang.Object[]) -> e
    void w(java.lang.String,java.lang.String,java.lang.Object[]) -> w
    void i(java.lang.String,java.lang.String,java.lang.Object[]) -> i
    void d(java.lang.String,java.lang.String,java.lang.Object[]) -> d
    void v(java.lang.String,java.lang.String,java.lang.Object[]) -> v
    java.lang.String getSysInfo() -> getSysInfo
com.tencent.mm.sdk.platformtools.LogHelper -> com.tencent.mm.sdk.platformtools.LogHelper:
    byte[] au -> au
    void writeToStream(java.io.PrintStream,byte[],java.lang.String,java.lang.String) -> writeToStream
    void initLogHeader(java.io.PrintStream,java.lang.String,java.lang.String,long,int) -> initLogHeader
com.tencent.mm.sdk.platformtools.MAlarmHandler -> com.tencent.mm.sdk.platformtools.MAlarmHandler:
    int av -> av
    int aw -> aw
    boolean ax -> ax
    long ay -> ay
    long az -> az
    java.util.Map aA -> aA
    com.tencent.mm.sdk.platformtools.MAlarmHandler$CallBack aB -> aB
    com.tencent.mm.sdk.platformtools.MAlarmHandler$IBumper aC -> aC
    boolean aD -> aD
    long NEXT_FIRE_INTERVAL -> NEXT_FIRE_INTERVAL
    void initAlarmBumper(com.tencent.mm.sdk.platformtools.MAlarmHandler$IBumper) -> initAlarmBumper
    void finalize() -> finalize
    long fire() -> fire
    void startTimer(long) -> startTimer
    void stopTimer() -> stopTimer
    boolean stopped() -> stopped
com.tencent.mm.sdk.platformtools.MAlarmHandler$CallBack -> com.tencent.mm.sdk.platformtools.MAlarmHandler$CallBack:
    boolean onTimerExpired() -> onTimerExpired
com.tencent.mm.sdk.platformtools.MAlarmHandler$IBumper -> com.tencent.mm.sdk.platformtools.MAlarmHandler$IBumper:
    void prepare() -> prepare
    void cancel() -> cancel
com.tencent.mm.sdk.platformtools.MMApplicationContext -> com.tencent.mm.sdk.platformtools.MMApplicationContext:
    android.content.Context R -> R
    java.lang.String aE -> aE
    void setContext(android.content.Context) -> setContext
    android.content.Context getContext() -> getContext
    java.lang.String getPackageName() -> getPackageName
    java.lang.String getDefaultPreferencePath() -> getDefaultPreferencePath
com.tencent.mm.sdk.platformtools.MMEntryLock -> com.tencent.mm.sdk.platformtools.MMEntryLock:
    java.util.Set aF -> aF
    boolean lock(java.lang.String) -> lock
    void unlock(java.lang.String) -> unlock
    boolean isLocked(java.lang.String) -> isLocked
com.tencent.mm.sdk.platformtools.MTimerHandler -> com.tencent.mm.sdk.platformtools.MTimerHandler:
    int av -> av
    int aw -> aw
    boolean aG -> aG
    long aH -> aH
    com.tencent.mm.sdk.platformtools.MTimerHandler$CallBack aI -> aI
    int d() -> d
    void finalize() -> finalize
    void handleMessage(android.os.Message) -> handleMessage
    void startTimer(long) -> startTimer
    void stopTimer() -> stopTimer
    boolean stopped() -> stopped
com.tencent.mm.sdk.platformtools.MTimerHandler$CallBack -> com.tencent.mm.sdk.platformtools.MTimerHandler$CallBack:
    boolean onTimerExpired() -> onTimerExpired
com.tencent.mm.sdk.platformtools.NetStatusUtil -> com.tencent.mm.sdk.platformtools.NetStatusUtil:
    int NON_NETWORK -> NON_NETWORK
    int WIFI -> WIFI
    int UNINET -> UNINET
    int UNIWAP -> UNIWAP
    int WAP_3G -> WAP_3G
    int NET_3G -> NET_3G
    int CMWAP -> CMWAP
    int CMNET -> CMNET
    int CTWAP -> CTWAP
    int CTNET -> CTNET
    int MOBILE -> MOBILE
    int LTE -> LTE
    int POLICY_NONE -> POLICY_NONE
    int POLICY_REJECT_METERED_BACKGROUND -> POLICY_REJECT_METERED_BACKGROUND
    int TBACKGROUND_NOT_LIMITED -> TBACKGROUND_NOT_LIMITED
    int TBACKGROUND_PROCESS_LIMITED -> TBACKGROUND_PROCESS_LIMITED
    int TBACKGROUND_DATA_LIMITED -> TBACKGROUND_DATA_LIMITED
    int TBACKGROUND_WIFI_LIMITED -> TBACKGROUND_WIFI_LIMITED
    void dumpNetStatus(android.content.Context) -> dumpNetStatus
    boolean isConnected(android.content.Context) -> isConnected
    java.lang.String getNetTypeString(android.content.Context) -> getNetTypeString
    int getNetType(android.content.Context) -> getNetType
    boolean is2G(android.content.Context) -> is2G
    boolean is4G(android.content.Context) -> is4G
    boolean isWap(android.content.Context) -> isWap
    boolean isWap(int) -> isWap
    boolean is2G(int) -> is2G
    boolean is4G(int) -> is4G
    boolean is3G(int) -> is3G
    boolean isMobile(android.content.Context) -> isMobile
    boolean isMobile(int) -> isMobile
    boolean is3G(android.content.Context) -> is3G
    boolean isWifi(android.content.Context) -> isWifi
    boolean isWifi(int) -> isWifi
    android.content.Intent a(android.content.Context,java.lang.String) -> a
    void startSettingItent(android.content.Context,int) -> startSettingItent
    int getWifiSleeepPolicy(android.content.Context) -> getWifiSleeepPolicy
    boolean isLimited(int) -> isLimited
    int getBackgroundLimitType(android.content.Context) -> getBackgroundLimitType
    boolean isRestrictBacground(android.content.Context) -> isRestrictBacground
    boolean isImmediatelyDestroyActivities(android.content.Context) -> isImmediatelyDestroyActivities
    boolean checkFromXml(int) -> checkFromXml
    boolean runRootCommand() -> runRootCommand
com.tencent.mm.sdk.platformtools.PhoneUtil -> com.tencent.mm.sdk.platformtools.PhoneUtil:
    java.lang.String CELL_GSM -> CELL_GSM
    java.lang.String CELL_CDMA -> CELL_CDMA
    int aJ -> aJ
    java.lang.String getMacXml(java.util.List) -> getMacXml
    java.lang.String getCellXml(java.util.List) -> getCellXml
    void getSignalStrength(android.content.Context) -> getSignalStrength
    java.util.List getCellInfoList(android.content.Context) -> getCellInfoList
com.tencent.mm.sdk.platformtools.PhoneUtil$CellInfo -> com.tencent.mm.sdk.platformtools.PhoneUtil$CellInfo:
    int MAX_CID -> MAX_CID
    int MAX_LAC -> MAX_LAC
    java.lang.String mcc -> mcc
    java.lang.String mnc -> mnc
    java.lang.String lac -> lac
    java.lang.String cellid -> cellid
    java.lang.String type -> type
    java.lang.String stationId -> stationId
    java.lang.String networkId -> networkId
    java.lang.String systemId -> systemId
    java.lang.String dbm -> dbm
com.tencent.mm.sdk.platformtools.PhoneUtil$MacInfo -> com.tencent.mm.sdk.platformtools.PhoneUtil$MacInfo:
    java.lang.String mac -> mac
    java.lang.String dbm -> dbm
com.tencent.mm.sdk.platformtools.PhoneUtil16Impl -> com.tencent.mm.sdk.platformtools.PhoneUtil16Impl:
    int aK -> aK
    int aL -> aL
    android.telephony.TelephonyManager aM -> aM
    android.telephony.PhoneStateListener aN -> aN
    void getSignalStrength(android.content.Context) -> getSignalStrength
    java.util.List getCellInfoList(android.content.Context) -> getCellInfoList
    int b(int) -> b
    android.telephony.TelephonyManager a(com.tencent.mm.sdk.platformtools.PhoneUtil16Impl) -> a
    android.telephony.PhoneStateListener b(com.tencent.mm.sdk.platformtools.PhoneUtil16Impl) -> b
com.tencent.mm.sdk.platformtools.PhoneUtil16Impl$1 -> com.tencent.mm.sdk.platformtools.PhoneUtil16Impl$1:
    com.tencent.mm.sdk.platformtools.PhoneUtil16Impl aO -> aO
    void onSignalStrengthChanged(int) -> onSignalStrengthChanged
com.tencent.mm.sdk.platformtools.PhoneUtil20Impl -> com.tencent.mm.sdk.platformtools.PhoneUtil20Impl:
    int aK -> aK
    int aL -> aL
    android.telephony.TelephonyManager aM -> aM
    int aP -> aP
    android.telephony.PhoneStateListener aN -> aN
    void getSignalStrength(android.content.Context) -> getSignalStrength
    java.util.List getCellInfoList(android.content.Context) -> getCellInfoList
    int a(com.tencent.mm.sdk.platformtools.PhoneUtil20Impl) -> a
    int c(int) -> c
    android.telephony.TelephonyManager b(com.tencent.mm.sdk.platformtools.PhoneUtil20Impl) -> b
    android.telephony.PhoneStateListener c(com.tencent.mm.sdk.platformtools.PhoneUtil20Impl) -> c
com.tencent.mm.sdk.platformtools.PhoneUtil20Impl$1 -> com.tencent.mm.sdk.platformtools.PhoneUtil20Impl$1:
    com.tencent.mm.sdk.platformtools.PhoneUtil20Impl aQ -> aQ
    void onSignalStrengthsChanged(android.telephony.SignalStrength) -> onSignalStrengthsChanged
com.tencent.mm.sdk.platformtools.SensorController -> com.tencent.mm.sdk.platformtools.SensorController:
    float aR -> aR
    android.hardware.SensorManager aS -> aS
    float aT -> aT
    float aU -> aU
    com.tencent.mm.sdk.platformtools.SensorController$SensorEventCallBack aV -> aV
    android.hardware.Sensor aW -> aW
    boolean aX -> aX
    boolean aY -> aY
    boolean aZ -> aZ
    void setSensorCallBack(com.tencent.mm.sdk.platformtools.SensorController$SensorEventCallBack) -> setSensorCallBack
    void removeSensorCallBack() -> removeSensorCallBack
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    boolean isSensorEnable() -> isSensorEnable
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.tencent.mm.sdk.platformtools.SensorController$SensorEventCallBack -> com.tencent.mm.sdk.platformtools.SensorController$SensorEventCallBack:
    void onSensorEvent(boolean) -> onSensorEvent
com.tencent.mm.sdk.platformtools.SmoothScrollToPosition21below -> com.tencent.mm.sdk.platformtools.SmoothScrollToPosition21below:
    void doScroll(android.widget.ListView) -> doScroll
    void doScroll(android.widget.ListView,int) -> doScroll
com.tencent.mm.sdk.platformtools.SmoothScrollToPosition22 -> com.tencent.mm.sdk.platformtools.SmoothScrollToPosition22:
    void doScroll(android.widget.ListView) -> doScroll
    void doScroll(android.widget.ListView,int) -> doScroll
com.tencent.mm.sdk.platformtools.SyncTask -> com.tencent.mm.sdk.platformtools.SyncTask:
    java.lang.Object result -> result
    java.lang.Object lock -> lock
    long ba -> ba
    long bb -> bb
    long bc -> bc
    java.lang.Runnable bd -> bd
    void setResult(java.lang.Object) -> setResult
    java.lang.Object exec(android.os.Handler) -> exec
    java.lang.Object run() -> run
    long a(com.tencent.mm.sdk.platformtools.SyncTask,long) -> a
    long a(com.tencent.mm.sdk.platformtools.SyncTask) -> a
com.tencent.mm.sdk.platformtools.SyncTask$1 -> com.tencent.mm.sdk.platformtools.SyncTask$1:
    com.tencent.mm.sdk.platformtools.SyncTask be -> be
    void run() -> run
com.tencent.mm.sdk.platformtools.SystemProperty -> com.tencent.mm.sdk.platformtools.SystemProperty:
    java.util.HashMap bf -> bf
    java.lang.String getProperty(java.lang.String) -> getProperty
    void setProperty(java.lang.String,java.lang.String) -> setProperty
com.tencent.mm.sdk.platformtools.TimeLogger -> com.tencent.mm.sdk.platformtools.TimeLogger:
    java.lang.String bg -> bg
    java.lang.String bh -> bh
    boolean bi -> bi
    java.util.ArrayList bj -> bj
    java.util.ArrayList bk -> bk
    void reset(java.lang.String,java.lang.String) -> reset
    void reset() -> reset
    void addSplit(java.lang.String) -> addSplit
    void dumpToLog() -> dumpToLog
com.tencent.mm.sdk.platformtools.TrafficStats -> com.tencent.mm.sdk.platformtools.TrafficStats:
    long bl -> bl
    long bm -> bm
    long bn -> bn
    long bo -> bo
    long bp -> bp
    long bq -> bq
    long br -> br
    long bs -> bs
    java.lang.String DEV_FILE -> DEV_FILE
    java.lang.String GPRSLINE -> GPRSLINE
    java.lang.String WIFILINE -> WIFILINE
    long getWifiTx(long) -> getWifiTx
    long getWifiRx(long) -> getWifiRx
    long getMobileTx(long) -> getMobileTx
    long getMobileRx(long) -> getMobileRx
    long updateWifiTx(long) -> updateWifiTx
    long updateWifiRx(long) -> updateWifiRx
    long updateMobileTx(long) -> updateMobileTx
    long updateMobileRx(long) -> updateMobileRx
    void reset() -> reset
    void update() -> update
com.tencent.mm.sdk.platformtools.Util -> com.tencent.mm.sdk.platformtools.Util:
    int MAX_DECODE_PICTURE_SIZE -> MAX_DECODE_PICTURE_SIZE
    java.lang.String PHOTO_DEFAULT_EXT -> PHOTO_DEFAULT_EXT
    long MILLSECONDS_OF_SECOND -> MILLSECONDS_OF_SECOND
    long MILLSECONDS_OF_MINUTE -> MILLSECONDS_OF_MINUTE
    long MILLSECONDS_OF_HOUR -> MILLSECONDS_OF_HOUR
    long MILLSECONDS_OF_DAY -> MILLSECONDS_OF_DAY
    long SECOND_OF_MINUTE -> SECOND_OF_MINUTE
    long MINUTE_OF_HOUR -> MINUTE_OF_HOUR
    long MAX_32BIT_VALUE -> MAX_32BIT_VALUE
    int MIN_ACCOUNT_LENGTH -> MIN_ACCOUNT_LENGTH
    int MAX_ACCOUNT_LENGTH -> MAX_ACCOUNT_LENGTH
    int MIN_PASSWORD_LENGTH -> MIN_PASSWORD_LENGTH
    int MAX_PASSWORD_LENGTH -> MAX_PASSWORD_LENGTH
    int BIT_OF_KB -> BIT_OF_KB
    int BIT_OF_MB -> BIT_OF_MB
    int BYTE_OF_KB -> BYTE_OF_KB
    int BYTE_OF_MB -> BYTE_OF_MB
    int MASK_4BIT -> MASK_4BIT
    int MASK_8BIT -> MASK_8BIT
    int MASK_16BIT -> MASK_16BIT
    int MASK_32BIT -> MASK_32BIT
    int BEGIN_TIME -> BEGIN_TIME
    int END_TIME -> END_TIME
    int DAY -> DAY
    java.lang.String TAIWAN -> TAIWAN
    java.lang.String HONGKONG -> HONGKONG
    java.lang.String CHINA -> CHINA
    java.lang.String ENGLISH -> ENGLISH
    java.lang.String LANGUAGE_DEFAULT -> LANGUAGE_DEFAULT
    long[] bt -> bt
    java.util.TimeZone GMT -> GMT
    char[] bu -> bu
    char[] bv -> bv
    java.lang.String[] bw -> bw
    java.lang.String escapeSqlValue(java.lang.String) -> escapeSqlValue
    java.lang.String listToString(java.util.List,java.lang.String) -> listToString
    java.util.List stringsToList(java.lang.String[]) -> stringsToList
    int getIntRandom(int,int) -> getIntRandom
    boolean isDayTimeNow() -> isDayTimeNow
    boolean isNightTime(int,int,int) -> isNightTime
    java.lang.String getTimeZoneOffset() -> getTimeZoneOffset
    java.lang.String getTimeZone() -> getTimeZone
    java.lang.String getTimeZoneDef() -> getTimeZoneDef
    java.lang.String formatUnixTime(long) -> formatUnixTime
    boolean isChinese(char) -> isChinese
    boolean isAlpha(char) -> isAlpha
    boolean isNum(char) -> isNum
    boolean isValidQQNum(java.lang.String) -> isValidQQNum
    boolean isValidEmail(java.lang.String) -> isValidEmail
    byte[] bmpToByteArray(android.graphics.Bitmap,boolean) -> bmpToByteArray
    boolean isValidAccount(java.lang.String) -> isValidAccount
    boolean isValidPassword(java.lang.String) -> isValidPassword
    android.graphics.BitmapFactory$Options getImageOptions(java.lang.String) -> getImageOptions
    void saveBitmapToImage(android.graphics.Bitmap,int,android.graphics.Bitmap$CompressFormat,java.lang.String,java.lang.String,boolean) -> saveBitmapToImage
    void saveBitmapToImage(android.graphics.Bitmap,int,android.graphics.Bitmap$CompressFormat,java.lang.String,boolean) -> saveBitmapToImage
    android.graphics.Bitmap getRoundedCornerBitmap(android.graphics.Bitmap,boolean,float) -> getRoundedCornerBitmap
    java.lang.String getSizeKB(long) -> getSizeKB
    java.lang.String getSizeMB(long) -> getSizeMB
    java.lang.String dumpArray(java.lang.Object[]) -> dumpArray
    java.lang.String dumpHex(byte[]) -> dumpHex
    android.content.Intent getInstallPackIntent(java.lang.String,android.content.Context) -> getInstallPackIntent
    void installPack(java.lang.String,android.content.Context) -> installPack
    void shake(android.content.Context,boolean) -> shake
    android.media.MediaPlayer playSound(android.content.Context,int,android.media.MediaPlayer$OnCompletionListener) -> playSound
    void playSound(android.content.Context,int) -> playSound
    long nowSecond() -> nowSecond
    java.lang.String formatSecToMin(int) -> formatSecToMin
    long nowMilliSecond() -> nowMilliSecond
    long secondsToNow(long) -> secondsToNow
    long milliSecondsToNow(long) -> milliSecondsToNow
    long ticksToNow(long) -> ticksToNow
    long currentTicks() -> currentTicks
    long currentDayInMills() -> currentDayInMills
    long currentWeekInMills() -> currentWeekInMills
    long currentMonthInMills() -> currentMonthInMills
    long currentYearInMills() -> currentYearInMills
    int getSystemVersion(android.content.Context,int) -> getSystemVersion
    java.lang.String getDeviceId(android.content.Context) -> getDeviceId
    java.lang.String getLine1Number(android.content.Context) -> getLine1Number
    boolean isLockScreen(android.content.Context) -> isLockScreen
    boolean isTopActivity(android.content.Context) -> isTopActivity
    boolean isServiceRunning(android.content.Context,java.lang.String) -> isServiceRunning
    boolean isProcessRunning(android.content.Context,java.lang.String) -> isProcessRunning
    java.lang.String getTopActivityName(android.content.Context) -> getTopActivityName
    boolean isTopApplication(android.content.Context) -> isTopApplication
    boolean isIntentAvailable(android.content.Context,android.content.Intent) -> isIntentAvailable
    void freeBitmapMap(java.util.Map) -> freeBitmapMap
    void selectPicture(android.content.Context,int) -> selectPicture
    int nullAsNil(java.lang.Integer) -> nullAsNil
    long nullAsNil(java.lang.Long) -> nullAsNil
    java.lang.String nullAsNil(java.lang.String) -> nullAsNil
    boolean nullAsTrue(java.lang.Boolean) -> nullAsTrue
    boolean nullAsFalse(java.lang.Boolean) -> nullAsFalse
    int nullAs(java.lang.Integer,int) -> nullAs
    long nullAs(java.lang.Long,long) -> nullAs
    boolean nullAs(java.lang.Boolean,boolean) -> nullAs
    java.lang.String nullAs(java.lang.String,java.lang.String) -> nullAs
    int nullAsInt(java.lang.Object,int) -> nullAsInt
    boolean isNullOrNil(java.lang.String) -> isNullOrNil
    boolean isNullOrNil(byte[]) -> isNullOrNil
    int getInt(java.lang.String,int) -> getInt
    long getLong(java.lang.String,long) -> getLong
    int getHex(java.lang.String,int) -> getHex
    java.util.Map parseXml(java.lang.String,java.lang.String,java.lang.String) -> parseXml
    void a(java.util.Map,java.lang.String,org.w3c.dom.Node,int) -> a
    void transClickToSelect(android.view.View,android.view.View) -> transClickToSelect
    java.lang.String getCutPasswordMD5(java.lang.String) -> getCutPasswordMD5
    java.lang.String getFullPasswordMD5(java.lang.String) -> getFullPasswordMD5
    org.w3c.dom.Element getRootElementFromXML(byte[]) -> getRootElementFromXML
    java.lang.String convertStreamToString(java.io.InputStream) -> convertStreamToString
    java.lang.String encodeHexString(byte[]) -> encodeHexString
    byte[] decodeHexString(java.lang.String) -> decodeHexString
    int guessHttpSendLength(int) -> guessHttpSendLength
    int guessHttpRecvLength(int) -> guessHttpRecvLength
    int guessHttpContinueRecvLength(int) -> guessHttpContinueRecvLength
    int guessTcpConnectLength() -> guessTcpConnectLength
    int guessTcpDisconnectLength() -> guessTcpDisconnectLength
    int guessTcpSendLength(int) -> guessTcpSendLength
    int guessTcpRecvLength(int) -> guessTcpRecvLength
    int[] splitToIntArray(java.lang.String) -> splitToIntArray
    int UnZipFolder(java.lang.String,java.lang.String) -> UnZipFolder
    java.lang.String getStack() -> getStack
    boolean checkSDCardFull() -> checkSDCardFull
    java.lang.String GetHostIp() -> GetHostIp
    boolean checkPermission(android.content.Context,java.lang.String) -> checkPermission
    boolean jump(android.content.Context,java.lang.String) -> jump
    java.lang.String escapeStringForXml(java.lang.String) -> escapeStringForXml
    java.lang.String processXml(java.lang.String) -> processXml
    java.lang.String expandEntities(java.lang.String) -> expandEntities
    int a(char[],int,int) -> a
    boolean isImgFile(java.lang.String) -> isImgFile
    java.lang.String mapToXml(java.lang.String,java.util.LinkedHashMap) -> mapToXml
    java.util.Map parseIni(java.lang.String) -> parseIni
com.tencent.mm.sdk.platformtools.Util$1 -> com.tencent.mm.sdk.platformtools.Util$1:
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.tencent.mm.sdk.platformtools.Util$2 -> com.tencent.mm.sdk.platformtools.Util$2:
    android.view.View bx -> bx
    android.view.View by -> by
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.tencent.mm.sdk.platformtools.package-info -> com.tencent.mm.sdk.platformtools.package-info:
com.tencent.mm.sdk.plugin.IMMPluginAPI -> com.tencent.mm.sdk.plugin.IMMPluginAPI:
    java.lang.String getPluginKey(java.lang.String) -> getPluginKey
    boolean isPluginInstalled(java.lang.String) -> isPluginInstalled
    boolean installPlugin(java.lang.String) -> installPlugin
    com.tencent.mm.sdk.plugin.Profile getCurrentProfile(java.lang.String) -> getCurrentProfile
    void createQRCodeController(java.lang.String) -> createQRCodeController
    void createQRCodeController(java.lang.String,com.tencent.mm.sdk.channel.MMessage$CallBack) -> createQRCodeController
    void createQRCodeController(java.lang.String,com.tencent.mm.sdk.channel.MMessage$CallBack,java.lang.String) -> createQRCodeController
    boolean registerQRCodePattern(java.lang.String,com.tencent.mm.sdk.channel.MMessage$CallBack,java.lang.String) -> registerQRCodePattern
    void jumpToSettingView(java.lang.String,java.lang.String) -> jumpToSettingView
    void createMsgController(java.lang.String) -> createMsgController
    boolean registerPattern(java.lang.String,com.tencent.mm.sdk.channel.MMessage$CallBack,java.lang.String) -> registerPattern
    void jumpToChattingUI(java.lang.String,java.lang.String) -> jumpToChattingUI
    void jumpToBindQQ(java.lang.String) -> jumpToBindQQ
    void jumpToBindMobile(java.lang.String) -> jumpToBindMobile
    void jumpToBindEmail(java.lang.String) -> jumpToBindEmail
    void release() -> release
    boolean sendMsgNotify(java.lang.String,java.lang.String,int,java.lang.String,java.lang.Class) -> sendMsgNotify
    boolean registerAutoMsg(java.lang.String,java.lang.String) -> registerAutoMsg
    boolean unregisterAutoMsg(java.lang.String,java.lang.String) -> unregisterAutoMsg
    boolean appendNetStat(int,int,int) -> appendNetStat
com.tencent.mm.sdk.plugin.MMPluginAPIImpl -> com.tencent.mm.sdk.plugin.MMPluginAPIImpl:
    android.content.Context R -> R
    com.tencent.mm.sdk.channel.MMessage$Receiver bz -> bz
    java.lang.String aE -> aE
    java.lang.String[] columns -> columns
    void release() -> release
    java.lang.Object c(java.lang.String) -> c
    boolean registerAutoMsg(java.lang.String,java.lang.String) -> registerAutoMsg
    boolean unregisterAutoMsg(java.lang.String,java.lang.String) -> unregisterAutoMsg
    boolean sendMsgNotify(java.lang.String,java.lang.String,int,java.lang.String,java.lang.Class) -> sendMsgNotify
    java.lang.String getPluginKey(java.lang.String) -> getPluginKey
    boolean isPluginInstalled(java.lang.String) -> isPluginInstalled
    boolean installPlugin(java.lang.String) -> installPlugin
    void a(java.lang.String,java.lang.String,android.content.Intent) -> a
    void createQRCodeController(java.lang.String) -> createQRCodeController
    void createQRCodeController(java.lang.String,com.tencent.mm.sdk.channel.MMessage$CallBack) -> createQRCodeController
    void createQRCodeController(java.lang.String,com.tencent.mm.sdk.channel.MMessage$CallBack,java.lang.String) -> createQRCodeController
    boolean registerQRCodePattern(java.lang.String,com.tencent.mm.sdk.channel.MMessage$CallBack,java.lang.String) -> registerQRCodePattern
    void jumpToSettingView(java.lang.String,java.lang.String) -> jumpToSettingView
    void jumpToChattingUI(java.lang.String,java.lang.String) -> jumpToChattingUI
    com.tencent.mm.sdk.plugin.Profile getCurrentProfile(java.lang.String) -> getCurrentProfile
    void jumpToBindQQ(java.lang.String) -> jumpToBindQQ
    void jumpToBindMobile(java.lang.String) -> jumpToBindMobile
    void jumpToBindEmail(java.lang.String) -> jumpToBindEmail
    void createMsgController(java.lang.String) -> createMsgController
    boolean registerPattern(java.lang.String,com.tencent.mm.sdk.channel.MMessage$CallBack,java.lang.String) -> registerPattern
    boolean appendNetStat(int,int,int) -> appendNetStat
com.tencent.mm.sdk.plugin.MMPluginMsg -> com.tencent.mm.sdk.plugin.MMPluginMsg:
    long msgClientId -> msgClientId
    java.lang.String content -> content
    java.lang.String ACTION_AUTO_MSG -> ACTION_AUTO_MSG
    java.lang.String RECV_PKG -> RECV_PKG
    java.lang.String RECV_MSG -> RECV_MSG
    java.lang.String RECV_THUMB -> RECV_THUMB
    java.lang.String SEND_ID -> SEND_ID
    java.lang.String SEND_ERR_TYPE -> SEND_ERR_TYPE
    java.lang.String SEND_ERR_CODE -> SEND_ERR_CODE
    java.lang.String TYPE -> TYPE
    int TYPE_SEND_RET -> TYPE_SEND_RET
    int TYPE_RECV_MSG -> TYPE_RECV_MSG
    com.tencent.mm.sdk.openapi.WXAppExtendObject pluginMsgToWXAppExtendObject(com.tencent.mm.sdk.plugin.MMPluginMsg) -> pluginMsgToWXAppExtendObject
    com.tencent.mm.sdk.plugin.MMPluginMsg WXAppExtentObjectToPluginMsg(com.tencent.mm.sdk.openapi.WXAppExtendObject) -> WXAppExtentObjectToPluginMsg
    long sendMessage(android.content.Context,java.lang.String) -> sendMessage
com.tencent.mm.sdk.plugin.MMPluginMsg$ReceiverHelper -> com.tencent.mm.sdk.plugin.MMPluginMsg$ReceiverHelper:
    int type -> type
    android.content.Intent intent -> intent
    boolean isSendRet() -> isSendRet
    boolean isRecvNew() -> isRecvNew
    java.lang.String getMsgContent() -> getMsgContent
    java.lang.Integer getSendErrCode() -> getSendErrCode
    java.lang.Integer getSendErrType() -> getSendErrType
    java.lang.Long getSendMsgId() -> getSendMsgId
com.tencent.mm.sdk.plugin.MMPluginOAuth -> com.tencent.mm.sdk.plugin.MMPluginOAuth:
    com.tencent.mm.sdk.plugin.MMPluginOAuth$IResult bA -> bA
    android.content.Context R -> R
    java.lang.String bB -> bB
    java.lang.String bC -> bC
    android.os.Handler handler -> handler
    java.lang.String getAccessToken() -> getAccessToken
    java.lang.String getRequestToken() -> getRequestToken
    void start() -> start
    boolean start(android.os.Handler) -> start
    java.lang.String a(com.tencent.mm.sdk.plugin.MMPluginOAuth) -> a
    void a(com.tencent.mm.sdk.plugin.MMPluginOAuth,java.lang.String) -> a
    com.tencent.mm.sdk.plugin.MMPluginOAuth$IResult b(com.tencent.mm.sdk.plugin.MMPluginOAuth) -> b
com.tencent.mm.sdk.plugin.MMPluginOAuth$1 -> com.tencent.mm.sdk.plugin.MMPluginOAuth$1:
    com.tencent.mm.sdk.plugin.MMPluginOAuth bD -> bD
    void run() -> run
com.tencent.mm.sdk.plugin.MMPluginOAuth$IResult -> com.tencent.mm.sdk.plugin.MMPluginOAuth$IResult:
    void onResult(com.tencent.mm.sdk.plugin.MMPluginOAuth) -> onResult
    void onSessionTimeOut() -> onSessionTimeOut
com.tencent.mm.sdk.plugin.MMPluginOAuth$Receiver -> com.tencent.mm.sdk.plugin.MMPluginOAuth$Receiver:
    java.util.Map aA -> aA
    com.tencent.mm.sdk.plugin.MMPluginOAuth bE -> bE
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void register(java.lang.String,com.tencent.mm.sdk.plugin.MMPluginOAuth) -> register
    void unregister(java.lang.String) -> unregister
com.tencent.mm.sdk.plugin.MMPluginOAuth$Receiver$1 -> com.tencent.mm.sdk.plugin.MMPluginOAuth$Receiver$1:
    com.tencent.mm.sdk.plugin.MMPluginOAuth bF -> bF
    java.lang.String bG -> bG
    com.tencent.mm.sdk.plugin.MMPluginOAuth$Receiver bH -> bH
    void run() -> run
com.tencent.mm.sdk.plugin.MMPluginProviderConstants -> com.tencent.mm.sdk.plugin.MMPluginProviderConstants:
    java.lang.String AUTHORITY -> AUTHORITY
    int TYPE_UNKNOWN -> TYPE_UNKNOWN
    int TYPE_INT -> TYPE_INT
    int TYPE_LONG -> TYPE_LONG
    int TYPE_STRING -> TYPE_STRING
    int TYPE_BOOLEAN -> TYPE_BOOLEAN
    int TYPE_FLOAT -> TYPE_FLOAT
    int TYPE_DOUBLE -> TYPE_DOUBLE
    java.lang.String PLUGIN_PACKAGE_PATTERN -> PLUGIN_PACKAGE_PATTERN
com.tencent.mm.sdk.plugin.MMPluginProviderConstants$OAuth -> com.tencent.mm.sdk.plugin.MMPluginProviderConstants$OAuth:
    android.net.Uri CONTENT_URI -> CONTENT_URI
    java.lang.String API_KEY -> API_KEY
    java.lang.String REQUEST_TOKEN -> REQUEST_TOKEN
    java.lang.String ACCESS_TOKEN -> ACCESS_TOKEN
    java.lang.String SECRET -> SECRET
    java.lang.String ACTION_REQUEST_TOKEN -> ACTION_REQUEST_TOKEN
com.tencent.mm.sdk.plugin.MMPluginProviderConstants$PluginDB -> com.tencent.mm.sdk.plugin.MMPluginProviderConstants$PluginDB:
    android.net.Uri CONTENT_URI -> CONTENT_URI
    java.lang.String KEY -> KEY
    java.lang.String TYPE -> TYPE
    java.lang.String VALUE -> VALUE
com.tencent.mm.sdk.plugin.MMPluginProviderConstants$PluginIntent -> com.tencent.mm.sdk.plugin.MMPluginProviderConstants$PluginIntent:
    java.lang.String AUTH_KEY -> AUTH_KEY
    java.lang.String NAME -> NAME
    java.lang.String PACKAGE -> PACKAGE
    java.lang.String REQUEST_TOKEN -> REQUEST_TOKEN
    java.lang.String ACCESS_TOKEN -> ACCESS_TOKEN
    java.lang.String PERMISSIONS -> PERMISSIONS
    java.lang.String ACTION_REQUEST_TOKEN -> ACTION_REQUEST_TOKEN
    java.lang.String ACTION_RESPONSE -> ACTION_RESPONSE
    java.lang.String ACTION_QRCODE_SCANNED -> ACTION_QRCODE_SCANNED
    java.lang.String PLUGIN_PACKAGE_PATTERN -> PLUGIN_PACKAGE_PATTERN
    java.lang.String APP_PACKAGE_PATTERN -> APP_PACKAGE_PATTERN
com.tencent.mm.sdk.plugin.MMPluginProviderConstants$Resolver -> com.tencent.mm.sdk.plugin.MMPluginProviderConstants$Resolver:
    int getType(java.lang.Object) -> getType
    boolean unresolveObj(android.content.ContentValues,java.lang.Object) -> unresolveObj
    java.lang.Object resolveObj(int,java.lang.String) -> resolveObj
com.tencent.mm.sdk.plugin.MMPluginProviderConstants$SharedPref -> com.tencent.mm.sdk.plugin.MMPluginProviderConstants$SharedPref:
    android.net.Uri CONTENT_URI -> CONTENT_URI
    java.lang.String KEY -> KEY
    java.lang.String TYPE -> TYPE
    java.lang.String VALUE -> VALUE
com.tencent.mm.sdk.plugin.MMPluginUtil -> com.tencent.mm.sdk.plugin.MMPluginUtil:
    com.tencent.mm.sdk.plugin.IMMPluginAPI queryPluginMgr(android.content.Context) -> queryPluginMgr
com.tencent.mm.sdk.plugin.Profile -> com.tencent.mm.sdk.plugin.Profile:
    java.lang.reflect.Field[] p -> p
    android.net.Uri CONTENT_URI -> CONTENT_URI
    java.lang.String[] columns -> columns
    java.lang.String field_username -> field_username
    long field_bindqq -> field_bindqq
    java.lang.String field_bindmobile -> field_bindmobile
    java.lang.String field_bindemail -> field_bindemail
    java.lang.String field_alias -> field_alias
    java.lang.String field_nickname -> field_nickname
    java.lang.String field_signature -> field_signature
    java.lang.String field_province -> field_province
    java.lang.String field_city -> field_city
    java.lang.String field_weibo -> field_weibo
    java.lang.String field_avatar -> field_avatar
    java.lang.reflect.Field[] fields() -> fields
com.tencent.mm.sdk.plugin.package-info -> com.tencent.mm.sdk.plugin.package-info:
com.tencent.mm.sdk.storage.ContentProviderDB -> com.tencent.mm.sdk.storage.ContentProviderDB:
    android.content.Context R -> R
    android.net.Uri getUriFromTable(java.lang.String) -> getUriFromTable
    android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String) -> query
    android.database.Cursor rawQuery(java.lang.String,java.lang.String[]) -> rawQuery
    boolean execSQL(java.lang.String,java.lang.String) -> execSQL
    long insert(java.lang.String,java.lang.String,android.content.ContentValues) -> insert
    int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
    long replace(java.lang.String,java.lang.String,android.content.ContentValues) -> replace
    int delete(java.lang.String,java.lang.String,java.lang.String[]) -> delete
com.tencent.mm.sdk.storage.CursorFieldHelper -> com.tencent.mm.sdk.storage.CursorFieldHelper:
    java.util.Map bI -> bI
    java.util.Map bJ -> bJ
    java.util.Map bK -> bK
    java.lang.String type(java.lang.Class) -> type
    java.lang.reflect.Method get(java.lang.Class,boolean) -> get
    void keep_setBlob(java.lang.reflect.Field,java.lang.Object,android.database.Cursor,int) -> keep_setBlob
    void keep_getBlob(java.lang.reflect.Field,java.lang.Object,android.content.ContentValues) -> keep_getBlob
    void keep_setShort(java.lang.reflect.Field,java.lang.Object,android.database.Cursor,int) -> keep_setShort
    void keep_getShort(java.lang.reflect.Field,java.lang.Object,android.content.ContentValues) -> keep_getShort
    void keep_setBoolean(java.lang.reflect.Field,java.lang.Object,android.database.Cursor,int) -> keep_setBoolean
    void keep_getBoolean(java.lang.reflect.Field,java.lang.Object,android.content.ContentValues) -> keep_getBoolean
    void keep_setInt(java.lang.reflect.Field,java.lang.Object,android.database.Cursor,int) -> keep_setInt
    void keep_getInt(java.lang.reflect.Field,java.lang.Object,android.content.ContentValues) -> keep_getInt
    void keep_setFloat(java.lang.reflect.Field,java.lang.Object,android.database.Cursor,int) -> keep_setFloat
    void keep_getFloat(java.lang.reflect.Field,java.lang.Object,android.content.ContentValues) -> keep_getFloat
    void keep_setDouble(java.lang.reflect.Field,java.lang.Object,android.database.Cursor,int) -> keep_setDouble
    void keep_getDouble(java.lang.reflect.Field,java.lang.Object,android.content.ContentValues) -> keep_getDouble
    void keep_setLong(java.lang.reflect.Field,java.lang.Object,android.database.Cursor,int) -> keep_setLong
    void keep_getLong(java.lang.reflect.Field,java.lang.Object,android.content.ContentValues) -> keep_getLong
    void keep_setString(java.lang.reflect.Field,java.lang.Object,android.database.Cursor,int) -> keep_setString
    void keep_getString(java.lang.reflect.Field,java.lang.Object,android.content.ContentValues) -> keep_getString
com.tencent.mm.sdk.storage.ISQLiteDatabase -> com.tencent.mm.sdk.storage.ISQLiteDatabase:
    android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String) -> query
    android.database.Cursor rawQuery(java.lang.String,java.lang.String[]) -> rawQuery
    boolean execSQL(java.lang.String,java.lang.String) -> execSQL
    long insert(java.lang.String,java.lang.String,android.content.ContentValues) -> insert
    int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
    long replace(java.lang.String,java.lang.String,android.content.ContentValues) -> replace
    int delete(java.lang.String,java.lang.String,java.lang.String[]) -> delete
com.tencent.mm.sdk.storage.MAutoDBItem -> com.tencent.mm.sdk.storage.MAutoDBItem:
    java.lang.String SYSTEM_ROWID_FIELD -> SYSTEM_ROWID_FIELD
    long systemRowid -> systemRowid
    java.lang.reflect.Field[] fields() -> fields
    java.lang.reflect.Field[] getValidFields(java.lang.Class) -> getValidFields
    void convertFrom(android.database.Cursor) -> convertFrom
    android.content.ContentValues convertTo() -> convertTo
    android.database.Cursor getCursorForProjection(android.content.ContentValues,java.lang.String[]) -> getCursorForProjection
    java.util.Map identify(java.lang.reflect.Field[],java.lang.StringBuilder,java.lang.String) -> identify
    java.lang.String[] getFullColumns(java.lang.reflect.Field[]) -> getFullColumns
    boolean checkIOEqual(android.content.ContentValues,android.database.Cursor) -> checkIOEqual
com.tencent.mm.sdk.storage.MAutoStorage -> com.tencent.mm.sdk.storage.MAutoStorage:
    com.tencent.mm.sdk.storage.ISQLiteDatabase P -> P
    java.lang.String bL -> bL
    java.lang.String[] columns -> columns
    java.lang.String getTableName() -> getTableName
    java.lang.String getPrimaryKey() -> getPrimaryKey
    java.lang.String[] getColumns() -> getColumns
    java.util.List getCreateSQLs(java.lang.reflect.Field[],java.lang.String,java.lang.String,java.lang.String[]) -> getCreateSQLs
    java.util.List getUpdateSQLs(java.lang.reflect.Field[],java.lang.String,com.tencent.mm.sdk.storage.ISQLiteDatabase) -> getUpdateSQLs
    boolean insert(com.tencent.mm.sdk.storage.MAutoDBItem) -> insert
    boolean delete(com.tencent.mm.sdk.storage.MAutoDBItem,java.lang.String[]) -> delete
    boolean delete(long) -> delete
    boolean get(long,com.tencent.mm.sdk.storage.MAutoDBItem) -> get
    boolean get(com.tencent.mm.sdk.storage.MAutoDBItem,java.lang.String[]) -> get
    boolean update(long,com.tencent.mm.sdk.storage.MAutoDBItem) -> update
    boolean update(com.tencent.mm.sdk.storage.MAutoDBItem,java.lang.String[]) -> update
    boolean replace(com.tencent.mm.sdk.storage.MAutoDBItem) -> replace
    boolean a(android.content.ContentValues) -> a
    android.database.Cursor getAll() -> getAll
    int getCount() -> getCount
    android.database.Cursor rawQuery(java.lang.String,java.lang.String[]) -> rawQuery
    java.lang.StringBuilder a(android.content.ContentValues,java.lang.String[]) -> a
    java.lang.String[] a(java.lang.String[],android.content.ContentValues) -> a
    void d(java.lang.String) -> d
    void e(java.lang.String) -> e
com.tencent.mm.sdk.storage.MDBItem -> com.tencent.mm.sdk.storage.MDBItem:
    void convertFrom(android.database.Cursor) -> convertFrom
    android.content.ContentValues convertTo() -> convertTo
com.tencent.mm.sdk.storage.MStorage -> com.tencent.mm.sdk.storage.MStorage:
    com.tencent.mm.sdk.storage.MStorageEvent bM -> bM
    com.tencent.mm.sdk.storage.MStorageEvent bN -> bN
    void lock() -> lock
    void unlock() -> unlock
    void add(com.tencent.mm.sdk.storage.MStorage$IOnStorageChange) -> add
    void addLoadedListener(com.tencent.mm.sdk.storage.MStorage$IOnStorageLoaded) -> addLoadedListener
    void remove(com.tencent.mm.sdk.storage.MStorage$IOnStorageChange) -> remove
    void removeLoadedListener(com.tencent.mm.sdk.storage.MStorage$IOnStorageLoaded) -> removeLoadedListener
    void doNotify() -> doNotify
    void doNotify(java.lang.String) -> doNotify
    void a(com.tencent.mm.sdk.storage.MStorage$IOnStorageChange,java.lang.String) -> a
    void a(com.tencent.mm.sdk.storage.MStorage$IOnStorageLoaded) -> a
com.tencent.mm.sdk.storage.MStorage$1 -> com.tencent.mm.sdk.storage.MStorage$1:
    com.tencent.mm.sdk.storage.MStorage bO -> bO
    void processEvent(java.lang.Object,java.lang.Object) -> processEvent
com.tencent.mm.sdk.storage.MStorage$2 -> com.tencent.mm.sdk.storage.MStorage$2:
    com.tencent.mm.sdk.storage.MStorage bO -> bO
    void processEvent(java.lang.Object,java.lang.Object) -> processEvent
com.tencent.mm.sdk.storage.MStorage$IOnStorageChange -> com.tencent.mm.sdk.storage.MStorage$IOnStorageChange:
    void onNotifyChange(java.lang.String) -> onNotifyChange
com.tencent.mm.sdk.storage.MStorage$IOnStorageLoaded -> com.tencent.mm.sdk.storage.MStorage$IOnStorageLoaded:
    void onNotifyLoaded() -> onNotifyLoaded
com.tencent.mm.sdk.storage.MStorageEvent -> com.tencent.mm.sdk.storage.MStorageEvent:
    int bP -> bP
    java.util.Hashtable bQ -> bQ
    java.util.concurrent.CopyOnWriteArraySet bR -> bR
    void lock() -> lock
    void unlock() -> unlock
    boolean isLocked() -> isLocked
    void add(java.lang.Object,android.os.Looper) -> add
    boolean event(java.lang.Object) -> event
    void remove(java.lang.Object) -> remove
    void removeAll() -> removeAll
    void doNotify() -> doNotify
    void e() -> e
    void processEvent(java.lang.Object,java.lang.Object) -> processEvent
com.tencent.mm.sdk.storage.MStorageEvent$1 -> com.tencent.mm.sdk.storage.MStorageEvent$1:
    java.lang.Object bS -> bS
    java.lang.Object bT -> bT
    com.tencent.mm.sdk.storage.MStorageEvent bU -> bU
    void run() -> run
com.tencent.mm.sdk.storage.package-info -> com.tencent.mm.sdk.storage.package-info:
com.tencent.weibo.api.BasicAPI -> com.tencent.weibo.api.BasicAPI:
    com.tencent.weibo.api.RequestAPI requestAPI -> requestAPI
    java.lang.String apiBaseUrl -> apiBaseUrl
    void shutdownConnection() -> shutdownConnection
    java.lang.String getAPIBaseUrl() -> getAPIBaseUrl
    void setAPIBaseUrl(java.lang.String) -> setAPIBaseUrl
com.tencent.weibo.api.FriendsAPI -> com.tencent.weibo.api.FriendsAPI:
    java.lang.String friendsFansListUrl -> friendsFansListUrl
    java.lang.String friendsIdolListUrl -> friendsIdolListUrl
    java.lang.String friendsAddUrl -> friendsAddUrl
    java.lang.String friendsDelUrl -> friendsDelUrl
    java.lang.String friendsCheckUrl -> friendsCheckUrl
    java.lang.String friendsUserFansListUrl -> friendsUserFansListUrl
    java.lang.String friendsUserIdolListUrl -> friendsUserIdolListUrl
    java.lang.String friendsUserSpecialListUrl -> friendsUserSpecialListUrl
    java.lang.String friendsFansListSUrl -> friendsFansListSUrl
    java.lang.String fanslist(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> fanslist
    java.lang.String idollist(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> idollist
    java.lang.String add(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String) -> add
    java.lang.String del(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String) -> del
    java.lang.String check(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> check
    java.lang.String userFanslist(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> userFanslist
    java.lang.String userIdollist(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> userIdollist
    java.lang.String userSpeciallist(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> userSpeciallist
    java.lang.String fanslistS(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> fanslistS
    void setAPIBaseUrl(java.lang.String) -> setAPIBaseUrl
com.tencent.weibo.api.InfoAPI -> com.tencent.weibo.api.InfoAPI:
    java.lang.String infoUpdateUrl -> infoUpdateUrl
    java.lang.String update(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String) -> update
    void setAPIBaseUrl(java.lang.String) -> setAPIBaseUrl
com.tencent.weibo.api.PrivateAPI -> com.tencent.weibo.api.PrivateAPI:
    java.lang.String privateRecvUrl -> privateRecvUrl
    java.lang.String privateSendUrl -> privateSendUrl
    java.lang.String recv(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> recv
    java.lang.String send(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> send
    void setAPIBaseUrl(java.lang.String) -> setAPIBaseUrl
com.tencent.weibo.api.RequestAPI -> com.tencent.weibo.api.RequestAPI:
    java.lang.String getResource(java.lang.String,java.util.List,com.tencent.weibo.beans.OAuth) -> getResource
    java.lang.String postContent(java.lang.String,java.util.List,com.tencent.weibo.beans.OAuth) -> postContent
    java.lang.String postFile(java.lang.String,java.util.List,java.util.List,com.tencent.weibo.beans.OAuth) -> postFile
    void shutdownConnection() -> shutdownConnection
com.tencent.weibo.api.SearchAPI -> com.tencent.weibo.api.SearchAPI:
    java.lang.String searchTUrl -> searchTUrl
    java.lang.String t(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> t
    void setAPIBaseUrl(java.lang.String) -> setAPIBaseUrl
com.tencent.weibo.api.StatusesAPI -> com.tencent.weibo.api.StatusesAPI:
    java.lang.String statusesHomeTimelineUrl -> statusesHomeTimelineUrl
    java.lang.String statusesUSERTimelineUrl -> statusesUSERTimelineUrl
    java.lang.String statusesMentionsTimelineUrl -> statusesMentionsTimelineUrl
    java.lang.String statusesBroadcastTimelineUrl -> statusesBroadcastTimelineUrl
    java.lang.String statusesUserTimelineIdsUrl -> statusesUserTimelineIdsUrl
    java.lang.String statusesUsersTimelineUrl -> statusesUsersTimelineUrl
    java.lang.String homeTimeline(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> homeTimeline
    java.lang.String userTimeline(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> userTimeline
    java.lang.String mentionsTimeline(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> mentionsTimeline
    java.lang.String broadcastTimeline(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> broadcastTimeline
    java.lang.String userTimelineIds(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> userTimelineIds
    java.lang.String usersTimeline(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> usersTimeline
    void setAPIBaseUrl(java.lang.String) -> setAPIBaseUrl
com.tencent.weibo.api.TAPI -> com.tencent.weibo.api.TAPI:
    java.lang.String tShowUrl -> tShowUrl
    java.lang.String tAddUrl -> tAddUrl
    java.lang.String tAddPicUrl -> tAddPicUrl
    java.lang.String tAddPicUrlUrl -> tAddPicUrlUrl
    java.lang.String tAddVideoUrl -> tAddVideoUrl
    java.lang.String tCommentUrl -> tCommentUrl
    java.lang.String tDelUrl -> tDelUrl
    java.lang.String tReAddUrl -> tReAddUrl
    java.lang.String tReCountUrl -> tReCountUrl
    java.lang.String tReListUrl -> tReListUrl
    java.lang.String tReplyUrl -> tReplyUrl
    java.lang.String show(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String) -> show
    java.lang.String add(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String) -> add
    java.lang.String add(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> add
    java.lang.String del(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String) -> del
    java.lang.String reAdd(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> reAdd
    java.lang.String reAdd(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> reAdd
    java.lang.String comment(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> comment
    java.lang.String comment(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> comment
    java.lang.String reply(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> reply
    java.lang.String reply(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> reply
    java.lang.String addPic(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> addPic
    java.lang.String addPic(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> addPic
    java.lang.String reCount(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String) -> reCount
    java.lang.String reList(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> reList
    java.lang.String addVideo(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> addVideo
    void setAPIBaseUrl(java.lang.String) -> setAPIBaseUrl
com.tencent.weibo.api.UserAPI -> com.tencent.weibo.api.UserAPI:
    java.lang.String userInfoUrl -> userInfoUrl
    java.lang.String userOtherInfoUrl -> userOtherInfoUrl
    java.lang.String userInfosUrl -> userInfosUrl
    java.lang.String info(com.tencent.weibo.beans.OAuth,java.lang.String) -> info
    java.lang.String otherInfo(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String) -> otherInfo
    java.lang.String infos(com.tencent.weibo.beans.OAuth,java.lang.String,java.lang.String,java.lang.String) -> infos
    void setAPIBaseUrl(java.lang.String) -> setAPIBaseUrl
com.tencent.weibo.beans.OAuth -> com.tencent.weibo.beans.OAuth:
    long serialVersionUID -> serialVersionUID
    java.lang.String seqid -> seqid
    java.lang.String clientIP -> clientIP
    java.lang.String appFrom -> appFrom
    java.lang.String openid -> openid
    java.lang.String openkey -> openkey
    java.lang.String oauthVersion -> oauthVersion
    java.lang.String scope -> scope
    int status -> status
    java.lang.String msg -> msg
    java.util.Random random -> random
    java.util.List getCommonParamsList() -> getCommonParamsList
    java.lang.String generateSeqId() -> generateSeqId
    java.lang.String getSeqId() -> getSeqId
    void setSeqId(java.lang.String) -> setSeqId
    java.lang.String getClientIP() -> getClientIP
    void setClientIP(java.lang.String) -> setClientIP
    java.lang.String getAppFrom() -> getAppFrom
    void setAppFrom(java.lang.String) -> setAppFrom
    java.lang.String getOpenid() -> getOpenid
    void setOpenid(java.lang.String) -> setOpenid
    java.lang.String getOpenkey() -> getOpenkey
    void setOpenkey(java.lang.String) -> setOpenkey
    java.lang.String getOauthVersion() -> getOauthVersion
    void setOauthVersion(java.lang.String) -> setOauthVersion
    java.lang.String getScope() -> getScope
    void setScope(java.lang.String) -> setScope
    int getStatus() -> getStatus
    void setStatus(int) -> setStatus
    java.lang.String getMsg() -> getMsg
    void setMsg(java.lang.String) -> setMsg
com.tencent.weibo.beans.RouteCfg -> com.tencent.weibo.beans.RouteCfg:
    java.lang.String host -> host
    int port -> port
    int maxConnetions -> maxConnetions
    java.lang.String getHost() -> getHost
    void setHost(java.lang.String) -> setHost
    int getPort() -> getPort
    void setPort(int) -> setPort
    int getMaxConnetions() -> getMaxConnetions
    void setMaxConnetions(int) -> setMaxConnetions
com.tencent.weibo.constants.APIConstants -> com.tencent.weibo.constants.APIConstants:
    java.lang.String API_V1_BASE_URL -> API_V1_BASE_URL
    java.lang.String API_V2_BASE_URL -> API_V2_BASE_URL
com.tencent.weibo.constants.ErrorCodeConstants -> com.tencent.weibo.constants.ErrorCodeConstants:
    com.tencent.weibo.constants.MyErrorCodeHashMap myErrorCodeHashMap -> myErrorCodeHashMap
    java.lang.String getErrmsg(java.lang.String) -> getErrmsg
com.tencent.weibo.constants.MyErrorCodeHashMap -> com.tencent.weibo.constants.MyErrorCodeHashMap:
    long serialVersionUID -> serialVersionUID
com.tencent.weibo.constants.OAuthConstants -> com.tencent.weibo.constants.OAuthConstants:
    java.lang.String OAUTH_VERSION_1 -> OAUTH_VERSION_1
    java.lang.String OAUTH_VERSION_2_A -> OAUTH_VERSION_2_A
    java.lang.String APP_FROM_ANDROID_SDK_1 -> APP_FROM_ANDROID_SDK_1
    java.lang.String APP_FROM_JAVA_SDK_2 -> APP_FROM_JAVA_SDK_2
    java.lang.String OAUTH_V1_GET_REQUEST_TOKEN_URL -> OAUTH_V1_GET_REQUEST_TOKEN_URL
    java.lang.String OAUTH_V1_AUTHORIZE_URL -> OAUTH_V1_AUTHORIZE_URL
    java.lang.String OAUTH_V1_GET_ACCESS_TOKEN_URL -> OAUTH_V1_GET_ACCESS_TOKEN_URL
    java.lang.String OAUTH_V2_AUTHORIZE_URL -> OAUTH_V2_AUTHORIZE_URL
    java.lang.String OAUTH_V2_GET_ACCESS_TOKEN_URL -> OAUTH_V2_GET_ACCESS_TOKEN_URL
com.tencent.weibo.exceptions.OAuthClientException -> com.tencent.weibo.exceptions.OAuthClientException:
    long serialVersionUID -> serialVersionUID
    java.lang.String errcode -> errcode
    java.lang.String errmsg -> errmsg
    java.lang.String getErrcode() -> getErrcode
    void setErrcode(java.lang.String) -> setErrcode
    java.lang.String getErrmsg() -> getErrmsg
    void setErrmsg(java.lang.String) -> setErrmsg
com.tencent.weibo.exceptions.QweibosdkException -> com.tencent.weibo.exceptions.QweibosdkException:
    long serialVersionUID -> serialVersionUID
    java.lang.String errcode -> errcode
    java.lang.String errmsg -> errmsg
    java.lang.String getErrcode() -> getErrcode
    void setErrcode(java.lang.String) -> setErrcode
    java.lang.String getErrmsg() -> getErrmsg
    void setErrmsg(java.lang.String) -> setErrmsg
com.tencent.weibo.oauthv1.Base64Encoder -> com.tencent.weibo.oauthv1.Base64Encoder:
    char last2byte -> last2byte
    char last4byte -> last4byte
    char last6byte -> last6byte
    char lead6byte -> lead6byte
    char lead4byte -> lead4byte
    char lead2byte -> lead2byte
    char[] encodeTable -> encodeTable
    java.lang.String encode(byte[]) -> encode
com.tencent.weibo.oauthv1.OAuthV1 -> com.tencent.weibo.oauthv1.OAuthV1:
    long serialVersionUID -> serialVersionUID
    java.lang.String oauthCallback -> oauthCallback
    java.lang.String oauthConsumerKey -> oauthConsumerKey
    java.lang.String oauthConsumerSecret -> oauthConsumerSecret
    java.lang.String oauthSignatureMethod -> oauthSignatureMethod
    java.lang.String oauthToken -> oauthToken
    java.lang.String oauthTimestamp -> oauthTimestamp
    java.lang.String oauthNonce -> oauthNonce
    java.lang.String oauthTokenSecret -> oauthTokenSecret
    java.lang.String oauthVerifier -> oauthVerifier
    java.lang.String generateTimeStamp() -> generateTimeStamp
    java.lang.String generateNonce() -> generateNonce
    java.util.List getParamsList() -> getParamsList
    java.util.List getAccessParams() -> getAccessParams
    java.util.List getTokenParamsList() -> getTokenParamsList
    java.lang.String getOauthConsumerKey() -> getOauthConsumerKey
    void setOauthConsumerKey(java.lang.String) -> setOauthConsumerKey
    java.lang.String getOauthSignatureMethod() -> getOauthSignatureMethod
    void setOauthSignatureMethod(java.lang.String) -> setOauthSignatureMethod
    java.lang.String getOauthConsumerSecret() -> getOauthConsumerSecret
    void setOauthConsumerSecret(java.lang.String) -> setOauthConsumerSecret
    java.lang.String getOauthToken() -> getOauthToken
    void setOauthToken(java.lang.String) -> setOauthToken
    java.lang.String getOauthTimestamp() -> getOauthTimestamp
    void setOauthTimestamp(java.lang.String) -> setOauthTimestamp
    java.lang.String getOauthNonce() -> getOauthNonce
    void setOauthNonce(java.lang.String) -> setOauthNonce
    java.lang.String getOauthCallback() -> getOauthCallback
    void setOauthCallback(java.lang.String) -> setOauthCallback
    java.lang.String getOauthTokenSecret() -> getOauthTokenSecret
    void setOauthTokenSecret(java.lang.String) -> setOauthTokenSecret
    java.lang.String getOauthVerifier() -> getOauthVerifier
    void setOauthVerifier(java.lang.String) -> setOauthVerifier
com.tencent.weibo.oauthv1.OAuthV1Client -> com.tencent.weibo.oauthv1.OAuthV1Client:
    java.lang.String hashAlgorithmName -> hashAlgorithmName
    java.lang.String TAG -> TAG
    com.tencent.weibo.utils.QHttpClient Q_HTTP_CLIENT -> Q_HTTP_CLIENT
    com.tencent.weibo.oauthv1.OAuthV1 requestToken(com.tencent.weibo.oauthv1.OAuthV1) -> requestToken
    java.lang.String generateAuthorizationURL(com.tencent.weibo.oauthv1.OAuthV1) -> generateAuthorizationURL
    boolean parseAuthorization(java.lang.String,com.tencent.weibo.oauthv1.OAuthV1) -> parseAuthorization
    com.tencent.weibo.oauthv1.OAuthV1 accessToken(com.tencent.weibo.oauthv1.OAuthV1) -> accessToken
    java.lang.String getOauthParams(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List) -> getOauthParams
    boolean parseToken(java.lang.String,com.tencent.weibo.oauthv1.OAuthV1) -> parseToken
    java.lang.String generateSignature(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.util.List) -> generateSignature
    java.lang.String generateSignature(java.lang.String,java.lang.String,java.lang.String) -> generateSignature
    java.lang.String generateSignatureBase(java.net.URL,java.lang.String,java.util.List) -> generateSignatureBase
    java.lang.String getNormalizedUrl(java.net.URL) -> getNormalizedUrl
    com.tencent.weibo.utils.QHttpClient getQHttpClient() -> getQHttpClient
    void setQHttpClient(com.tencent.weibo.utils.QHttpClient) -> setQHttpClient
com.tencent.weibo.oauthv1.OAuthV1Client$1 -> com.tencent.weibo.oauthv1.OAuthV1Client$1:
    int compare(org.apache.http.NameValuePair,org.apache.http.NameValuePair) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.tencent.weibo.oauthv1.OAuthV1Request -> com.tencent.weibo.oauthv1.OAuthV1Request:
    com.tencent.weibo.utils.QHttpClient qHttpClient -> qHttpClient
    java.lang.String getResource(java.lang.String,java.util.List,com.tencent.weibo.beans.OAuth) -> getResource
    java.lang.String postContent(java.lang.String,java.util.List,com.tencent.weibo.beans.OAuth) -> postContent
    java.lang.String postFile(java.lang.String,java.util.List,java.util.List,com.tencent.weibo.beans.OAuth) -> postFile
    void shutdownConnection() -> shutdownConnection
    com.tencent.weibo.utils.QHttpClient getqHttpClient() -> getqHttpClient
    void setqHttpClient(com.tencent.weibo.utils.QHttpClient) -> setqHttpClient
com.tencent.weibo.oauthv2.OAuthV2 -> com.tencent.weibo.oauthv2.OAuthV2:
    long serialVersionUID -> serialVersionUID
    java.lang.String redirectUri -> redirectUri
    java.lang.String clientId -> clientId
    java.lang.String clientSecret -> clientSecret
    java.lang.String responseType -> responseType
    java.lang.String type -> type
    java.lang.String authorizeCode -> authorizeCode
    java.lang.String accessToken -> accessToken
    java.lang.String expiresIn -> expiresIn
    java.lang.String grantType -> grantType
    java.lang.String refreshToken -> refreshToken
    java.util.List getAuthorizationParamsList() -> getAuthorizationParamsList
    java.util.List getAccessTokenByCodeParamsList() -> getAccessTokenByCodeParamsList
    java.util.List getTokenParamsList() -> getTokenParamsList
    java.lang.String getRedirectUri() -> getRedirectUri
    void setRedirectUri(java.lang.String) -> setRedirectUri
    java.lang.String getClientId() -> getClientId
    void setClientId(java.lang.String) -> setClientId
    java.lang.String getResponeType() -> getResponeType
    java.lang.String getClientSecret() -> getClientSecret
    void setClientSecret(java.lang.String) -> setClientSecret
    void setResponseType(java.lang.String) -> setResponseType
    java.lang.String getType() -> getType
    void setType(java.lang.String) -> setType
    java.lang.String getAuthorizeCode() -> getAuthorizeCode
    void setAuthorizeCode(java.lang.String) -> setAuthorizeCode
    java.lang.String getAccessToken() -> getAccessToken
    void setAccessToken(java.lang.String) -> setAccessToken
    java.lang.String getExpiresIn() -> getExpiresIn
    void setExpiresIn(java.lang.String) -> setExpiresIn
    java.lang.String getGrantType() -> getGrantType
    void setGrantType(java.lang.String) -> setGrantType
    java.lang.String getRefreshToken() -> getRefreshToken
    void setRefreshToken(java.lang.String) -> setRefreshToken
com.tencent.weibo.oauthv2.OAuthV2Client -> com.tencent.weibo.oauthv2.OAuthV2Client:
    java.lang.String TAG -> TAG
    com.tencent.weibo.utils.QHttpClient Q_HTTP_CLIENT -> Q_HTTP_CLIENT
    java.lang.String generateAuthorizationURL(com.tencent.weibo.oauthv2.OAuthV2) -> generateAuthorizationURL
    boolean setAuthorization(java.lang.String,java.lang.String,java.lang.String,com.tencent.weibo.oauthv2.OAuthV2) -> setAuthorization
    boolean parseAuthorization(java.lang.String,com.tencent.weibo.oauthv2.OAuthV2) -> parseAuthorization
    boolean accessToken(com.tencent.weibo.oauthv2.OAuthV2) -> accessToken
    java.lang.String generateImplicitGrantUrl(com.tencent.weibo.oauthv2.OAuthV2) -> generateImplicitGrantUrl
    boolean parseAccessToken(java.lang.String,com.tencent.weibo.oauthv2.OAuthV2) -> parseAccessToken
    boolean parseAccessTokenAndOpenId(java.lang.String,com.tencent.weibo.oauthv2.OAuthV2) -> parseAccessTokenAndOpenId
    com.tencent.weibo.utils.QHttpClient getQHttpClient() -> getQHttpClient
    void setQHttpClient(com.tencent.weibo.utils.QHttpClient) -> setQHttpClient
com.tencent.weibo.oauthv2.OAuthV2Request -> com.tencent.weibo.oauthv2.OAuthV2Request:
    com.tencent.weibo.utils.QHttpClient qHttpClient -> qHttpClient
    java.lang.String getResource(java.lang.String,java.util.List,com.tencent.weibo.beans.OAuth) -> getResource
    void removeExtraClientip(java.util.List,com.tencent.weibo.oauthv2.OAuthV2) -> removeExtraClientip
    java.lang.String postContent(java.lang.String,java.util.List,com.tencent.weibo.beans.OAuth) -> postContent
    java.lang.String postFile(java.lang.String,java.util.List,java.util.List,com.tencent.weibo.beans.OAuth) -> postFile
    void shutdownConnection() -> shutdownConnection
    com.tencent.weibo.utils.QHttpClient getqHttpClient() -> getqHttpClient
    void setqHttpClient(com.tencent.weibo.utils.QHttpClient) -> setqHttpClient
com.tencent.weibo.utils.QArrayList -> com.tencent.weibo.utils.QArrayList:
    long serialVersionUID -> serialVersionUID
    boolean add(org.apache.http.NameValuePair) -> add
    boolean add(java.lang.Object) -> add
com.tencent.weibo.utils.QHttpClient -> com.tencent.weibo.utils.QHttpClient:
    int CONNECTION_TIMEOUT -> CONNECTION_TIMEOUT
    int CON_TIME_OUT_MS -> CON_TIME_OUT_MS
    int SO_TIME_OUT_MS -> SO_TIME_OUT_MS
    int MAX_CONNECTIONS_PER_HOST -> MAX_CONNECTIONS_PER_HOST
    int MAX_TOTAL_CONNECTIONS -> MAX_TOTAL_CONNECTIONS
    java.lang.String TAG -> TAG
    org.apache.http.client.HttpClient httpClient -> httpClient
    java.lang.String httpGet(java.lang.String,java.lang.String) -> httpGet
    java.lang.String httpPost(java.lang.String,java.lang.String) -> httpPost
    java.lang.String httpPostWithFile(java.lang.String,java.lang.String,java.util.List) -> httpPostWithFile
    void shutdownConnection() -> shutdownConnection
com.tencent.weibo.utils.QSSLSocketFactory -> com.tencent.weibo.utils.QSSLSocketFactory:
    javax.net.ssl.SSLContext sslcontext -> sslcontext
    javax.net.ssl.SSLContext getEasySSLContext() -> getEasySSLContext
    javax.net.ssl.SSLContext getSSLContext() -> getSSLContext
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams) -> connectSocket
    java.net.Socket createSocket() -> createSocket
    boolean isSecure(java.net.Socket) -> isSecure
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.tencent.weibo.utils.QSSLSocketFactory$1 -> com.tencent.weibo.utils.QSSLSocketFactory$1:
    com.tencent.weibo.utils.QSSLSocketFactory this$0 -> this$0
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
com.tencent.weibo.utils.QStrOperate -> com.tencent.weibo.utils.QStrOperate:
    boolean hasValue(java.lang.String) -> hasValue
    java.lang.String paramEncode(java.lang.String) -> paramEncode
    java.lang.String ParamDecode(java.lang.String) -> ParamDecode
    java.util.List getQueryParamsList(java.lang.String) -> getQueryParamsList
    java.lang.String getQueryString(java.util.List) -> getQueryString
    java.lang.String getTimeState(java.lang.String) -> getTimeState
com.tencent.weibo.webview.OAuthV1AuthorizeWebView -> com.tencent.weibo.webview.OAuthV1AuthorizeWebView:
    int RESULT_CODE -> RESULT_CODE
    java.lang.String TAG -> TAG
    com.tencent.weibo.oauthv1.OAuthV1 oAuth -> oAuth
    void onCreate(android.os.Bundle) -> onCreate
    com.tencent.weibo.oauthv1.OAuthV1 access$0(com.tencent.weibo.webview.OAuthV1AuthorizeWebView) -> access$0
com.tencent.weibo.webview.OAuthV1AuthorizeWebView$1 -> com.tencent.weibo.webview.OAuthV1AuthorizeWebView$1:
    com.tencent.weibo.webview.OAuthV1AuthorizeWebView this$0 -> this$0
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError) -> onReceivedSslError
com.tencent.weibo.webview.OAuthV2AuthorizeWebView -> com.tencent.weibo.webview.OAuthV2AuthorizeWebView:
    int RESULT_CODE -> RESULT_CODE
    java.lang.String TAG -> TAG
    com.tencent.weibo.oauthv2.OAuthV2 oAuth -> oAuth
    void onCreate(android.os.Bundle) -> onCreate
    com.tencent.weibo.oauthv2.OAuthV2 access$0(com.tencent.weibo.webview.OAuthV2AuthorizeWebView) -> access$0
com.tencent.weibo.webview.OAuthV2AuthorizeWebView$1 -> com.tencent.weibo.webview.OAuthV2AuthorizeWebView$1:
    com.tencent.weibo.webview.OAuthV2AuthorizeWebView this$0 -> this$0
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError) -> onReceivedSslError
com.umeng.analytics.MobclickAgent -> com.umeng.a.a:
    com.umeng.analytics.b a -> a
    com.umeng.analytics.onlineconfig.a b -> b
    void onPause(android.content.Context) -> a
    void onResume(android.content.Context) -> b
com.umeng.analytics.a -> com.umeng.a.b:
    java.lang.Thread$UncaughtExceptionHandler a -> a
    com.umeng.analytics.i b -> b
    android.content.Context c -> c
    void a(android.content.Context) -> a
    void a(com.umeng.analytics.i) -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
com.umeng.analytics.a.a -> com.umeng.a.a.a:
    java.util.HashMap a -> a
    java.lang.String b -> b
    long c -> c
    long d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    void b(org.json.JSONObject) -> a
    boolean a() -> a
com.umeng.analytics.a.b -> com.umeng.a.a.b:
    java.lang.String a -> a
    java.util.ArrayList b -> b
    void b(org.json.JSONObject) -> a
    boolean a() -> a
    void a(com.umeng.analytics.a.b) -> a
com.umeng.analytics.a.c -> com.umeng.a.a.c:
    com.umeng.analytics.a.b a -> a
com.umeng.analytics.a.d -> com.umeng.a.a.d:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String a(java.lang.Throwable) -> a
    boolean a() -> a
    void a(org.json.JSONObject) -> b
    void b(org.json.JSONObject) -> a
com.umeng.analytics.a.e -> com.umeng.a.a.e:
    java.lang.String a -> a
    java.lang.String b -> b
    int c -> c
    long d -> d
    java.lang.String k -> j
    java.lang.String l -> k
    java.lang.String m -> l
    java.lang.String n -> m
    boolean a() -> a
    void a(org.json.JSONObject) -> b
    void b(org.json.JSONObject) -> a
com.umeng.analytics.a.f -> com.umeng.a.a.f:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    long f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    java.lang.String j -> j
    java.lang.String k -> k
    java.lang.String l -> l
    java.lang.String m -> m
    java.lang.String n -> n
    java.lang.String o -> o
    long p -> p
    java.lang.String q -> q
    java.lang.String r -> r
    java.lang.String s -> s
    java.lang.String t -> t
    java.lang.String u -> u
    java.lang.String v -> v
    java.lang.String w -> w
    java.lang.String x -> x
    int y -> y
    java.lang.String z -> z
    java.lang.String A -> A
    java.lang.String B -> B
    java.lang.String C -> C
    java.lang.String D -> D
    java.lang.String E -> E
    java.lang.String F -> F
    java.lang.String G -> G
    java.lang.String H -> H
    java.lang.String I -> I
    java.lang.String J -> J
    java.lang.String K -> K
    java.lang.String L -> L
    java.lang.String M -> M
    java.lang.String N -> N
    java.lang.String O -> O
    java.lang.String P -> P
    java.lang.String Q -> Q
    java.lang.String R -> R
    java.lang.String S -> S
    java.lang.String T -> T
    java.lang.String U -> U
    java.lang.String V -> V
    java.lang.String W -> W
    java.lang.String X -> X
    java.lang.String Y -> Y
    java.lang.String Z -> Z
    java.lang.String aa -> aa
    java.lang.String ab -> ab
    java.lang.String ac -> ac
    java.lang.String ad -> ad
    java.lang.String ae -> ae
    java.lang.String af -> af
    java.lang.String ag -> ag
    java.lang.String ah -> ah
    java.lang.String ai -> ai
    java.lang.String aj -> aj
    java.lang.String ak -> ak
    java.lang.String al -> al
    void b(org.json.JSONObject) -> a
    boolean a() -> a
    void b(android.content.Context,java.lang.String[]) -> a
    boolean b() -> b
com.umeng.analytics.a.g -> com.umeng.a.a.g:
    void b(org.json.JSONObject) -> a
    boolean a() -> a
com.umeng.analytics.a.h -> com.umeng.a.a.h:
    com.umeng.analytics.a.o a -> a
    boolean a() -> a
    void a(org.json.JSONObject) -> b
    void b(org.json.JSONObject) -> a
com.umeng.analytics.a.i -> com.umeng.a.a.i:
    java.util.ArrayList a -> a
    java.util.ArrayList b -> b
    java.util.ArrayList c -> c
    java.util.ArrayList d -> d
    java.util.ArrayList e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    java.lang.String j -> j
    void a(com.umeng.analytics.a.h) -> a
    void a(com.umeng.analytics.a.m) -> a
    void a(com.umeng.analytics.a.d) -> a
    void a(org.json.JSONObject) -> b
    org.json.JSONArray a(java.util.ArrayList) -> a
    void b(org.json.JSONObject) -> a
    boolean a() -> a
    void a(com.umeng.analytics.a.i) -> a
    int b() -> b
    void c() -> c
com.umeng.analytics.a.j -> com.umeng.a.a.j:
    com.umeng.analytics.a.i a -> a
com.umeng.analytics.a.k -> com.umeng.a.a.k:
    java.lang.String a -> a
    int b -> b
com.umeng.analytics.a.l -> com.umeng.a.a.l:
    java.lang.String e -> e
    boolean a() -> a
    void b(org.json.JSONObject) -> a
    void a(org.json.JSONObject) -> b
com.umeng.analytics.a.m -> com.umeng.a.a.m:
    com.umeng.analytics.a.o a -> a
    com.umeng.analytics.a.p b -> b
    long c -> c
    java.util.ArrayList d -> d
    com.umeng.analytics.a.m a(android.content.Context) -> a
    java.util.ArrayList c(android.content.SharedPreferences) -> a
    android.content.SharedPreferences$Editor a(android.content.SharedPreferences,java.util.ArrayList,long,long) -> a
    boolean a() -> a
    void a(org.json.JSONObject) -> b
    void b(org.json.JSONObject) -> a
com.umeng.analytics.a.n -> com.umeng.a.a.n:
    java.lang.String g -> f
    java.lang.String h -> g
    java.lang.String i -> h
    java.lang.String j -> i
    boolean a() -> a
    void b(org.json.JSONObject) -> a
    void a(org.json.JSONObject) -> b
com.umeng.analytics.a.o -> com.umeng.a.a.o:
    double a -> a
    double b -> b
    long c -> c
    android.content.SharedPreferences$Editor a(android.content.Context,android.content.SharedPreferences) -> a
    boolean a(android.location.Location,android.content.SharedPreferences) -> a
    void b(org.json.JSONObject) -> a
    void a(org.json.JSONObject) -> b
    boolean a() -> a
com.umeng.analytics.a.p -> com.umeng.a.a.p:
    long a -> a
    long b -> b
    void b(org.json.JSONObject) -> a
    boolean a() -> a
    com.umeng.analytics.a.p a(android.content.Context) -> a
com.umeng.analytics.b -> com.umeng.a.c:
    java.util.concurrent.ExecutorService a -> a
    java.lang.String m -> m
    java.lang.String n -> n
    int o -> o
    int p -> p
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String q -> q
    java.lang.String r -> r
    java.lang.String s -> s
    long t -> t
    int u -> u
    int v -> v
    java.util.Stack w -> w
    java.util.ArrayList x -> x
    void a(android.content.Context) -> a
    void b(android.content.Context) -> b
    void i(android.content.Context) -> c
    void j(android.content.Context) -> d
    void b(android.content.Context,java.lang.Throwable) -> a
    void a(com.umeng.analytics.b,android.content.Context) -> a
    void b(com.umeng.analytics.b,android.content.Context) -> b
com.umeng.analytics.b$a -> com.umeng.a.d:
    java.lang.Object b -> b
    android.content.Context c -> c
    int d -> d
    com.umeng.analytics.b a -> a
    void run() -> run
com.umeng.analytics.c -> com.umeng.a.e:
    com.umeng.analytics.a.i a -> a
    java.util.HashMap b -> b
    java.util.HashMap c -> c
    int d -> d
    int a() -> a
    boolean b() -> b
    void a(com.umeng.analytics.a.d) -> a
    void a(com.umeng.analytics.a.h) -> a
    void a(com.umeng.analytics.a.m) -> a
    boolean c() -> c
    void a(android.content.Context) -> a
    void b(android.content.Context) -> b
    org.json.JSONObject d() -> d
    void e() -> e
com.umeng.analytics.d -> com.umeng.a.f:
    com.umeng.analytics.a a -> a
    java.lang.Object b -> b
    android.os.Handler c -> c
    com.umeng.analytics.c d -> d
    com.umeng.analytics.a.f e -> e
    int f -> f
    int g -> g
    int h -> h
    int i -> i
    int j -> j
    java.lang.String m -> m
    java.lang.String n -> n
    int o -> o
    long p -> p
    long q -> q
    long r -> r
    java.lang.String k -> k
    java.lang.String l -> l
    boolean s -> s
    void a(android.content.Context,int) -> a
    java.lang.String c(android.content.Context) -> a
    org.json.JSONObject g(android.content.Context) -> b
    java.lang.String a(java.io.InputStream) -> a
    java.lang.String a(android.content.Context,org.json.JSONObject,java.lang.String) -> a
    java.lang.Object a(com.umeng.analytics.d) -> a
    void a(com.umeng.analytics.d,android.content.Context) -> a
com.umeng.analytics.d$a -> com.umeng.a.g:
    android.content.Context b -> b
    com.umeng.analytics.d a -> a
    void run() -> run
com.umeng.analytics.d$b -> com.umeng.a.h:
    android.content.Context b -> b
    com.umeng.analytics.d a -> a
    void run() -> run
com.umeng.analytics.e -> com.umeng.a.i:
    com.umeng.analytics.d a -> a
com.umeng.analytics.f -> com.umeng.a.j:
    java.lang.String a -> a
    long b -> b
com.umeng.analytics.g -> com.umeng.a.k:
    long d -> a
    long g -> b
    int h -> c
    boolean i -> d
    boolean j -> e
    boolean k -> f
    boolean l -> g
    boolean m -> h
    java.lang.Object p -> i
    java.lang.String[] r -> j
    java.lang.String[] s -> k
    boolean t -> l
com.umeng.analytics.h -> com.umeng.a.l:
    java.lang.String a -> a
    java.lang.String a(android.content.Context) -> a
com.umeng.analytics.i -> com.umeng.a.m:
    void b(android.content.Context,java.lang.Throwable) -> a
com.umeng.analytics.j -> com.umeng.a.n:
    long a -> a
    long b -> b
    android.content.SharedPreferences c(android.content.Context) -> a
    android.content.SharedPreferences e(android.content.Context) -> b
    java.lang.String g(android.content.Context) -> e
    int[] i(android.content.Context) -> c
    org.json.JSONObject a(android.content.Context,java.lang.String) -> a
    java.lang.String a(java.io.InputStream) -> a
    void a(android.content.Context,org.json.JSONObject,java.lang.String) -> b
    void a(android.content.Context,com.umeng.analytics.a.g,java.lang.String) -> a
    void b(android.content.Context,org.json.JSONObject,java.lang.String) -> a
    void j(android.content.Context) -> d
com.umeng.analytics.onlineconfig.UmengOnlineConfigureListener -> com.umeng.a.b.a:
com.umeng.analytics.onlineconfig.a -> com.umeng.a.b.b:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    com.umeng.analytics.onlineconfig.UmengOnlineConfigureListener f -> f
    com.umeng.analytics.onlineconfig.c g -> g
    void a(com.umeng.analytics.onlineconfig.c) -> a
com.umeng.analytics.onlineconfig.c -> com.umeng.a.b.c:
com.umeng.common.Log -> com.umeng.common.a:
    boolean LOG -> a
    void a(java.lang.String,java.lang.String) -> a
    void a(java.lang.String,java.lang.String,java.lang.Exception) -> a
    void b(java.lang.String,java.lang.String) -> b
    void b(java.lang.String,java.lang.String,java.lang.Exception) -> b
    void c(java.lang.String,java.lang.String) -> c
    void c(java.lang.String,java.lang.String,java.lang.Exception) -> c
    void e(java.lang.String,java.lang.String) -> d
    void e(java.lang.String,java.lang.String,java.lang.Exception) -> d
com.umeng.common.a.a -> com.umeng.common.a.a:
    int a(android.content.Context) -> a
    int b(android.content.Context) -> b
    int c(android.content.Context) -> c
    int d(android.content.Context) -> d
    int f(android.content.Context) -> e
com.umeng.common.a.c -> com.umeng.common.a.b:
    int a(android.content.Context) -> a
    int h(android.content.Context) -> b
    int j(android.content.Context) -> c
    int k(android.content.Context) -> d
    int l(android.content.Context) -> e
com.umeng.common.b -> com.umeng.common.b:
    java.lang.String a -> a
    java.lang.String d(android.content.Context) -> a
    java.lang.String e(android.content.Context) -> b
    boolean a(android.content.Context,java.lang.String) -> a
    java.lang.String a() -> a
    java.lang.String g(android.content.Context) -> c
    java.lang.String h(android.content.Context) -> d
    java.lang.String[] k(android.content.Context) -> e
    boolean l(android.content.Context) -> f
    android.location.Location m(android.content.Context) -> g
    boolean n(android.content.Context) -> h
    boolean b() -> b
    int o(android.content.Context) -> i
    java.lang.String[] p(android.content.Context) -> j
    java.util.Locale y(android.content.Context) -> r
    java.lang.String q(android.content.Context) -> k
    java.lang.String r(android.content.Context) -> l
    java.lang.String s(android.content.Context) -> m
    int a(java.lang.Object,java.lang.String) -> a
    java.lang.String t(android.content.Context) -> n
    java.lang.String a(java.util.Date) -> a
    java.lang.String u(android.content.Context) -> o
    java.lang.String v(android.content.Context) -> p
    java.lang.String w(android.content.Context) -> q
com.umeng.common.c -> com.umeng.common.c:
    java.lang.String a -> a
    com.umeng.common.c b -> b
    java.lang.String c -> c
    java.lang.Class d -> d
    java.lang.Class e -> e
    java.lang.Class f -> f
    java.lang.Class g -> g
    java.lang.Class h -> h
    java.lang.Class i -> i
    java.lang.Class j -> j
    com.umeng.common.c a(android.content.Context) -> a
    int c(java.lang.String) -> a
    int d(java.lang.String) -> b
    int e(java.lang.String) -> c
    int g(java.lang.String) -> d
    int a(java.lang.Class,java.lang.String) -> a
com.umeng.common.net.DownloadingService -> com.umeng.common.net.DownloadingService:
    java.lang.String q -> d
    android.app.NotificationManager r -> e
    com.umeng.common.net.d s -> f
    android.content.Context x -> g
    android.os.Handler y -> h
    com.umeng.common.net.DownloadingService$a n -> a
    boolean o -> b
    java.util.Map A -> i
    android.util.SparseArray B -> j
    android.os.Messenger p -> c
    android.content.BroadcastReceiver C -> k
    java.lang.Boolean D -> l
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onStart(android.content.Intent,int) -> onStart
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    java.lang.String a() -> a
    com.umeng.common.net.d a(com.umeng.common.net.DownloadingService) -> a
    java.util.Map b() -> b
    android.content.Context b(com.umeng.common.net.DownloadingService) -> b
    void a(com.umeng.common.net.DownloadingService,com.umeng.common.net.a$a) -> a
    android.util.SparseArray c() -> c
    android.app.NotificationManager c(com.umeng.common.net.DownloadingService) -> c
    android.os.Handler d(com.umeng.common.net.DownloadingService) -> d
    void a(com.umeng.common.net.DownloadingService,java.lang.String) -> a
    void a(com.umeng.common.net.DownloadingService,android.app.NotificationManager) -> a
    void a(java.lang.Boolean) -> a
com.umeng.common.net.DownloadingService$a -> com.umeng.common.net.a:
    void a(int) -> a
    void a(int,int) -> a
    void a(int,java.lang.String) -> a
    void a$72b50ee8(int) -> b
com.umeng.common.net.DownloadingService$b -> com.umeng.common.net.b:
    android.content.Context b -> b
    boolean c -> c
    java.io.File d -> d
    int e -> e
    long f -> f
    long g -> g
    int h -> h
    int i -> i
    com.umeng.common.net.DownloadingService$a j -> j
    com.umeng.common.net.a$a k -> k
    com.umeng.common.net.DownloadingService a -> a
    void run() -> run
    void a(int) -> a
    void a(boolean) -> a
    void a(java.lang.Exception) -> a
    android.content.Context a(com.umeng.common.net.DownloadingService$b) -> a
    com.umeng.common.net.DownloadingService b(com.umeng.common.net.DownloadingService$b) -> b
com.umeng.common.net.DownloadingService$c -> com.umeng.common.net.c:
    com.umeng.common.net.DownloadingService a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.umeng.common.net.a -> com.umeng.common.net.d:
    java.lang.String b -> a
com.umeng.common.net.a$a -> com.umeng.common.net.e:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String[] f -> f
    boolean g -> g
com.umeng.common.net.c -> com.umeng.common.net.f:
    java.lang.String a -> a
    android.content.Context i -> b
    com.umeng.common.net.c$a k -> c
    com.umeng.common.net.c a(android.content.Context) -> a
    boolean a(java.lang.String,java.lang.String) -> a
    void a(java.lang.String,java.lang.String,int) -> a
    void a$13462e() -> a
    void finalize() -> finalize
    java.lang.String a() -> b
com.umeng.common.net.c$a -> com.umeng.common.net.g:
    com.umeng.common.net.c a -> a
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.umeng.common.net.c$b -> com.umeng.common.net.h:
    com.umeng.common.net.c a -> a
com.umeng.common.net.d -> com.umeng.common.net.i:
    java.lang.String c -> a
    int a(com.umeng.common.net.a$a) -> a
    android.app.Notification a(android.content.Context,com.umeng.common.net.a$a,int,int) -> a
    boolean a(android.content.Context) -> a
    boolean a(com.umeng.common.net.a$a,boolean,java.util.Map,android.os.Messenger) -> a
    void b(android.content.Context,android.app.Notification,int) -> a
    void a(android.content.Context,android.util.SparseArray,java.util.Map,int) -> a
    void a(com.umeng.common.net.a$a,long,long,long) -> a
    void a(java.util.Map,boolean,java.lang.String[]) -> a
    boolean a(com.umeng.common.net.DownloadingService,android.util.SparseArray,java.util.Map,android.content.Intent) -> a
    java.lang.String a() -> a
com.umeng.common.net.d$a -> com.umeng.common.net.j:
    com.umeng.common.net.DownloadingService$b a -> a
    android.app.Notification b -> b
    int c -> c
    int d -> d
    com.umeng.common.net.a$a e -> e
    long[] f -> f
com.umeng.common.net.d$b -> com.umeng.common.net.k:
    int a -> a
    java.lang.String b -> b
    com.umeng.common.net.a$a d -> d
    android.content.Context e -> e
    android.app.NotificationManager f -> f
    android.util.SparseArray g -> g
    java.util.Map h -> h
    com.umeng.common.net.d c -> c
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.umeng.common.net.e -> com.umeng.common.net.l:
    com.umeng.common.net.d a -> a
    java.lang.String[] b -> b
    boolean c -> c
    java.util.Map d -> d
    void run() -> run
com.umeng.common.net.f -> com.umeng.common.net.m:
    com.umeng.common.net.DownloadingService a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.umeng.common.net.g -> com.umeng.common.net.n:
    com.umeng.common.net.DownloadingService a -> a
    void a(int) -> a
    void a(int,int) -> a
    void a(int,java.lang.String) -> a
    void a$72b50ee8(int) -> b
com.umeng.common.net.i -> com.umeng.common.net.o:
    com.umeng.common.net.DownloadingService a -> a
    java.lang.String b -> b
    void run() -> run
com.umeng.common.net.j -> com.umeng.common.net.p:
    com.umeng.common.net.DownloadingService a -> a
    void run() -> run
com.umeng.common.net.k -> com.umeng.common.net.q:
    com.umeng.common.net.DownloadingService$b a -> a
    void run() -> run
com.umeng.common.net.m -> com.umeng.common.net.r:
    java.lang.String a(int,java.lang.String) -> a
    android.app.PendingIntent b(android.content.Context,java.lang.String) -> a
com.umeng.common.net.q -> com.umeng.common.net.s:
    java.lang.String b -> b
    boolean a -> a
    java.util.Map f -> c
    java.lang.Thread g -> d
    java.io.File a(java.lang.String,android.content.Context,boolean[]) -> a
    boolean a$52f4b848(java.lang.String,int) -> a
    boolean a$505cff18(java.lang.String) -> a
    void a$21cb8e54(java.io.File,long) -> a
    void a(java.io.File,long) -> b
    void a$58fe1566() -> a
com.umeng.common.net.r -> com.umeng.common.net.t:
    java.io.File a -> a
    long b -> b
    void run() -> run
com.umeng.common.util.DeltaUpdate -> com.umeng.common.util.DeltaUpdate:
    boolean a -> a
    int a(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String a(android.content.Context) -> a
    int bspatch(java.lang.String,java.lang.String,java.lang.String) -> bspatch
com.umeng.common.util.f -> com.umeng.common.util.a:
    int a -> a
    byte[] a(java.lang.String,java.lang.String) -> a
com.umeng.common.util.h -> com.umeng.common.util.b:
    java.lang.String a -> a
    java.lang.String a(java.lang.String) -> a
    java.lang.String b(java.lang.String) -> b
    java.lang.String a(java.io.File) -> a
    boolean d(java.lang.String) -> c
    java.lang.String a() -> a
com.unionpay.upomp.yidatec.A -> com.unionpay.upomp.yidatec.A:
    com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity a -> a
    void onClick(android.view.View) -> onClick
    java.lang.String a(java.lang.String,java.lang.String) -> a
    java.lang.String b(java.lang.String,java.lang.String) -> b
    byte[] a(byte[],java.lang.String) -> a
    byte[] a(java.lang.String) -> a
    java.lang.String b(java.lang.String) -> b
    java.lang.String c(java.lang.String) -> c
com.unionpay.upomp.yidatec.B -> com.unionpay.upomp.yidatec.B:
    com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity a -> a
    void onClick(android.view.View) -> onClick
    byte[] a(byte[]) -> a
    java.lang.String a(java.lang.String) -> a
    byte[] b(java.lang.String) -> b
com.unionpay.upomp.yidatec.C -> com.unionpay.upomp.yidatec.C:
    com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity a -> a
    void onClick(android.view.View) -> onClick
    byte[] a(java.lang.String) -> a
    byte[] b(java.lang.String) -> b
com.unionpay.upomp.yidatec.D -> com.unionpay.upomp.yidatec.D:
    com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity a -> a
    void onChronometerTick(android.widget.Chronometer) -> onChronometerTick
com.unionpay.upomp.yidatec.E -> com.unionpay.upomp.yidatec.E:
    com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity a -> a
    void onClick(android.view.View) -> onClick
    android.widget.RelativeLayout a(android.content.Context,int,int,java.lang.String,android.graphics.drawable.Drawable,int,int) -> a
    android.widget.RelativeLayout a(android.content.Context,int,android.graphics.drawable.Drawable) -> a
    android.view.View a(android.content.Context,java.lang.String) -> a
com.unionpay.upomp.yidatec.F -> com.unionpay.upomp.yidatec.F:
    com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.G -> com.unionpay.upomp.yidatec.G:
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.H -> com.unionpay.upomp.yidatec.H:
    java.lang.String a -> a
    org.xmlpull.v1.XmlSerializer b -> b
    java.io.StringWriter bj -> bj
    void a(java.io.InputStream) -> a
com.unionpay.upomp.yidatec.I -> com.unionpay.upomp.yidatec.I:
    com.unionpay.upomp.yidatec.bankcardmanage.cardinfo.BankCardInfoActivity a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.J -> com.unionpay.upomp.yidatec.J:
    com.unionpay.upomp.yidatec.I a -> a
    com.unionpay.upomp.yidatec.Q b -> b
    void onCancel(android.content.DialogInterface) -> onCancel
com.unionpay.upomp.yidatec.K -> com.unionpay.upomp.yidatec.K:
    com.unionpay.upomp.yidatec.bankcardmanage.cardinfo.BankCardInfoActivity a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.L -> com.unionpay.upomp.yidatec.L:
    com.unionpay.upomp.yidatec.K a -> a
    com.unionpay.upomp.yidatec.R b -> b
    void onCancel(android.content.DialogInterface) -> onCancel
com.unionpay.upomp.yidatec.M -> com.unionpay.upomp.yidatec.M:
    com.unionpay.upomp.yidatec.bankcardmanage.cardinfo.BankCardInfoActivity a -> a
    com.unionpay.upomp.yidatec.aI b -> b
    void run() -> run
    com.unionpay.upomp.yidatec.bankcardmanage.cardinfo.BankCardInfoActivity a(com.unionpay.upomp.yidatec.M) -> a
com.unionpay.upomp.yidatec.N -> com.unionpay.upomp.yidatec.N:
    com.unionpay.upomp.yidatec.M a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.O -> com.unionpay.upomp.yidatec.O:
    com.unionpay.upomp.yidatec.bankcardmanage.cardinfo.BankCardInfoActivity a -> a
    com.unionpay.upomp.yidatec.aI b -> b
    void run() -> run
    com.unionpay.upomp.yidatec.bankcardmanage.cardinfo.BankCardInfoActivity a(com.unionpay.upomp.yidatec.O) -> a
com.unionpay.upomp.yidatec.P -> com.unionpay.upomp.yidatec.P:
    com.unionpay.upomp.yidatec.O a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.Q -> com.unionpay.upomp.yidatec.Q:
    com.unionpay.upomp.yidatec.S c -> c
    com.unionpay.upomp.yidatec.U a -> a
    com.unionpay.upomp.yidatec.k b -> b
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.R -> com.unionpay.upomp.yidatec.R:
    com.unionpay.upomp.yidatec.T c -> c
    com.unionpay.upomp.yidatec.V a -> a
    com.unionpay.upomp.yidatec.k b -> b
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.S -> com.unionpay.upomp.yidatec.S:
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.T -> com.unionpay.upomp.yidatec.T:
    void b(com.unionpay.upomp.yidatec.aI) -> b
com.unionpay.upomp.yidatec.U -> com.unionpay.upomp.yidatec.U:
    void a(java.io.InputStream) -> a
com.unionpay.upomp.yidatec.V -> com.unionpay.upomp.yidatec.V:
    void a(java.io.InputStream) -> a
com.unionpay.upomp.yidatec.W -> com.unionpay.upomp.yidatec.W:
    java.lang.String a -> a
    java.lang.String b -> b
com.unionpay.upomp.yidatec.X -> com.unionpay.upomp.yidatec.X:
    com.unionpay.upomp.yidatec.Y c -> c
    com.unionpay.upomp.yidatec.Z a -> a
    java.lang.String b -> b
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.Y -> com.unionpay.upomp.yidatec.Y:
    void b(com.unionpay.upomp.yidatec.aI) -> b
com.unionpay.upomp.yidatec.Z -> com.unionpay.upomp.yidatec.Z:
    java.util.ArrayList a -> a
    void a(java.io.InputStream) -> a
com.unionpay.upomp.yidatec.a -> com.unionpay.upomp.yidatec.a:
    com.unionpay.upomp.yidatec.l a -> a
    com.unionpay.upomp.yidatec.m b -> b
    void a() -> a
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.aA -> com.unionpay.upomp.yidatec.aA:
    java.lang.String a -> a
    void a(java.io.InputStream) -> a
com.unionpay.upomp.yidatec.aB -> com.unionpay.upomp.yidatec.aB:
    void a(com.unionpay.upomp.yidatec.aD) -> a
com.unionpay.upomp.yidatec.aC -> com.unionpay.upomp.yidatec.aC:
    com.unionpay.upomp.yidatec.aB a -> a
    com.unionpay.upomp.yidatec.aD b -> b
    java.lang.String c -> c
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    void a() -> a
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.aD -> com.unionpay.upomp.yidatec.aD:
    java.lang.String bj -> bj
    java.lang.String bk -> bk
    java.lang.String a -> a
    java.lang.String b -> b
    void a(java.io.InputStream) -> a
com.unionpay.upomp.yidatec.aE -> com.unionpay.upomp.yidatec.aE:
    java.lang.String a -> a
    boolean b -> b
    android.os.Handler c -> c
    int d -> d
    int e -> e
    void run() -> run
com.unionpay.upomp.yidatec.aF -> com.unionpay.upomp.yidatec.aF:
    com.unionpay.upomp.yidatec.aJ a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
com.unionpay.upomp.yidatec.aG -> com.unionpay.upomp.yidatec.aG:
    com.unionpay.upomp.yidatec.aJ a -> a
com.unionpay.upomp.yidatec.aH -> com.unionpay.upomp.yidatec.aH:
    java.lang.StringBuffer a -> a
    boolean b -> b
    void a(java.lang.String,java.lang.String) -> a
    java.lang.String toString() -> toString
com.unionpay.upomp.yidatec.aI -> com.unionpay.upomp.yidatec.aI:
    boolean a -> a
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String b -> b
    java.lang.String bj -> bj
    java.lang.String bk -> bk
    boolean bl -> bl
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    java.lang.String j -> j
    java.lang.String bm -> bm
    java.lang.String bn -> bn
    java.lang.String bo -> bo
    java.lang.String bp -> bp
    java.lang.String k -> k
    java.lang.String l -> l
    java.lang.String m -> m
    java.lang.String n -> n
    java.lang.String bq -> bq
    java.lang.String br -> br
    java.lang.String o -> o
    java.lang.String p -> p
    java.lang.String q -> q
    java.lang.String r -> r
    java.lang.String s -> s
    java.lang.String t -> t
    java.lang.String u -> u
    java.lang.String v -> v
    java.lang.String w -> w
    java.lang.String x -> x
    java.lang.String y -> y
    java.lang.String z -> z
    java.lang.String A -> A
    java.lang.String B -> B
    java.lang.String C -> C
    java.lang.String D -> D
    java.lang.String E -> E
    java.lang.String F -> F
    java.lang.String G -> G
    java.lang.String H -> H
    java.lang.String I -> I
    java.lang.String J -> J
    java.lang.String K -> K
    java.lang.String L -> L
    java.lang.String M -> M
    java.lang.String N -> N
    java.lang.String O -> O
    java.lang.String P -> P
    java.lang.String Q -> Q
    java.lang.String R -> R
    java.lang.String S -> S
    java.lang.String T -> T
    java.lang.String U -> U
    java.lang.String V -> V
    java.lang.String W -> W
    java.lang.String X -> X
    java.lang.String Y -> Y
    java.lang.String Z -> Z
    java.lang.String aa -> aa
    java.lang.String ab -> ab
    java.lang.String ac -> ac
    java.lang.String ad -> ad
    java.lang.String ae -> ae
    java.lang.String af -> af
    java.lang.String ag -> ag
    java.lang.String ah -> ah
    java.lang.String ai -> ai
    java.lang.String aj -> aj
    java.lang.String ak -> ak
    java.lang.String al -> al
    java.lang.String am -> am
    java.lang.String an -> an
    java.lang.String ao -> ao
    java.lang.String ap -> ap
    java.lang.String aq -> aq
    java.lang.String ar -> ar
    java.lang.String as -> as
    java.lang.String at -> at
    java.lang.String au -> au
    java.lang.String av -> av
    java.lang.String aw -> aw
    java.lang.String ax -> ax
    java.lang.String ay -> ay
    java.lang.String az -> az
    java.lang.String aA -> aA
    java.lang.String bs -> bs
    java.lang.String aB -> aB
    java.lang.String aC -> aC
    java.lang.String aD -> aD
    java.lang.String aE -> aE
    java.lang.String aF -> aF
    java.lang.String aG -> aG
    java.lang.String aH -> aH
    java.lang.String aI -> aI
    java.lang.String aJ -> aJ
    java.lang.String aK -> aK
    java.lang.String aL -> aL
    java.lang.String aM -> aM
    java.lang.String aN -> aN
    java.lang.String aO -> aO
    java.lang.String aP -> aP
    java.lang.String aQ -> aQ
    java.lang.String aR -> aR
    java.lang.String aS -> aS
    java.lang.String aT -> aT
    java.lang.String aU -> aU
    java.lang.String aV -> aV
    java.lang.String aW -> aW
    boolean a() -> a
    void a(boolean) -> a
    void a(java.lang.String) -> a
    java.lang.String b() -> b
    void b(java.lang.String) -> b
    java.lang.String c() -> c
    void c(java.lang.String) -> c
    java.lang.String d() -> d
    void d(java.lang.String) -> d
    java.lang.String e() -> e
    void e(java.lang.String) -> e
    java.lang.String f() -> f
    void g() -> g
    java.lang.String h() -> h
    java.lang.String i() -> i
    java.lang.String j() -> j
    void a(org.xmlpull.v1.XmlSerializer,java.lang.String) -> a
    void a(java.io.OutputStream) -> a
    void b(java.io.InputStream) -> b
    void a(java.io.InputStream) -> a
com.unionpay.upomp.yidatec.aJ -> com.unionpay.upomp.yidatec.aJ:
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    java.net.Proxy j -> j
    void a(com.unionpay.upomp.yidatec.aO,com.unionpay.upomp.yidatec.aN) -> a
    java.net.HttpURLConnection a(java.lang.String,com.unionpay.upomp.yidatec.aK) -> a
    java.net.HttpURLConnection a(java.lang.String,java.lang.String) -> a
    java.net.Proxy c() -> c
    void a() -> a
com.unionpay.upomp.yidatec.aK -> com.unionpay.upomp.yidatec.aK:
    java.util.Hashtable aX -> aX
    java.lang.String a -> a
    java.lang.String aY -> aY
    byte[] aZ -> aZ
    byte[] ba -> ba
    boolean b -> b
    java.lang.String c -> c
    java.lang.String bb -> bb
    java.lang.String bc -> bc
    java.lang.String d -> d
    void a(java.io.OutputStream) -> a
    void b(java.io.InputStream) -> b
    void c(java.io.InputStream) -> c
    void k() -> k
    java.lang.String l() -> l
    java.lang.String m() -> m
    boolean n() -> n
com.unionpay.upomp.yidatec.aL -> com.unionpay.upomp.yidatec.aL:
    void a(java.lang.String) -> a
    void a(com.unionpay.upomp.yidatec.aK,int,java.lang.String) -> a
    void a(com.unionpay.upomp.yidatec.aK,java.lang.String) -> a
    void b(com.unionpay.upomp.yidatec.aK,java.lang.String) -> b
com.unionpay.upomp.yidatec.aM -> com.unionpay.upomp.yidatec.aM:
    boolean f -> f
    boolean a -> a
    int[] b -> b
    int g -> g
    int c -> c
    java.util.Vector d -> d
    com.unionpay.upomp.yidatec.aN[] e -> e
    void b() -> b
    int a(com.unionpay.upomp.yidatec.aO) -> a
    void a(int) -> a
    void a(com.unionpay.upomp.yidatec.aO,com.unionpay.upomp.yidatec.aN) -> a
com.unionpay.upomp.yidatec.aN -> com.unionpay.upomp.yidatec.aN:
    int a -> a
    boolean b -> b
    com.unionpay.upomp.yidatec.aM c -> c
    void run() -> run
com.unionpay.upomp.yidatec.aO -> com.unionpay.upomp.yidatec.aO:
    java.lang.String a -> a
    java.lang.String bd -> bd
    int be -> be
    int bf -> bf
    boolean bg -> bg
    java.lang.Object bh -> bh
    byte b -> b
    int c -> c
    boolean bi -> bi
    int a() -> a
    void k() -> k
    java.lang.String toString() -> toString
com.unionpay.upomp.yidatec.aP -> com.unionpay.upomp.yidatec.aP:
    java.lang.String a -> a
    java.lang.String b -> b
    com.unionpay.upomp.yidatec.aQ f -> f
    java.lang.String g -> g
    com.unionpay.upomp.yidatec.aQ h -> h
    java.lang.String c -> c
    java.lang.String i -> i
    java.lang.String j -> j
    java.lang.String k -> k
    java.lang.String l -> l
    java.util.Vector m -> m
    boolean d -> d
    java.lang.String e -> e
    com.unionpay.upomp.yidatec.aQ a() -> a
    com.unionpay.upomp.yidatec.aQ b() -> b
    java.util.Vector c() -> c
    java.lang.String a(java.lang.String) -> a
com.unionpay.upomp.yidatec.aQ -> com.unionpay.upomp.yidatec.aQ:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    com.unionpay.upomp.yidatec.aP d -> d
com.unionpay.upomp.yidatec.aR -> com.unionpay.upomp.yidatec.aR:
    void b(com.unionpay.upomp.yidatec.aI) -> b
com.unionpay.upomp.yidatec.aS -> com.unionpay.upomp.yidatec.aS:
    boolean a -> a
    void a(java.io.InputStream) -> a
com.unionpay.upomp.yidatec.aT -> com.unionpay.upomp.yidatec.aT:
    com.unionpay.upomp.yidatec.aR b -> b
    com.unionpay.upomp.yidatec.aS a -> a
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.aU -> com.unionpay.upomp.yidatec.aU:
    void c(com.unionpay.upomp.yidatec.aI) -> c
com.unionpay.upomp.yidatec.aV -> com.unionpay.upomp.yidatec.aV:
    com.unionpay.upomp.yidatec.bu a -> a
    void a(java.io.InputStream) -> a
com.unionpay.upomp.yidatec.aW -> com.unionpay.upomp.yidatec.aW:
    com.unionpay.upomp.yidatec.aU c -> c
    com.unionpay.upomp.yidatec.aV a -> a
    com.unionpay.upomp.yidatec.bu b -> b
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.aX -> com.unionpay.upomp.yidatec.aX:
    com.unionpay.upomp.yidatec.transactionmanage.DealsResultActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.aY -> com.unionpay.upomp.yidatec.aY:
    void c(com.unionpay.upomp.yidatec.aI) -> c
com.unionpay.upomp.yidatec.aZ -> com.unionpay.upomp.yidatec.aZ:
    com.unionpay.upomp.yidatec.bu a -> a
    java.lang.String b -> b
    org.xmlpull.v1.XmlSerializer bj -> bj
    java.io.StringWriter bk -> bk
    void a(java.io.InputStream) -> a
com.unionpay.upomp.yidatec.aa -> com.unionpay.upomp.yidatec.aa:
    com.unionpay.upomp.yidatec.ab c -> c
    com.unionpay.upomp.yidatec.ac a -> a
    com.unionpay.upomp.yidatec.bu b -> b
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.ab -> com.unionpay.upomp.yidatec.ab:
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.ac -> com.unionpay.upomp.yidatec.ac:
    boolean a -> a
    void a(java.io.InputStream) -> a
com.unionpay.upomp.yidatec.ad -> com.unionpay.upomp.yidatec.ad:
    com.unionpay.upomp.yidatec.ax a -> a
    com.unionpay.upomp.yidatec.aK d -> d
    void a(com.unionpay.upomp.yidatec.aK,java.lang.String) -> a
    void a(com.unionpay.upomp.yidatec.aK,int,java.lang.String) -> a
    void b(com.unionpay.upomp.yidatec.aK,java.lang.String) -> b
    void a(java.lang.String) -> a
    void a(java.lang.String,java.lang.String) -> a
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.ae -> com.unionpay.upomp.yidatec.ae:
    com.unionpay.upomp.yidatec.aO a -> a
    int a(com.unionpay.upomp.yidatec.aO) -> a
    void b() -> b
    boolean b(com.unionpay.upomp.yidatec.aO) -> b
com.unionpay.upomp.yidatec.af -> com.unionpay.upomp.yidatec.af:
    com.unionpay.upomp.yidatec.controller.ActivityController a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.unionpay.upomp.yidatec.ag -> com.unionpay.upomp.yidatec.ag:
    com.unionpay.upomp.yidatec.controller.ActivityController a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.ah -> com.unionpay.upomp.yidatec.ah:
    com.unionpay.upomp.yidatec.controller.ActivityController a -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.ai -> com.unionpay.upomp.yidatec.ai:
    com.unionpay.upomp.yidatec.controller.ActivityController a -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.aj -> com.unionpay.upomp.yidatec.aj:
    com.unionpay.upomp.yidatec.controller.ActivityController a -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.ak -> com.unionpay.upomp.yidatec.ak:
    com.unionpay.upomp.yidatec.controller.ActivityController a -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.al -> com.unionpay.upomp.yidatec.al:
    com.unionpay.upomp.yidatec.controller.ActivityController a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.am -> com.unionpay.upomp.yidatec.am:
    com.unionpay.upomp.yidatec.controller.ActivityController a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.an -> com.unionpay.upomp.yidatec.an:
    com.unionpay.upomp.yidatec.controller.ActivityController a -> a
    void onClick(android.view.View) -> onClick
    com.unionpay.upomp.yidatec.controller.ActivityController a(com.unionpay.upomp.yidatec.an) -> a
com.unionpay.upomp.yidatec.ao -> com.unionpay.upomp.yidatec.ao:
    com.unionpay.upomp.yidatec.an a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.ap -> com.unionpay.upomp.yidatec.ap:
    com.unionpay.upomp.yidatec.an a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.aq -> com.unionpay.upomp.yidatec.aq:
    com.unionpay.upomp.yidatec.controller.ActivityController a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.ar -> com.unionpay.upomp.yidatec.ar:
    com.unionpay.upomp.yidatec.controller.ActivityController a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.as -> com.unionpay.upomp.yidatec.as:
    com.unionpay.upomp.yidatec.controller.ActivityController a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.at -> com.unionpay.upomp.yidatec.at:
    com.unionpay.upomp.yidatec.controller.ActivityController a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.au -> com.unionpay.upomp.yidatec.au:
    com.unionpay.upomp.yidatec.controller.ActivityController a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    void run() -> run
com.unionpay.upomp.yidatec.av -> com.unionpay.upomp.yidatec.av:
    com.unionpay.upomp.yidatec.controller.ActivityController a -> a
    com.unionpay.upomp.yidatec.aK b -> b
    void run() -> run
    com.unionpay.upomp.yidatec.controller.ActivityController a(com.unionpay.upomp.yidatec.av) -> a
com.unionpay.upomp.yidatec.aw -> com.unionpay.upomp.yidatec.aw:
    com.unionpay.upomp.yidatec.av a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.ax -> com.unionpay.upomp.yidatec.ax:
    void a(java.lang.String,java.lang.String) -> a
    boolean isFinishing() -> isFinishing
    void a(com.unionpay.upomp.yidatec.aK) -> a
com.unionpay.upomp.yidatec.ay -> com.unionpay.upomp.yidatec.ay:
    com.unionpay.upomp.yidatec.az a -> a
    com.unionpay.upomp.yidatec.aA b -> b
    java.lang.String c -> c
    java.lang.String e -> e
    void a() -> a
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.az -> com.unionpay.upomp.yidatec.az:
    void a(com.unionpay.upomp.yidatec.aA) -> a
com.unionpay.upomp.yidatec.b -> com.unionpay.upomp.yidatec.b:
    com.unionpay.upomp.yidatec.bankcardmanage.BankCardActivity a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.bA -> com.unionpay.upomp.yidatec.bA:
    com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.bB -> com.unionpay.upomp.yidatec.bB:
    com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.bC -> com.unionpay.upomp.yidatec.bC:
    com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.bD -> com.unionpay.upomp.yidatec.bD:
    com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.bE -> com.unionpay.upomp.yidatec.bE:
    com.unionpay.upomp.yidatec.transactionmanage.certification.CertificationActivity a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.unionpay.upomp.yidatec.bF -> com.unionpay.upomp.yidatec.bF:
    com.unionpay.upomp.yidatec.transactionmanage.certification.CertificationActivity a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.unionpay.upomp.yidatec.bG -> com.unionpay.upomp.yidatec.bG:
    com.unionpay.upomp.yidatec.transactionmanage.certification.CertificationActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.bH -> com.unionpay.upomp.yidatec.bH:
    com.unionpay.upomp.yidatec.transactionmanage.certification.CertificationActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.bI -> com.unionpay.upomp.yidatec.bI:
    com.unionpay.upomp.yidatec.transactionmanage.certification.CertificationActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.bJ -> com.unionpay.upomp.yidatec.bJ:
    com.unionpay.upomp.yidatec.transactionmanage.certification.CertificationActivity a -> a
    void run() -> run
com.unionpay.upomp.yidatec.bK -> com.unionpay.upomp.yidatec.bK:
    com.unionpay.upomp.yidatec.transactionmanage.certification.CertificationActivity a -> a
    void run() -> run
com.unionpay.upomp.yidatec.bL -> com.unionpay.upomp.yidatec.bL:
    com.unionpay.upomp.yidatec.transactionmanage.fast.BankDialog a -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.unionpay.upomp.yidatec.bM -> com.unionpay.upomp.yidatec.bM:
    com.unionpay.upomp.yidatec.transactionmanage.fast.BankDialog a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.bN -> com.unionpay.upomp.yidatec.bN:
    com.unionpay.upomp.yidatec.transactionmanage.fast.BankDialog a -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.unionpay.upomp.yidatec.bO -> com.unionpay.upomp.yidatec.bO:
    android.content.Context a -> a
    java.util.List b -> b
    int c -> c
    com.unionpay.upomp.yidatec.transactionmanage.fast.BankDialog d -> d
    void a(com.unionpay.upomp.yidatec.bS) -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.util.List a(com.unionpay.upomp.yidatec.bO) -> a
    int b(com.unionpay.upomp.yidatec.bO) -> b
    void a(com.unionpay.upomp.yidatec.bO,int) -> a
    com.unionpay.upomp.yidatec.transactionmanage.fast.BankDialog c(com.unionpay.upomp.yidatec.bO) -> c
com.unionpay.upomp.yidatec.bP -> com.unionpay.upomp.yidatec.bP:
    com.unionpay.upomp.yidatec.bO a -> a
    int b -> b
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.bQ -> com.unionpay.upomp.yidatec.bQ:
    com.unionpay.upomp.yidatec.bO a -> a
    int b -> b
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.unionpay.upomp.yidatec.bR -> com.unionpay.upomp.yidatec.bR:
    com.unionpay.upomp.yidatec.bO a -> a
    int b -> b
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.bS -> com.unionpay.upomp.yidatec.bS:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    int e -> e
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.unionpay.upomp.yidatec.bT -> com.unionpay.upomp.yidatec.bT:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.unionpay.upomp.yidatec.bU -> com.unionpay.upomp.yidatec.bU:
    com.unionpay.upomp.yidatec.transactionmanage.fast.FastFristActivity a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.unionpay.upomp.yidatec.bV -> com.unionpay.upomp.yidatec.bV:
    com.unionpay.upomp.yidatec.transactionmanage.fast.FastFristActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.bW -> com.unionpay.upomp.yidatec.bW:
    com.unionpay.upomp.yidatec.transactionmanage.fast.FastFristActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.bX -> com.unionpay.upomp.yidatec.bX:
    com.unionpay.upomp.yidatec.transactionmanage.fast.FastFristActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.bY -> com.unionpay.upomp.yidatec.bY:
    com.unionpay.upomp.yidatec.transactionmanage.fast.FastFristActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.bZ -> com.unionpay.upomp.yidatec.bZ:
    com.unionpay.upomp.yidatec.transactionmanage.fast.FastFristActivity a -> a
    void onCancel(android.content.DialogInterface) -> onCancel
    com.unionpay.upomp.yidatec.transactionmanage.fast.FastFristActivity a(com.unionpay.upomp.yidatec.bZ) -> a
com.unionpay.upomp.yidatec.ba -> com.unionpay.upomp.yidatec.ba:
    com.unionpay.upomp.yidatec.transactionmanage.SplashActivity a -> a
    void handleMessage(android.os.Message) -> handleMessage
    com.unionpay.upomp.yidatec.transactionmanage.SplashActivity a(com.unionpay.upomp.yidatec.ba) -> a
com.unionpay.upomp.yidatec.bankcardmanage.BankCardActivity -> com.unionpay.upomp.yidatec.bankcardmanage.BankCardActivity:
    com.unionpay.upomp.yidatec.i n -> n
    java.lang.String o -> o
    java.lang.String p -> p
    android.widget.TextView q -> q
    android.widget.LinearLayout r -> r
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    android.widget.LinearLayout s -> s
    android.widget.LinearLayout t -> t
    android.widget.ListView u -> u
    android.widget.LinearLayout v -> v
    android.widget.ImageView w -> w
    com.unionpay.upomp.yidatec.widget.UpompButton x -> x
    android.widget.LinearLayout y -> y
    android.widget.LinearLayout z -> z
    android.widget.LinearLayout A -> A
    android.widget.TextView B -> B
    java.util.ArrayList d -> d
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    android.widget.LinearLayout a_() -> a_
    void e() -> e
    void a(int) -> a
    void onClick(android.view.View) -> onClick
    void a(com.unionpay.upomp.yidatec.aI) -> a
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onDestroy() -> onDestroy
    com.unionpay.upomp.yidatec.widget.UpompButton a(com.unionpay.upomp.yidatec.bankcardmanage.BankCardActivity) -> a
    android.widget.TextView b(com.unionpay.upomp.yidatec.bankcardmanage.BankCardActivity) -> b
    android.widget.LinearLayout c(com.unionpay.upomp.yidatec.bankcardmanage.BankCardActivity) -> c
    java.lang.String d(com.unionpay.upomp.yidatec.bankcardmanage.BankCardActivity) -> d
    void e(com.unionpay.upomp.yidatec.bankcardmanage.BankCardActivity) -> e
com.unionpay.upomp.yidatec.bankcardmanage.balancequery.BalanceQueryActivity -> com.unionpay.upomp.yidatec.bankcardmanage.balancequery.BalanceQueryActivity:
    java.lang.String a -> a
    android.widget.Button c -> c
    android.widget.Button d -> d
    android.widget.EditText n -> n
    java.lang.String o -> o
    com.unionpay.upomp.yidatec.k p -> p
    com.unionpay.upomp.yidatec.n q -> q
    android.widget.LinearLayout r -> r
    android.widget.LinearLayout s -> s
    android.widget.LinearLayout t -> t
    android.widget.ImageView u -> u
    android.widget.LinearLayout v -> v
    android.widget.LinearLayout w -> w
    android.widget.LinearLayout x -> x
    com.unionpay.upomp.yidatec.r b -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onClick(android.view.View) -> onClick
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void a(com.unionpay.upomp.yidatec.aI) -> a
    void onDestroy() -> onDestroy
    com.unionpay.upomp.yidatec.n a(com.unionpay.upomp.yidatec.bankcardmanage.balancequery.BalanceQueryActivity) -> a
    com.unionpay.upomp.yidatec.k b(com.unionpay.upomp.yidatec.bankcardmanage.balancequery.BalanceQueryActivity) -> b
com.unionpay.upomp.yidatec.bankcardmanage.balancequery.BalanceQueryResultActivity -> com.unionpay.upomp.yidatec.bankcardmanage.balancequery.BalanceQueryResultActivity:
    android.widget.Button a -> a
    com.unionpay.upomp.yidatec.k b -> b
    android.widget.LinearLayout c -> c
    android.widget.LinearLayout d -> d
    android.widget.LinearLayout n -> n
    android.widget.ImageView o -> o
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onClick(android.view.View) -> onClick
    void onDestroy() -> onDestroy
com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity -> com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity:
    int a -> a
    int b -> b
    int c -> c
    java.lang.String d -> d
    android.widget.Button n -> n
    android.widget.Button o -> o
    int p -> p
    boolean q -> q
    int r -> r
    boolean s -> s
    android.widget.Chronometer t -> t
    android.widget.RadioGroup u -> u
    android.widget.RadioButton v -> v
    android.widget.RadioButton w -> w
    java.lang.String x -> x
    java.lang.String y -> y
    java.lang.String z -> z
    int A -> A
    android.widget.LinearLayout B -> B
    java.lang.String C -> C
    com.unionpay.upomp.yidatec.fK D -> D
    com.unionpay.upomp.yidatec.k E -> E
    android.widget.ImageView F -> F
    boolean G -> G
    com.unionpay.upomp.yidatec.ft H -> H
    boolean I -> I
    boolean J -> J
    java.lang.String K -> K
    java.lang.String L -> L
    com.unionpay.upomp.yidatec.ft M -> M
    com.unionpay.upomp.yidatec.ft N -> N
    com.unionpay.upomp.yidatec.ft O -> O
    com.unionpay.upomp.yidatec.ft P -> P
    com.unionpay.upomp.yidatec.ft Q -> Q
    android.widget.LinearLayout R -> R
    com.unionpay.upomp.yidatec.s S -> S
    java.lang.String T -> T
    java.lang.String U -> U
    java.lang.String V -> V
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onClick(android.view.View) -> onClick
    void a(com.unionpay.upomp.yidatec.aI) -> a
    void a(com.unionpay.upomp.yidatec.aD) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void a(java.lang.String,java.lang.String,java.lang.String) -> a
    void a(java.lang.String,java.lang.String) -> a
    void a() -> a
    void onDestroy() -> onDestroy
    void e() -> e
    android.widget.RadioButton a(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> a
    java.lang.String b(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> b
    java.lang.String c(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> c
    java.lang.String d(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> d
    int e(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> e
    boolean f(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> f
    java.lang.String g(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> g
    void h(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> h
    com.unionpay.upomp.yidatec.ft i(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> i
    java.lang.String j(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> j
    com.unionpay.upomp.yidatec.ft k(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> k
    java.lang.String l(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> l
    void a(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity,boolean) -> a
    int m(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> m
    com.unionpay.upomp.yidatec.ft n(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> n
    void b(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity,boolean) -> b
    void a(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity,int) -> a
    boolean o(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> o
    com.unionpay.upomp.yidatec.ft p(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> p
    boolean q(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> q
    void a(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity,java.lang.String) -> a
    android.widget.Chronometer r(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> r
    boolean s(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> s
    void c(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity,boolean) -> c
    void t(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> t
    com.unionpay.upomp.yidatec.s u(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> u
    com.unionpay.upomp.yidatec.k v(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> v
    void w(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity) -> w
    void b(com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity,java.lang.String) -> b
com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindResultActivity -> com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindResultActivity:
    com.unionpay.upomp.yidatec.k a -> a
    java.lang.String b -> b
    boolean c -> c
    android.widget.LinearLayout d -> d
    android.widget.LinearLayout n -> n
    android.widget.LinearLayout o -> o
    android.widget.LinearLayout p -> p
    android.widget.LinearLayout q -> q
    android.widget.ImageView r -> r
    com.unionpay.upomp.yidatec.widget.UpompButton s -> s
    com.unionpay.upomp.yidatec.widget.UpompButton t -> t
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onClick(android.view.View) -> onClick
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onDestroy() -> onDestroy
com.unionpay.upomp.yidatec.bankcardmanage.cardinfo.BankCardInfoActivity -> com.unionpay.upomp.yidatec.bankcardmanage.cardinfo.BankCardInfoActivity:
    java.lang.String a -> a
    com.unionpay.upomp.yidatec.k b -> b
    android.content.DialogInterface$OnClickListener c -> c
    android.content.DialogInterface$OnClickListener d -> d
    android.graphics.drawable.Drawable n -> n
    android.graphics.drawable.Drawable o -> o
    android.graphics.drawable.Drawable p -> p
    android.graphics.drawable.Drawable q -> q
    android.graphics.drawable.Drawable r -> r
    android.graphics.drawable.Drawable s -> s
    android.graphics.drawable.Drawable t -> t
    android.graphics.drawable.Drawable u -> u
    android.graphics.drawable.Drawable v -> v
    android.widget.LinearLayout w -> w
    android.widget.LinearLayout x -> x
    android.widget.LinearLayout y -> y
    android.widget.LinearLayout z -> z
    android.widget.ImageView A -> A
    android.widget.LinearLayout B -> B
    android.widget.LinearLayout C -> C
    android.widget.LinearLayout D -> D
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onClick(android.view.View) -> onClick
    void a(com.unionpay.upomp.yidatec.aI) -> a
    void b(com.unionpay.upomp.yidatec.aI) -> b
    android.graphics.drawable.Drawable e() -> e
    android.graphics.drawable.Drawable f() -> f
    android.graphics.drawable.Drawable g() -> g
    android.graphics.drawable.Drawable h() -> h
    android.graphics.drawable.Drawable i() -> i
    void onDestroy() -> onDestroy
    com.unionpay.upomp.yidatec.k a(com.unionpay.upomp.yidatec.bankcardmanage.cardinfo.BankCardInfoActivity) -> a
com.unionpay.upomp.yidatec.bb -> com.unionpay.upomp.yidatec.bb:
    com.unionpay.upomp.yidatec.ba a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.bc -> com.unionpay.upomp.yidatec.bc:
    com.unionpay.upomp.yidatec.transactionmanage.SplashActivity a -> a
    void run() -> run
com.unionpay.upomp.yidatec.bd -> com.unionpay.upomp.yidatec.bd:
    com.unionpay.upomp.yidatec.bc a -> a
    void run() -> run
com.unionpay.upomp.yidatec.be -> com.unionpay.upomp.yidatec.be:
    com.unionpay.upomp.yidatec.transactionmanage.SplashActivity a -> a
    void run() -> run
    com.unionpay.upomp.yidatec.transactionmanage.SplashActivity a(com.unionpay.upomp.yidatec.be) -> a
com.unionpay.upomp.yidatec.bf -> com.unionpay.upomp.yidatec.bf:
    com.unionpay.upomp.yidatec.be a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.bg -> com.unionpay.upomp.yidatec.bg:
    com.unionpay.upomp.yidatec.transactionmanage.SplashActivity a -> a
    void run() -> run
com.unionpay.upomp.yidatec.bh -> com.unionpay.upomp.yidatec.bh:
    com.unionpay.upomp.yidatec.transactionmanage.SplashActivity a -> a
    void run() -> run
    com.unionpay.upomp.yidatec.transactionmanage.SplashActivity a(com.unionpay.upomp.yidatec.bh) -> a
com.unionpay.upomp.yidatec.bi -> com.unionpay.upomp.yidatec.bi:
    com.unionpay.upomp.yidatec.bh a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.bj -> com.unionpay.upomp.yidatec.bj:
    com.unionpay.upomp.yidatec.transactionmanage.SplashActivity a -> a
    java.lang.String b -> b
    void run() -> run
    com.unionpay.upomp.yidatec.transactionmanage.SplashActivity a(com.unionpay.upomp.yidatec.bj) -> a
com.unionpay.upomp.yidatec.bk -> com.unionpay.upomp.yidatec.bk:
    com.unionpay.upomp.yidatec.bj a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.bl -> com.unionpay.upomp.yidatec.bl:
    com.unionpay.upomp.yidatec.bj a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.bm -> com.unionpay.upomp.yidatec.bm:
    com.unionpay.upomp.yidatec.transactionmanage.SplashActivity a -> a
    com.unionpay.upomp.yidatec.aS b -> b
    void run() -> run
com.unionpay.upomp.yidatec.bn -> com.unionpay.upomp.yidatec.bn:
    com.unionpay.upomp.yidatec.bm a -> a
    void run() -> run
com.unionpay.upomp.yidatec.bo -> com.unionpay.upomp.yidatec.bo:
    com.unionpay.upomp.yidatec.transactionmanage.SplashActivity a -> a
    com.unionpay.upomp.yidatec.aa b -> b
    void onCancel(android.content.DialogInterface) -> onCancel
com.unionpay.upomp.yidatec.bp -> com.unionpay.upomp.yidatec.bp:
    com.unionpay.upomp.yidatec.aY b -> b
    com.unionpay.upomp.yidatec.aZ c -> c
    com.unionpay.upomp.yidatec.bu a -> a
    void a() -> a
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.bq -> com.unionpay.upomp.yidatec.bq:
    com.unionpay.upomp.yidatec.transactionmanage.TransactionActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.br -> com.unionpay.upomp.yidatec.br:
    com.unionpay.upomp.yidatec.transactionmanage.TransactionActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.bs -> com.unionpay.upomp.yidatec.bs:
    com.unionpay.upomp.yidatec.transactionmanage.TransactionActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.bt -> com.unionpay.upomp.yidatec.bt:
    com.unionpay.upomp.yidatec.transactionmanage.TransactionActivity a -> a
    com.unionpay.upomp.yidatec.X b -> b
    void onCancel(android.content.DialogInterface) -> onCancel
com.unionpay.upomp.yidatec.bu -> com.unionpay.upomp.yidatec.bu:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    java.lang.String j -> j
    java.lang.String k -> k
    java.lang.String l -> l
    java.lang.String m -> m
    java.lang.String n -> n
    java.lang.String o -> o
    java.lang.String p -> p
    java.lang.String q -> q
    java.lang.String r -> r
    java.lang.String s -> s
    java.lang.String t -> t
    java.lang.String u -> u
    java.lang.String v -> v
    java.lang.String w -> w
    java.lang.String x -> x
    java.lang.String y -> y
    java.lang.String z -> z
    java.lang.String A -> A
    java.lang.String B -> B
    java.lang.String C -> C
    java.lang.String D -> D
    java.lang.String E -> E
    java.lang.String F -> F
    java.lang.String G -> G
com.unionpay.upomp.yidatec.bv -> com.unionpay.upomp.yidatec.bv:
    com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.unionpay.upomp.yidatec.bw -> com.unionpay.upomp.yidatec.bw:
    com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity a -> a
    java.lang.String b -> b
    void run() -> run
com.unionpay.upomp.yidatec.bx -> com.unionpay.upomp.yidatec.bx:
    com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.by -> com.unionpay.upomp.yidatec.by:
    com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.bz -> com.unionpay.upomp.yidatec.bz:
    com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.c -> com.unionpay.upomp.yidatec.c:
    com.unionpay.upomp.yidatec.bankcardmanage.BankCardActivity a -> a
    com.unionpay.upomp.yidatec.a b -> b
    void onCancel(android.content.DialogInterface) -> onCancel
    com.unionpay.upomp.yidatec.bankcardmanage.BankCardActivity a(com.unionpay.upomp.yidatec.c) -> a
com.unionpay.upomp.yidatec.cA -> com.unionpay.upomp.yidatec.cA:
    com.unionpay.upomp.yidatec.usermanage.getsecuritquestion.GetSecuritQuestionActivity a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.unionpay.upomp.yidatec.cB -> com.unionpay.upomp.yidatec.cB:
    com.unionpay.upomp.yidatec.usermanage.getsecuritquestion.GetSecuritQuestionActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.cC -> com.unionpay.upomp.yidatec.cC:
    com.unionpay.upomp.yidatec.usermanage.getsecuritquestion.GetSecuritQuestionActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.cD -> com.unionpay.upomp.yidatec.cD:
    com.unionpay.upomp.yidatec.usermanage.getsecuritquestion.GetSecuritQuestionActivity a -> a
    com.unionpay.upomp.yidatec.cy b -> b
    void onCancel(android.content.DialogInterface) -> onCancel
    com.unionpay.upomp.yidatec.usermanage.getsecuritquestion.GetSecuritQuestionActivity a(com.unionpay.upomp.yidatec.cD) -> a
com.unionpay.upomp.yidatec.cE -> com.unionpay.upomp.yidatec.cE:
    com.unionpay.upomp.yidatec.cD a -> a
    void run() -> run
com.unionpay.upomp.yidatec.cF -> com.unionpay.upomp.yidatec.cF:
    com.unionpay.upomp.yidatec.usermanage.getsecuritquestion.GetSecuritQuestionActivity a -> a
    void run() -> run
com.unionpay.upomp.yidatec.cG -> com.unionpay.upomp.yidatec.cG:
    com.unionpay.upomp.yidatec.usermanage.getsecuritquestion.GetSecuritQuestionActivity a -> a
    java.lang.String b -> b
    void run() -> run
com.unionpay.upomp.yidatec.cH -> com.unionpay.upomp.yidatec.cH:
    void a(com.unionpay.upomp.yidatec.cI) -> a
com.unionpay.upomp.yidatec.cI -> com.unionpay.upomp.yidatec.cI:
    java.lang.String bk -> bk
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String bj -> bj
    void a(java.io.InputStream) -> a
com.unionpay.upomp.yidatec.cJ -> com.unionpay.upomp.yidatec.cJ:
    void a(com.unionpay.upomp.yidatec.cT) -> a
com.unionpay.upomp.yidatec.cK -> com.unionpay.upomp.yidatec.cK:
    com.unionpay.upomp.yidatec.cJ a -> a
    com.unionpay.upomp.yidatec.cT b -> b
    java.lang.String c -> c
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    void a() -> a
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.cL -> com.unionpay.upomp.yidatec.cL:
    com.unionpay.upomp.yidatec.usermanage.login.LoginActivity a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.unionpay.upomp.yidatec.cM -> com.unionpay.upomp.yidatec.cM:
    com.unionpay.upomp.yidatec.usermanage.login.LoginActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.cN -> com.unionpay.upomp.yidatec.cN:
    com.unionpay.upomp.yidatec.usermanage.login.LoginActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.cO -> com.unionpay.upomp.yidatec.cO:
    com.unionpay.upomp.yidatec.usermanage.login.LoginActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.cP -> com.unionpay.upomp.yidatec.cP:
    com.unionpay.upomp.yidatec.usermanage.login.LoginActivity a -> a
    void onCancel(android.content.DialogInterface) -> onCancel
    com.unionpay.upomp.yidatec.usermanage.login.LoginActivity a(com.unionpay.upomp.yidatec.cP) -> a
com.unionpay.upomp.yidatec.cQ -> com.unionpay.upomp.yidatec.cQ:
    com.unionpay.upomp.yidatec.cP a -> a
    void run() -> run
com.unionpay.upomp.yidatec.cR -> com.unionpay.upomp.yidatec.cR:
    com.unionpay.upomp.yidatec.usermanage.login.LoginActivity a -> a
    java.lang.String b -> b
    void run() -> run
com.unionpay.upomp.yidatec.cS -> com.unionpay.upomp.yidatec.cS:
    com.unionpay.upomp.yidatec.cS a -> a
    com.unionpay.upomp.yidatec.cS b -> b
    com.unionpay.upomp.yidatec.cS c -> c
    com.unionpay.upomp.yidatec.cS[] d -> d
    com.unionpay.upomp.yidatec.cS[] values() -> values
    com.unionpay.upomp.yidatec.cS valueOf(java.lang.String) -> valueOf
com.unionpay.upomp.yidatec.cT -> com.unionpay.upomp.yidatec.cT:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String bj -> bj
    java.lang.String bk -> bk
    java.lang.String bl -> bl
    java.lang.String bm -> bm
    org.xmlpull.v1.XmlSerializer bn -> bn
    java.io.StringWriter bo -> bo
    void a(java.io.InputStream) -> a
com.unionpay.upomp.yidatec.cU -> com.unionpay.upomp.yidatec.cU:
    com.unionpay.upomp.yidatec.usermanage.myinfo.MyInfoActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.cV -> com.unionpay.upomp.yidatec.cV:
    com.unionpay.upomp.yidatec.usermanage.myinfo.MyInfoActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.cW -> com.unionpay.upomp.yidatec.cW:
    com.unionpay.upomp.yidatec.cX f -> f
    com.unionpay.upomp.yidatec.cZ a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String e -> e
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.cX -> com.unionpay.upomp.yidatec.cX:
    void a(com.unionpay.upomp.yidatec.cZ) -> a
com.unionpay.upomp.yidatec.cY -> com.unionpay.upomp.yidatec.cY:
    void a(com.unionpay.upomp.yidatec.da) -> a
com.unionpay.upomp.yidatec.cZ -> com.unionpay.upomp.yidatec.cZ:
    java.lang.String b -> b
    java.lang.String a -> a
    void a(java.io.InputStream) -> a
com.unionpay.upomp.yidatec.ca -> com.unionpay.upomp.yidatec.ca:
    com.unionpay.upomp.yidatec.bZ a -> a
    void run() -> run
com.unionpay.upomp.yidatec.cb -> com.unionpay.upomp.yidatec.cb:
    com.unionpay.upomp.yidatec.transactionmanage.fast.FastFristActivity a -> a
    java.lang.String b -> b
    void run() -> run
com.unionpay.upomp.yidatec.cc -> com.unionpay.upomp.yidatec.cc:
    com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.unionpay.upomp.yidatec.cd -> com.unionpay.upomp.yidatec.cd:
    com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity a -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.unionpay.upomp.yidatec.ce -> com.unionpay.upomp.yidatec.ce:
    com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.cf -> com.unionpay.upomp.yidatec.cf:
    com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.cg -> com.unionpay.upomp.yidatec.cg:
    com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity a -> a
    void run() -> run
com.unionpay.upomp.yidatec.ch -> com.unionpay.upomp.yidatec.ch:
    com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity a -> a
    void run() -> run
com.unionpay.upomp.yidatec.ci -> com.unionpay.upomp.yidatec.ci:
    com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity a -> a
    void run() -> run
com.unionpay.upomp.yidatec.cj -> com.unionpay.upomp.yidatec.cj:
    com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.unionpay.upomp.yidatec.ck -> com.unionpay.upomp.yidatec.ck:
    com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.cl -> com.unionpay.upomp.yidatec.cl:
    com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.cm -> com.unionpay.upomp.yidatec.cm:
    com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.cn -> com.unionpay.upomp.yidatec.cn:
    com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.co -> com.unionpay.upomp.yidatec.co:
    com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.controller.ActivityController -> com.unionpay.upomp.yidatec.controller.ActivityController:
    android.os.Handler e -> e
    android.content.Context f -> f
    android.widget.RelativeLayout g -> g
    int h -> h
    android.view.View i -> i
    android.view.View j -> j
    android.view.View k -> k
    android.view.View l -> l
    com.unionpay.upomp.yidatec.controller.ActivityController$ExitListenerReceiver a -> a
    com.unionpay.upomp.yidatec.aP b -> b
    int c -> c
    java.lang.String d -> d
    java.lang.String n -> n
    android.content.DialogInterface$OnClickListener o -> o
    android.content.DialogInterface$OnClickListener p -> p
    java.lang.String q -> q
    android.app.Dialog r -> r
    int s -> s
    int m -> m
    com.unionpay.upomp.yidatec.aP b() -> b
    void c() -> c
    void e() -> e
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onStart() -> onStart
    void onResume() -> onResume
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    void onPrepareDialog(int,android.app.Dialog) -> onPrepareDialog
    void a(java.lang.String) -> a
    void a(java.lang.String,boolean,android.content.DialogInterface$OnCancelListener) -> a
    void b(java.lang.String,java.lang.String) -> b
    void a(java.lang.String,java.lang.String,android.content.DialogInterface$OnClickListener) -> a
    void a(java.lang.String,android.content.DialogInterface$OnClickListener) -> a
    void a(java.lang.String,java.lang.String,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnClickListener) -> a
    void a(java.lang.String,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnClickListener) -> a
    void d() -> d
    void a(java.lang.String,java.lang.String) -> a
    void a() -> a
    void a(com.unionpay.upomp.yidatec.aK) -> a
com.unionpay.upomp.yidatec.controller.ActivityController$ExitListenerReceiver -> com.unionpay.upomp.yidatec.controller.ActivityController$ExitListenerReceiver:
    com.unionpay.upomp.yidatec.controller.ActivityController a -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.unionpay.upomp.yidatec.controller.UPOMP -> com.unionpay.upomp.yidatec.controller.UPOMP:
    java.lang.String getPayResult() -> getPayResult
com.unionpay.upomp.yidatec.cp -> com.unionpay.upomp.yidatec.cp:
    com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity a -> a
    java.lang.String b -> b
    void run() -> run
com.unionpay.upomp.yidatec.cq -> com.unionpay.upomp.yidatec.cq:
    com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.cr -> com.unionpay.upomp.yidatec.cr:
    com.unionpay.upomp.yidatec.usermanage.AccountActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.cs -> com.unionpay.upomp.yidatec.cs:
    com.unionpay.upomp.yidatec.usermanage.AccountActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.ct -> com.unionpay.upomp.yidatec.ct:
    com.unionpay.upomp.yidatec.usermanage.AccountActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.cu -> com.unionpay.upomp.yidatec.cu:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
com.unionpay.upomp.yidatec.cv -> com.unionpay.upomp.yidatec.cv:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
com.unionpay.upomp.yidatec.cw -> com.unionpay.upomp.yidatec.cw:
    com.unionpay.upomp.yidatec.usermanage.UserActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.cx -> com.unionpay.upomp.yidatec.cx:
    com.unionpay.upomp.yidatec.usermanage.UserActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.cy -> com.unionpay.upomp.yidatec.cy:
    com.unionpay.upomp.yidatec.cH c -> c
    com.unionpay.upomp.yidatec.cI a -> a
    com.unionpay.upomp.yidatec.cv b -> b
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.cz -> com.unionpay.upomp.yidatec.cz:
    com.unionpay.upomp.yidatec.usermanage.getsecuritquestion.GetSecuritQuestionActivity a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.unionpay.upomp.yidatec.d -> com.unionpay.upomp.yidatec.d:
    com.unionpay.upomp.yidatec.c a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.dA -> com.unionpay.upomp.yidatec.dA:
    com.unionpay.upomp.yidatec.usermanage.retpasswd.RetPassword2Activity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.dB -> com.unionpay.upomp.yidatec.dB:
    com.unionpay.upomp.yidatec.usermanage.retpasswd.RetPassword2Activity a -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.unionpay.upomp.yidatec.dC -> com.unionpay.upomp.yidatec.dC:
    com.unionpay.upomp.yidatec.usermanage.retpasswd.RetPassword2Activity a -> a
    com.unionpay.upomp.yidatec.aI b -> b
    java.lang.String c -> c
    void run() -> run
    com.unionpay.upomp.yidatec.usermanage.retpasswd.RetPassword2Activity a(com.unionpay.upomp.yidatec.dC) -> a
com.unionpay.upomp.yidatec.dD -> com.unionpay.upomp.yidatec.dD:
    com.unionpay.upomp.yidatec.dC a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.dE -> com.unionpay.upomp.yidatec.dE:
    void a(com.unionpay.upomp.yidatec.dF) -> a
com.unionpay.upomp.yidatec.dF -> com.unionpay.upomp.yidatec.dF:
    java.lang.String b -> b
    java.lang.String bj -> bj
    java.lang.String bk -> bk
    java.lang.String bl -> bl
    java.lang.String a -> a
    java.lang.String bm -> bm
    java.lang.String bn -> bn
    org.xmlpull.v1.XmlSerializer bo -> bo
    java.io.StringWriter bp -> bp
    void a(java.io.InputStream) -> a
com.unionpay.upomp.yidatec.dG -> com.unionpay.upomp.yidatec.dG:
    com.unionpay.upomp.yidatec.dE c -> c
    com.unionpay.upomp.yidatec.dF a -> a
    com.unionpay.upomp.yidatec.cu b -> b
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.dH -> com.unionpay.upomp.yidatec.dH:
    com.unionpay.upomp.yidatec.usermanage.updatemobilenum.PhoneNumChangeActivity a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.unionpay.upomp.yidatec.dI -> com.unionpay.upomp.yidatec.dI:
    com.unionpay.upomp.yidatec.usermanage.updatemobilenum.PhoneNumChangeActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.dJ -> com.unionpay.upomp.yidatec.dJ:
    com.unionpay.upomp.yidatec.usermanage.updatemobilenum.PhoneNumChangeActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.dK -> com.unionpay.upomp.yidatec.dK:
    com.unionpay.upomp.yidatec.usermanage.updatemobilenum.PhoneNumChangeActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.dL -> com.unionpay.upomp.yidatec.dL:
    com.unionpay.upomp.yidatec.usermanage.updatemobilenum.PhoneNumChangeActivity a -> a
    void run() -> run
com.unionpay.upomp.yidatec.dM -> com.unionpay.upomp.yidatec.dM:
    com.unionpay.upomp.yidatec.usermanage.updatemobilenum.PhoneNumChangeActivity a -> a
    void onCancel(android.content.DialogInterface) -> onCancel
    com.unionpay.upomp.yidatec.usermanage.updatemobilenum.PhoneNumChangeActivity a(com.unionpay.upomp.yidatec.dM) -> a
com.unionpay.upomp.yidatec.dN -> com.unionpay.upomp.yidatec.dN:
    com.unionpay.upomp.yidatec.dM a -> a
    void run() -> run
com.unionpay.upomp.yidatec.dO -> com.unionpay.upomp.yidatec.dO:
    com.unionpay.upomp.yidatec.usermanage.updatemobilenum.PhoneNumChangeActivity a -> a
    com.unionpay.upomp.yidatec.dF b -> b
    void run() -> run
    com.unionpay.upomp.yidatec.usermanage.updatemobilenum.PhoneNumChangeActivity a(com.unionpay.upomp.yidatec.dO) -> a
com.unionpay.upomp.yidatec.dP -> com.unionpay.upomp.yidatec.dP:
    com.unionpay.upomp.yidatec.dO a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.dQ -> com.unionpay.upomp.yidatec.dQ:
    com.unionpay.upomp.yidatec.usermanage.updatemobilenum.PhoneNumChangeActivity a -> a
    void run() -> run
com.unionpay.upomp.yidatec.dR -> com.unionpay.upomp.yidatec.dR:
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.dS -> com.unionpay.upomp.yidatec.dS:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String bj -> bj
    java.lang.String bk -> bk
    java.lang.String bl -> bl
    java.lang.String bm -> bm
    java.lang.String bn -> bn
    java.lang.String bo -> bo
    org.xmlpull.v1.XmlSerializer bp -> bp
    java.io.StringWriter bq -> bq
    java.lang.String br -> br
    void a(java.io.InputStream) -> a
com.unionpay.upomp.yidatec.dT -> com.unionpay.upomp.yidatec.dT:
    com.unionpay.upomp.yidatec.dR c -> c
    com.unionpay.upomp.yidatec.dS a -> a
    com.unionpay.upomp.yidatec.cu b -> b
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.dU -> com.unionpay.upomp.yidatec.dU:
    com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.unionpay.upomp.yidatec.dV -> com.unionpay.upomp.yidatec.dV:
    com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity a -> a
    void run() -> run
com.unionpay.upomp.yidatec.dW -> com.unionpay.upomp.yidatec.dW:
    com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.dX -> com.unionpay.upomp.yidatec.dX:
    com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.dY -> com.unionpay.upomp.yidatec.dY:
    com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.dZ -> com.unionpay.upomp.yidatec.dZ:
    com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.da -> com.unionpay.upomp.yidatec.da:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String bj -> bj
    java.lang.String bk -> bk
    java.lang.String bl -> bl
    java.lang.String bm -> bm
    org.xmlpull.v1.XmlSerializer bn -> bn
    java.io.StringWriter bo -> bo
    void a(java.io.InputStream) -> a
com.unionpay.upomp.yidatec.db -> com.unionpay.upomp.yidatec.db:
    com.unionpay.upomp.yidatec.cY f -> f
    com.unionpay.upomp.yidatec.da a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    com.unionpay.upomp.yidatec.dv e -> e
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.dc -> com.unionpay.upomp.yidatec.dc:
    com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity a -> a
    void run() -> run
com.unionpay.upomp.yidatec.dd -> com.unionpay.upomp.yidatec.dd:
    com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.de -> com.unionpay.upomp.yidatec.de:
    com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.df -> com.unionpay.upomp.yidatec.df:
    com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.dg -> com.unionpay.upomp.yidatec.dg:
    com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity a -> a
    void onCancel(android.content.DialogInterface) -> onCancel
    com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity a(com.unionpay.upomp.yidatec.dg) -> a
com.unionpay.upomp.yidatec.dh -> com.unionpay.upomp.yidatec.dh:
    com.unionpay.upomp.yidatec.dg a -> a
    void run() -> run
com.unionpay.upomp.yidatec.di -> com.unionpay.upomp.yidatec.di:
    com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity a -> a
    void run() -> run
com.unionpay.upomp.yidatec.dj -> com.unionpay.upomp.yidatec.dj:
    com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity a -> a
    java.lang.String b -> b
    void run() -> run
    com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity a(com.unionpay.upomp.yidatec.dj) -> a
com.unionpay.upomp.yidatec.dk -> com.unionpay.upomp.yidatec.dk:
    com.unionpay.upomp.yidatec.dj a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.dl -> com.unionpay.upomp.yidatec.dl:
    com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity a -> a
    java.lang.String b -> b
    void run() -> run
com.unionpay.upomp.yidatec.dm -> com.unionpay.upomp.yidatec.dm:
    com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity a -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.unionpay.upomp.yidatec.dn -> com.unionpay.upomp.yidatec.dn:
    com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity a -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.unionpay.upomp.yidatec.do -> com.unionpay.upomp.yidatec.do:
    com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.unionpay.upomp.yidatec.dp -> com.unionpay.upomp.yidatec.dp:
    com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.unionpay.upomp.yidatec.dq -> com.unionpay.upomp.yidatec.dq:
    com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.dr -> com.unionpay.upomp.yidatec.dr:
    com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.ds -> com.unionpay.upomp.yidatec.ds:
    com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.dt -> com.unionpay.upomp.yidatec.dt:
    com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.du -> com.unionpay.upomp.yidatec.du:
    com.unionpay.upomp.yidatec.dt a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.dv -> com.unionpay.upomp.yidatec.dv:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
com.unionpay.upomp.yidatec.dw -> com.unionpay.upomp.yidatec.dw:
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.dx -> com.unionpay.upomp.yidatec.dx:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String bj -> bj
    java.lang.String bk -> bk
    org.xmlpull.v1.XmlSerializer bl -> bl
    java.io.StringWriter bm -> bm
    void a(java.io.InputStream) -> a
com.unionpay.upomp.yidatec.dy -> com.unionpay.upomp.yidatec.dy:
    com.unionpay.upomp.yidatec.dw c -> c
    com.unionpay.upomp.yidatec.dx a -> a
    com.unionpay.upomp.yidatec.cv b -> b
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.dz -> com.unionpay.upomp.yidatec.dz:
    com.unionpay.upomp.yidatec.usermanage.retpasswd.RetPassword2Activity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.e -> com.unionpay.upomp.yidatec.e:
    com.unionpay.upomp.yidatec.d a -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.unionpay.upomp.yidatec.eA -> com.unionpay.upomp.yidatec.eA:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eB -> com.unionpay.upomp.yidatec.eB:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eC -> com.unionpay.upomp.yidatec.eC:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eD -> com.unionpay.upomp.yidatec.eD:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eE -> com.unionpay.upomp.yidatec.eE:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eF -> com.unionpay.upomp.yidatec.eF:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eG -> com.unionpay.upomp.yidatec.eG:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eH -> com.unionpay.upomp.yidatec.eH:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eI -> com.unionpay.upomp.yidatec.eI:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eJ -> com.unionpay.upomp.yidatec.eJ:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eK -> com.unionpay.upomp.yidatec.eK:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eL -> com.unionpay.upomp.yidatec.eL:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eM -> com.unionpay.upomp.yidatec.eM:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eN -> com.unionpay.upomp.yidatec.eN:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eO -> com.unionpay.upomp.yidatec.eO:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eP -> com.unionpay.upomp.yidatec.eP:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eQ -> com.unionpay.upomp.yidatec.eQ:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eR -> com.unionpay.upomp.yidatec.eR:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eS -> com.unionpay.upomp.yidatec.eS:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eT -> com.unionpay.upomp.yidatec.eT:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eU -> com.unionpay.upomp.yidatec.eU:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eV -> com.unionpay.upomp.yidatec.eV:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eW -> com.unionpay.upomp.yidatec.eW:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eX -> com.unionpay.upomp.yidatec.eX:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eY -> com.unionpay.upomp.yidatec.eY:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eZ -> com.unionpay.upomp.yidatec.eZ:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.ea -> com.unionpay.upomp.yidatec.ea:
    com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.eb -> com.unionpay.upomp.yidatec.eb:
    com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity a -> a
    void run() -> run
com.unionpay.upomp.yidatec.ec -> com.unionpay.upomp.yidatec.ec:
    com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity a -> a
    void onCancel(android.content.DialogInterface) -> onCancel
    com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity a(com.unionpay.upomp.yidatec.ec) -> a
com.unionpay.upomp.yidatec.ed -> com.unionpay.upomp.yidatec.ed:
    com.unionpay.upomp.yidatec.ec a -> a
    void run() -> run
com.unionpay.upomp.yidatec.ee -> com.unionpay.upomp.yidatec.ee:
    com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity a -> a
    com.unionpay.upomp.yidatec.aI b -> b
    java.lang.String c -> c
    void run() -> run
    com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity a(com.unionpay.upomp.yidatec.ee) -> a
com.unionpay.upomp.yidatec.ef -> com.unionpay.upomp.yidatec.ef:
    com.unionpay.upomp.yidatec.ee a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.eg -> com.unionpay.upomp.yidatec.eg:
    java.lang.String a -> a
    char[] b -> b
    byte[] c -> c
    java.lang.String a(java.lang.String) -> a
    java.lang.String a(byte[]) -> a
    java.lang.String b(byte[]) -> b
    char[] c(byte[]) -> c
    char[] a(byte[],int,int) -> a
    java.lang.String b(java.lang.String) -> b
    byte[] c(java.lang.String) -> c
com.unionpay.upomp.yidatec.eh -> com.unionpay.upomp.yidatec.eh:
    java.lang.String eL -> eL
    java.lang.String eM -> eM
    java.lang.String eN -> eN
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String[] i -> i
    java.lang.String[] j -> j
    java.lang.String[] k -> k
    java.lang.String[] l -> l
    java.lang.String[] m -> m
    java.lang.String[] n -> n
    java.lang.String[] o -> o
    java.lang.String[] p -> p
    java.lang.String[] q -> q
    java.lang.String eO -> eO
    java.lang.String r -> r
    java.lang.String s -> s
    java.lang.String t -> t
    java.lang.String u -> u
    java.lang.String[] v -> v
    java.lang.String[] w -> w
    java.lang.String[] x -> x
    java.lang.String[] y -> y
    java.lang.String[] z -> z
    java.lang.String[] A -> A
    java.lang.String B -> B
    java.lang.String[] C -> C
    java.lang.String[] D -> D
    java.lang.String E -> E
    java.lang.String F -> F
    java.lang.String G -> G
    java.lang.String H -> H
    java.lang.String I -> I
    java.lang.String eP -> eP
    java.lang.String J -> J
    java.lang.String eQ -> eQ
    java.lang.String K -> K
    java.lang.String L -> L
    java.lang.String M -> M
    java.lang.String eR -> eR
    java.lang.String N -> N
    java.lang.String O -> O
    java.lang.String[] P -> P
    java.lang.String[] eS -> eS
    java.lang.String[] eT -> eT
    java.lang.String Q -> Q
    java.lang.String R -> R
    java.lang.String eU -> eU
    java.lang.String S -> S
    java.lang.String T -> T
    java.lang.String U -> U
    java.lang.String V -> V
    java.lang.String eV -> eV
    java.lang.String W -> W
    java.lang.String X -> X
    java.lang.String[] Y -> Y
    java.lang.String eW -> eW
    java.lang.String Z -> Z
    java.lang.String aa -> aa
    java.lang.String[] ab -> ab
    java.lang.String[] ac -> ac
    java.lang.String eX -> eX
    java.lang.String eY -> eY
    java.lang.String ad -> ad
    java.lang.String[] ae -> ae
    java.lang.String[] af -> af
    java.lang.String ag -> ag
    java.lang.String eZ -> eZ
    java.lang.String[] ah -> ah
    java.lang.String ai -> ai
    java.lang.String aj -> aj
    java.lang.String ak -> ak
    java.lang.String al -> al
    java.lang.String[] am -> am
    java.lang.String[] fa -> fa
    java.lang.String fb -> fb
    java.lang.String fc -> fc
    java.lang.String fd -> fd
    java.lang.String fe -> fe
    java.lang.String an -> an
    java.lang.String ao -> ao
    java.lang.String[] ap -> ap
    java.lang.String[] aq -> aq
    java.lang.String[] ar -> ar
    java.lang.String[] as -> as
    java.lang.String ff -> ff
    java.lang.String fg -> fg
    java.lang.String at -> at
    java.lang.String fh -> fh
    java.lang.String au -> au
    java.lang.String av -> av
    java.lang.String fi -> fi
    java.lang.String aw -> aw
    java.lang.String ax -> ax
    java.lang.String ay -> ay
    java.lang.String az -> az
    java.lang.String aA -> aA
    java.lang.String aB -> aB
    java.lang.String aC -> aC
    java.lang.String fj -> fj
    java.lang.String fk -> fk
    java.lang.String fl -> fl
    java.lang.String fm -> fm
    java.lang.String fn -> fn
    java.lang.String fo -> fo
    java.lang.String fp -> fp
    java.lang.String fq -> fq
    java.lang.String aD -> aD
    java.lang.String aE -> aE
    java.lang.String aF -> aF
    java.lang.String aG -> aG
    java.lang.String fr -> fr
    java.lang.String fs -> fs
    java.lang.String aH -> aH
    java.lang.String aI -> aI
    java.lang.String aJ -> aJ
    java.lang.String ft -> ft
    java.lang.String aK -> aK
    java.lang.String aL -> aL
    java.lang.String aM -> aM
    java.lang.String aN -> aN
    java.lang.String aO -> aO
    java.lang.String aP -> aP
    java.lang.String aQ -> aQ
    java.lang.String aR -> aR
    java.lang.String aS -> aS
    java.lang.String aT -> aT
    java.lang.String aU -> aU
    java.lang.String aV -> aV
    java.lang.String aW -> aW
    java.lang.String aX -> aX
    java.lang.String aY -> aY
    java.lang.String aZ -> aZ
    java.lang.String ba -> ba
    java.lang.String bb -> bb
    java.lang.String bc -> bc
    java.lang.String bd -> bd
    java.lang.String be -> be
    java.lang.String bf -> bf
    java.lang.String bg -> bg
    java.lang.String bh -> bh
    java.lang.String bi -> bi
    java.lang.String bj -> bj
    java.lang.String bk -> bk
    java.lang.String bl -> bl
    java.lang.String bm -> bm
    java.lang.String bn -> bn
    java.lang.String bo -> bo
    java.lang.String bp -> bp
    java.lang.String bq -> bq
    java.lang.String br -> br
    java.lang.String bs -> bs
    java.lang.String bt -> bt
    java.lang.String bu -> bu
    java.lang.String bv -> bv
    java.lang.String bw -> bw
    java.lang.String bx -> bx
    java.lang.String by -> by
    java.lang.String fu -> fu
    java.lang.String fv -> fv
    java.lang.String fw -> fw
    java.lang.String bz -> bz
    java.lang.String bA -> bA
    java.lang.String bB -> bB
    java.lang.String bC -> bC
    java.lang.String bD -> bD
    java.lang.String bE -> bE
    java.lang.String bF -> bF
    java.lang.String bG -> bG
    java.lang.String bH -> bH
    java.lang.String bI -> bI
    java.lang.String bJ -> bJ
    java.lang.String bK -> bK
    java.lang.String fx -> fx
    java.lang.String bL -> bL
    java.lang.String bM -> bM
    java.lang.String bN -> bN
    java.lang.String bO -> bO
    java.lang.String bP -> bP
    java.lang.String fy -> fy
    java.lang.String bQ -> bQ
    java.lang.String fz -> fz
    java.lang.String bR -> bR
    java.lang.String bS -> bS
    java.lang.String bT -> bT
    java.lang.String fA -> fA
    java.lang.String fB -> fB
    java.lang.String fC -> fC
    java.lang.String fD -> fD
    java.lang.String fE -> fE
    java.lang.String bU -> bU
    java.lang.String bV -> bV
    java.lang.String bW -> bW
    java.lang.String bX -> bX
    java.lang.String bY -> bY
    java.lang.String bZ -> bZ
    java.lang.String fF -> fF
    java.lang.String ca -> ca
    java.lang.String cb -> cb
    java.lang.String cc -> cc
    java.lang.String cd -> cd
    java.lang.String fG -> fG
    java.lang.String ce -> ce
    java.lang.String cf -> cf
    java.lang.String cg -> cg
    java.lang.String ch -> ch
    java.lang.String ci -> ci
    java.lang.String cj -> cj
    java.lang.String ck -> ck
    java.lang.String cl -> cl
    java.lang.String cm -> cm
    java.lang.String cn -> cn
    java.lang.String co -> co
    java.lang.String cp -> cp
    java.lang.String cq -> cq
    java.lang.String cr -> cr
    java.lang.String cs -> cs
    java.lang.String ct -> ct
    java.lang.String cu -> cu
    java.lang.String cv -> cv
    java.lang.String[] cw -> cw
    java.lang.String cx -> cx
    java.lang.String fH -> fH
    java.lang.String cy -> cy
    java.lang.String cz -> cz
    java.lang.String cA -> cA
    java.lang.String cB -> cB
    java.lang.String cC -> cC
    java.lang.String cD -> cD
    java.lang.String cE -> cE
    java.lang.String cF -> cF
    java.lang.String cG -> cG
    java.lang.String[] cH -> cH
    java.lang.String cI -> cI
    java.lang.String cJ -> cJ
    java.lang.String cK -> cK
    java.lang.String[] fI -> fI
    java.lang.String cL -> cL
    java.lang.String cM -> cM
    java.lang.String cN -> cN
    java.lang.String cO -> cO
    java.lang.String cP -> cP
    java.lang.String cQ -> cQ
    java.lang.String cR -> cR
    java.lang.String cS -> cS
    java.lang.String cT -> cT
    java.lang.String cU -> cU
    java.lang.String cV -> cV
    java.lang.String cW -> cW
    java.lang.String cX -> cX
    java.lang.String cY -> cY
    java.lang.String cZ -> cZ
    java.lang.String da -> da
    java.lang.String db -> db
    java.lang.String dc -> dc
    java.lang.String dd -> dd
    java.lang.String de -> de
    java.lang.String df -> df
    java.lang.String dg -> dg
    java.lang.String dh -> dh
    java.lang.String di -> di
    java.lang.String dj -> dj
    java.lang.String dk -> dk
    java.lang.String dl -> dl
    java.lang.String dm -> dm
    java.lang.String fJ -> fJ
    java.lang.String fK -> fK
    java.lang.String fL -> fL
    java.lang.String dn -> dn
    java.lang.String do -> do
    java.lang.String dp -> dp
    java.lang.String dq -> dq
    java.lang.String dr -> dr
    java.lang.String ds -> ds
    java.lang.String dt -> dt
    java.lang.String du -> du
    java.lang.String dv -> dv
    java.lang.String dw -> dw
    java.lang.String dx -> dx
    java.lang.String dy -> dy
    java.lang.String dz -> dz
    java.lang.String dA -> dA
    java.lang.String dB -> dB
    java.lang.String dC -> dC
    java.lang.String dD -> dD
    java.lang.String dE -> dE
    java.lang.String dF -> dF
    java.lang.String dG -> dG
    int fM -> fM
    int dH -> dH
    int fN -> fN
    int fO -> fO
    int fP -> fP
    int fQ -> fQ
    int fR -> fR
    int fS -> fS
    int fT -> fT
    int dI -> dI
    int dJ -> dJ
    int fU -> fU
    int fV -> fV
    int dK -> dK
    int fW -> fW
    int fX -> fX
    int dL -> dL
    int fY -> fY
    int dM -> dM
    int dN -> dN
    int dO -> dO
    int fZ -> fZ
    int dP -> dP
    int dQ -> dQ
    int ga -> ga
    int gb -> gb
    int gc -> gc
    int dR -> dR
    int gd -> gd
    int dS -> dS
    int ge -> ge
    int dT -> dT
    int gf -> gf
    int gg -> gg
    int gh -> gh
    int gi -> gi
    int dU -> dU
    int dV -> dV
    int dW -> dW
    int dX -> dX
    int gj -> gj
    int dY -> dY
    int dZ -> dZ
    int ea -> ea
    int eb -> eb
    int gk -> gk
    int gl -> gl
    int gm -> gm
    int gn -> gn
    int go -> go
    int gp -> gp
    int gq -> gq
    int gr -> gr
    int gs -> gs
    int gt -> gt
    int gu -> gu
    int gv -> gv
    int ec -> ec
    int gw -> gw
    int ed -> ed
    int gx -> gx
    int gy -> gy
    int gz -> gz
    int ee -> ee
    int ef -> ef
    int gA -> gA
    int eg -> eg
    int gB -> gB
    int gC -> gC
    int gD -> gD
    int gE -> gE
    int gF -> gF
    int gG -> gG
    int eh -> eh
    int ei -> ei
    int gH -> gH
    int gI -> gI
    int gJ -> gJ
    int gK -> gK
    int gL -> gL
    int gM -> gM
    int gN -> gN
    int gO -> gO
    int gP -> gP
    int gQ -> gQ
    int gR -> gR
    int gS -> gS
    int gT -> gT
    int gU -> gU
    int gV -> gV
    int gW -> gW
    int gX -> gX
    int gY -> gY
    int ej -> ej
    int ek -> ek
    int gZ -> gZ
    int el -> el
    int ha -> ha
    int hb -> hb
    int hc -> hc
    int em -> em
    int en -> en
    int eo -> eo
    int hd -> hd
    int he -> he
    int ep -> ep
    int hf -> hf
    int hg -> hg
    int hh -> hh
    int hi -> hi
    int hj -> hj
    int eq -> eq
    int hk -> hk
    int hl -> hl
    int hm -> hm
    int hn -> hn
    int er -> er
    int ho -> ho
    int hp -> hp
    int hq -> hq
    int hr -> hr
    int hs -> hs
    int ht -> ht
    int hu -> hu
    int hv -> hv
    int hw -> hw
    int es -> es
    int et -> et
    int eu -> eu
    int ev -> ev
    int ew -> ew
    int hx -> hx
    int hy -> hy
    int ex -> ex
    int ey -> ey
    int ez -> ez
    int eA -> eA
    int eB -> eB
    int eC -> eC
    int eD -> eD
    int eE -> eE
    int eF -> eF
    int eG -> eG
    int eH -> eH
    int eI -> eI
    int eJ -> eJ
    int eK -> eK
com.unionpay.upomp.yidatec.ei -> com.unionpay.upomp.yidatec.ei:
    java.lang.String a -> a
    int b -> b
    byte[] a(java.lang.String,java.lang.String,java.lang.String) -> a
    byte[] a(byte[],java.lang.String,java.lang.String) -> a
    java.security.PublicKey a(java.lang.String,java.lang.String) -> a
com.unionpay.upomp.yidatec.ej -> com.unionpay.upomp.yidatec.ej:
    java.lang.String a -> a
    java.lang.String a() -> a
    void a(java.lang.String) -> a
    java.lang.String b(java.lang.String) -> b
    void a(java.lang.String,java.lang.String) -> a
com.unionpay.upomp.yidatec.ek -> com.unionpay.upomp.yidatec.ek:
    java.lang.String a -> a
    int a(float) -> a
    java.lang.String a(java.lang.String) -> a
    android.graphics.Bitmap a(android.graphics.Bitmap,float) -> a
    android.graphics.drawable.Drawable b(java.lang.String) -> b
    java.lang.String a(java.lang.String,java.lang.String) -> a
    java.lang.String c(java.lang.String) -> c
    java.lang.String d(java.lang.String) -> d
    java.lang.String e(java.lang.String) -> e
    java.lang.String f(java.lang.String) -> f
    java.lang.String g(java.lang.String) -> g
    java.lang.String h(java.lang.String) -> h
    java.lang.String i(java.lang.String) -> i
    java.lang.String j(java.lang.String) -> j
    java.lang.String k(java.lang.String) -> k
    java.lang.String l(java.lang.String) -> l
    java.lang.String m(java.lang.String) -> m
    java.lang.String n(java.lang.String) -> n
    java.lang.String o(java.lang.String) -> o
    java.lang.String a() -> a
    java.lang.String p(java.lang.String) -> p
    java.io.InputStream w(java.lang.String) -> w
    java.lang.String q(java.lang.String) -> q
    java.lang.String r(java.lang.String) -> r
    android.text.InputFilter[] a(android.widget.EditText) -> a
    android.text.method.NumberKeyListener b() -> b
    java.lang.String s(java.lang.String) -> s
    java.lang.String t(java.lang.String) -> t
    void u(java.lang.String) -> u
    byte[] v(java.lang.String) -> v
    java.lang.String a(int) -> a
com.unionpay.upomp.yidatec.el -> com.unionpay.upomp.yidatec.el:
    android.widget.EditText a -> a
    java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int) -> filter
com.unionpay.upomp.yidatec.em -> com.unionpay.upomp.yidatec.em:
    int getInputType() -> getInputType
    char[] getAcceptedChars() -> getAcceptedChars
com.unionpay.upomp.yidatec.en -> com.unionpay.upomp.yidatec.en:
    com.unionpay.upomp.yidatec.util.Util1 a -> a
    android.widget.Button b -> b
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eo -> com.unionpay.upomp.yidatec.eo:
    com.unionpay.upomp.yidatec.util.Util1 a -> a
    android.widget.Button b -> b
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.ep -> com.unionpay.upomp.yidatec.ep:
    com.unionpay.upomp.yidatec.util.Util1 a -> a
    android.widget.Button b -> b
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eq -> com.unionpay.upomp.yidatec.eq:
    com.unionpay.upomp.yidatec.util.Util1 a -> a
    android.widget.Button b -> b
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.er -> com.unionpay.upomp.yidatec.er:
    com.unionpay.upomp.yidatec.util.Util1 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.es -> com.unionpay.upomp.yidatec.es:
    com.unionpay.upomp.yidatec.util.Util1 a -> a
    void dispatchMessage(android.os.Message) -> dispatchMessage
com.unionpay.upomp.yidatec.et -> com.unionpay.upomp.yidatec.et:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.eu -> com.unionpay.upomp.yidatec.eu:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.ev -> com.unionpay.upomp.yidatec.ev:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.ew -> com.unionpay.upomp.yidatec.ew:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.ex -> com.unionpay.upomp.yidatec.ex:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.ey -> com.unionpay.upomp.yidatec.ey:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.ez -> com.unionpay.upomp.yidatec.ez:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.f -> com.unionpay.upomp.yidatec.f:
    com.unionpay.upomp.yidatec.bankcardmanage.BankCardActivity a -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.unionpay.upomp.yidatec.fA -> com.unionpay.upomp.yidatec.fA:
    com.unionpay.upomp.yidatec.ft a -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.unionpay.upomp.yidatec.fB -> com.unionpay.upomp.yidatec.fB:
    com.unionpay.upomp.yidatec.ft a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.fC -> com.unionpay.upomp.yidatec.fC:
    com.unionpay.upomp.yidatec.ft a -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.unionpay.upomp.yidatec.fD -> com.unionpay.upomp.yidatec.fD:
    com.unionpay.upomp.yidatec.ft a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.fE -> com.unionpay.upomp.yidatec.fE:
    com.unionpay.upomp.yidatec.ft a -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.unionpay.upomp.yidatec.fF -> com.unionpay.upomp.yidatec.fF:
    com.unionpay.upomp.yidatec.ft a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.fG -> com.unionpay.upomp.yidatec.fG:
    com.unionpay.upomp.yidatec.ft a -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.unionpay.upomp.yidatec.fH -> com.unionpay.upomp.yidatec.fH:
    com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity a -> a
    void a(android.text.Editable) -> a
com.unionpay.upomp.yidatec.fI -> com.unionpay.upomp.yidatec.fI:
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.fJ -> com.unionpay.upomp.yidatec.fJ:
    void a(android.view.View,boolean) -> a
    void a(java.lang.CharSequence,int,int,int) -> a
com.unionpay.upomp.yidatec.fK -> com.unionpay.upomp.yidatec.fK:
    android.content.Context n -> n
    java.lang.String o -> o
    android.widget.RelativeLayout a -> a
    android.widget.RelativeLayout b -> b
    int p -> p
    int q -> q
    int r -> r
    int s -> s
    android.graphics.drawable.Drawable c -> c
    android.graphics.drawable.Drawable d -> d
    android.widget.TextView t -> t
    int u -> u
    int v -> v
    int w -> w
    int x -> x
    com.unionpay.upomp.yidatec.widget.UpompButton e -> e
    int y -> y
    int z -> z
    com.unionpay.upomp.yidatec.fI f -> f
    com.unionpay.upomp.yidatec.widget.UpompButton g -> g
    int A -> A
    int B -> B
    com.unionpay.upomp.yidatec.fI h -> h
    com.unionpay.upomp.yidatec.widget.UpompRadioButton i -> i
    android.widget.TextView j -> j
    com.unionpay.upomp.yidatec.fT k -> k
    com.unionpay.upomp.yidatec.widget.UpompRadioButton l -> l
    android.widget.TextView m -> m
    void a(java.lang.String) -> a
    android.widget.RelativeLayout a() -> a
    void a(int) -> a
    void b(java.lang.String) -> b
    void c(java.lang.String) -> c
    void d(java.lang.String) -> d
    void b() -> b
com.unionpay.upomp.yidatec.fL -> com.unionpay.upomp.yidatec.fL:
    com.unionpay.upomp.yidatec.fK a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.fM -> com.unionpay.upomp.yidatec.fM:
    com.unionpay.upomp.yidatec.fK a -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.unionpay.upomp.yidatec.fN -> com.unionpay.upomp.yidatec.fN:
    com.unionpay.upomp.yidatec.fK a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.fO -> com.unionpay.upomp.yidatec.fO:
    com.unionpay.upomp.yidatec.fK a -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.unionpay.upomp.yidatec.fP -> com.unionpay.upomp.yidatec.fP:
    com.unionpay.upomp.yidatec.fK a -> a
    void a(boolean) -> a
com.unionpay.upomp.yidatec.fQ -> com.unionpay.upomp.yidatec.fQ:
    com.unionpay.upomp.yidatec.fK a -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.unionpay.upomp.yidatec.fR -> com.unionpay.upomp.yidatec.fR:
    com.unionpay.upomp.yidatec.fK a -> a
    void a(boolean) -> a
com.unionpay.upomp.yidatec.fS -> com.unionpay.upomp.yidatec.fS:
    com.unionpay.upomp.yidatec.fK a -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.unionpay.upomp.yidatec.fT -> com.unionpay.upomp.yidatec.fT:
    com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity a -> a
    void a(int,boolean) -> a
com.unionpay.upomp.yidatec.fU -> com.unionpay.upomp.yidatec.fU:
    void a(boolean) -> a
com.unionpay.upomp.yidatec.fV -> com.unionpay.upomp.yidatec.fV:
    android.content.DialogInterface$OnCancelListener a -> a
    boolean b -> b
    com.unionpay.upomp.yidatec.widget.UpompButton c -> c
    android.content.DialogInterface$OnCancelListener a(com.unionpay.upomp.yidatec.fV) -> a
com.unionpay.upomp.yidatec.fW -> com.unionpay.upomp.yidatec.fW:
    com.unionpay.upomp.yidatec.fV a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.fa -> com.unionpay.upomp.yidatec.fa:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.fb -> com.unionpay.upomp.yidatec.fb:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.fc -> com.unionpay.upomp.yidatec.fc:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.fd -> com.unionpay.upomp.yidatec.fd:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    int b -> b
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.fe -> com.unionpay.upomp.yidatec.fe:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.ff -> com.unionpay.upomp.yidatec.ff:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.fg -> com.unionpay.upomp.yidatec.fg:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.fh -> com.unionpay.upomp.yidatec.fh:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.fi -> com.unionpay.upomp.yidatec.fi:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    android.widget.Button b -> b
    int c -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.unionpay.upomp.yidatec.fj -> com.unionpay.upomp.yidatec.fj:
    int a -> a
    int b -> b
    int c -> c
    int d -> d
    int e -> e
    com.unionpay.upomp.yidatec.util.Util2 f -> f
com.unionpay.upomp.yidatec.fk -> com.unionpay.upomp.yidatec.fk:
    com.unionpay.upomp.yidatec.util.Util2 a -> a
    void dispatchMessage(android.os.Message) -> dispatchMessage
com.unionpay.upomp.yidatec.fl -> com.unionpay.upomp.yidatec.fl:
    com.unionpay.upomp.yidatec.fs a -> a
    android.widget.TextView b -> b
    android.widget.TextView c -> c
    java.lang.String[] d -> d
    java.lang.String[] e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    int h -> h
    int i -> i
    void onCreate(android.os.Bundle) -> onCreate
    com.unionpay.upomp.yidatec.fs a(com.unionpay.upomp.yidatec.fl) -> a
    android.widget.TextView b(com.unionpay.upomp.yidatec.fl) -> b
    android.widget.TextView c(com.unionpay.upomp.yidatec.fl) -> c
    int d(com.unionpay.upomp.yidatec.fl) -> d
    void a(com.unionpay.upomp.yidatec.fl,int) -> a
    java.lang.String[] e(com.unionpay.upomp.yidatec.fl) -> e
    int f(com.unionpay.upomp.yidatec.fl) -> f
    void b(com.unionpay.upomp.yidatec.fl,int) -> b
    java.lang.String[] g(com.unionpay.upomp.yidatec.fl) -> g
com.unionpay.upomp.yidatec.fm -> com.unionpay.upomp.yidatec.fm:
    com.unionpay.upomp.yidatec.fl a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.fn -> com.unionpay.upomp.yidatec.fn:
    com.unionpay.upomp.yidatec.fl a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.unionpay.upomp.yidatec.fo -> com.unionpay.upomp.yidatec.fo:
    com.unionpay.upomp.yidatec.fl a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.fp -> com.unionpay.upomp.yidatec.fp:
    com.unionpay.upomp.yidatec.fl a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.fq -> com.unionpay.upomp.yidatec.fq:
    com.unionpay.upomp.yidatec.fl a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.fr -> com.unionpay.upomp.yidatec.fr:
    com.unionpay.upomp.yidatec.fl a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.fs -> com.unionpay.upomp.yidatec.fs:
    void a(java.lang.String,java.lang.String,java.lang.String) -> a
com.unionpay.upomp.yidatec.ft -> com.unionpay.upomp.yidatec.ft:
    android.content.Context w -> w
    java.lang.String a -> a
    android.widget.RelativeLayout b -> b
    android.widget.RelativeLayout c -> c
    int x -> x
    int y -> y
    int z -> z
    int A -> A
    android.graphics.drawable.Drawable d -> d
    android.graphics.drawable.Drawable e -> e
    android.widget.TextView f -> f
    int g -> g
    int B -> B
    int C -> C
    int D -> D
    android.widget.EditText h -> h
    int E -> E
    int F -> F
    int i -> i
    int G -> G
    com.unionpay.upomp.yidatec.fI j -> j
    boolean H -> H
    android.widget.TextView k -> k
    com.unionpay.upomp.yidatec.widget.UpompButton l -> l
    int I -> I
    int J -> J
    int m -> m
    int K -> K
    com.unionpay.upomp.yidatec.fI n -> n
    boolean o -> o
    int L -> L
    int M -> M
    android.widget.RelativeLayout p -> p
    android.widget.ImageView q -> q
    int N -> N
    int O -> O
    com.unionpay.upomp.yidatec.fI r -> r
    android.widget.ProgressBar P -> P
    android.widget.Button s -> s
    com.unionpay.upomp.yidatec.fI t -> t
    int Q -> Q
    int R -> R
    int u -> u
    java.lang.String S -> S
    java.lang.String T -> T
    com.unionpay.upomp.yidatec.fH v -> v
    void a(java.lang.String) -> a
    void a() -> a
    android.widget.RelativeLayout b() -> b
    void a(int) -> a
    void b(int) -> b
    void a(android.graphics.Typeface) -> a
    void b(java.lang.String) -> b
    void c(int) -> c
    void d(int) -> d
    void e(int) -> e
    void f(int) -> f
    void g(int) -> g
    void c(java.lang.String) -> c
    void d(java.lang.String) -> d
    java.lang.String c() -> c
    void d() -> d
    void a(boolean) -> a
    void h(int) -> h
    void e(java.lang.String) -> e
    void a(int,int,int,int) -> a
    void a(android.graphics.Bitmap) -> a
    void a(android.graphics.drawable.Drawable) -> a
    void i(int) -> i
    void b(android.graphics.drawable.Drawable) -> b
    void j(int) -> j
    void f(java.lang.String) -> f
    void g(java.lang.String) -> g
    java.lang.String e() -> e
    void b(boolean) -> b
    void f() -> f
    void g() -> g
com.unionpay.upomp.yidatec.fu -> com.unionpay.upomp.yidatec.fu:
    com.unionpay.upomp.yidatec.ft a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.fv -> com.unionpay.upomp.yidatec.fv:
    com.unionpay.upomp.yidatec.ft a -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.unionpay.upomp.yidatec.fw -> com.unionpay.upomp.yidatec.fw:
    com.unionpay.upomp.yidatec.ft a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.fx -> com.unionpay.upomp.yidatec.fx:
    com.unionpay.upomp.yidatec.ft a -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.unionpay.upomp.yidatec.fy -> com.unionpay.upomp.yidatec.fy:
    com.unionpay.upomp.yidatec.ft a -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.unionpay.upomp.yidatec.fz -> com.unionpay.upomp.yidatec.fz:
    com.unionpay.upomp.yidatec.ft a -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.unionpay.upomp.yidatec.g -> com.unionpay.upomp.yidatec.g:
    com.unionpay.upomp.yidatec.bankcardmanage.BankCardActivity a -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
com.unionpay.upomp.yidatec.h -> com.unionpay.upomp.yidatec.h:
    com.unionpay.upomp.yidatec.bankcardmanage.BankCardActivity a -> a
    void run() -> run
com.unionpay.upomp.yidatec.i -> com.unionpay.upomp.yidatec.i:
    com.unionpay.upomp.yidatec.bankcardmanage.BankCardActivity a -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.unionpay.upomp.yidatec.j -> com.unionpay.upomp.yidatec.j:
    android.widget.TextView a -> a
    com.unionpay.upomp.yidatec.bankcardmanage.BankCardActivity b -> b
    void a(java.lang.String,android.os.Handler,int,int,boolean) -> a
com.unionpay.upomp.yidatec.k -> com.unionpay.upomp.yidatec.k:
    long serialVersionUID -> serialVersionUID
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    int h -> h
    boolean i -> i
    boolean j -> j
    java.lang.String k -> k
    java.lang.String l -> l
    java.lang.String m -> m
    java.lang.String n -> n
    java.lang.String o -> o
    java.lang.String p -> p
    java.lang.String q -> q
    java.lang.String a() -> a
    void a(java.lang.String) -> a
    java.lang.String b() -> b
    void b(java.lang.String) -> b
    java.lang.String c() -> c
    void c(java.lang.String) -> c
    java.lang.String d() -> d
    void d(java.lang.String) -> d
    void e(java.lang.String) -> e
    java.lang.String e() -> e
    void f(java.lang.String) -> f
    java.lang.String f() -> f
    void g(java.lang.String) -> g
    boolean g() -> g
    void a(boolean) -> a
    boolean h() -> h
    void b(boolean) -> b
    java.lang.String i() -> i
    void h(java.lang.String) -> h
    java.lang.String j() -> j
    void i(java.lang.String) -> i
    void j(java.lang.String) -> j
    java.lang.String k() -> k
    void k(java.lang.String) -> k
    java.lang.String l() -> l
    void l(java.lang.String) -> l
    java.lang.String m() -> m
    void m(java.lang.String) -> m
    int n() -> n
    void a(int) -> a
    java.lang.String o() -> o
    void n(java.lang.String) -> n
    void p() -> p
com.unionpay.upomp.yidatec.l -> com.unionpay.upomp.yidatec.l:
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.m -> com.unionpay.upomp.yidatec.m:
    java.util.ArrayList a -> a
    java.lang.String b -> b
    org.xmlpull.v1.XmlSerializer bj -> bj
    java.io.StringWriter bk -> bk
    void a(java.io.InputStream) -> a
com.unionpay.upomp.yidatec.n -> com.unionpay.upomp.yidatec.n:
    com.unionpay.upomp.yidatec.q e -> e
    com.unionpay.upomp.yidatec.r a -> a
    com.unionpay.upomp.yidatec.k b -> b
    java.lang.String c -> c
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.o -> com.unionpay.upomp.yidatec.o:
    com.unionpay.upomp.yidatec.bankcardmanage.balancequery.BalanceQueryActivity a -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.unionpay.upomp.yidatec.p -> com.unionpay.upomp.yidatec.p:
    com.unionpay.upomp.yidatec.bankcardmanage.balancequery.BalanceQueryActivity a -> a
    void run() -> run
com.unionpay.upomp.yidatec.q -> com.unionpay.upomp.yidatec.q:
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.r -> com.unionpay.upomp.yidatec.r:
    java.lang.String a -> a
    java.lang.String b -> b
    org.xmlpull.v1.XmlSerializer bj -> bj
    java.io.StringWriter bk -> bk
    java.lang.String bl -> bl
    void a(java.io.InputStream) -> a
    void o() -> o
com.unionpay.upomp.yidatec.s -> com.unionpay.upomp.yidatec.s:
    com.unionpay.upomp.yidatec.G c -> c
    com.unionpay.upomp.yidatec.H a -> a
    com.unionpay.upomp.yidatec.k b -> b
    void a(com.unionpay.upomp.yidatec.aI) -> a
com.unionpay.upomp.yidatec.t -> com.unionpay.upomp.yidatec.t:
    com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity a -> a
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
com.unionpay.upomp.yidatec.transactionmanage.DealsResultActivity -> com.unionpay.upomp.yidatec.transactionmanage.DealsResultActivity:
    java.lang.String[] a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String n -> n
    java.lang.String o -> o
    android.widget.LinearLayout p -> p
    android.widget.LinearLayout q -> q
    android.widget.LinearLayout r -> r
    com.unionpay.upomp.yidatec.widget.UpompButton s -> s
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onDestroy() -> onDestroy
com.unionpay.upomp.yidatec.transactionmanage.SplashActivity -> com.unionpay.upomp.yidatec.transactionmanage.SplashActivity:
    java.lang.String[] d -> d
    com.unionpay.upomp.yidatec.bu n -> n
    com.unionpay.upomp.yidatec.aT o -> o
    boolean a -> a
    android.os.Handler p -> p
    boolean b -> b
    java.lang.String c -> c
    com.unionpay.upomp.yidatec.bu e() -> e
    void f() -> f
    void onCreate(android.os.Bundle) -> onCreate
    void h() -> h
    void onStart() -> onStart
    void onClick(android.view.View) -> onClick
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onDestroy() -> onDestroy
    void b(com.unionpay.upomp.yidatec.aI) -> b
    void a(com.unionpay.upomp.yidatec.aI) -> a
    void c(com.unionpay.upomp.yidatec.aI) -> c
    void a(java.lang.String,java.lang.String) -> a
    void a(com.unionpay.upomp.yidatec.transactionmanage.SplashActivity) -> a
    void b(com.unionpay.upomp.yidatec.transactionmanage.SplashActivity) -> b
    void c(com.unionpay.upomp.yidatec.transactionmanage.SplashActivity) -> c
    android.os.Handler g() -> g
    void d(com.unionpay.upomp.yidatec.transactionmanage.SplashActivity) -> d
    void e(com.unionpay.upomp.yidatec.transactionmanage.SplashActivity) -> e
com.unionpay.upomp.yidatec.transactionmanage.TransactionActivity -> com.unionpay.upomp.yidatec.transactionmanage.TransactionActivity:
    int a -> a
    android.widget.RelativeLayout b -> b
    android.widget.Button o -> o
    android.widget.Button p -> p
    android.widget.Button q -> q
    java.lang.String c -> c
    java.lang.String d -> d
    java.util.ArrayList n -> n
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void c(com.unionpay.upomp.yidatec.aI) -> c
    void b(java.lang.String) -> b
    void a(com.unionpay.upomp.yidatec.aA) -> a
    void a(com.unionpay.upomp.yidatec.aD) -> a
    void onDestroy() -> onDestroy
    void b(com.unionpay.upomp.yidatec.aI) -> b
    void a(com.unionpay.upomp.yidatec.transactionmanage.TransactionActivity) -> a
com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity -> com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity:
    com.unionpay.upomp.yidatec.ft p -> p
    com.unionpay.upomp.yidatec.fK q -> q
    com.unionpay.upomp.yidatec.ft r -> r
    com.unionpay.upomp.yidatec.ft s -> s
    com.unionpay.upomp.yidatec.fK t -> t
    com.unionpay.upomp.yidatec.ft u -> u
    int v -> v
    java.lang.String w -> w
    java.lang.String x -> x
    java.lang.String y -> y
    android.widget.LinearLayout z -> z
    android.widget.LinearLayout A -> A
    android.widget.LinearLayout B -> B
    com.unionpay.upomp.yidatec.widget.UpompButton C -> C
    com.unionpay.upomp.yidatec.widget.UpompButton D -> D
    com.unionpay.upomp.yidatec.ft E -> E
    java.lang.String F -> F
    java.lang.String G -> G
    java.lang.String H -> H
    android.os.Handler o -> o
    com.unionpay.upomp.yidatec.bu I -> I
    com.unionpay.upomp.yidatec.bp J -> J
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void a(java.lang.String,java.lang.String,java.lang.String) -> a
    void b(java.lang.String) -> b
    void e() -> e
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void a() -> a
    void a(java.lang.String,java.lang.String) -> a
    void onDestroy() -> onDestroy
    com.unionpay.upomp.yidatec.ft a(com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity) -> a
    void a(com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity,int) -> a
    int b(com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity) -> b
    void a(com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity,java.lang.String) -> a
    com.unionpay.upomp.yidatec.ft c(com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity) -> c
    com.unionpay.upomp.yidatec.fK d(com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity) -> d
    com.unionpay.upomp.yidatec.ft e(com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity) -> e
    com.unionpay.upomp.yidatec.ft f(com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity) -> f
    java.lang.String g(com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity) -> g
    void h(com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity) -> h
    com.unionpay.upomp.yidatec.fK i(com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity) -> i
    java.lang.String j(com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity) -> j
    void k(com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity) -> k
    void l(com.unionpay.upomp.yidatec.transactionmanage.certification.CardActivity) -> l
com.unionpay.upomp.yidatec.transactionmanage.certification.CertificationActivity -> com.unionpay.upomp.yidatec.transactionmanage.certification.CertificationActivity:
    java.lang.String p -> p
    com.unionpay.upomp.yidatec.ft q -> q
    com.unionpay.upomp.yidatec.ft r -> r
    com.unionpay.upomp.yidatec.ft s -> s
    boolean t -> t
    com.unionpay.upomp.yidatec.widget.UpompButton u -> u
    com.unionpay.upomp.yidatec.widget.UpompButton v -> v
    android.widget.LinearLayout w -> w
    android.widget.ImageView x -> x
    android.widget.LinearLayout y -> y
    android.widget.ImageView z -> z
    android.os.Handler A -> A
    java.util.Timer B -> B
    int C -> C
    android.os.Handler o -> o
    void onStart() -> onStart
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    java.lang.String f() -> f
    void a(java.lang.String,java.lang.String) -> a
    void onDestroy() -> onDestroy
    void e() -> e
    void b(java.lang.String) -> b
    void a(com.unionpay.upomp.yidatec.transactionmanage.certification.CertificationActivity) -> a
    java.lang.String b(com.unionpay.upomp.yidatec.transactionmanage.certification.CertificationActivity) -> b
    com.unionpay.upomp.yidatec.ft c(com.unionpay.upomp.yidatec.transactionmanage.certification.CertificationActivity) -> c
    java.lang.String d(com.unionpay.upomp.yidatec.transactionmanage.certification.CertificationActivity) -> d
    java.lang.String e(com.unionpay.upomp.yidatec.transactionmanage.certification.CertificationActivity) -> e
com.unionpay.upomp.yidatec.transactionmanage.fast.BankDialog -> com.unionpay.upomp.yidatec.transactionmanage.fast.BankDialog:
    android.widget.ListView a -> a
    com.unionpay.upomp.yidatec.bO b -> b
    android.widget.ImageButton c -> c
    android.widget.ImageView d -> d
    android.widget.AdapterView$OnItemClickListener n -> n
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onDestroy() -> onDestroy
    android.view.View a(com.unionpay.upomp.yidatec.transactionmanage.fast.BankDialog,android.content.Context,int) -> a
com.unionpay.upomp.yidatec.transactionmanage.fast.FastFristActivity -> com.unionpay.upomp.yidatec.transactionmanage.fast.FastFristActivity:
    com.unionpay.upomp.yidatec.ft p -> p
    com.unionpay.upomp.yidatec.ft q -> q
    com.unionpay.upomp.yidatec.ft r -> r
    java.lang.String s -> s
    java.lang.String t -> t
    java.lang.String u -> u
    java.lang.String v -> v
    com.unionpay.upomp.yidatec.widget.UpompButton w -> w
    com.unionpay.upomp.yidatec.widget.UpompButton x -> x
    com.unionpay.upomp.yidatec.ft y -> y
    android.widget.LinearLayout z -> z
    android.widget.ImageView A -> A
    android.widget.LinearLayout B -> B
    android.widget.ImageView C -> C
    com.unionpay.upomp.yidatec.cK D -> D
    android.os.Handler o -> o
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onClick(android.view.View) -> onClick
    void f() -> f
    void b(java.lang.String) -> b
    void a(com.unionpay.upomp.yidatec.cT) -> a
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void a(java.lang.String,java.lang.String) -> a
    void onDestroy() -> onDestroy
    void a() -> a
    com.unionpay.upomp.yidatec.ft a(com.unionpay.upomp.yidatec.transactionmanage.fast.FastFristActivity) -> a
    com.unionpay.upomp.yidatec.ft b(com.unionpay.upomp.yidatec.transactionmanage.fast.FastFristActivity) -> b
    java.lang.String c(com.unionpay.upomp.yidatec.transactionmanage.fast.FastFristActivity) -> c
    java.lang.String d(com.unionpay.upomp.yidatec.transactionmanage.fast.FastFristActivity) -> d
    void e(com.unionpay.upomp.yidatec.transactionmanage.fast.FastFristActivity) -> e
    com.unionpay.upomp.yidatec.cK f(com.unionpay.upomp.yidatec.transactionmanage.fast.FastFristActivity) -> f
    android.os.Handler e() -> e
com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity -> com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity:
    java.lang.String p -> p
    java.lang.String q -> q
    java.lang.String r -> r
    java.lang.String s -> s
    java.lang.String t -> t
    java.lang.String u -> u
    java.util.ArrayList v -> v
    com.unionpay.upomp.yidatec.ft w -> w
    com.unionpay.upomp.yidatec.ft x -> x
    com.unionpay.upomp.yidatec.ft y -> y
    com.unionpay.upomp.yidatec.ft z -> z
    boolean A -> A
    android.widget.LinearLayout B -> B
    android.widget.LinearLayout C -> C
    com.unionpay.upomp.yidatec.widget.UpompButton D -> D
    com.unionpay.upomp.yidatec.widget.UpompButton E -> E
    android.widget.ImageView F -> F
    com.unionpay.upomp.yidatec.a G -> G
    java.util.Timer H -> H
    int I -> I
    android.os.Handler o -> o
    com.unionpay.upomp.yidatec.m J -> J
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onDestroy() -> onDestroy
    void f() -> f
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onClick(android.view.View) -> onClick
    java.lang.String c(java.lang.String) -> c
    void e() -> e
    void a(com.unionpay.upomp.yidatec.aI) -> a
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void a(java.lang.String,java.lang.String) -> a
    com.unionpay.upomp.yidatec.a a(com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity) -> a
    java.util.ArrayList b(com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity) -> b
    void c(com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity) -> c
    com.unionpay.upomp.yidatec.ft d(com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity) -> d
    com.unionpay.upomp.yidatec.ft e(com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity) -> e
    com.unionpay.upomp.yidatec.ft f(com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity) -> f
    com.unionpay.upomp.yidatec.ft g(com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity) -> g
    com.unionpay.upomp.yidatec.widget.UpompButton h(com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity) -> h
    com.unionpay.upomp.yidatec.widget.UpompButton i(com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity) -> i
    void a(com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity,java.lang.String) -> a
    void b(com.unionpay.upomp.yidatec.transactionmanage.fast.FastSecondActivity,java.lang.String) -> b
com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity -> com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity:
    com.unionpay.upomp.yidatec.ft p -> p
    com.unionpay.upomp.yidatec.ft q -> q
    com.unionpay.upomp.yidatec.ft r -> r
    com.unionpay.upomp.yidatec.ft s -> s
    java.lang.String t -> t
    com.unionpay.upomp.yidatec.bp u -> u
    com.unionpay.upomp.yidatec.widget.UpompButton v -> v
    com.unionpay.upomp.yidatec.widget.UpompButton w -> w
    com.unionpay.upomp.yidatec.ft x -> x
    android.widget.LinearLayout y -> y
    android.widget.ImageView z -> z
    android.widget.LinearLayout A -> A
    android.widget.ImageView B -> B
    java.lang.String C -> C
    java.lang.String D -> D
    java.lang.String[] E -> E
    android.os.Handler o -> o
    void onStart() -> onStart
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onCreate(android.os.Bundle) -> onCreate
    void b(java.lang.String) -> b
    void a(java.lang.String,java.lang.String) -> a
    void f() -> f
    void e() -> e
    void a() -> a
    void onDestroy() -> onDestroy
    com.unionpay.upomp.yidatec.ft a(com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity) -> a
    android.app.Dialog b(com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity) -> b
    com.unionpay.upomp.yidatec.ft c(com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity) -> c
    java.lang.String d(com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity) -> d
    java.lang.String e(com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity) -> e
    void f(com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity) -> f
    com.unionpay.upomp.yidatec.ft g(com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity) -> g
    com.unionpay.upomp.yidatec.ft h(com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity) -> h
    void a(com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity,java.lang.String) -> a
    java.lang.String i(com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity) -> i
    java.lang.String[] j(com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity) -> j
    void b(com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity,java.lang.String) -> b
    java.lang.String k(com.unionpay.upomp.yidatec.transactionmanage.storedcard.StoredValueCardPaymentActivity) -> k
com.unionpay.upomp.yidatec.u -> com.unionpay.upomp.yidatec.u:
    com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity a -> a
    void onClick(android.view.View) -> onClick
com.unionpay.upomp.yidatec.usermanage.AccountActivity -> com.unionpay.upomp.yidatec.usermanage.AccountActivity:
    java.lang.String o -> o
    android.widget.EditText p -> p
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    int n -> n
    android.widget.RelativeLayout q -> q
    android.widget.Button r -> r
    android.widget.Button s -> s
    android.widget.Button t -> t
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
com.unionpay.upomp.yidatec.usermanage.UserActivity -> com.unionpay.upomp.yidatec.usermanage.UserActivity:
    java.lang.String c -> c
    android.widget.EditText d -> d
    int a -> a
    android.widget.RelativeLayout b -> b
    android.widget.Button n -> n
    android.widget.Button o -> o
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void a(int) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void b(java.lang.String) -> b
    void a(com.unionpay.upomp.yidatec.aA) -> a
com.unionpay.upomp.yidatec.usermanage.getsecuritquestion.GetSecuritQuestionActivity -> com.unionpay.upomp.yidatec.usermanage.getsecuritquestion.GetSecuritQuestionActivity:
    com.unionpay.upomp.yidatec.ft d -> d
    com.unionpay.upomp.yidatec.ft n -> n
    com.unionpay.upomp.yidatec.ft o -> o
    com.unionpay.upomp.yidatec.ft p -> p
    android.widget.Button q -> q
    java.lang.String r -> r
    boolean s -> s
    android.os.Handler t -> t
    java.util.Timer u -> u
    int v -> v
    android.os.Handler c -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onDestroy() -> onDestroy
    void onClick(android.view.View) -> onClick
    void g() -> g
    void b(java.lang.String) -> b
    void e() -> e
    void a(com.unionpay.upomp.yidatec.cI) -> a
    void a(com.unionpay.upomp.yidatec.aD) -> a
    void a(java.lang.String,java.lang.String) -> a
    com.unionpay.upomp.yidatec.ft a(com.unionpay.upomp.yidatec.usermanage.getsecuritquestion.GetSecuritQuestionActivity) -> a
    void b(com.unionpay.upomp.yidatec.usermanage.getsecuritquestion.GetSecuritQuestionActivity) -> b
    void c(com.unionpay.upomp.yidatec.usermanage.getsecuritquestion.GetSecuritQuestionActivity) -> c
    android.os.Handler f() -> f
    com.unionpay.upomp.yidatec.ft d(com.unionpay.upomp.yidatec.usermanage.getsecuritquestion.GetSecuritQuestionActivity) -> d
com.unionpay.upomp.yidatec.usermanage.login.LoginActivity -> com.unionpay.upomp.yidatec.usermanage.login.LoginActivity:
    com.unionpay.upomp.yidatec.widget.UpompButton c -> c
    com.unionpay.upomp.yidatec.ft d -> d
    com.unionpay.upomp.yidatec.ft n -> n
    com.unionpay.upomp.yidatec.ft o -> o
    java.lang.String p -> p
    java.lang.String q -> q
    android.widget.ImageView r -> r
    android.widget.ImageView s -> s
    android.widget.LinearLayout t -> t
    com.unionpay.upomp.yidatec.cK u -> u
    android.os.Handler v -> v
    int[] w -> w
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onStart() -> onStart
    void a(com.unionpay.upomp.yidatec.cS,java.util.HashMap) -> a
    void f() -> f
    void onClick(android.view.View) -> onClick
    void a(com.unionpay.upomp.yidatec.cT) -> a
    void a(boolean) -> a
    void b(java.lang.String) -> b
    void a(java.lang.String,java.lang.String) -> a
    void a() -> a
    void onDestroy() -> onDestroy
    com.unionpay.upomp.yidatec.ft a(com.unionpay.upomp.yidatec.usermanage.login.LoginActivity) -> a
    void b(com.unionpay.upomp.yidatec.usermanage.login.LoginActivity) -> b
    com.unionpay.upomp.yidatec.ft c(com.unionpay.upomp.yidatec.usermanage.login.LoginActivity) -> c
    java.lang.String d(com.unionpay.upomp.yidatec.usermanage.login.LoginActivity) -> d
    void a(com.unionpay.upomp.yidatec.usermanage.login.LoginActivity,boolean) -> a
    int[] g() -> g
    com.unionpay.upomp.yidatec.cK e(com.unionpay.upomp.yidatec.usermanage.login.LoginActivity) -> e
    android.os.Handler e() -> e
com.unionpay.upomp.yidatec.usermanage.myinfo.MyInfoActivity -> com.unionpay.upomp.yidatec.usermanage.myinfo.MyInfoActivity:
    java.lang.String o -> o
    java.lang.String p -> p
    java.lang.String q -> q
    java.lang.String r -> r
    android.widget.TextView s -> s
    android.widget.Button t -> t
    android.widget.Button u -> u
    android.widget.LinearLayout v -> v
    android.widget.LinearLayout w -> w
    android.widget.ImageView x -> x
    android.widget.LinearLayout y -> y
    android.widget.LinearLayout z -> z
    android.widget.LinearLayout A -> A
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onDestroy() -> onDestroy
    void onClick(android.view.View) -> onClick
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    java.lang.String a(com.unionpay.upomp.yidatec.usermanage.myinfo.MyInfoActivity) -> a
    java.lang.String b(com.unionpay.upomp.yidatec.usermanage.myinfo.MyInfoActivity) -> b
    java.lang.String c(com.unionpay.upomp.yidatec.usermanage.myinfo.MyInfoActivity) -> c
    java.lang.String d(com.unionpay.upomp.yidatec.usermanage.myinfo.MyInfoActivity) -> d
com.unionpay.upomp.yidatec.usermanage.register.CheckProtocalActivity -> com.unionpay.upomp.yidatec.usermanage.register.CheckProtocalActivity:
    void onCreate(android.os.Bundle) -> onCreate
com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity -> com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity:
    com.unionpay.upomp.yidatec.widget.UpompButton d -> d
    android.widget.ImageView n -> n
    com.unionpay.upomp.yidatec.ft o -> o
    com.unionpay.upomp.yidatec.ft p -> p
    com.unionpay.upomp.yidatec.ft q -> q
    com.unionpay.upomp.yidatec.ft r -> r
    com.unionpay.upomp.yidatec.ft s -> s
    com.unionpay.upomp.yidatec.ft t -> t
    com.unionpay.upomp.yidatec.ft u -> u
    com.unionpay.upomp.yidatec.ft v -> v
    com.unionpay.upomp.yidatec.ft w -> w
    com.unionpay.upomp.yidatec.ft x -> x
    com.unionpay.upomp.yidatec.ft y -> y
    boolean z -> z
    java.lang.String A -> A
    java.lang.String B -> B
    android.widget.TextView C -> C
    java.lang.String D -> D
    android.widget.ArrayAdapter E -> E
    java.util.ArrayList F -> F
    java.lang.Runnable G -> G
    boolean H -> H
    java.lang.String I -> I
    boolean J -> J
    android.widget.CompoundButton$OnCheckedChangeListener K -> K
    android.view.View$OnFocusChangeListener L -> L
    com.unionpay.upomp.yidatec.db M -> M
    java.util.Timer N -> N
    int O -> O
    android.os.Handler c -> c
    android.os.Handler P -> P
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onStart() -> onStart
    void onDestroy() -> onDestroy
    void g() -> g
    void h() -> h
    void i() -> i
    void e() -> e
    void j() -> j
    void onClick(android.view.View) -> onClick
    void a(com.unionpay.upomp.yidatec.da) -> a
    void a(com.unionpay.upomp.yidatec.cZ) -> a
    void a(com.unionpay.upomp.yidatec.aD) -> a
    void a(boolean) -> a
    void b(java.lang.String) -> b
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void a(java.lang.String,java.lang.String) -> a
    void a(com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity) -> a
    void b(com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity) -> b
    void c(com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity) -> c
    com.unionpay.upomp.yidatec.ft d(com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity) -> d
    com.unionpay.upomp.yidatec.ft e(com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity) -> e
    com.unionpay.upomp.yidatec.ft f(com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity) -> f
    java.lang.String g(com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity) -> g
    java.lang.String h(com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity) -> h
    void i(com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity) -> i
    android.widget.ArrayAdapter j(com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity) -> j
    com.unionpay.upomp.yidatec.ft k(com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity) -> k
    java.util.ArrayList l(com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity) -> l
    com.unionpay.upomp.yidatec.ft m(com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity) -> m
    void a(com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity,boolean) -> a
    boolean n(com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity) -> n
    void b(com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity,boolean) -> b
    void o(com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity) -> o
    com.unionpay.upomp.yidatec.db p(com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity) -> p
    android.os.Handler f() -> f
    com.unionpay.upomp.yidatec.ft q(com.unionpay.upomp.yidatec.usermanage.register.RegisterActivity) -> q
com.unionpay.upomp.yidatec.usermanage.retpasswd.RetPassword2Activity -> com.unionpay.upomp.yidatec.usermanage.retpasswd.RetPassword2Activity:
    android.widget.Button c -> c
    com.unionpay.upomp.yidatec.ft d -> d
    com.unionpay.upomp.yidatec.ft n -> n
    com.unionpay.upomp.yidatec.ft o -> o
    com.unionpay.upomp.yidatec.ft p -> p
    java.lang.String q -> q
    java.lang.String r -> r
    java.lang.String s -> s
    java.lang.String t -> t
    java.lang.String u -> u
    com.unionpay.upomp.yidatec.cv v -> v
    com.unionpay.upomp.yidatec.dy w -> w
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onStart() -> onStart
    void onClick(android.view.View) -> onClick
    void a(com.unionpay.upomp.yidatec.aI) -> a
    void a() -> a
    void onDestroy() -> onDestroy
    void e() -> e
    com.unionpay.upomp.yidatec.ft a(com.unionpay.upomp.yidatec.usermanage.retpasswd.RetPassword2Activity) -> a
    com.unionpay.upomp.yidatec.ft b(com.unionpay.upomp.yidatec.usermanage.retpasswd.RetPassword2Activity) -> b
    java.lang.String c(com.unionpay.upomp.yidatec.usermanage.retpasswd.RetPassword2Activity) -> c
    java.lang.String d(com.unionpay.upomp.yidatec.usermanage.retpasswd.RetPassword2Activity) -> d
    com.unionpay.upomp.yidatec.dy e(com.unionpay.upomp.yidatec.usermanage.retpasswd.RetPassword2Activity) -> e
com.unionpay.upomp.yidatec.usermanage.updatemobilenum.PhoneNumChangeActivity -> com.unionpay.upomp.yidatec.usermanage.updatemobilenum.PhoneNumChangeActivity:
    android.widget.TextView p -> p
    com.unionpay.upomp.yidatec.ft q -> q
    com.unionpay.upomp.yidatec.ft r -> r
    com.unionpay.upomp.yidatec.ft s -> s
    com.unionpay.upomp.yidatec.ft t -> t
    com.unionpay.upomp.yidatec.ft u -> u
    com.unionpay.upomp.yidatec.ft v -> v
    android.widget.LinearLayout w -> w
    android.widget.LinearLayout x -> x
    android.widget.ImageView y -> y
    android.widget.ImageView z -> z
    android.widget.LinearLayout A -> A
    android.widget.ImageView B -> B
    java.lang.String C -> C
    android.widget.Button D -> D
    android.widget.Button E -> E
    java.lang.String F -> F
    boolean G -> G
    java.util.Timer H -> H
    int I -> I
    android.os.Handler o -> o
    com.unionpay.upomp.yidatec.dG J -> J
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onStart() -> onStart
    void onDestroy() -> onDestroy
    void onClick(android.view.View) -> onClick
    void e() -> e
    void a(com.unionpay.upomp.yidatec.dF) -> a
    void a(com.unionpay.upomp.yidatec.aD) -> a
    void a(java.lang.String,java.lang.String) -> a
    com.unionpay.upomp.yidatec.ft a(com.unionpay.upomp.yidatec.usermanage.updatemobilenum.PhoneNumChangeActivity) -> a
    java.lang.String b(com.unionpay.upomp.yidatec.usermanage.updatemobilenum.PhoneNumChangeActivity) -> b
    void c(com.unionpay.upomp.yidatec.usermanage.updatemobilenum.PhoneNumChangeActivity) -> c
    com.unionpay.upomp.yidatec.dG d(com.unionpay.upomp.yidatec.usermanage.updatemobilenum.PhoneNumChangeActivity) -> d
    android.os.Handler f() -> f
    com.unionpay.upomp.yidatec.ft e(com.unionpay.upomp.yidatec.usermanage.updatemobilenum.PhoneNumChangeActivity) -> e
com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity -> com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity:
    android.widget.TextView p -> p
    com.unionpay.upomp.yidatec.ft q -> q
    com.unionpay.upomp.yidatec.ft r -> r
    com.unionpay.upomp.yidatec.ft s -> s
    com.unionpay.upomp.yidatec.ft t -> t
    com.unionpay.upomp.yidatec.ft u -> u
    android.widget.LinearLayout v -> v
    android.widget.LinearLayout w -> w
    android.widget.ImageView x -> x
    android.widget.Button y -> y
    android.widget.Button z -> z
    boolean A -> A
    java.lang.String B -> B
    java.lang.String C -> C
    java.lang.String D -> D
    java.lang.String E -> E
    java.lang.String F -> F
    java.lang.String G -> G
    java.lang.String H -> H
    java.lang.String I -> I
    java.util.Timer J -> J
    int K -> K
    android.os.Handler o -> o
    com.unionpay.upomp.yidatec.dT L -> L
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onStart() -> onStart
    void onClick(android.view.View) -> onClick
    void e() -> e
    void a(com.unionpay.upomp.yidatec.aI) -> a
    void a(com.unionpay.upomp.yidatec.aD) -> a
    void a(java.lang.String,java.lang.String) -> a
    void a() -> a
    void onDestroy() -> onDestroy
    com.unionpay.upomp.yidatec.ft a(com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity) -> a
    com.unionpay.upomp.yidatec.ft b(com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity) -> b
    com.unionpay.upomp.yidatec.ft c(com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity) -> c
    void a(com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity,java.lang.String) -> a
    java.lang.String d(com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity) -> d
    void b(com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity,java.lang.String) -> b
    java.lang.String e(com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity) -> e
    void c(com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity,java.lang.String) -> c
    java.lang.String f(com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity) -> f
    void g(com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity) -> g
    com.unionpay.upomp.yidatec.dT h(com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity) -> h
    android.os.Handler f() -> f
    com.unionpay.upomp.yidatec.ft i(com.unionpay.upomp.yidatec.usermanage.updatepasswd.PasswordChangeActivity) -> i
com.unionpay.upomp.yidatec.util.SCHK -> com.unionpay.upomp.yidatec.util.SCHK:
    java.lang.String a -> a
    void getFileToByte(java.lang.String,java.lang.String) -> getFileToByte
    java.lang.String getJniEncString(java.lang.String) -> getJniEncString
    java.lang.String getSCHK() -> getSCHK
    java.lang.String getJniVString(byte[],java.lang.String) -> getJniVString
    java.lang.String getJniSVString(byte[],java.lang.String) -> getJniSVString
    java.lang.String a(java.lang.String) -> a
    java.lang.String b(java.lang.String) -> b
    java.lang.String getJniSCHKString(java.lang.String) -> getJniSCHKString
    java.lang.String getJniSCHKStringUrl(java.lang.String) -> getJniSCHKStringUrl
    int getnyttttt(byte[],int,java.lang.String) -> getnyttttt
    byte[] a(java.lang.String,java.lang.String) -> a
    byte[] b(byte[],java.lang.String) -> b
    byte[] a(byte[],java.lang.String) -> a
    java.lang.String a() -> a
com.unionpay.upomp.yidatec.util.Util1 -> com.unionpay.upomp.yidatec.util.Util1:
    int[] b -> b
    com.unionpay.upomp.yidatec.es a -> a
    java.lang.StringBuffer c -> c
    android.widget.TextView d -> d
    java.lang.String e -> e
    android.os.Vibrator f -> f
    int g -> g
    int h -> h
    int i -> i
    int j -> j
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    int a(com.unionpay.upomp.yidatec.util.Util1) -> a
    void a(com.unionpay.upomp.yidatec.util.Util1,int) -> a
    boolean b(com.unionpay.upomp.yidatec.util.Util1,int) -> b
    java.lang.StringBuffer b(com.unionpay.upomp.yidatec.util.Util1) -> b
    android.widget.TextView c(com.unionpay.upomp.yidatec.util.Util1) -> c
    int d(com.unionpay.upomp.yidatec.util.Util1) -> d
    void c(com.unionpay.upomp.yidatec.util.Util1,int) -> c
    int e(com.unionpay.upomp.yidatec.util.Util1) -> e
    void f(com.unionpay.upomp.yidatec.util.Util1) -> f
com.unionpay.upomp.yidatec.util.Util2 -> com.unionpay.upomp.yidatec.util.Util2:
    java.lang.String[] b -> b
    java.lang.String[] c -> c
    java.lang.String[] d -> d
    java.lang.String[] e -> e
    java.lang.String[] f -> f
    java.lang.String[] g -> g
    java.lang.String[] h -> h
    int[] i -> i
    java.lang.StringBuffer j -> j
    java.lang.String k -> k
    android.widget.TextView l -> l
    com.unionpay.upomp.yidatec.fk m -> m
    android.widget.LinearLayout n -> n
    java.lang.String o -> o
    java.lang.String p -> p
    android.content.Context q -> q
    android.widget.PopupWindow a -> a
    android.widget.Button r -> r
    android.widget.LinearLayout s -> s
    android.widget.LinearLayout t -> t
    android.widget.LinearLayout u -> u
    android.widget.LinearLayout v -> v
    android.widget.TextView w -> w
    java.util.ArrayList x -> x
    java.util.ArrayList y -> y
    java.util.ArrayList z -> z
    int A -> A
    android.widget.Button B -> B
    android.widget.Button C -> C
    android.widget.Button D -> D
    android.widget.PopupWindow E -> E
    android.os.Vibrator F -> F
    boolean G -> G
    boolean H -> H
    boolean I -> I
    boolean J -> J
    boolean K -> K
    int L -> L
    int M -> M
    int N -> N
    int[] O -> O
    android.widget.RelativeLayout P -> P
    android.widget.ImageView Q -> Q
    android.widget.Button R -> R
    android.widget.Button S -> S
    android.widget.Button T -> T
    android.widget.Button U -> U
    android.widget.Button V -> V
    android.widget.Button W -> W
    android.widget.Button X -> X
    android.widget.Button Y -> Y
    android.widget.Button Z -> Z
    android.widget.Button aa -> aa
    android.widget.ImageView ab -> ab
    android.widget.Button ac -> ac
    android.widget.Button ad -> ad
    java.util.ArrayList ae -> ae
    java.util.Map af -> af
    java.util.ArrayList ag -> ag
    void onDestroy() -> onDestroy
    void onCreate(android.os.Bundle) -> onCreate
    void h() -> h
    void i() -> i
    void j() -> j
    void k() -> k
    void l() -> l
    java.lang.String a(int) -> a
    com.unionpay.upomp.yidatec.fj b(int) -> b
    java.util.ArrayList a(boolean) -> a
    void c(int) -> c
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    android.graphics.drawable.Drawable a(java.lang.String) -> a
    int a(com.unionpay.upomp.yidatec.util.Util2) -> a
    void a(com.unionpay.upomp.yidatec.util.Util2,int) -> a
    boolean b(com.unionpay.upomp.yidatec.util.Util2,int) -> b
    android.widget.TextView b(com.unionpay.upomp.yidatec.util.Util2) -> b
    java.lang.StringBuffer c(com.unionpay.upomp.yidatec.util.Util2) -> c
    java.lang.String c(com.unionpay.upomp.yidatec.util.Util2,int) -> c
    java.lang.String[] a() -> a
    void a(com.unionpay.upomp.yidatec.util.Util2,java.lang.String) -> a
    boolean d(com.unionpay.upomp.yidatec.util.Util2) -> d
    java.lang.String e(com.unionpay.upomp.yidatec.util.Util2) -> e
    void a(com.unionpay.upomp.yidatec.util.Util2,java.lang.StringBuffer) -> a
    java.lang.String[] b() -> b
    java.lang.String[] c() -> c
    java.lang.String[] d() -> d
    java.lang.String[] e() -> e
    java.lang.String[] f() -> f
    java.lang.String[] g() -> g
    int f(com.unionpay.upomp.yidatec.util.Util2) -> f
    void d(com.unionpay.upomp.yidatec.util.Util2,int) -> d
    int g(com.unionpay.upomp.yidatec.util.Util2) -> g
    boolean h(com.unionpay.upomp.yidatec.util.Util2) -> h
    java.util.ArrayList a(com.unionpay.upomp.yidatec.util.Util2,boolean) -> a
    android.graphics.drawable.Drawable b(com.unionpay.upomp.yidatec.util.Util2,java.lang.String) -> b
    void i(com.unionpay.upomp.yidatec.util.Util2) -> i
    void e(com.unionpay.upomp.yidatec.util.Util2,int) -> e
    void a(com.unionpay.upomp.yidatec.util.Util2,int,int,int) -> a
    void a(com.unionpay.upomp.yidatec.util.Util2,int,int) -> a
    android.widget.Button j(com.unionpay.upomp.yidatec.util.Util2) -> j
    android.widget.Button k(com.unionpay.upomp.yidatec.util.Util2) -> k
    android.widget.Button l(com.unionpay.upomp.yidatec.util.Util2) -> l
    android.widget.Button m(com.unionpay.upomp.yidatec.util.Util2) -> m
    android.widget.Button n(com.unionpay.upomp.yidatec.util.Util2) -> n
    android.widget.Button o(com.unionpay.upomp.yidatec.util.Util2) -> o
    android.widget.Button p(com.unionpay.upomp.yidatec.util.Util2) -> p
    android.widget.Button q(com.unionpay.upomp.yidatec.util.Util2) -> q
    android.widget.Button r(com.unionpay.upomp.yidatec.util.Util2) -> r
    android.widget.Button s(com.unionpay.upomp.yidatec.util.Util2) -> s
    android.widget.Button t(com.unionpay.upomp.yidatec.util.Util2) -> t
    void a(com.unionpay.upomp.yidatec.util.Util2,android.widget.Button) -> a
    android.widget.Button u(com.unionpay.upomp.yidatec.util.Util2) -> u
com.unionpay.upomp.yidatec.v -> com.unionpay.upomp.yidatec.v:
    com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity a -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.unionpay.upomp.yidatec.w -> com.unionpay.upomp.yidatec.w:
    com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity a -> a
    com.unionpay.upomp.yidatec.aI b -> b
    void run() -> run
com.unionpay.upomp.yidatec.widget.UpompButton -> com.unionpay.upomp.yidatec.widget.UpompButton:
    android.graphics.drawable.Drawable a -> a
    android.graphics.drawable.Drawable b -> b
    android.graphics.drawable.Drawable c -> c
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onFocusChanged(boolean,int,android.graphics.Rect) -> onFocusChanged
com.unionpay.upomp.yidatec.widget.UpompRadioButton -> com.unionpay.upomp.yidatec.widget.UpompRadioButton:
    boolean a -> a
    android.graphics.drawable.Drawable b -> b
    android.graphics.drawable.Drawable c -> c
    com.unionpay.upomp.yidatec.fU d -> d
    void setCheck(boolean) -> setCheck
    void setOnChangeCheckListener(com.unionpay.upomp.yidatec.fU) -> setOnChangeCheckListener
    void setBackgroundFromCheck(boolean) -> setBackgroundFromCheck
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
com.unionpay.upomp.yidatec.x -> com.unionpay.upomp.yidatec.x:
    com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity a -> a
    com.unionpay.upomp.yidatec.aD b -> b
    void run() -> run
com.unionpay.upomp.yidatec.y -> com.unionpay.upomp.yidatec.y:
    com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity a -> a
    void run() -> run
com.unionpay.upomp.yidatec.z -> com.unionpay.upomp.yidatec.z:
    com.unionpay.upomp.yidatec.bankcardmanage.bindcard.BankCardBindActivity a -> a
    void onClick(android.view.View) -> onClick
    java.lang.String a(android.content.Context) -> a
com.weibo.net.AccessToken -> com.weibo.net.AccessToken:
com.weibo.net.AccessTokenHeader -> com.weibo.net.AccessTokenHeader:
    com.weibo.net.WeiboParameters generateSignatureList(com.weibo.net.WeiboParameters) -> generateSignatureList
    java.lang.String generateSignature(java.lang.String,com.weibo.net.Token) -> generateSignature
    void addAdditionalParams(com.weibo.net.WeiboParameters,com.weibo.net.WeiboParameters) -> addAdditionalParams
com.weibo.net.AsyncWeiboRunner -> com.weibo.net.AsyncWeiboRunner:
    com.weibo.net.Weibo mWeibo -> mWeibo
    void request(android.content.Context,java.lang.String,com.weibo.net.WeiboParameters,java.lang.String,com.weibo.net.AsyncWeiboRunner$RequestListener) -> request
    com.weibo.net.Weibo access$0(com.weibo.net.AsyncWeiboRunner) -> access$0
com.weibo.net.AsyncWeiboRunner$1 -> com.weibo.net.AsyncWeiboRunner$1:
    com.weibo.net.AsyncWeiboRunner this$0 -> this$0
    android.content.Context val$context -> val$context
    java.lang.String val$url -> val$url
    com.weibo.net.WeiboParameters val$params -> val$params
    java.lang.String val$httpMethod -> val$httpMethod
    com.weibo.net.AsyncWeiboRunner$RequestListener val$listener -> val$listener
    void run() -> run
com.weibo.net.AsyncWeiboRunner$RequestListener -> com.weibo.net.AsyncWeiboRunner$RequestListener:
    void onComplete(java.lang.String) -> onComplete
    void onIOException(java.io.IOException) -> onIOException
    void onError(com.weibo.net.WeiboException) -> onError
com.weibo.net.DialogError -> com.weibo.net.DialogError:
    long serialVersionUID -> serialVersionUID
    int mErrorCode -> mErrorCode
    java.lang.String mFailingUrl -> mFailingUrl
    int getErrorCode() -> getErrorCode
    java.lang.String getFailingUrl() -> getFailingUrl
com.weibo.net.HttpHeaderFactory -> com.weibo.net.HttpHeaderFactory:
    java.lang.String CONST_HMAC_SHA1 -> CONST_HMAC_SHA1
    java.lang.String CONST_SIGNATURE_METHOD -> CONST_SIGNATURE_METHOD
    java.lang.String CONST_OAUTH_VERSION -> CONST_OAUTH_VERSION
    java.lang.String getWeiboAuthHeader(java.lang.String,java.lang.String,com.weibo.net.WeiboParameters,java.lang.String,java.lang.String,com.weibo.net.Token) -> getWeiboAuthHeader
    java.lang.String generateAuthSignature(java.lang.String,com.weibo.net.WeiboParameters,java.lang.String,com.weibo.net.Token) -> generateAuthSignature
    com.weibo.net.WeiboParameters generateSignatureParameters(com.weibo.net.WeiboParameters,com.weibo.net.WeiboParameters,java.lang.String) -> generateSignatureParameters
    com.weibo.net.WeiboParameters generateAuthParameters(long,long,com.weibo.net.Token) -> generateAuthParameters
    com.weibo.net.WeiboParameters generateSignatureList(com.weibo.net.WeiboParameters) -> generateSignatureList
    void addAdditionalParams(com.weibo.net.WeiboParameters,com.weibo.net.WeiboParameters) -> addAdditionalParams
    void parseUrlParameters(java.lang.String,com.weibo.net.WeiboParameters) -> parseUrlParameters
    java.lang.String generateSignature(java.lang.String,com.weibo.net.Token) -> generateSignature
    java.lang.String encodeParameters(com.weibo.net.WeiboParameters,java.lang.String,boolean) -> encodeParameters
    java.lang.String encodeParameters(android.os.Bundle,java.lang.String,boolean) -> encodeParameters
    java.lang.String constructRequestURL(java.lang.String) -> constructRequestURL
    java.lang.String encode(java.lang.String) -> encode
com.weibo.net.Oauth2AccessToken -> com.weibo.net.Oauth2AccessToken:
com.weibo.net.Oauth2AccessTokenHeader -> com.weibo.net.Oauth2AccessTokenHeader:
    java.lang.String getWeiboAuthHeader(java.lang.String,java.lang.String,com.weibo.net.WeiboParameters,java.lang.String,java.lang.String,com.weibo.net.Token) -> getWeiboAuthHeader
    com.weibo.net.WeiboParameters generateSignatureList(com.weibo.net.WeiboParameters) -> generateSignatureList
    java.lang.String generateSignature(java.lang.String,com.weibo.net.Token) -> generateSignature
    void addAdditionalParams(com.weibo.net.WeiboParameters,com.weibo.net.WeiboParameters) -> addAdditionalParams
com.weibo.net.RequestHeader -> com.weibo.net.RequestHeader:
    com.weibo.net.WeiboParameters generateSignatureList(com.weibo.net.WeiboParameters) -> generateSignatureList
    java.lang.String generateSignature(java.lang.String,com.weibo.net.Token) -> generateSignature
    void addAdditionalParams(com.weibo.net.WeiboParameters,com.weibo.net.WeiboParameters) -> addAdditionalParams
com.weibo.net.RequestToken -> com.weibo.net.RequestToken:
com.weibo.net.RequestTokenHeader -> com.weibo.net.RequestTokenHeader:
    com.weibo.net.WeiboParameters generateSignatureList(com.weibo.net.WeiboParameters) -> generateSignatureList
    java.lang.String generateSignature(java.lang.String,com.weibo.net.Token) -> generateSignature
    void addAdditionalParams(com.weibo.net.WeiboParameters,com.weibo.net.WeiboParameters) -> addAdditionalParams
com.weibo.net.ShareActivity -> com.weibo.net.ShareActivity:
    android.widget.TextView mTextNum -> mTextNum
    android.widget.Button mSend -> mSend
    android.widget.EditText mEdit -> mEdit
    android.widget.FrameLayout mPiclayout -> mPiclayout
    java.lang.String mPicPath -> mPicPath
    java.lang.String mContent -> mContent
    java.lang.String mAccessToken -> mAccessToken
    java.lang.String mTokenSecret -> mTokenSecret
    java.lang.String EXTRA_WEIBO_CONTENT -> EXTRA_WEIBO_CONTENT
    java.lang.String EXTRA_PIC_URI -> EXTRA_PIC_URI
    java.lang.String EXTRA_ACCESS_TOKEN -> EXTRA_ACCESS_TOKEN
    java.lang.String EXTRA_TOKEN_SECRET -> EXTRA_TOKEN_SECRET
    int WEIBO_MAX_LENGTH -> WEIBO_MAX_LENGTH
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    java.lang.String upload(com.weibo.net.Weibo,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> upload
    java.lang.String update(com.weibo.net.Weibo,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> update
    void onComplete(java.lang.String) -> onComplete
    void onIOException(java.io.IOException) -> onIOException
    void onError(com.weibo.net.WeiboException) -> onError
    android.widget.EditText access$0(com.weibo.net.ShareActivity) -> access$0
    android.widget.TextView access$1(com.weibo.net.ShareActivity) -> access$1
    android.widget.Button access$2(com.weibo.net.ShareActivity) -> access$2
    android.widget.FrameLayout access$3(com.weibo.net.ShareActivity) -> access$3
com.weibo.net.ShareActivity$1 -> com.weibo.net.ShareActivity$1:
    com.weibo.net.ShareActivity this$0 -> this$0
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
com.weibo.net.ShareActivity$2 -> com.weibo.net.ShareActivity$2:
    com.weibo.net.ShareActivity this$0 -> this$0
    void onClick(android.content.DialogInterface,int) -> onClick
com.weibo.net.ShareActivity$3 -> com.weibo.net.ShareActivity$3:
    com.weibo.net.ShareActivity this$0 -> this$0
    void onClick(android.content.DialogInterface,int) -> onClick
com.weibo.net.ShareActivity$4 -> com.weibo.net.ShareActivity$4:
    com.weibo.net.ShareActivity this$0 -> this$0
    void run() -> run
com.weibo.net.ShareActivity$5 -> com.weibo.net.ShareActivity$5:
    com.weibo.net.ShareActivity this$0 -> this$0
    com.weibo.net.WeiboException val$e -> val$e
    void run() -> run
com.weibo.net.Token -> com.weibo.net.Token:
    java.lang.String mToken -> mToken
    java.lang.String mRefreshToken -> mRefreshToken
    long mExpiresIn -> mExpiresIn
    java.lang.String mOauth_verifier -> mOauth_verifier
    java.lang.String mOauth_Token_Secret -> mOauth_Token_Secret
    java.lang.String[] responseStr -> responseStr
    javax.crypto.spec.SecretKeySpec mSecretKeySpec -> mSecretKeySpec
    java.lang.String mOauth_uid -> mOauth_uid
    java.lang.String getToken() -> getToken
    java.lang.String getRefreshToken() -> getRefreshToken
    void setRefreshToken(java.lang.String) -> setRefreshToken
    long getExpiresIn() -> getExpiresIn
    void setExpiresIn(long) -> setExpiresIn
    void setExpiresIn(java.lang.String) -> setExpiresIn
    void setToken(java.lang.String) -> setToken
    void setVerifier(java.lang.String) -> setVerifier
    java.lang.String getVerifier() -> getVerifier
    java.lang.String getSecret() -> getSecret
    java.lang.String getUid() -> getUid
    java.lang.String getParameter(java.lang.String) -> getParameter
    void setSecretKeySpec(javax.crypto.spec.SecretKeySpec) -> setSecretKeySpec
    javax.crypto.spec.SecretKeySpec getSecretKeySpec() -> getSecretKeySpec
com.weibo.net.Utility -> com.weibo.net.Utility:
    com.weibo.net.WeiboParameters mRequestHeader -> mRequestHeader
    com.weibo.net.HttpHeaderFactory mAuth -> mAuth
    com.weibo.net.Token mToken -> mToken
    java.lang.String BOUNDARY -> BOUNDARY
    java.lang.String MP_BOUNDARY -> MP_BOUNDARY
    java.lang.String END_MP_BOUNDARY -> END_MP_BOUNDARY
    java.lang.String MULTIPART_FORM_DATA -> MULTIPART_FORM_DATA
    java.lang.String HTTPMETHOD_POST -> HTTPMETHOD_POST
    java.lang.String HTTPMETHOD_GET -> HTTPMETHOD_GET
    java.lang.String HTTPMETHOD_DELETE -> HTTPMETHOD_DELETE
    int SET_CONNECTION_TIMEOUT -> SET_CONNECTION_TIMEOUT
    int SET_SOCKET_TIMEOUT -> SET_SOCKET_TIMEOUT
    void setTokenObject(com.weibo.net.Token) -> setTokenObject
    void setAuthorization(com.weibo.net.HttpHeaderFactory) -> setAuthorization
    void setHeader(java.lang.String,org.apache.http.client.methods.HttpUriRequest,com.weibo.net.WeiboParameters,java.lang.String,com.weibo.net.Token) -> setHeader
    boolean isBundleEmpty(com.weibo.net.WeiboParameters) -> isBundleEmpty
    void setRequestHeader(java.lang.String,java.lang.String) -> setRequestHeader
    void setRequestHeader(com.weibo.net.WeiboParameters) -> setRequestHeader
    void clearRequestHeader() -> clearRequestHeader
    java.lang.String encodePostBody(android.os.Bundle,java.lang.String) -> encodePostBody
    java.lang.String encodeUrl(com.weibo.net.WeiboParameters) -> encodeUrl
    android.os.Bundle decodeUrl(java.lang.String) -> decodeUrl
    android.os.Bundle parseUrl(java.lang.String) -> parseUrl
    org.apache.http.client.entity.UrlEncodedFormEntity getPostParamters(android.os.Bundle) -> getPostParamters
    java.lang.String openUrl(android.content.Context,java.lang.String,java.lang.String,com.weibo.net.WeiboParameters,com.weibo.net.Token) -> openUrl
    java.lang.String openUrl(android.content.Context,java.lang.String,java.lang.String,com.weibo.net.WeiboParameters,java.lang.String,com.weibo.net.Token) -> openUrl
    org.apache.http.client.HttpClient getNewHttpClient(android.content.Context) -> getNewHttpClient
    org.apache.http.client.HttpClient getHttpClient(android.content.Context) -> getHttpClient
    void imageContentToUpload(java.io.OutputStream,android.graphics.Bitmap) -> imageContentToUpload
    void paramToUpload(java.io.OutputStream,com.weibo.net.WeiboParameters) -> paramToUpload
    java.lang.String read(org.apache.http.HttpResponse) -> read
    java.lang.String read(java.io.InputStream) -> read
    void clearCookies(android.content.Context) -> clearCookies
    void showAlert(android.content.Context,java.lang.String,java.lang.String) -> showAlert
    java.lang.String encodeParameters(com.weibo.net.WeiboParameters) -> encodeParameters
    char[] base64Encode(byte[]) -> base64Encode
com.weibo.net.Utility$MySSLSocketFactory -> com.weibo.net.Utility$MySSLSocketFactory:
    javax.net.ssl.SSLContext sslContext -> sslContext
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
    java.net.Socket createSocket() -> createSocket
com.weibo.net.Utility$MySSLSocketFactory$1 -> com.weibo.net.Utility$MySSLSocketFactory$1:
    com.weibo.net.Utility$MySSLSocketFactory this$1 -> this$1
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
com.weibo.net.Weibo -> com.weibo.net.Weibo:
    java.lang.String SERVER -> SERVER
    java.lang.String URL_OAUTH_TOKEN -> URL_OAUTH_TOKEN
    java.lang.String URL_AUTHORIZE -> URL_AUTHORIZE
    java.lang.String URL_ACCESS_TOKEN -> URL_ACCESS_TOKEN
    java.lang.String URL_AUTHENTICATION -> URL_AUTHENTICATION
    java.lang.String URL_OAUTH2_ACCESS_TOKEN -> URL_OAUTH2_ACCESS_TOKEN
    java.lang.String URL_OAUTH2_ACCESS_AUTHORIZE -> URL_OAUTH2_ACCESS_AUTHORIZE
    java.lang.String APP_KEY -> APP_KEY
    java.lang.String APP_SECRET -> APP_SECRET
    com.weibo.net.Weibo mWeiboInstance -> mWeiboInstance
    com.weibo.net.Token mAccessToken -> mAccessToken
    com.weibo.net.RequestToken mRequestToken -> mRequestToken
    com.weibo.net.WeiboDialogListener mAuthDialogListener -> mAuthDialogListener
    int DEFAULT_AUTH_ACTIVITY_CODE -> DEFAULT_AUTH_ACTIVITY_CODE
    java.lang.String TOKEN -> TOKEN
    java.lang.String EXPIRES -> EXPIRES
    java.lang.String DEFAULT_REDIRECT_URI -> DEFAULT_REDIRECT_URI
    java.lang.String DEFAULT_CANCEL_URI -> DEFAULT_CANCEL_URI
    java.lang.String mRedirectUrl -> mRedirectUrl
    com.weibo.net.Weibo getInstance() -> getInstance
    void setAccessToken(com.weibo.net.AccessToken) -> setAccessToken
    com.weibo.net.Token getAccessToken() -> getAccessToken
    void setupConsumerConfig(java.lang.String,java.lang.String) -> setupConsumerConfig
    java.lang.String getAppKey() -> getAppKey
    java.lang.String getAppSecret() -> getAppSecret
    void setRequestToken(com.weibo.net.RequestToken) -> setRequestToken
    java.lang.String getSERVER() -> getSERVER
    void setSERVER(java.lang.String) -> setSERVER
    void addOauthverifier(java.lang.String) -> addOauthverifier
    java.lang.String getRedirectUrl() -> getRedirectUrl
    void setRedirectUrl(java.lang.String) -> setRedirectUrl
    java.lang.String request(android.content.Context,java.lang.String,com.weibo.net.WeiboParameters,java.lang.String,com.weibo.net.Token) -> request
    com.weibo.net.RequestToken getRequestToken(android.content.Context,java.lang.String,java.lang.String,java.lang.String) -> getRequestToken
    com.weibo.net.AccessToken generateAccessToken(android.content.Context,com.weibo.net.RequestToken) -> generateAccessToken
    com.weibo.net.AccessToken getXauthAccessToken(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> getXauthAccessToken
    com.weibo.net.Oauth2AccessToken getOauth2AccessToken(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> getOauth2AccessToken
    boolean share2weibo(android.app.Activity,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> share2weibo
    boolean startSingleSignOn(android.app.Activity,java.lang.String,java.lang.String[],int) -> startSingleSignOn
    void startDialogAuth(android.app.Activity,java.lang.String[]) -> startDialogAuth
    void authorize(android.app.Activity,com.weibo.net.WeiboDialogListener) -> authorize
    void authorize(android.app.Activity,java.lang.String[],com.weibo.net.WeiboDialogListener) -> authorize
    void authorize(android.app.Activity,java.lang.String[],int,com.weibo.net.WeiboDialogListener) -> authorize
    void authorizeCallBack(int,int,android.content.Intent) -> authorizeCallBack
    void dialog(android.content.Context,com.weibo.net.WeiboParameters,com.weibo.net.WeiboDialogListener) -> dialog
    boolean isSessionValid() -> isSessionValid
    com.weibo.net.Token access$0(com.weibo.net.Weibo) -> access$0
    void access$1(com.weibo.net.Weibo,com.weibo.net.Token) -> access$1
    com.weibo.net.WeiboDialogListener access$2(com.weibo.net.Weibo) -> access$2
com.weibo.net.Weibo$1 -> com.weibo.net.Weibo$1:
    com.weibo.net.Weibo this$0 -> this$0
    void onComplete(android.os.Bundle) -> onComplete
    void onError(com.weibo.net.DialogError) -> onError
    void onWeiboException(com.weibo.net.WeiboException) -> onWeiboException
    void onCancel() -> onCancel
com.weibo.net.WeiboDialog -> com.weibo.net.WeiboDialog:
    android.widget.FrameLayout$LayoutParams FILL -> FILL
    int MARGIN -> MARGIN
    int PADDING -> PADDING
    com.weibo.net.Weibo mWeibo -> mWeibo
    java.lang.String mUrl -> mUrl
    com.weibo.net.WeiboDialogListener mListener -> mListener
    android.app.ProgressDialog mSpinner -> mSpinner
    android.widget.ImageView mBtnClose -> mBtnClose
    android.webkit.WebView mWebView -> mWebView
    android.widget.RelativeLayout webViewContainer -> webViewContainer
    android.widget.RelativeLayout mContent -> mContent
    java.lang.String TAG -> TAG
    void onCreate(android.os.Bundle) -> onCreate
    void setUpWebView() -> setUpWebView
    void setUpCloseBtn() -> setUpCloseBtn
    void handleRedirectUrl(android.webkit.WebView,java.lang.String) -> handleRedirectUrl
    java.lang.String getHtml(java.lang.String) -> getHtml
    com.weibo.net.Weibo access$0(com.weibo.net.WeiboDialog) -> access$0
    void access$1(com.weibo.net.WeiboDialog,android.webkit.WebView,java.lang.String) -> access$1
    com.weibo.net.WeiboDialogListener access$2(com.weibo.net.WeiboDialog) -> access$2
    android.app.ProgressDialog access$3(com.weibo.net.WeiboDialog) -> access$3
    android.widget.RelativeLayout access$4(com.weibo.net.WeiboDialog) -> access$4
    android.widget.RelativeLayout access$5(com.weibo.net.WeiboDialog) -> access$5
    android.webkit.WebView access$6(com.weibo.net.WeiboDialog) -> access$6
com.weibo.net.WeiboDialog$1 -> com.weibo.net.WeiboDialog$1:
    com.weibo.net.WeiboDialog this$0 -> this$0
    void onClick(android.view.View) -> onClick
com.weibo.net.WeiboDialog$WeiboWebViewClient -> com.weibo.net.WeiboDialog$WeiboWebViewClient:
    com.weibo.net.WeiboDialog this$0 -> this$0
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
    void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String) -> onReceivedError
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
    void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError) -> onReceivedSslError
com.weibo.net.WeiboDialogListener -> com.weibo.net.WeiboDialogListener:
    void onComplete(android.os.Bundle) -> onComplete
    void onWeiboException(com.weibo.net.WeiboException) -> onWeiboException
    void onError(com.weibo.net.DialogError) -> onError
    void onCancel() -> onCancel
com.weibo.net.WeiboException -> com.weibo.net.WeiboException:
    long serialVersionUID -> serialVersionUID
    int statusCode -> statusCode
    int getStatusCode() -> getStatusCode
    void setStatusCode(int) -> setStatusCode
com.weibo.net.WeiboParameters -> com.weibo.net.WeiboParameters:
    android.os.Bundle mParameters -> mParameters
    java.util.List mKeys -> mKeys
    void add(java.lang.String,java.lang.String) -> add
    void remove(java.lang.String) -> remove
    void remove(int) -> remove
    int getLocation(java.lang.String) -> getLocation
    java.lang.String getKey(int) -> getKey
    java.lang.String getValue(java.lang.String) -> getValue
    java.lang.String getValue(int) -> getValue
    int size() -> size
    void addAll(com.weibo.net.WeiboParameters) -> addAll
    void clear() -> clear
com.weibo.net.XAuthHeader -> com.weibo.net.XAuthHeader:
    com.weibo.net.WeiboParameters generateSignatureList(com.weibo.net.WeiboParameters) -> generateSignatureList
    java.lang.String generateSignature(java.lang.String,com.weibo.net.Token) -> generateSignature
    void addAdditionalParams(com.weibo.net.WeiboParameters,com.weibo.net.WeiboParameters) -> addAdditionalParams
de.measite.smack.Sasl -> de.measite.smack.Sasl:
    java.lang.String CLIENTFACTORYSRV -> CLIENTFACTORYSRV
    java.lang.String SERVERFACTORYSRV -> SERVERFACTORYSRV
    java.lang.String POLICY_NOPLAINTEXT -> POLICY_NOPLAINTEXT
    java.lang.String POLICY_NOACTIVE -> POLICY_NOACTIVE
    java.lang.String POLICY_NODICTIONARY -> POLICY_NODICTIONARY
    java.lang.String POLICY_NOANONYMOUS -> POLICY_NOANONYMOUS
    java.lang.String POLICY_FORWARD_SECRECY -> POLICY_FORWARD_SECRECY
    java.lang.String POLICY_PASS_CREDENTIALS -> POLICY_PASS_CREDENTIALS
    java.lang.String MAX_BUFFER -> MAX_BUFFER
    java.lang.String RAW_SEND_SIZE -> RAW_SEND_SIZE
    java.lang.String REUSE -> REUSE
    java.lang.String QOP -> QOP
    java.lang.String STRENGTH -> STRENGTH
    java.lang.String SERVER_AUTH -> SERVER_AUTH
    java.util.Enumeration getSaslClientFactories() -> getSaslClientFactories
    java.util.Enumeration getSaslServerFactories() -> getSaslServerFactories
    org.apache.harmony.javax.security.sasl.SaslServer createSaslServer(java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> createSaslServer
    org.apache.harmony.javax.security.sasl.SaslClient createSaslClient(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> createSaslClient
de.measite.smack.SaslClientFactory -> de.measite.smack.SaslClientFactory:
    org.apache.harmony.javax.security.sasl.SaslClient createSaslClient(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> createSaslClient
    java.lang.String[] getMechanismNames(java.util.Map) -> getMechanismNames
org.apache.harmony.javax.security.auth.AuthPermission -> org.apache.harmony.javax.security.auth.AuthPermission:
    long serialVersionUID -> serialVersionUID
    java.lang.String CREATE_LOGIN_CONTEXT -> CREATE_LOGIN_CONTEXT
    java.lang.String CREATE_LOGIN_CONTEXT_ANY -> CREATE_LOGIN_CONTEXT_ANY
    java.lang.String init(java.lang.String) -> init
org.apache.harmony.javax.security.auth.DestroyFailedException -> org.apache.harmony.javax.security.auth.DestroyFailedException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.Destroyable -> org.apache.harmony.javax.security.auth.Destroyable:
    void destroy() -> destroy
    boolean isDestroyed() -> isDestroyed
org.apache.harmony.javax.security.auth.PrivateCredentialPermission -> org.apache.harmony.javax.security.auth.PrivateCredentialPermission:
    long serialVersionUID -> serialVersionUID
    java.lang.String READ -> READ
    java.lang.String credentialClass -> credentialClass
    int offset -> offset
    org.apache.harmony.javax.security.auth.PrivateCredentialPermission$CredOwner[] set -> set
    void initTargetName(java.lang.String) -> initTargetName
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.String[][] getPrincipals() -> getPrincipals
    java.lang.String getActions() -> getActions
    java.lang.String getCredentialClass() -> getCredentialClass
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean implies(java.security.Permission) -> implies
    java.security.PermissionCollection newPermissionCollection() -> newPermissionCollection
    boolean sameMembers(java.lang.Object[],java.lang.Object[],int) -> sameMembers
org.apache.harmony.javax.security.auth.PrivateCredentialPermission$CredOwner -> org.apache.harmony.javax.security.auth.PrivateCredentialPermission$CredOwner:
    long serialVersionUID -> serialVersionUID
    java.lang.String principalClass -> principalClass
    java.lang.String principalName -> principalName
    boolean isClassWildcard -> isClassWildcard
    boolean isPNameWildcard -> isPNameWildcard
    boolean implies(java.lang.Object) -> implies
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.harmony.javax.security.auth.RefreshFailedException -> org.apache.harmony.javax.security.auth.RefreshFailedException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.Refreshable -> org.apache.harmony.javax.security.auth.Refreshable:
    void refresh() -> refresh
    boolean isCurrent() -> isCurrent
org.apache.harmony.javax.security.auth.Subject -> org.apache.harmony.javax.security.auth.Subject:
    long serialVersionUID -> serialVersionUID
    org.apache.harmony.javax.security.auth.AuthPermission _AS -> _AS
    org.apache.harmony.javax.security.auth.AuthPermission _AS_PRIVILEGED -> _AS_PRIVILEGED
    org.apache.harmony.javax.security.auth.AuthPermission _SUBJECT -> _SUBJECT
    org.apache.harmony.javax.security.auth.AuthPermission _PRINCIPALS -> _PRINCIPALS
    org.apache.harmony.javax.security.auth.AuthPermission _PRIVATE_CREDENTIALS -> _PRIVATE_CREDENTIALS
    org.apache.harmony.javax.security.auth.AuthPermission _PUBLIC_CREDENTIALS -> _PUBLIC_CREDENTIALS
    org.apache.harmony.javax.security.auth.AuthPermission _READ_ONLY -> _READ_ONLY
    java.util.Set principals -> principals
    boolean readOnly -> readOnly
    org.apache.harmony.javax.security.auth.Subject$SecureSet privateCredentials -> privateCredentials
    org.apache.harmony.javax.security.auth.Subject$SecureSet publicCredentials -> publicCredentials
    java.lang.Object doAs(org.apache.harmony.javax.security.auth.Subject,java.security.PrivilegedAction) -> doAs
    java.lang.Object doAsPrivileged(org.apache.harmony.javax.security.auth.Subject,java.security.PrivilegedAction,java.security.AccessControlContext) -> doAsPrivileged
    java.lang.Object doAs_PrivilegedAction(org.apache.harmony.javax.security.auth.Subject,java.security.PrivilegedAction,java.security.AccessControlContext) -> doAs_PrivilegedAction
    java.lang.Object doAs(org.apache.harmony.javax.security.auth.Subject,java.security.PrivilegedExceptionAction) -> doAs
    java.lang.Object doAsPrivileged(org.apache.harmony.javax.security.auth.Subject,java.security.PrivilegedExceptionAction,java.security.AccessControlContext) -> doAsPrivileged
    java.lang.Object doAs_PrivilegedExceptionAction(org.apache.harmony.javax.security.auth.Subject,java.security.PrivilegedExceptionAction,java.security.AccessControlContext) -> doAs_PrivilegedExceptionAction
    boolean equals(java.lang.Object) -> equals
    java.util.Set getPrincipals() -> getPrincipals
    java.util.Set getPrincipals(java.lang.Class) -> getPrincipals
    java.util.Set getPrivateCredentials() -> getPrivateCredentials
    java.util.Set getPrivateCredentials(java.lang.Class) -> getPrivateCredentials
    java.util.Set getPublicCredentials() -> getPublicCredentials
    java.util.Set getPublicCredentials(java.lang.Class) -> getPublicCredentials
    int hashCode() -> hashCode
    void setReadOnly() -> setReadOnly
    boolean isReadOnly() -> isReadOnly
    java.lang.String toString() -> toString
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    org.apache.harmony.javax.security.auth.Subject getSubject(java.security.AccessControlContext) -> getSubject
    void checkPermission(java.security.Permission) -> checkPermission
    void checkState() -> checkState
    org.apache.harmony.javax.security.auth.AuthPermission access$000() -> access$000
    void access$100(org.apache.harmony.javax.security.auth.Subject) -> access$100
    void access$200(java.security.Permission) -> access$200
    org.apache.harmony.javax.security.auth.AuthPermission access$300() -> access$300
    java.util.Set access$400(org.apache.harmony.javax.security.auth.Subject) -> access$400
    org.apache.harmony.javax.security.auth.AuthPermission access$500() -> access$500
org.apache.harmony.javax.security.auth.Subject$1 -> org.apache.harmony.javax.security.auth.Subject$1:
    java.security.AccessControlContext val$context -> val$context
    org.apache.harmony.javax.security.auth.SubjectDomainCombiner val$combiner -> val$combiner
    java.lang.Object run() -> run
org.apache.harmony.javax.security.auth.Subject$2 -> org.apache.harmony.javax.security.auth.Subject$2:
    java.security.AccessControlContext val$context -> val$context
    org.apache.harmony.javax.security.auth.SubjectDomainCombiner val$combiner -> val$combiner
    java.security.AccessControlContext run() -> run
    java.lang.Object run() -> run
org.apache.harmony.javax.security.auth.Subject$3 -> org.apache.harmony.javax.security.auth.Subject$3:
    java.security.AccessControlContext val$context -> val$context
    java.security.DomainCombiner run() -> run
    java.lang.Object run() -> run
org.apache.harmony.javax.security.auth.Subject$SecureSet -> org.apache.harmony.javax.security.auth.Subject$SecureSet:
    long serialVersionUID -> serialVersionUID
    java.util.LinkedList elements -> elements
    int setType -> setType
    int SET_Principal -> SET_Principal
    int SET_PrivCred -> SET_PrivCred
    int SET_PubCred -> SET_PubCred
    org.apache.harmony.javax.security.auth.AuthPermission permission -> permission
    org.apache.harmony.javax.security.auth.Subject this$0 -> this$0
    void verifyElement(java.lang.Object) -> verifyElement
    boolean add(java.lang.Object) -> add
    java.util.Iterator iterator() -> iterator
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.util.Set get(java.lang.Class) -> get
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    org.apache.harmony.javax.security.auth.AuthPermission access$600(org.apache.harmony.javax.security.auth.Subject$SecureSet) -> access$600
org.apache.harmony.javax.security.auth.Subject$SecureSet$1 -> org.apache.harmony.javax.security.auth.Subject$SecureSet$1:
    org.apache.harmony.javax.security.auth.Subject$SecureSet this$1 -> this$1
    java.lang.Object next() -> next
org.apache.harmony.javax.security.auth.Subject$SecureSet$2 -> org.apache.harmony.javax.security.auth.Subject$SecureSet$2:
    java.util.LinkedList elements -> elements
    java.lang.Class val$c -> val$c
    org.apache.harmony.javax.security.auth.Subject$SecureSet this$1 -> this$1
    boolean add(java.lang.Object) -> add
    java.util.Iterator iterator() -> iterator
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
org.apache.harmony.javax.security.auth.Subject$SecureSet$SecureIterator -> org.apache.harmony.javax.security.auth.Subject$SecureSet$SecureIterator:
    java.util.Iterator iterator -> iterator
    org.apache.harmony.javax.security.auth.Subject$SecureSet this$1 -> this$1
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.apache.harmony.javax.security.auth.SubjectDomainCombiner -> org.apache.harmony.javax.security.auth.SubjectDomainCombiner:
    org.apache.harmony.javax.security.auth.Subject subject -> subject
    org.apache.harmony.javax.security.auth.AuthPermission _GET -> _GET
    org.apache.harmony.javax.security.auth.Subject getSubject() -> getSubject
    java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[]) -> combine
org.apache.harmony.javax.security.auth.callback.Callback -> org.apache.harmony.javax.security.auth.callback.Callback:
org.apache.harmony.javax.security.auth.callback.CallbackHandler -> org.apache.harmony.javax.security.auth.callback.CallbackHandler:
    void handle(org.apache.harmony.javax.security.auth.callback.Callback[]) -> handle
org.apache.harmony.javax.security.auth.callback.ChoiceCallback -> org.apache.harmony.javax.security.auth.callback.ChoiceCallback:
    long serialVersionUID -> serialVersionUID
    int defaultChoice -> defaultChoice
    java.lang.String prompt -> prompt
    boolean multipleSelectionsAllowed -> multipleSelectionsAllowed
    java.lang.String[] choices -> choices
    int[] selections -> selections
    void setChoices(java.lang.String[]) -> setChoices
    void setPrompt(java.lang.String) -> setPrompt
    void setDefaultChoice(int) -> setDefaultChoice
    boolean allowMultipleSelections() -> allowMultipleSelections
    java.lang.String[] getChoices() -> getChoices
    int getDefaultChoice() -> getDefaultChoice
    java.lang.String getPrompt() -> getPrompt
    int[] getSelectedIndexes() -> getSelectedIndexes
    void setSelectedIndex(int) -> setSelectedIndex
    void setSelectedIndexes(int[]) -> setSelectedIndexes
org.apache.harmony.javax.security.auth.callback.ConfirmationCallback -> org.apache.harmony.javax.security.auth.callback.ConfirmationCallback:
    long serialVersionUID -> serialVersionUID
    int YES -> YES
    int NO -> NO
    int CANCEL -> CANCEL
    int OK -> OK
    int YES_NO_OPTION -> YES_NO_OPTION
    int YES_NO_CANCEL_OPTION -> YES_NO_CANCEL_OPTION
    int OK_CANCEL_OPTION -> OK_CANCEL_OPTION
    int UNSPECIFIED_OPTION -> UNSPECIFIED_OPTION
    int INFORMATION -> INFORMATION
    int WARNING -> WARNING
    int ERROR -> ERROR
    java.lang.String prompt -> prompt
    int messageType -> messageType
    int optionType -> optionType
    int defaultOption -> defaultOption
    java.lang.String[] options -> options
    int selection -> selection
    java.lang.String getPrompt() -> getPrompt
    int getMessageType() -> getMessageType
    int getDefaultOption() -> getDefaultOption
    java.lang.String[] getOptions() -> getOptions
    int getOptionType() -> getOptionType
    int getSelectedIndex() -> getSelectedIndex
    void setSelectedIndex(int) -> setSelectedIndex
org.apache.harmony.javax.security.auth.callback.LanguageCallback -> org.apache.harmony.javax.security.auth.callback.LanguageCallback:
    long serialVersionUID -> serialVersionUID
    java.util.Locale locale -> locale
    java.util.Locale getLocale() -> getLocale
    void setLocale(java.util.Locale) -> setLocale
org.apache.harmony.javax.security.auth.callback.NameCallback -> org.apache.harmony.javax.security.auth.callback.NameCallback:
    long serialVersionUID -> serialVersionUID
    java.lang.String prompt -> prompt
    java.lang.String defaultName -> defaultName
    java.lang.String inputName -> inputName
    void setPrompt(java.lang.String) -> setPrompt
    void setDefaultName(java.lang.String) -> setDefaultName
    java.lang.String getPrompt() -> getPrompt
    java.lang.String getDefaultName() -> getDefaultName
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
org.apache.harmony.javax.security.auth.callback.PasswordCallback -> org.apache.harmony.javax.security.auth.callback.PasswordCallback:
    long serialVersionUID -> serialVersionUID
    java.lang.String prompt -> prompt
    boolean echoOn -> echoOn
    char[] inputPassword -> inputPassword
    void setPrompt(java.lang.String) -> setPrompt
    java.lang.String getPrompt() -> getPrompt
    boolean isEchoOn() -> isEchoOn
    void setPassword(char[]) -> setPassword
    char[] getPassword() -> getPassword
    void clearPassword() -> clearPassword
org.apache.harmony.javax.security.auth.callback.TextInputCallback -> org.apache.harmony.javax.security.auth.callback.TextInputCallback:
    long serialVersionUID -> serialVersionUID
    java.lang.String defaultText -> defaultText
    java.lang.String prompt -> prompt
    java.lang.String inputText -> inputText
    void setPrompt(java.lang.String) -> setPrompt
    void setDefaultText(java.lang.String) -> setDefaultText
    java.lang.String getDefaultText() -> getDefaultText
    java.lang.String getPrompt() -> getPrompt
    java.lang.String getText() -> getText
    void setText(java.lang.String) -> setText
org.apache.harmony.javax.security.auth.callback.TextOutputCallback -> org.apache.harmony.javax.security.auth.callback.TextOutputCallback:
    long serialVersionUID -> serialVersionUID
    int INFORMATION -> INFORMATION
    int WARNING -> WARNING
    int ERROR -> ERROR
    java.lang.String message -> message
    int messageType -> messageType
    java.lang.String getMessage() -> getMessage
    int getMessageType() -> getMessageType
org.apache.harmony.javax.security.auth.callback.UnsupportedCallbackException -> org.apache.harmony.javax.security.auth.callback.UnsupportedCallbackException:
    long serialVersionUID -> serialVersionUID
    org.apache.harmony.javax.security.auth.callback.Callback callback -> callback
    org.apache.harmony.javax.security.auth.callback.Callback getCallback() -> getCallback
org.apache.harmony.javax.security.auth.login.AccountException -> org.apache.harmony.javax.security.auth.login.AccountException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.login.AccountExpiredException -> org.apache.harmony.javax.security.auth.login.AccountExpiredException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.login.AccountLockedException -> org.apache.harmony.javax.security.auth.login.AccountLockedException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.login.AccountNotFoundException -> org.apache.harmony.javax.security.auth.login.AccountNotFoundException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.login.AppConfigurationEntry -> org.apache.harmony.javax.security.auth.login.AppConfigurationEntry:
    java.util.Map options -> options
    org.apache.harmony.javax.security.auth.login.AppConfigurationEntry$LoginModuleControlFlag controlFlag -> controlFlag
    java.lang.String loginModuleName -> loginModuleName
    java.lang.String getLoginModuleName() -> getLoginModuleName
    org.apache.harmony.javax.security.auth.login.AppConfigurationEntry$LoginModuleControlFlag getControlFlag() -> getControlFlag
    java.util.Map getOptions() -> getOptions
org.apache.harmony.javax.security.auth.login.AppConfigurationEntry$LoginModuleControlFlag -> org.apache.harmony.javax.security.auth.login.AppConfigurationEntry$LoginModuleControlFlag:
    java.lang.String flag -> flag
    org.apache.harmony.javax.security.auth.login.AppConfigurationEntry$LoginModuleControlFlag REQUIRED -> REQUIRED
    org.apache.harmony.javax.security.auth.login.AppConfigurationEntry$LoginModuleControlFlag REQUISITE -> REQUISITE
    org.apache.harmony.javax.security.auth.login.AppConfigurationEntry$LoginModuleControlFlag OPTIONAL -> OPTIONAL
    org.apache.harmony.javax.security.auth.login.AppConfigurationEntry$LoginModuleControlFlag SUFFICIENT -> SUFFICIENT
    java.lang.String toString() -> toString
org.apache.harmony.javax.security.auth.login.Configuration -> org.apache.harmony.javax.security.auth.login.Configuration:
    org.apache.harmony.javax.security.auth.login.Configuration configuration -> configuration
    org.apache.harmony.javax.security.auth.AuthPermission GET_LOGIN_CONFIGURATION -> GET_LOGIN_CONFIGURATION
    org.apache.harmony.javax.security.auth.AuthPermission SET_LOGIN_CONFIGURATION -> SET_LOGIN_CONFIGURATION
    java.lang.String LOGIN_CONFIGURATION_PROVIDER -> LOGIN_CONFIGURATION_PROVIDER
    org.apache.harmony.javax.security.auth.login.Configuration getConfiguration() -> getConfiguration
    org.apache.harmony.javax.security.auth.login.Configuration getDefaultProvider() -> getDefaultProvider
    org.apache.harmony.javax.security.auth.login.Configuration getAccessibleConfiguration() -> getAccessibleConfiguration
    void setConfiguration(org.apache.harmony.javax.security.auth.login.Configuration) -> setConfiguration
    org.apache.harmony.javax.security.auth.login.AppConfigurationEntry[] getAppConfigurationEntry(java.lang.String) -> getAppConfigurationEntry
    void refresh() -> refresh
org.apache.harmony.javax.security.auth.login.Configuration$1 -> org.apache.harmony.javax.security.auth.login.Configuration$1:
    void refresh() -> refresh
    org.apache.harmony.javax.security.auth.login.AppConfigurationEntry[] getAppConfigurationEntry(java.lang.String) -> getAppConfigurationEntry
org.apache.harmony.javax.security.auth.login.CredentialException -> org.apache.harmony.javax.security.auth.login.CredentialException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.login.CredentialExpiredException -> org.apache.harmony.javax.security.auth.login.CredentialExpiredException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.login.CredentialNotFoundException -> org.apache.harmony.javax.security.auth.login.CredentialNotFoundException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.login.FailedLoginException -> org.apache.harmony.javax.security.auth.login.FailedLoginException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.login.LoginContext -> org.apache.harmony.javax.security.auth.login.LoginContext:
    java.lang.String DEFAULT_CALLBACK_HANDLER_PROPERTY -> DEFAULT_CALLBACK_HANDLER_PROPERTY
    int OPTIONAL -> OPTIONAL
    int REQUIRED -> REQUIRED
    int REQUISITE -> REQUISITE
    int SUFFICIENT -> SUFFICIENT
    org.apache.harmony.javax.security.auth.Subject subject -> subject
    boolean userProvidedSubject -> userProvidedSubject
    boolean userProvidedConfig -> userProvidedConfig
    java.security.AccessControlContext userContext -> userContext
    org.apache.harmony.javax.security.auth.callback.CallbackHandler callbackHandler -> callbackHandler
    org.apache.harmony.javax.security.auth.login.LoginContext$Module[] modules -> modules
    java.util.Map sharedState -> sharedState
    java.lang.ClassLoader contextClassLoader -> contextClassLoader
    boolean loggedIn -> loggedIn
    void init(java.lang.String,org.apache.harmony.javax.security.auth.Subject,org.apache.harmony.javax.security.auth.callback.CallbackHandler,org.apache.harmony.javax.security.auth.login.Configuration) -> init
    org.apache.harmony.javax.security.auth.Subject getSubject() -> getSubject
    void login() -> login
    void loginImpl() -> loginImpl
    void logout() -> logout
    void logoutImpl() -> logoutImpl
    java.lang.ClassLoader access$002(org.apache.harmony.javax.security.auth.login.LoginContext,java.lang.ClassLoader) -> access$002
    java.lang.ClassLoader access$000(org.apache.harmony.javax.security.auth.login.LoginContext) -> access$000
    org.apache.harmony.javax.security.auth.callback.CallbackHandler access$102(org.apache.harmony.javax.security.auth.login.LoginContext,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> access$102
    void access$200(org.apache.harmony.javax.security.auth.login.LoginContext) -> access$200
    void access$300(org.apache.harmony.javax.security.auth.login.LoginContext) -> access$300
    java.security.AccessControlContext access$500(org.apache.harmony.javax.security.auth.login.LoginContext) -> access$500
org.apache.harmony.javax.security.auth.login.LoginContext$1 -> org.apache.harmony.javax.security.auth.login.LoginContext$1:
    org.apache.harmony.javax.security.auth.callback.CallbackHandler val$cbHandler -> val$cbHandler
    org.apache.harmony.javax.security.auth.login.LoginContext this$0 -> this$0
    java.lang.Void run() -> run
    java.lang.Object run() -> run
org.apache.harmony.javax.security.auth.login.LoginContext$2 -> org.apache.harmony.javax.security.auth.login.LoginContext$2:
    org.apache.harmony.javax.security.auth.login.LoginContext this$0 -> this$0
    java.lang.Void run() -> run
    java.lang.Object run() -> run
org.apache.harmony.javax.security.auth.login.LoginContext$3 -> org.apache.harmony.javax.security.auth.login.LoginContext$3:
    org.apache.harmony.javax.security.auth.login.LoginContext this$0 -> this$0
    java.lang.Void run() -> run
    java.lang.Object run() -> run
org.apache.harmony.javax.security.auth.login.LoginContext$ContextedCallbackHandler -> org.apache.harmony.javax.security.auth.login.LoginContext$ContextedCallbackHandler:
    org.apache.harmony.javax.security.auth.callback.CallbackHandler hiddenHandlerRef -> hiddenHandlerRef
    org.apache.harmony.javax.security.auth.login.LoginContext this$0 -> this$0
    void handle(org.apache.harmony.javax.security.auth.callback.Callback[]) -> handle
    org.apache.harmony.javax.security.auth.callback.CallbackHandler access$400(org.apache.harmony.javax.security.auth.login.LoginContext$ContextedCallbackHandler) -> access$400
org.apache.harmony.javax.security.auth.login.LoginContext$ContextedCallbackHandler$1 -> org.apache.harmony.javax.security.auth.login.LoginContext$ContextedCallbackHandler$1:
    org.apache.harmony.javax.security.auth.callback.Callback[] val$callbacks -> val$callbacks
    org.apache.harmony.javax.security.auth.login.LoginContext$ContextedCallbackHandler this$1 -> this$1
    java.lang.Void run() -> run
    java.lang.Object run() -> run
org.apache.harmony.javax.security.auth.login.LoginContext$Module -> org.apache.harmony.javax.security.auth.login.LoginContext$Module:
    org.apache.harmony.javax.security.auth.login.AppConfigurationEntry entry -> entry
    int flag -> flag
    org.apache.harmony.javax.security.auth.spi.LoginModule module -> module
    java.lang.Class klass -> klass
    org.apache.harmony.javax.security.auth.login.LoginContext this$0 -> this$0
    int getFlag() -> getFlag
    void create(org.apache.harmony.javax.security.auth.Subject,org.apache.harmony.javax.security.auth.callback.CallbackHandler,java.util.Map) -> create
org.apache.harmony.javax.security.auth.login.LoginException -> org.apache.harmony.javax.security.auth.login.LoginException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.spi.LoginModule -> org.apache.harmony.javax.security.auth.spi.LoginModule:
    void initialize(org.apache.harmony.javax.security.auth.Subject,org.apache.harmony.javax.security.auth.callback.CallbackHandler,java.util.Map,java.util.Map) -> initialize
    boolean login() -> login
    boolean commit() -> commit
    boolean abort() -> abort
    boolean logout() -> logout
org.apache.harmony.javax.security.sasl.AuthenticationException -> org.apache.harmony.javax.security.sasl.AuthenticationException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.sasl.AuthorizeCallback -> org.apache.harmony.javax.security.sasl.AuthorizeCallback:
    long serialVersionUID -> serialVersionUID
    java.lang.String authenticationID -> authenticationID
    java.lang.String authorizationID -> authorizationID
    java.lang.String authorizedID -> authorizedID
    boolean authorized -> authorized
    java.lang.String getAuthenticationID() -> getAuthenticationID
    java.lang.String getAuthorizationID() -> getAuthorizationID
    java.lang.String getAuthorizedID() -> getAuthorizedID
    boolean isAuthorized() -> isAuthorized
    void setAuthorized(boolean) -> setAuthorized
    void setAuthorizedID(java.lang.String) -> setAuthorizedID
org.apache.harmony.javax.security.sasl.RealmCallback -> org.apache.harmony.javax.security.sasl.RealmCallback:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.sasl.RealmChoiceCallback -> org.apache.harmony.javax.security.sasl.RealmChoiceCallback:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.sasl.Sasl -> org.apache.harmony.javax.security.sasl.Sasl:
    java.lang.String CLIENTFACTORYSRV -> CLIENTFACTORYSRV
    java.lang.String SERVERFACTORYSRV -> SERVERFACTORYSRV
    java.lang.String POLICY_NOPLAINTEXT -> POLICY_NOPLAINTEXT
    java.lang.String POLICY_NOACTIVE -> POLICY_NOACTIVE
    java.lang.String POLICY_NODICTIONARY -> POLICY_NODICTIONARY
    java.lang.String POLICY_NOANONYMOUS -> POLICY_NOANONYMOUS
    java.lang.String POLICY_FORWARD_SECRECY -> POLICY_FORWARD_SECRECY
    java.lang.String POLICY_PASS_CREDENTIALS -> POLICY_PASS_CREDENTIALS
    java.lang.String MAX_BUFFER -> MAX_BUFFER
    java.lang.String RAW_SEND_SIZE -> RAW_SEND_SIZE
    java.lang.String REUSE -> REUSE
    java.lang.String QOP -> QOP
    java.lang.String STRENGTH -> STRENGTH
    java.lang.String SERVER_AUTH -> SERVER_AUTH
    java.lang.Object newInstance(java.lang.String,java.security.Provider) -> newInstance
    java.util.Collection findFactories(java.lang.String) -> findFactories
    java.util.Enumeration getSaslClientFactories() -> getSaslClientFactories
    java.util.Enumeration getSaslServerFactories() -> getSaslServerFactories
    org.apache.harmony.javax.security.sasl.SaslServer createSaslServer(java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> createSaslServer
    org.apache.harmony.javax.security.sasl.SaslClient createSaslClient(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> createSaslClient
org.apache.harmony.javax.security.sasl.SaslClient -> org.apache.harmony.javax.security.sasl.SaslClient:
    void dispose() -> dispose
    byte[] evaluateChallenge(byte[]) -> evaluateChallenge
    java.lang.String getMechanismName() -> getMechanismName
    java.lang.Object getNegotiatedProperty(java.lang.String) -> getNegotiatedProperty
    boolean hasInitialResponse() -> hasInitialResponse
    boolean isComplete() -> isComplete
    byte[] unwrap(byte[],int,int) -> unwrap
    byte[] wrap(byte[],int,int) -> wrap
org.apache.harmony.javax.security.sasl.SaslClientFactory -> org.apache.harmony.javax.security.sasl.SaslClientFactory:
    org.apache.harmony.javax.security.sasl.SaslClient createSaslClient(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> createSaslClient
    java.lang.String[] getMechanismNames(java.util.Map) -> getMechanismNames
org.apache.harmony.javax.security.sasl.SaslException -> org.apache.harmony.javax.security.sasl.SaslException:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable _exception -> _exception
    java.lang.Throwable getCause() -> getCause
    java.lang.Throwable initCause(java.lang.Throwable) -> initCause
    java.lang.String toString() -> toString
org.apache.harmony.javax.security.sasl.SaslServer -> org.apache.harmony.javax.security.sasl.SaslServer:
    void dispose() -> dispose
    byte[] evaluateResponse(byte[]) -> evaluateResponse
    java.lang.String getAuthorizationID() -> getAuthorizationID
    java.lang.String getMechanismName() -> getMechanismName
    java.lang.Object getNegotiatedProperty(java.lang.String) -> getNegotiatedProperty
    boolean isComplete() -> isComplete
    byte[] unwrap(byte[],int,int) -> unwrap
    byte[] wrap(byte[],int,int) -> wrap
org.apache.harmony.javax.security.sasl.SaslServerFactory -> org.apache.harmony.javax.security.sasl.SaslServerFactory:
    org.apache.harmony.javax.security.sasl.SaslServer createSaslServer(java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> createSaslServer
    java.lang.String[] getMechanismNames(java.util.Map) -> getMechanismNames
org.apache.http.entity.mime.FormBodyPart -> org.apache.a.a.a.a:
    java.lang.String name -> a
    org.apache.http.entity.mime.Header header -> b
    org.apache.http.entity.mime.content.ContentBody body -> c
    org.apache.http.entity.mime.content.ContentBody getBody() -> a
    org.apache.http.entity.mime.Header getHeader() -> b
    void addField(java.lang.String,java.lang.String) -> a
org.apache.http.entity.mime.Header -> org.apache.a.a.a.b:
    java.util.List fields -> a
    java.util.Map fieldMap -> b
    void addField(org.apache.http.entity.mime.MinimalField) -> a
    org.apache.http.entity.mime.MinimalField getField(java.lang.String) -> a
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
org.apache.http.entity.mime.HttpMultipart -> org.apache.a.a.a.c:
    org.apache.http.util.ByteArrayBuffer FIELD_SEP -> a
    org.apache.http.util.ByteArrayBuffer CR_LF -> b
    org.apache.http.util.ByteArrayBuffer TWO_DASHES -> c
    java.lang.String subType -> d
    java.nio.charset.Charset charset -> e
    java.lang.String boundary -> f
    java.util.List parts -> g
    org.apache.http.entity.mime.HttpMultipartMode mode -> h
    org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String) -> a
    void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream) -> a
    void writeBytes(java.lang.String,java.nio.charset.Charset,java.io.OutputStream) -> a
    void writeBytes(java.lang.String,java.io.OutputStream) -> a
    void writeField(org.apache.http.entity.mime.MinimalField,java.nio.charset.Charset,java.io.OutputStream) -> a
    java.util.List getBodyParts() -> a
    void addBodyPart(org.apache.http.entity.mime.FormBodyPart) -> a
    void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean) -> a
    void writeTo(java.io.OutputStream) -> a
    long getTotalLength() -> b
org.apache.http.entity.mime.HttpMultipart$1 -> org.apache.a.a.a.d:
    int[] $SwitchMap$org$apache$http$entity$mime$HttpMultipartMode -> a
org.apache.http.entity.mime.HttpMultipartMode -> org.apache.a.a.a.e:
    org.apache.http.entity.mime.HttpMultipartMode STRICT -> a
    org.apache.http.entity.mime.HttpMultipartMode BROWSER_COMPATIBLE -> b
    org.apache.http.entity.mime.HttpMultipartMode[] $VALUES -> c
    org.apache.http.entity.mime.HttpMultipartMode[] values() -> values
    org.apache.http.entity.mime.HttpMultipartMode valueOf(java.lang.String) -> valueOf
org.apache.http.entity.mime.MIME -> org.apache.a.a.a.f:
    java.nio.charset.Charset DEFAULT_CHARSET -> a
org.apache.http.entity.mime.MinimalField -> org.apache.a.a.a.g:
    java.lang.String name -> a
    java.lang.String value -> b
    java.lang.String getName() -> a
    java.lang.String getBody() -> b
    java.lang.String toString() -> toString
org.apache.http.entity.mime.MultipartEntity -> org.apache.a.a.a.h:
    char[] MULTIPART_CHARS -> a
    org.apache.http.entity.mime.HttpMultipart multipart -> b
    org.apache.http.Header contentType -> c
    long length -> d
    boolean dirty -> e
    java.lang.String generateBoundary() -> a
    void addPart(org.apache.http.entity.mime.FormBodyPart) -> a
    boolean isRepeatable() -> isRepeatable
    boolean isChunked() -> isChunked
    boolean isStreaming() -> isStreaming
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentType() -> getContentType
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    void consumeContent() -> consumeContent
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
org.apache.http.entity.mime.content.AbstractContentBody -> org.apache.a.a.a.a.a:
    java.lang.String mimeType -> a
    java.lang.String mediaType -> b
    java.lang.String subType -> c
    java.lang.String getMimeType() -> a
org.apache.http.entity.mime.content.ContentBody -> org.apache.a.a.a.a.b:
    java.lang.String getFilename() -> b
    void writeTo(java.io.OutputStream) -> a
org.apache.http.entity.mime.content.ContentDescriptor -> org.apache.a.a.a.a.c:
    java.lang.String getMimeType() -> a
    java.lang.String getCharset() -> c
    java.lang.String getTransferEncoding() -> d
    long getContentLength() -> e
org.apache.http.entity.mime.content.FileBody -> org.apache.a.a.a.a.d:
    java.io.File file -> a
    java.lang.String filename -> b
    java.lang.String charset -> c
    void writeTo(java.io.OutputStream) -> a
    java.lang.String getTransferEncoding() -> d
    java.lang.String getCharset() -> c
    long getContentLength() -> e
    java.lang.String getFilename() -> b
org.apache.http.entity.mime.content.StringBody -> org.apache.a.a.a.a.e:
    byte[] content -> a
    java.nio.charset.Charset charset -> b
    void writeTo(java.io.OutputStream) -> a
    java.lang.String getTransferEncoding() -> d
    java.lang.String getCharset() -> c
    long getContentLength() -> e
    java.lang.String getFilename() -> b
org.apache.qpid.management.common.sasl.CRAMMD5HashedSaslClientFactory -> org.apache.qpid.management.common.sasl.CRAMMD5HashedSaslClientFactory:
    java.lang.String MECHANISM -> MECHANISM
    org.apache.harmony.javax.security.sasl.SaslClient createSaslClient(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> createSaslClient
    java.lang.String[] getMechanismNames(java.util.Map) -> getMechanismNames
org.apache.qpid.management.common.sasl.ClientSaslFactory -> org.apache.qpid.management.common.sasl.ClientSaslFactory:
    org.apache.harmony.javax.security.sasl.SaslClient createSaslClient(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> createSaslClient
    java.lang.String[] getMechanismNames(java.util.Map) -> getMechanismNames
org.apache.qpid.management.common.sasl.Constants -> org.apache.qpid.management.common.sasl.Constants:
    java.lang.String MECH_CRAMMD5 -> MECH_CRAMMD5
    java.lang.String MECH_PLAIN -> MECH_PLAIN
    java.lang.String SASL_CRAMMD5 -> SASL_CRAMMD5
    java.lang.String SASL_PLAIN -> SASL_PLAIN
org.apache.qpid.management.common.sasl.JCAProvider -> org.apache.qpid.management.common.sasl.JCAProvider:
    long serialVersionUID -> serialVersionUID
    void register(java.util.Map) -> register
org.apache.qpid.management.common.sasl.PlainSaslClient -> org.apache.qpid.management.common.sasl.PlainSaslClient:
    boolean completed -> completed
    org.apache.harmony.javax.security.auth.callback.CallbackHandler cbh -> cbh
    java.lang.String authorizationID -> authorizationID
    java.lang.String authenticationID -> authenticationID
    byte[] password -> password
    byte SEPARATOR -> SEPARATOR
    byte[] evaluateChallenge(byte[]) -> evaluateChallenge
    java.lang.String getMechanismName() -> getMechanismName
    boolean hasInitialResponse() -> hasInitialResponse
    boolean isComplete() -> isComplete
    byte[] unwrap(byte[],int,int) -> unwrap
    byte[] wrap(byte[],int,int) -> wrap
    java.lang.Object getNegotiatedProperty(java.lang.String) -> getNegotiatedProperty
    void clearPassword() -> clearPassword
    void dispose() -> dispose
    void finalize() -> finalize
    java.lang.Object[] getUserInfo() -> getUserInfo
org.apache.qpid.management.common.sasl.SaslProvider -> org.apache.qpid.management.common.sasl.SaslProvider:
    long serialVersionUID -> serialVersionUID
org.apache.qpid.management.common.sasl.UserPasswordCallbackHandler -> org.apache.qpid.management.common.sasl.UserPasswordCallbackHandler:
    java.lang.String user -> user
    char[] pwchars -> pwchars
    void handle(org.apache.harmony.javax.security.auth.callback.Callback[]) -> handle
    void clearPassword() -> clearPassword
    void finalize() -> finalize
org.apache.qpid.management.common.sasl.UsernameHashedPasswordCallbackHandler -> org.apache.qpid.management.common.sasl.UsernameHashedPasswordCallbackHandler:
    java.lang.String user -> user
    char[] pwchars -> pwchars
    void handle(org.apache.harmony.javax.security.auth.callback.Callback[]) -> handle
    void clearPassword() -> clearPassword
    void finalize() -> finalize
    char[] getHash(java.lang.String) -> getHash
org.jivesoftware.smack.AbstractConnectionListener -> org.jivesoftware.smack.AbstractConnectionListener:
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectingIn(int) -> reconnectingIn
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void reconnectionSuccessful() -> reconnectionSuccessful
org.jivesoftware.smack.AccountManager -> org.jivesoftware.smack.AccountManager:
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smack.packet.Registration info -> info
    boolean accountCreationSupported -> accountCreationSupported
    void setSupportsAccountCreation(boolean) -> setSupportsAccountCreation
    boolean supportsAccountCreation() -> supportsAccountCreation
    java.util.Collection getAccountAttributes() -> getAccountAttributes
    java.lang.String getAccountAttribute(java.lang.String) -> getAccountAttribute
    java.lang.String getAccountInstructions() -> getAccountInstructions
    void createAccount(java.lang.String,java.lang.String) -> createAccount
    void createAccount(java.lang.String,java.lang.String,java.util.Map) -> createAccount
    void changePassword(java.lang.String) -> changePassword
    void deleteAccount() -> deleteAccount
    void getRegistrationInfo() -> getRegistrationInfo
org.jivesoftware.smack.BOSHConfiguration -> org.jivesoftware.smack.BOSHConfiguration:
    boolean ssl -> ssl
    java.lang.String file -> file
    boolean isProxyEnabled() -> isProxyEnabled
    org.jivesoftware.smack.proxy.ProxyInfo getProxyInfo() -> getProxyInfo
    java.lang.String getProxyAddress() -> getProxyAddress
    int getProxyPort() -> getProxyPort
    boolean isUsingSSL() -> isUsingSSL
    java.net.URI getURI() -> getURI
org.jivesoftware.smack.BOSHConnection -> org.jivesoftware.smack.BOSHConnection:
    java.lang.String XMPP_BOSH_NS -> XMPP_BOSH_NS
    java.lang.String BOSH_URI -> BOSH_URI
    com.kenai.jbosh.BOSHClient client -> client
    org.jivesoftware.smack.BOSHConfiguration config -> config
    boolean connected -> connected
    boolean authenticated -> authenticated
    boolean anonymous -> anonymous
    boolean isFirstInitialization -> isFirstInitialization
    boolean wasAuthenticated -> wasAuthenticated
    boolean done -> done
    java.util.concurrent.ExecutorService listenerExecutor -> listenerExecutor
    java.io.PipedWriter readerPipe -> readerPipe
    java.lang.Thread readerConsumer -> readerConsumer
    java.lang.String authID -> authID
    java.lang.String sessionID -> sessionID
    java.lang.String user -> user
    org.jivesoftware.smack.Roster roster -> roster
    void connect() -> connect
    java.lang.String getConnectionID() -> getConnectionID
    org.jivesoftware.smack.Roster getRoster() -> getRoster
    java.lang.String getUser() -> getUser
    boolean isAnonymous() -> isAnonymous
    boolean isAuthenticated() -> isAuthenticated
    boolean isConnected() -> isConnected
    boolean isSecureConnection() -> isSecureConnection
    boolean isUsingCompression() -> isUsingCompression
    void login(java.lang.String,java.lang.String,java.lang.String) -> login
    void loginAnonymously() -> loginAnonymously
    void sendPacket(org.jivesoftware.smack.packet.Packet) -> sendPacket
    void disconnect(org.jivesoftware.smack.packet.Presence) -> disconnect
    void shutdown(org.jivesoftware.smack.packet.Presence) -> shutdown
    void setWasAuthenticated(boolean) -> setWasAuthenticated
    void send(com.kenai.jbosh.ComposableBody) -> send
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    void initDebugger() -> initDebugger
    void notifyConnectionError(java.lang.Exception) -> notifyConnectionError
    void setRosterStorage(org.jivesoftware.smack.RosterStorage) -> setRosterStorage
    java.io.PipedWriter access$000(org.jivesoftware.smack.BOSHConnection) -> access$000
    java.lang.Thread access$100(org.jivesoftware.smack.BOSHConnection) -> access$100
    boolean access$200(org.jivesoftware.smack.BOSHConnection) -> access$200
    boolean access$302(org.jivesoftware.smack.BOSHConnection,boolean) -> access$302
    boolean access$400(org.jivesoftware.smack.BOSHConnection) -> access$400
    boolean access$402(org.jivesoftware.smack.BOSHConnection,boolean) -> access$402
    boolean access$500(org.jivesoftware.smack.BOSHConnection) -> access$500
    org.jivesoftware.smack.BOSHConfiguration access$600(org.jivesoftware.smack.BOSHConnection) -> access$600
org.jivesoftware.smack.BOSHConnection$1 -> org.jivesoftware.smack.BOSHConnection$1:
    org.jivesoftware.smack.BOSHConnection this$0 -> this$0
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.jivesoftware.smack.BOSHConnection$2 -> org.jivesoftware.smack.BOSHConnection$2:
    org.jivesoftware.smack.BOSHConnection this$0 -> this$0
    void write(char[],int,int) -> write
    void close() -> close
    void flush() -> flush
org.jivesoftware.smack.BOSHConnection$3 -> org.jivesoftware.smack.BOSHConnection$3:
    org.jivesoftware.smack.BOSHConnection this$0 -> this$0
    void responseReceived(com.kenai.jbosh.BOSHMessageEvent) -> responseReceived
org.jivesoftware.smack.BOSHConnection$4 -> org.jivesoftware.smack.BOSHConnection$4:
    org.jivesoftware.smack.BOSHConnection this$0 -> this$0
    void requestSent(com.kenai.jbosh.BOSHMessageEvent) -> requestSent
org.jivesoftware.smack.BOSHConnection$5 -> org.jivesoftware.smack.BOSHConnection$5:
    java.lang.Thread thread -> thread
    int bufferLength -> bufferLength
    org.jivesoftware.smack.BOSHConnection this$0 -> this$0
    void run() -> run
org.jivesoftware.smack.BOSHConnection$BOSHConnectionListener -> org.jivesoftware.smack.BOSHConnection$BOSHConnectionListener:
    org.jivesoftware.smack.BOSHConnection connection -> connection
    org.jivesoftware.smack.BOSHConnection this$0 -> this$0
    void connectionEvent(com.kenai.jbosh.BOSHClientConnEvent) -> connectionEvent
org.jivesoftware.smack.BOSHConnection$ListenerNotification -> org.jivesoftware.smack.BOSHConnection$ListenerNotification:
    org.jivesoftware.smack.packet.Packet packet -> packet
    org.jivesoftware.smack.BOSHConnection this$0 -> this$0
    void run() -> run
org.jivesoftware.smack.BOSHPacketReader -> org.jivesoftware.smack.BOSHPacketReader:
    org.jivesoftware.smack.BOSHConnection connection -> connection
    void responseReceived(com.kenai.jbosh.BOSHMessageEvent) -> responseReceived
    void parseFeatures(org.xmlpull.v1.XmlPullParser) -> parseFeatures
org.jivesoftware.smack.Chat -> org.jivesoftware.smack.Chat:
    org.jivesoftware.smack.ChatManager chatManager -> chatManager
    java.lang.String threadID -> threadID
    java.lang.String participant -> participant
    java.util.Set listeners -> listeners
    java.lang.String getThreadID() -> getThreadID
    java.lang.String getParticipant() -> getParticipant
    void sendMessage(java.lang.String) -> sendMessage
    void sendMessage(org.jivesoftware.smack.packet.Message) -> sendMessage
    void addMessageListener(org.jivesoftware.smack.MessageListener) -> addMessageListener
    void removeMessageListener(org.jivesoftware.smack.MessageListener) -> removeMessageListener
    java.util.Collection getListeners() -> getListeners
    org.jivesoftware.smack.PacketCollector createCollector() -> createCollector
    void deliver(org.jivesoftware.smack.packet.Message) -> deliver
    boolean equals(java.lang.Object) -> equals
org.jivesoftware.smack.ChatManager -> org.jivesoftware.smack.ChatManager:
    java.lang.String prefix -> prefix
    long id -> id
    java.util.Map threadChats -> threadChats
    java.util.Map jidChats -> jidChats
    java.util.Set chatManagerListeners -> chatManagerListeners
    java.util.Map interceptors -> interceptors
    org.jivesoftware.smack.Connection connection -> connection
    java.lang.String nextID() -> nextID
    org.jivesoftware.smack.Chat createChat(java.lang.String,org.jivesoftware.smack.MessageListener) -> createChat
    org.jivesoftware.smack.Chat createChat(java.lang.String,java.lang.String,org.jivesoftware.smack.MessageListener) -> createChat
    org.jivesoftware.smack.Chat createChat(java.lang.String,java.lang.String,boolean) -> createChat
    org.jivesoftware.smack.Chat createChat(org.jivesoftware.smack.packet.Message) -> createChat
    org.jivesoftware.smack.Chat getUserChat(java.lang.String) -> getUserChat
    org.jivesoftware.smack.Chat getThreadChat(java.lang.String) -> getThreadChat
    void addChatListener(org.jivesoftware.smack.ChatManagerListener) -> addChatListener
    void removeChatListener(org.jivesoftware.smack.ChatManagerListener) -> removeChatListener
    java.util.Collection getChatListeners() -> getChatListeners
    void deliverMessage(org.jivesoftware.smack.Chat,org.jivesoftware.smack.packet.Message) -> deliverMessage
    void sendMessage(org.jivesoftware.smack.Chat,org.jivesoftware.smack.packet.Message) -> sendMessage
    org.jivesoftware.smack.PacketCollector createPacketCollector(org.jivesoftware.smack.Chat) -> createPacketCollector
    void addOutgoingMessageInterceptor(org.jivesoftware.smack.PacketInterceptor) -> addOutgoingMessageInterceptor
    void addOutgoingMessageInterceptor(org.jivesoftware.smack.PacketInterceptor,org.jivesoftware.smack.filter.PacketFilter) -> addOutgoingMessageInterceptor
    org.jivesoftware.smack.Chat access$000(org.jivesoftware.smack.ChatManager,java.lang.String) -> access$000
    org.jivesoftware.smack.Chat access$100(org.jivesoftware.smack.ChatManager,org.jivesoftware.smack.packet.Message) -> access$100
    void access$200(org.jivesoftware.smack.ChatManager,org.jivesoftware.smack.Chat,org.jivesoftware.smack.packet.Message) -> access$200
org.jivesoftware.smack.ChatManager$1 -> org.jivesoftware.smack.ChatManager$1:
    org.jivesoftware.smack.ChatManager this$0 -> this$0
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.ChatManager$2 -> org.jivesoftware.smack.ChatManager$2:
    org.jivesoftware.smack.ChatManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.ChatManagerListener -> org.jivesoftware.smack.ChatManagerListener:
    void chatCreated(org.jivesoftware.smack.Chat,boolean) -> chatCreated
org.jivesoftware.smack.Connection -> org.jivesoftware.smack.Connection:
    java.util.concurrent.atomic.AtomicInteger connectionCounter -> connectionCounter
    java.util.Set connectionEstablishedListeners -> connectionEstablishedListeners
    boolean DEBUG_ENABLED -> DEBUG_ENABLED
    java.util.Collection connectionListeners -> connectionListeners
    java.util.Collection collectors -> collectors
    java.util.Map recvListeners -> recvListeners
    java.util.Map sendListeners -> sendListeners
    java.util.Map interceptors -> interceptors
    org.jivesoftware.smack.AccountManager accountManager -> accountManager
    org.jivesoftware.smack.ChatManager chatManager -> chatManager
    org.jivesoftware.smack.debugger.SmackDebugger debugger -> debugger
    java.io.Reader reader -> reader
    java.io.Writer writer -> writer
    org.jivesoftware.smack.RosterStorage rosterStorage -> rosterStorage
    org.jivesoftware.smack.SASLAuthentication saslAuthentication -> saslAuthentication
    int connectionCounterValue -> connectionCounterValue
    org.jivesoftware.smack.ConnectionConfiguration config -> config
    org.jivesoftware.smack.ConnectionConfiguration getConfiguration() -> getConfiguration
    java.lang.String getServiceName() -> getServiceName
    java.lang.String getHost() -> getHost
    java.lang.String getCapsNode() -> getCapsNode
    int getPort() -> getPort
    java.lang.String getUser() -> getUser
    java.lang.String getConnectionID() -> getConnectionID
    boolean isConnected() -> isConnected
    boolean isAuthenticated() -> isAuthenticated
    boolean isAnonymous() -> isAnonymous
    boolean isSecureConnection() -> isSecureConnection
    boolean isReconnectionAllowed() -> isReconnectionAllowed
    boolean isUsingCompression() -> isUsingCompression
    void connect() -> connect
    void login(java.lang.String,java.lang.String) -> login
    void login(java.lang.String,java.lang.String,java.lang.String) -> login
    void loginAnonymously() -> loginAnonymously
    void sendPacket(org.jivesoftware.smack.packet.Packet) -> sendPacket
    org.jivesoftware.smack.AccountManager getAccountManager() -> getAccountManager
    org.jivesoftware.smack.ChatManager getChatManager() -> getChatManager
    org.jivesoftware.smack.Roster getRoster() -> getRoster
    void setRosterStorage(org.jivesoftware.smack.RosterStorage) -> setRosterStorage
    org.jivesoftware.smack.SASLAuthentication getSASLAuthentication() -> getSASLAuthentication
    void disconnect() -> disconnect
    void disconnect(org.jivesoftware.smack.packet.Presence) -> disconnect
    void addConnectionCreationListener(org.jivesoftware.smack.ConnectionCreationListener) -> addConnectionCreationListener
    void removeConnectionCreationListener(org.jivesoftware.smack.ConnectionCreationListener) -> removeConnectionCreationListener
    java.util.Collection getConnectionCreationListeners() -> getConnectionCreationListeners
    void addConnectionListener(org.jivesoftware.smack.ConnectionListener) -> addConnectionListener
    void removeConnectionListener(org.jivesoftware.smack.ConnectionListener) -> removeConnectionListener
    java.util.Collection getConnectionListeners() -> getConnectionListeners
    org.jivesoftware.smack.PacketCollector createPacketCollector(org.jivesoftware.smack.filter.PacketFilter) -> createPacketCollector
    void removePacketCollector(org.jivesoftware.smack.PacketCollector) -> removePacketCollector
    java.util.Collection getPacketCollectors() -> getPacketCollectors
    void addPacketListener(org.jivesoftware.smack.PacketListener,org.jivesoftware.smack.filter.PacketFilter) -> addPacketListener
    void removePacketListener(org.jivesoftware.smack.PacketListener) -> removePacketListener
    java.util.Map getPacketListeners() -> getPacketListeners
    void addPacketSendingListener(org.jivesoftware.smack.PacketListener,org.jivesoftware.smack.filter.PacketFilter) -> addPacketSendingListener
    void removePacketSendingListener(org.jivesoftware.smack.PacketListener) -> removePacketSendingListener
    java.util.Map getPacketSendingListeners() -> getPacketSendingListeners
    void firePacketSendingListeners(org.jivesoftware.smack.packet.Packet) -> firePacketSendingListeners
    void addPacketInterceptor(org.jivesoftware.smack.PacketInterceptor,org.jivesoftware.smack.filter.PacketFilter) -> addPacketInterceptor
    void removePacketInterceptor(org.jivesoftware.smack.PacketInterceptor) -> removePacketInterceptor
    boolean isSendPresence() -> isSendPresence
    java.util.Map getPacketInterceptors() -> getPacketInterceptors
    void firePacketInterceptors(org.jivesoftware.smack.packet.Packet) -> firePacketInterceptors
    void initDebugger() -> initDebugger
org.jivesoftware.smack.Connection$InterceptorWrapper -> org.jivesoftware.smack.Connection$InterceptorWrapper:
    org.jivesoftware.smack.PacketInterceptor packetInterceptor -> packetInterceptor
    org.jivesoftware.smack.filter.PacketFilter packetFilter -> packetFilter
    boolean equals(java.lang.Object) -> equals
    void notifyListener(org.jivesoftware.smack.packet.Packet) -> notifyListener
org.jivesoftware.smack.Connection$ListenerWrapper -> org.jivesoftware.smack.Connection$ListenerWrapper:
    org.jivesoftware.smack.PacketListener packetListener -> packetListener
    org.jivesoftware.smack.filter.PacketFilter packetFilter -> packetFilter
    void notifyListener(org.jivesoftware.smack.packet.Packet) -> notifyListener
org.jivesoftware.smack.ConnectionConfiguration -> org.jivesoftware.smack.ConnectionConfiguration:
    java.lang.String serviceName -> serviceName
    java.lang.String host -> host
    int port -> port
    java.lang.String truststorePath -> truststorePath
    java.lang.String truststoreType -> truststoreType
    java.lang.String truststorePassword -> truststorePassword
    java.lang.String keystorePath -> keystorePath
    java.lang.String keystoreType -> keystoreType
    java.lang.String pkcs11Library -> pkcs11Library
    boolean verifyChainEnabled -> verifyChainEnabled
    boolean verifyRootCAEnabled -> verifyRootCAEnabled
    boolean selfSignedCertificateEnabled -> selfSignedCertificateEnabled
    boolean expiredCertificatesCheckEnabled -> expiredCertificatesCheckEnabled
    boolean notMatchingDomainCheckEnabled -> notMatchingDomainCheckEnabled
    boolean isRosterVersioningAvailable -> isRosterVersioningAvailable
    java.lang.String capsNode -> capsNode
    javax.net.ssl.SSLContext customSSLContext -> customSSLContext
    boolean compressionEnabled -> compressionEnabled
    boolean saslAuthenticationEnabled -> saslAuthenticationEnabled
    org.apache.harmony.javax.security.auth.callback.CallbackHandler callbackHandler -> callbackHandler
    boolean debuggerEnabled -> debuggerEnabled
    boolean reconnectionAllowed -> reconnectionAllowed
    javax.net.SocketFactory socketFactory -> socketFactory
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String resource -> resource
    boolean sendPresence -> sendPresence
    boolean rosterLoadedAtLogin -> rosterLoadedAtLogin
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode securityMode -> securityMode
    org.jivesoftware.smack.proxy.ProxyInfo proxy -> proxy
    void init(java.lang.String,int,java.lang.String,org.jivesoftware.smack.proxy.ProxyInfo) -> init
    void setServiceName(java.lang.String) -> setServiceName
    java.lang.String getServiceName() -> getServiceName
    java.lang.String getHost() -> getHost
    int getPort() -> getPort
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode getSecurityMode() -> getSecurityMode
    void setSecurityMode(org.jivesoftware.smack.ConnectionConfiguration$SecurityMode) -> setSecurityMode
    java.lang.String getTruststorePath() -> getTruststorePath
    void setTruststorePath(java.lang.String) -> setTruststorePath
    java.lang.String getTruststoreType() -> getTruststoreType
    void setTruststoreType(java.lang.String) -> setTruststoreType
    java.lang.String getTruststorePassword() -> getTruststorePassword
    void setTruststorePassword(java.lang.String) -> setTruststorePassword
    java.lang.String getKeystorePath() -> getKeystorePath
    void setKeystorePath(java.lang.String) -> setKeystorePath
    java.lang.String getKeystoreType() -> getKeystoreType
    void setKeystoreType(java.lang.String) -> setKeystoreType
    java.lang.String getPKCS11Library() -> getPKCS11Library
    void setPKCS11Library(java.lang.String) -> setPKCS11Library
    boolean isVerifyChainEnabled() -> isVerifyChainEnabled
    void setVerifyChainEnabled(boolean) -> setVerifyChainEnabled
    boolean isVerifyRootCAEnabled() -> isVerifyRootCAEnabled
    void setVerifyRootCAEnabled(boolean) -> setVerifyRootCAEnabled
    boolean isSelfSignedCertificateEnabled() -> isSelfSignedCertificateEnabled
    void setSelfSignedCertificateEnabled(boolean) -> setSelfSignedCertificateEnabled
    boolean isExpiredCertificatesCheckEnabled() -> isExpiredCertificatesCheckEnabled
    void setExpiredCertificatesCheckEnabled(boolean) -> setExpiredCertificatesCheckEnabled
    boolean isNotMatchingDomainCheckEnabled() -> isNotMatchingDomainCheckEnabled
    void setNotMatchingDomainCheckEnabled(boolean) -> setNotMatchingDomainCheckEnabled
    javax.net.ssl.SSLContext getCustomSSLContext() -> getCustomSSLContext
    void setCustomSSLContext(javax.net.ssl.SSLContext) -> setCustomSSLContext
    boolean isCompressionEnabled() -> isCompressionEnabled
    void setCompressionEnabled(boolean) -> setCompressionEnabled
    boolean isSASLAuthenticationEnabled() -> isSASLAuthenticationEnabled
    void setSASLAuthenticationEnabled(boolean) -> setSASLAuthenticationEnabled
    boolean isDebuggerEnabled() -> isDebuggerEnabled
    void setDebuggerEnabled(boolean) -> setDebuggerEnabled
    void setReconnectionAllowed(boolean) -> setReconnectionAllowed
    boolean isReconnectionAllowed() -> isReconnectionAllowed
    void setSocketFactory(javax.net.SocketFactory) -> setSocketFactory
    void setSendPresence(boolean) -> setSendPresence
    boolean isRosterLoadedAtLogin() -> isRosterLoadedAtLogin
    void setRosterLoadedAtLogin(boolean) -> setRosterLoadedAtLogin
    org.apache.harmony.javax.security.auth.callback.CallbackHandler getCallbackHandler() -> getCallbackHandler
    void setCallbackHandler(org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> setCallbackHandler
    javax.net.SocketFactory getSocketFactory() -> getSocketFactory
    java.lang.String getUsername() -> getUsername
    java.lang.String getPassword() -> getPassword
    java.lang.String getResource() -> getResource
    boolean isRosterVersioningAvailable() -> isRosterVersioningAvailable
    void setRosterVersioningAvailable(boolean) -> setRosterVersioningAvailable
    void setCapsNode(java.lang.String) -> setCapsNode
    java.lang.String getCapsNode() -> getCapsNode
    boolean isSendPresence() -> isSendPresence
    void setLoginInfo(java.lang.String,java.lang.String,java.lang.String) -> setLoginInfo
org.jivesoftware.smack.ConnectionConfiguration$SecurityMode -> org.jivesoftware.smack.ConnectionConfiguration$SecurityMode:
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode required -> required
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode enabled -> enabled
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode disabled -> disabled
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode[] $VALUES -> $VALUES
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode[] values() -> values
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.ConnectionCreationListener -> org.jivesoftware.smack.ConnectionCreationListener:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smack.ConnectionListener -> org.jivesoftware.smack.ConnectionListener:
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectingIn(int) -> reconnectingIn
    void reconnectionSuccessful() -> reconnectionSuccessful
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
org.jivesoftware.smack.MessageListener -> org.jivesoftware.smack.MessageListener:
    void processMessage(org.jivesoftware.smack.Chat,org.jivesoftware.smack.packet.Message) -> processMessage
org.jivesoftware.smack.NonSASLAuthentication -> org.jivesoftware.smack.NonSASLAuthentication:
    org.jivesoftware.smack.Connection connection -> connection
    java.lang.String authenticate(java.lang.String,java.lang.String,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> authenticate
    java.lang.String authenticate(java.lang.String,java.lang.String,java.lang.String) -> authenticate
    java.lang.String authenticateAnonymously() -> authenticateAnonymously
org.jivesoftware.smack.OpenTrustManager -> org.jivesoftware.smack.OpenTrustManager:
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
org.jivesoftware.smack.PacketCollector -> org.jivesoftware.smack.PacketCollector:
    int MAX_PACKETS -> MAX_PACKETS
    org.jivesoftware.smack.filter.PacketFilter packetFilter -> packetFilter
    java.util.concurrent.LinkedBlockingQueue resultQueue -> resultQueue
    org.jivesoftware.smack.Connection conection -> conection
    boolean cancelled -> cancelled
    void cancel() -> cancel
    org.jivesoftware.smack.filter.PacketFilter getPacketFilter() -> getPacketFilter
    org.jivesoftware.smack.packet.Packet pollResult() -> pollResult
    org.jivesoftware.smack.packet.Packet nextResult() -> nextResult
    org.jivesoftware.smack.packet.Packet nextResult(long) -> nextResult
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.PacketInterceptor -> org.jivesoftware.smack.PacketInterceptor:
    void interceptPacket(org.jivesoftware.smack.packet.Packet) -> interceptPacket
org.jivesoftware.smack.PacketListener -> org.jivesoftware.smack.PacketListener:
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.PacketReader -> org.jivesoftware.smack.PacketReader:
    java.lang.Thread readerThread -> readerThread
    java.util.concurrent.ExecutorService listenerExecutor -> listenerExecutor
    org.jivesoftware.smack.XMPPConnection connection -> connection
    org.xmlpull.v1.XmlPullParser parser -> parser
    boolean done -> done
    java.lang.String connectionID -> connectionID
    java.util.concurrent.Semaphore connectionSemaphore -> connectionSemaphore
    void init() -> init
    void startup() -> startup
    void shutdown() -> shutdown
    void cleanup() -> cleanup
    void notifyConnectionError(java.lang.Exception) -> notifyConnectionError
    void notifyReconnection() -> notifyReconnection
    void resetParser() -> resetParser
    void parsePackets(java.lang.Thread) -> parsePackets
    void releaseConnectionIDLock() -> releaseConnectionIDLock
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    void parseFeatures(org.xmlpull.v1.XmlPullParser) -> parseFeatures
    void access$000(org.jivesoftware.smack.PacketReader,java.lang.Thread) -> access$000
    org.jivesoftware.smack.XMPPConnection access$100(org.jivesoftware.smack.PacketReader) -> access$100
org.jivesoftware.smack.PacketReader$1 -> org.jivesoftware.smack.PacketReader$1:
    org.jivesoftware.smack.PacketReader this$0 -> this$0
    void run() -> run
org.jivesoftware.smack.PacketReader$2 -> org.jivesoftware.smack.PacketReader$2:
    org.jivesoftware.smack.PacketReader this$0 -> this$0
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.jivesoftware.smack.PacketReader$ListenerNotification -> org.jivesoftware.smack.PacketReader$ListenerNotification:
    org.jivesoftware.smack.packet.Packet packet -> packet
    org.jivesoftware.smack.PacketReader this$0 -> this$0
    void run() -> run
org.jivesoftware.smack.PacketWriter -> org.jivesoftware.smack.PacketWriter:
    java.lang.Thread writerThread -> writerThread
    java.lang.Thread keepAliveThread -> keepAliveThread
    java.io.Writer writer -> writer
    org.jivesoftware.smack.XMPPConnection connection -> connection
    java.util.concurrent.BlockingQueue queue -> queue
    boolean done -> done
    long lastActive -> lastActive
    void init() -> init
    void sendPacket(org.jivesoftware.smack.packet.Packet) -> sendPacket
    void startup() -> startup
    void startKeepAliveProcess() -> startKeepAliveProcess
    void setWriter(java.io.Writer) -> setWriter
    void shutdown() -> shutdown
    void cleanup() -> cleanup
    org.jivesoftware.smack.packet.Packet nextPacket() -> nextPacket
    void writePackets(java.lang.Thread) -> writePackets
    void openStream() -> openStream
    void access$000(org.jivesoftware.smack.PacketWriter,java.lang.Thread) -> access$000
    boolean access$100(org.jivesoftware.smack.PacketWriter) -> access$100
    java.lang.Thread access$200(org.jivesoftware.smack.PacketWriter) -> access$200
    java.io.Writer access$300(org.jivesoftware.smack.PacketWriter) -> access$300
    long access$400(org.jivesoftware.smack.PacketWriter) -> access$400
org.jivesoftware.smack.PacketWriter$1 -> org.jivesoftware.smack.PacketWriter$1:
    org.jivesoftware.smack.PacketWriter this$0 -> this$0
    void run() -> run
org.jivesoftware.smack.PacketWriter$KeepAliveTask -> org.jivesoftware.smack.PacketWriter$KeepAliveTask:
    int delay -> delay
    java.lang.Thread thread -> thread
    org.jivesoftware.smack.PacketWriter this$0 -> this$0
    void setThread(java.lang.Thread) -> setThread
    void run() -> run
org.jivesoftware.smack.PrivacyList -> org.jivesoftware.smack.PrivacyList:
    boolean isActiveList -> isActiveList
    boolean isDefaultList -> isDefaultList
    java.lang.String listName -> listName
    java.util.List items -> items
    boolean isActiveList() -> isActiveList
    boolean isDefaultList() -> isDefaultList
    java.util.List getItems() -> getItems
    java.lang.String toString() -> toString
org.jivesoftware.smack.PrivacyListListener -> org.jivesoftware.smack.PrivacyListListener:
    void setPrivacyList(java.lang.String,java.util.List) -> setPrivacyList
    void updatedPrivacyList(java.lang.String) -> updatedPrivacyList
org.jivesoftware.smack.PrivacyListManager -> org.jivesoftware.smack.PrivacyListManager:
    java.util.Map instances -> instances
    org.jivesoftware.smack.Connection connection -> connection
    java.util.List listeners -> listeners
    org.jivesoftware.smack.filter.PacketFilter packetFilter -> packetFilter
    java.lang.String getUser() -> getUser
    void init() -> init
    org.jivesoftware.smack.PrivacyListManager getInstanceFor(org.jivesoftware.smack.Connection) -> getInstanceFor
    org.jivesoftware.smack.packet.Privacy getRequest(org.jivesoftware.smack.packet.Privacy) -> getRequest
    org.jivesoftware.smack.packet.Packet setRequest(org.jivesoftware.smack.packet.Privacy) -> setRequest
    org.jivesoftware.smack.packet.Privacy getPrivacyWithListNames() -> getPrivacyWithListNames
    org.jivesoftware.smack.PrivacyList getActiveList() -> getActiveList
    org.jivesoftware.smack.PrivacyList getDefaultList() -> getDefaultList
    java.util.List getPrivacyListItems(java.lang.String) -> getPrivacyListItems
    org.jivesoftware.smack.PrivacyList getPrivacyList(java.lang.String) -> getPrivacyList
    org.jivesoftware.smack.PrivacyList[] getPrivacyLists() -> getPrivacyLists
    void setActiveListName(java.lang.String) -> setActiveListName
    void declineActiveList() -> declineActiveList
    void setDefaultListName(java.lang.String) -> setDefaultListName
    void declineDefaultList() -> declineDefaultList
    void createPrivacyList(java.lang.String,java.util.List) -> createPrivacyList
    void updatePrivacyList(java.lang.String,java.util.List) -> updatePrivacyList
    void deletePrivacyList(java.lang.String) -> deletePrivacyList
    void addListener(org.jivesoftware.smack.PrivacyListListener) -> addListener
    org.jivesoftware.smack.Connection access$100(org.jivesoftware.smack.PrivacyListManager) -> access$100
    java.util.Map access$200() -> access$200
    java.util.List access$300(org.jivesoftware.smack.PrivacyListManager) -> access$300
org.jivesoftware.smack.PrivacyListManager$1 -> org.jivesoftware.smack.PrivacyListManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smack.PrivacyListManager$2 -> org.jivesoftware.smack.PrivacyListManager$2:
    org.jivesoftware.smack.PrivacyListManager this$0 -> this$0
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void reconnectingIn(int) -> reconnectingIn
    void reconnectionSuccessful() -> reconnectionSuccessful
org.jivesoftware.smack.PrivacyListManager$3 -> org.jivesoftware.smack.PrivacyListManager$3:
    org.jivesoftware.smack.PrivacyListManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.PrivacyListManager$3$1 -> org.jivesoftware.smack.PrivacyListManager$3$1:
    org.jivesoftware.smack.PrivacyListManager$3 this$1 -> this$1
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.ReconnectionManager -> org.jivesoftware.smack.ReconnectionManager:
    org.jivesoftware.smack.Connection connection -> connection
    boolean done -> done
    boolean isReconnectionAllowed() -> isReconnectionAllowed
    void reconnect() -> reconnect
    void notifyReconnectionFailed(java.lang.Exception) -> notifyReconnectionFailed
    void notifyAttemptToReconnectIn(int) -> notifyAttemptToReconnectIn
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectingIn(int) -> reconnectingIn
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void reconnectionSuccessful() -> reconnectionSuccessful
    boolean access$100(org.jivesoftware.smack.ReconnectionManager) -> access$100
    org.jivesoftware.smack.Connection access$200(org.jivesoftware.smack.ReconnectionManager) -> access$200
org.jivesoftware.smack.ReconnectionManager$1 -> org.jivesoftware.smack.ReconnectionManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smack.ReconnectionManager$2 -> org.jivesoftware.smack.ReconnectionManager$2:
    int attempts -> attempts
    org.jivesoftware.smack.ReconnectionManager this$0 -> this$0
    int timeDelay() -> timeDelay
    void run() -> run
org.jivesoftware.smack.Roster -> org.jivesoftware.smack.Roster:
    org.jivesoftware.smack.Roster$SubscriptionMode defaultSubscriptionMode -> defaultSubscriptionMode
    org.jivesoftware.smack.RosterStorage persistentStorage -> persistentStorage
    org.jivesoftware.smack.Connection connection -> connection
    java.util.Map groups -> groups
    java.util.Map entries -> entries
    java.util.List unfiledEntries -> unfiledEntries
    java.util.List rosterListeners -> rosterListeners
    java.util.Map presenceMap -> presenceMap
    boolean rosterInitialized -> rosterInitialized
    org.jivesoftware.smack.Roster$PresencePacketListener presencePacketListener -> presencePacketListener
    org.jivesoftware.smack.Roster$SubscriptionMode subscriptionMode -> subscriptionMode
    java.lang.String requestPacketId -> requestPacketId
    org.jivesoftware.smack.Roster$SubscriptionMode getDefaultSubscriptionMode() -> getDefaultSubscriptionMode
    void setDefaultSubscriptionMode(org.jivesoftware.smack.Roster$SubscriptionMode) -> setDefaultSubscriptionMode
    org.jivesoftware.smack.Roster$SubscriptionMode getSubscriptionMode() -> getSubscriptionMode
    void setSubscriptionMode(org.jivesoftware.smack.Roster$SubscriptionMode) -> setSubscriptionMode
    void reload() -> reload
    void addRosterListener(org.jivesoftware.smack.RosterListener) -> addRosterListener
    void removeRosterListener(org.jivesoftware.smack.RosterListener) -> removeRosterListener
    org.jivesoftware.smack.RosterGroup createGroup(java.lang.String) -> createGroup
    void createEntry(java.lang.String,java.lang.String,java.lang.String[]) -> createEntry
    void insertRosterItems(java.util.List) -> insertRosterItems
    void insertRosterItem(org.jivesoftware.smack.packet.RosterPacket$Item,java.util.Collection,java.util.Collection,java.util.Collection) -> insertRosterItem
    void removeEntry(org.jivesoftware.smack.RosterEntry) -> removeEntry
    int getEntryCount() -> getEntryCount
    java.util.Collection getEntries() -> getEntries
    int getUnfiledEntryCount() -> getUnfiledEntryCount
    java.util.Collection getUnfiledEntries() -> getUnfiledEntries
    org.jivesoftware.smack.RosterEntry getEntry(java.lang.String) -> getEntry
    boolean contains(java.lang.String) -> contains
    org.jivesoftware.smack.RosterGroup getGroup(java.lang.String) -> getGroup
    int getGroupCount() -> getGroupCount
    java.util.Collection getGroups() -> getGroups
    org.jivesoftware.smack.packet.Presence getPresence(java.lang.String) -> getPresence
    org.jivesoftware.smack.packet.Presence getPresenceResource(java.lang.String) -> getPresenceResource
    java.util.Iterator getPresences(java.lang.String) -> getPresences
    void cleanup() -> cleanup
    java.lang.String getPresenceMapKey(java.lang.String) -> getPresenceMapKey
    void setOfflinePresences() -> setOfflinePresences
    void fireRosterChangedEvent(java.util.Collection,java.util.Collection,java.util.Collection) -> fireRosterChangedEvent
    void fireRosterPresenceEvent(org.jivesoftware.smack.packet.Presence) -> fireRosterPresenceEvent
    void access$200(org.jivesoftware.smack.Roster) -> access$200
    org.jivesoftware.smack.Connection access$300(org.jivesoftware.smack.Roster) -> access$300
    java.lang.String access$500(org.jivesoftware.smack.Roster,java.lang.String) -> access$500
    java.util.Map access$600(org.jivesoftware.smack.Roster) -> access$600
    java.util.Map access$700(org.jivesoftware.smack.Roster) -> access$700
    void access$800(org.jivesoftware.smack.Roster,org.jivesoftware.smack.packet.Presence) -> access$800
    org.jivesoftware.smack.Roster$SubscriptionMode access$900(org.jivesoftware.smack.Roster) -> access$900
    org.jivesoftware.smack.RosterStorage access$1000(org.jivesoftware.smack.Roster) -> access$1000
    void access$1100(org.jivesoftware.smack.Roster,org.jivesoftware.smack.packet.RosterPacket$Item,java.util.Collection,java.util.Collection,java.util.Collection) -> access$1100
    void access$1200(org.jivesoftware.smack.Roster,java.util.Collection,java.util.Collection,java.util.Collection) -> access$1200
    org.jivesoftware.smack.RosterStorage access$1002(org.jivesoftware.smack.Roster,org.jivesoftware.smack.RosterStorage) -> access$1002
org.jivesoftware.smack.Roster$1 -> org.jivesoftware.smack.Roster$1:
    org.jivesoftware.smack.Roster this$0 -> this$0
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
org.jivesoftware.smack.Roster$2 -> org.jivesoftware.smack.Roster$2:
    org.jivesoftware.smack.ConnectionListener val$connectionListener -> val$connectionListener
    org.jivesoftware.smack.Roster this$0 -> this$0
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smack.Roster$PresencePacketListener -> org.jivesoftware.smack.Roster$PresencePacketListener:
    org.jivesoftware.smack.Roster this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.Roster$RosterPacketListener -> org.jivesoftware.smack.Roster$RosterPacketListener:
    org.jivesoftware.smack.Roster this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.Roster$RosterResultListener -> org.jivesoftware.smack.Roster$RosterResultListener:
    org.jivesoftware.smack.Roster this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.Roster$SubscriptionMode -> org.jivesoftware.smack.Roster$SubscriptionMode:
    org.jivesoftware.smack.Roster$SubscriptionMode accept_all -> accept_all
    org.jivesoftware.smack.Roster$SubscriptionMode reject_all -> reject_all
    org.jivesoftware.smack.Roster$SubscriptionMode manual -> manual
    org.jivesoftware.smack.Roster$SubscriptionMode[] $VALUES -> $VALUES
    org.jivesoftware.smack.Roster$SubscriptionMode[] values() -> values
    org.jivesoftware.smack.Roster$SubscriptionMode valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.RosterEntry -> org.jivesoftware.smack.RosterEntry:
    java.lang.String user -> user
    java.lang.String name -> name
    org.jivesoftware.smack.packet.RosterPacket$ItemType type -> type
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus status -> status
    org.jivesoftware.smack.Roster roster -> roster
    org.jivesoftware.smack.Connection connection -> connection
    java.lang.String getUser() -> getUser
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    void updateState(java.lang.String,org.jivesoftware.smack.packet.RosterPacket$ItemType,org.jivesoftware.smack.packet.RosterPacket$ItemStatus) -> updateState
    java.util.Collection getGroups() -> getGroups
    org.jivesoftware.smack.packet.RosterPacket$ItemType getType() -> getType
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus getStatus() -> getStatus
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    boolean equalsDeep(java.lang.Object) -> equalsDeep
    org.jivesoftware.smack.packet.RosterPacket$Item toRosterItem(org.jivesoftware.smack.RosterEntry) -> toRosterItem
org.jivesoftware.smack.RosterGroup -> org.jivesoftware.smack.RosterGroup:
    java.lang.String name -> name
    org.jivesoftware.smack.Connection connection -> connection
    java.util.List entries -> entries
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    int getEntryCount() -> getEntryCount
    java.util.Collection getEntries() -> getEntries
    org.jivesoftware.smack.RosterEntry getEntry(java.lang.String) -> getEntry
    boolean contains(org.jivesoftware.smack.RosterEntry) -> contains
    boolean contains(java.lang.String) -> contains
    void addEntry(org.jivesoftware.smack.RosterEntry) -> addEntry
    void removeEntry(org.jivesoftware.smack.RosterEntry) -> removeEntry
    void addEntryLocal(org.jivesoftware.smack.RosterEntry) -> addEntryLocal
    void removeEntryLocal(org.jivesoftware.smack.RosterEntry) -> removeEntryLocal
org.jivesoftware.smack.RosterListener -> org.jivesoftware.smack.RosterListener:
    void entriesAdded(java.util.Collection) -> entriesAdded
    void entriesUpdated(java.util.Collection) -> entriesUpdated
    void entriesDeleted(java.util.Collection) -> entriesDeleted
    void presenceChanged(org.jivesoftware.smack.packet.Presence) -> presenceChanged
org.jivesoftware.smack.RosterStorage -> org.jivesoftware.smack.RosterStorage:
    java.util.List getEntries() -> getEntries
    org.jivesoftware.smack.packet.RosterPacket$Item getEntry(java.lang.String) -> getEntry
    int getEntryCount() -> getEntryCount
    java.lang.String getRosterVersion() -> getRosterVersion
    void addEntry(org.jivesoftware.smack.packet.RosterPacket$Item,java.lang.String) -> addEntry
    void removeEntry(java.lang.String) -> removeEntry
    void updateLocalEntry(org.jivesoftware.smack.packet.RosterPacket$Item) -> updateLocalEntry
org.jivesoftware.smack.SASLAuthentication -> org.jivesoftware.smack.SASLAuthentication:
    java.util.Map implementedMechanisms -> implementedMechanisms
    java.util.List mechanismsPreferences -> mechanismsPreferences
    org.jivesoftware.smack.Connection connection -> connection
    java.util.Collection serverMechanisms -> serverMechanisms
    org.jivesoftware.smack.sasl.SASLMechanism currentMechanism -> currentMechanism
    boolean saslNegotiated -> saslNegotiated
    boolean saslFailed -> saslFailed
    boolean resourceBinded -> resourceBinded
    boolean sessionSupported -> sessionSupported
    java.lang.String errorCondition -> errorCondition
    void registerSASLMechanism(java.lang.String,java.lang.Class) -> registerSASLMechanism
    void unregisterSASLMechanism(java.lang.String) -> unregisterSASLMechanism
    void supportSASLMechanism(java.lang.String) -> supportSASLMechanism
    void supportSASLMechanism(java.lang.String,int) -> supportSASLMechanism
    void unsupportSASLMechanism(java.lang.String) -> unsupportSASLMechanism
    java.util.List getRegisterSASLMechanisms() -> getRegisterSASLMechanisms
    boolean hasAnonymousAuthentication() -> hasAnonymousAuthentication
    boolean hasNonAnonymousAuthentication() -> hasNonAnonymousAuthentication
    java.lang.String authenticate(java.lang.String,java.lang.String,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> authenticate
    java.lang.String authenticate(java.lang.String,java.lang.String,java.lang.String) -> authenticate
    java.lang.String authenticateAnonymously() -> authenticateAnonymously
    java.lang.String bindResourceAndEstablishSession(java.lang.String) -> bindResourceAndEstablishSession
    void setAvailableSASLMethods(java.util.Collection) -> setAvailableSASLMethods
    boolean isAuthenticated() -> isAuthenticated
    void challengeReceived(java.lang.String) -> challengeReceived
    void authenticated() -> authenticated
    void authenticationFailed() -> authenticationFailed
    void authenticationFailed(java.lang.String) -> authenticationFailed
    void bindingRequired() -> bindingRequired
    void send(org.jivesoftware.smack.packet.Packet) -> send
    void sessionsSupported() -> sessionsSupported
    void init() -> init
org.jivesoftware.smack.ServerTrustManager -> org.jivesoftware.smack.ServerTrustManager:
    java.util.regex.Pattern cnPattern -> cnPattern
    org.jivesoftware.smack.ConnectionConfiguration configuration -> configuration
    java.lang.String server -> server
    java.security.KeyStore trustStore -> trustStore
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.util.List getPeerIdentity(java.security.cert.X509Certificate) -> getPeerIdentity
    java.util.List getSubjectAlternativeNames(java.security.cert.X509Certificate) -> getSubjectAlternativeNames
org.jivesoftware.smack.SmackConfiguration -> org.jivesoftware.smack.SmackConfiguration:
    java.lang.String SMACK_VERSION -> SMACK_VERSION
    int packetReplyTimeout -> packetReplyTimeout
    int keepAliveInterval -> keepAliveInterval
    java.util.Vector defaultMechs -> defaultMechs
    boolean localSocks5ProxyEnabled -> localSocks5ProxyEnabled
    int localSocks5ProxyPort -> localSocks5ProxyPort
    java.lang.String getVersion() -> getVersion
    int getPacketReplyTimeout() -> getPacketReplyTimeout
    void setPacketReplyTimeout(int) -> setPacketReplyTimeout
    int getKeepAliveInterval() -> getKeepAliveInterval
    void setKeepAliveInterval(int) -> setKeepAliveInterval
    void addSaslMech(java.lang.String) -> addSaslMech
    void addSaslMechs(java.util.Collection) -> addSaslMechs
    void removeSaslMech(java.lang.String) -> removeSaslMech
    void removeSaslMechs(java.util.Collection) -> removeSaslMechs
    java.util.List getSaslMechs() -> getSaslMechs
    boolean isLocalSocks5ProxyEnabled() -> isLocalSocks5ProxyEnabled
    void setLocalSocks5ProxyEnabled(boolean) -> setLocalSocks5ProxyEnabled
    int getLocalSocks5ProxyPort() -> getLocalSocks5ProxyPort
    void setLocalSocks5ProxyPort(int) -> setLocalSocks5ProxyPort
    void parseClassToLoad(org.xmlpull.v1.XmlPullParser) -> parseClassToLoad
    int parseIntProperty(org.xmlpull.v1.XmlPullParser,int) -> parseIntProperty
    java.lang.ClassLoader[] getClassLoaders() -> getClassLoaders
org.jivesoftware.smack.UserAuthentication -> org.jivesoftware.smack.UserAuthentication:
    java.lang.String authenticate(java.lang.String,java.lang.String,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> authenticate
    java.lang.String authenticate(java.lang.String,java.lang.String,java.lang.String) -> authenticate
    java.lang.String authenticateAnonymously() -> authenticateAnonymously
org.jivesoftware.smack.XMPPConnection -> org.jivesoftware.smack.XMPPConnection:
    java.net.Socket socket -> socket
    java.lang.String connectionID -> connectionID
    java.lang.String user -> user
    boolean connected -> connected
    boolean authenticated -> authenticated
    boolean wasAuthenticated -> wasAuthenticated
    boolean anonymous -> anonymous
    boolean usingTLS -> usingTLS
    org.jivesoftware.smack.PacketWriter packetWriter -> packetWriter
    org.jivesoftware.smack.PacketReader packetReader -> packetReader
    org.jivesoftware.smack.Roster roster -> roster
    java.util.Collection compressionMethods -> compressionMethods
    boolean usingCompression -> usingCompression
    java.lang.String getConnectionID() -> getConnectionID
    java.lang.String getUser() -> getUser
    void login(java.lang.String,java.lang.String,java.lang.String) -> login
    void loginAnonymously() -> loginAnonymously
    org.jivesoftware.smack.Roster getRoster() -> getRoster
    boolean isConnected() -> isConnected
    boolean isSecureConnection() -> isSecureConnection
    boolean isAuthenticated() -> isAuthenticated
    boolean isAnonymous() -> isAnonymous
    void shutdown(org.jivesoftware.smack.packet.Presence) -> shutdown
    void disconnect(org.jivesoftware.smack.packet.Presence) -> disconnect
    void sendPacket(org.jivesoftware.smack.packet.Packet) -> sendPacket
    void addPacketWriterInterceptor(org.jivesoftware.smack.PacketInterceptor,org.jivesoftware.smack.filter.PacketFilter) -> addPacketWriterInterceptor
    void removePacketWriterInterceptor(org.jivesoftware.smack.PacketInterceptor) -> removePacketWriterInterceptor
    void addPacketWriterListener(org.jivesoftware.smack.PacketListener,org.jivesoftware.smack.filter.PacketFilter) -> addPacketWriterListener
    void removePacketWriterListener(org.jivesoftware.smack.PacketListener) -> removePacketWriterListener
    void connectUsingConfiguration(org.jivesoftware.smack.ConnectionConfiguration) -> connectUsingConfiguration
    void initConnection() -> initConnection
    void initReaderAndWriter() -> initReaderAndWriter
    boolean isUsingTLS() -> isUsingTLS
    void startTLSReceived(boolean) -> startTLSReceived
    void proceedTLSReceived() -> proceedTLSReceived
    void setAvailableCompressionMethods(java.util.Collection) -> setAvailableCompressionMethods
    boolean hasAvailableCompressionMethod(java.lang.String) -> hasAvailableCompressionMethod
    boolean isUsingCompression() -> isUsingCompression
    boolean useCompression() -> useCompression
    void requestStreamCompression() -> requestStreamCompression
    void startStreamCompression() -> startStreamCompression
    void streamCompressionDenied() -> streamCompressionDenied
    void connect() -> connect
    void setWasAuthenticated(boolean) -> setWasAuthenticated
    void setRosterStorage(org.jivesoftware.smack.RosterStorage) -> setRosterStorage
org.jivesoftware.smack.XMPPException -> org.jivesoftware.smack.XMPPException:
    org.jivesoftware.smack.packet.StreamError streamError -> streamError
    org.jivesoftware.smack.packet.XMPPError error -> error
    java.lang.Throwable wrappedThrowable -> wrappedThrowable
    org.jivesoftware.smack.packet.XMPPError getXMPPError() -> getXMPPError
    org.jivesoftware.smack.packet.StreamError getStreamError() -> getStreamError
    java.lang.Throwable getWrappedThrowable() -> getWrappedThrowable
    void printStackTrace() -> printStackTrace
    void printStackTrace(java.io.PrintStream) -> printStackTrace
    void printStackTrace(java.io.PrintWriter) -> printStackTrace
    java.lang.String getMessage() -> getMessage
    java.lang.String toString() -> toString
org.jivesoftware.smack.debugger.ConsoleDebugger -> org.jivesoftware.smack.debugger.ConsoleDebugger:
    boolean printInterpreted -> printInterpreted
    java.text.SimpleDateFormat dateFormatter -> dateFormatter
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smack.PacketListener listener -> listener
    org.jivesoftware.smack.ConnectionListener connListener -> connListener
    java.io.Writer writer -> writer
    java.io.Reader reader -> reader
    org.jivesoftware.smack.util.ReaderListener readerListener -> readerListener
    org.jivesoftware.smack.util.WriterListener writerListener -> writerListener
    void createDebug() -> createDebug
    java.io.Reader newConnectionReader(java.io.Reader) -> newConnectionReader
    java.io.Writer newConnectionWriter(java.io.Writer) -> newConnectionWriter
    void userHasLogged(java.lang.String) -> userHasLogged
    java.io.Reader getReader() -> getReader
    java.io.Writer getWriter() -> getWriter
    org.jivesoftware.smack.PacketListener getReaderListener() -> getReaderListener
    org.jivesoftware.smack.PacketListener getWriterListener() -> getWriterListener
    java.text.SimpleDateFormat access$000(org.jivesoftware.smack.debugger.ConsoleDebugger) -> access$000
    org.jivesoftware.smack.Connection access$100(org.jivesoftware.smack.debugger.ConsoleDebugger) -> access$100
org.jivesoftware.smack.debugger.ConsoleDebugger$1 -> org.jivesoftware.smack.debugger.ConsoleDebugger$1:
    org.jivesoftware.smack.debugger.ConsoleDebugger this$0 -> this$0
    void read(java.lang.String) -> read
org.jivesoftware.smack.debugger.ConsoleDebugger$2 -> org.jivesoftware.smack.debugger.ConsoleDebugger$2:
    org.jivesoftware.smack.debugger.ConsoleDebugger this$0 -> this$0
    void write(java.lang.String) -> write
org.jivesoftware.smack.debugger.ConsoleDebugger$3 -> org.jivesoftware.smack.debugger.ConsoleDebugger$3:
    org.jivesoftware.smack.debugger.ConsoleDebugger this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.debugger.ConsoleDebugger$4 -> org.jivesoftware.smack.debugger.ConsoleDebugger$4:
    org.jivesoftware.smack.debugger.ConsoleDebugger this$0 -> this$0
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void reconnectionSuccessful() -> reconnectionSuccessful
    void reconnectingIn(int) -> reconnectingIn
org.jivesoftware.smack.debugger.SmackDebugger -> org.jivesoftware.smack.debugger.SmackDebugger:
    void userHasLogged(java.lang.String) -> userHasLogged
    java.io.Reader getReader() -> getReader
    java.io.Writer getWriter() -> getWriter
    java.io.Reader newConnectionReader(java.io.Reader) -> newConnectionReader
    java.io.Writer newConnectionWriter(java.io.Writer) -> newConnectionWriter
    org.jivesoftware.smack.PacketListener getReaderListener() -> getReaderListener
    org.jivesoftware.smack.PacketListener getWriterListener() -> getWriterListener
org.jivesoftware.smack.filter.AndFilter -> org.jivesoftware.smack.filter.AndFilter:
    java.util.List filters -> filters
    void addFilter(org.jivesoftware.smack.filter.PacketFilter) -> addFilter
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
    java.lang.String toString() -> toString
org.jivesoftware.smack.filter.FromContainsFilter -> org.jivesoftware.smack.filter.FromContainsFilter:
    java.lang.String from -> from
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.FromMatchesFilter -> org.jivesoftware.smack.filter.FromMatchesFilter:
    java.lang.String address -> address
    boolean matchBareJID -> matchBareJID
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
    java.lang.String toString() -> toString
org.jivesoftware.smack.filter.IQTypeFilter -> org.jivesoftware.smack.filter.IQTypeFilter:
    org.jivesoftware.smack.packet.IQ$Type type -> type
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.MessageTypeFilter -> org.jivesoftware.smack.filter.MessageTypeFilter:
    org.jivesoftware.smack.packet.Message$Type type -> type
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.NotFilter -> org.jivesoftware.smack.filter.NotFilter:
    org.jivesoftware.smack.filter.PacketFilter filter -> filter
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.OrFilter -> org.jivesoftware.smack.filter.OrFilter:
    int size -> size
    org.jivesoftware.smack.filter.PacketFilter[] filters -> filters
    void addFilter(org.jivesoftware.smack.filter.PacketFilter) -> addFilter
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
    java.lang.String toString() -> toString
org.jivesoftware.smack.filter.PacketExtensionFilter -> org.jivesoftware.smack.filter.PacketExtensionFilter:
    java.lang.String elementName -> elementName
    java.lang.String namespace -> namespace
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.PacketFilter -> org.jivesoftware.smack.filter.PacketFilter:
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.PacketIDFilter -> org.jivesoftware.smack.filter.PacketIDFilter:
    java.lang.String packetID -> packetID
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
    java.lang.String toString() -> toString
org.jivesoftware.smack.filter.PacketTypeFilter -> org.jivesoftware.smack.filter.PacketTypeFilter:
    java.lang.Class packetType -> packetType
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
    java.lang.String toString() -> toString
org.jivesoftware.smack.filter.ThreadFilter -> org.jivesoftware.smack.filter.ThreadFilter:
    java.lang.String thread -> thread
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.ToContainsFilter -> org.jivesoftware.smack.filter.ToContainsFilter:
    java.lang.String to -> to
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.packet.Authentication -> org.jivesoftware.smack.packet.Authentication:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String digest -> digest
    java.lang.String resource -> resource
    java.lang.String getUsername() -> getUsername
    void setUsername(java.lang.String) -> setUsername
    java.lang.String getPassword() -> getPassword
    void setPassword(java.lang.String) -> setPassword
    java.lang.String getDigest() -> getDigest
    void setDigest(java.lang.String,java.lang.String) -> setDigest
    void setDigest(java.lang.String) -> setDigest
    java.lang.String getResource() -> getResource
    void setResource(java.lang.String) -> setResource
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.Bind -> org.jivesoftware.smack.packet.Bind:
    java.lang.String resource -> resource
    java.lang.String jid -> jid
    java.lang.String getResource() -> getResource
    void setResource(java.lang.String) -> setResource
    java.lang.String getJid() -> getJid
    void setJid(java.lang.String) -> setJid
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.DefaultPacketExtension -> org.jivesoftware.smack.packet.DefaultPacketExtension:
    java.lang.String elementName -> elementName
    java.lang.String namespace -> namespace
    java.util.Map map -> map
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    java.util.Collection getNames() -> getNames
    java.lang.String getValue(java.lang.String) -> getValue
    void setValue(java.lang.String,java.lang.String) -> setValue
org.jivesoftware.smack.packet.IQ -> org.jivesoftware.smack.packet.IQ:
    org.jivesoftware.smack.packet.IQ$Type type -> type
    org.jivesoftware.smack.packet.IQ$Type getType() -> getType
    void setType(org.jivesoftware.smack.packet.IQ$Type) -> setType
    java.lang.String toXML() -> toXML
    java.lang.String getChildElementXML() -> getChildElementXML
    org.jivesoftware.smack.packet.IQ createResultIQ(org.jivesoftware.smack.packet.IQ) -> createResultIQ
    org.jivesoftware.smack.packet.IQ createErrorResponse(org.jivesoftware.smack.packet.IQ,org.jivesoftware.smack.packet.XMPPError) -> createErrorResponse
org.jivesoftware.smack.packet.IQ$1 -> org.jivesoftware.smack.packet.IQ$1:
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.IQ$2 -> org.jivesoftware.smack.packet.IQ$2:
    org.jivesoftware.smack.packet.IQ val$request -> val$request
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.IQ$Type -> org.jivesoftware.smack.packet.IQ$Type:
    org.jivesoftware.smack.packet.IQ$Type GET -> GET
    org.jivesoftware.smack.packet.IQ$Type SET -> SET
    org.jivesoftware.smack.packet.IQ$Type RESULT -> RESULT
    org.jivesoftware.smack.packet.IQ$Type ERROR -> ERROR
    java.lang.String value -> value
    org.jivesoftware.smack.packet.IQ$Type fromString(java.lang.String) -> fromString
    java.lang.String toString() -> toString
org.jivesoftware.smack.packet.Message -> org.jivesoftware.smack.packet.Message:
    org.jivesoftware.smack.packet.Message$Type type -> type
    java.lang.String thread -> thread
    java.lang.String language -> language
    java.util.Set subjects -> subjects
    java.util.Set bodies -> bodies
    org.jivesoftware.smack.packet.Message$Type getType() -> getType
    void setType(org.jivesoftware.smack.packet.Message$Type) -> setType
    java.lang.String getSubject() -> getSubject
    java.lang.String getSubject(java.lang.String) -> getSubject
    org.jivesoftware.smack.packet.Message$Subject getMessageSubject(java.lang.String) -> getMessageSubject
    java.util.Collection getSubjects() -> getSubjects
    void setSubject(java.lang.String) -> setSubject
    org.jivesoftware.smack.packet.Message$Subject addSubject(java.lang.String,java.lang.String) -> addSubject
    boolean removeSubject(java.lang.String) -> removeSubject
    boolean removeSubject(org.jivesoftware.smack.packet.Message$Subject) -> removeSubject
    java.util.Collection getSubjectLanguages() -> getSubjectLanguages
    java.lang.String getBody() -> getBody
    java.lang.String getBody(java.lang.String) -> getBody
    org.jivesoftware.smack.packet.Message$Body getMessageBody(java.lang.String) -> getMessageBody
    java.util.Collection getBodies() -> getBodies
    void setBody(java.lang.String) -> setBody
    org.jivesoftware.smack.packet.Message$Body addBody(java.lang.String,java.lang.String) -> addBody
    boolean removeBody(java.lang.String) -> removeBody
    boolean removeBody(org.jivesoftware.smack.packet.Message$Body) -> removeBody
    java.util.Collection getBodyLanguages() -> getBodyLanguages
    java.lang.String getThread() -> getThread
    void setThread(java.lang.String) -> setThread
    java.lang.String getLanguage() -> getLanguage
    void setLanguage(java.lang.String) -> setLanguage
    java.lang.String determineLanguage(java.lang.String) -> determineLanguage
    java.lang.String toXML() -> toXML
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jivesoftware.smack.packet.Message$1 -> org.jivesoftware.smack.packet.Message$1:
org.jivesoftware.smack.packet.Message$Body -> org.jivesoftware.smack.packet.Message$Body:
    java.lang.String message -> message
    java.lang.String language -> language
    java.lang.String getLanguage() -> getLanguage
    java.lang.String getMessage() -> getMessage
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String access$300(org.jivesoftware.smack.packet.Message$Body) -> access$300
    java.lang.String access$400(org.jivesoftware.smack.packet.Message$Body) -> access$400
org.jivesoftware.smack.packet.Message$Subject -> org.jivesoftware.smack.packet.Message$Subject:
    java.lang.String subject -> subject
    java.lang.String language -> language
    java.lang.String getLanguage() -> getLanguage
    java.lang.String getSubject() -> getSubject
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String access$000(org.jivesoftware.smack.packet.Message$Subject) -> access$000
    java.lang.String access$100(org.jivesoftware.smack.packet.Message$Subject) -> access$100
org.jivesoftware.smack.packet.Message$Type -> org.jivesoftware.smack.packet.Message$Type:
    org.jivesoftware.smack.packet.Message$Type normal -> normal
    org.jivesoftware.smack.packet.Message$Type chat -> chat
    org.jivesoftware.smack.packet.Message$Type groupchat -> groupchat
    org.jivesoftware.smack.packet.Message$Type headline -> headline
    org.jivesoftware.smack.packet.Message$Type error -> error
    org.jivesoftware.smack.packet.Message$Type[] $VALUES -> $VALUES
    org.jivesoftware.smack.packet.Message$Type[] values() -> values
    org.jivesoftware.smack.packet.Message$Type valueOf(java.lang.String) -> valueOf
    org.jivesoftware.smack.packet.Message$Type fromString(java.lang.String) -> fromString
org.jivesoftware.smack.packet.Packet -> org.jivesoftware.smack.packet.Packet:
    java.lang.String DEFAULT_LANGUAGE -> DEFAULT_LANGUAGE
    java.lang.String DEFAULT_XML_NS -> DEFAULT_XML_NS
    java.lang.String ID_NOT_AVAILABLE -> ID_NOT_AVAILABLE
    java.text.DateFormat XEP_0082_UTC_FORMAT -> XEP_0082_UTC_FORMAT
    java.lang.String prefix -> prefix
    long id -> id
    java.lang.String xmlns -> xmlns
    java.lang.String packetID -> packetID
    java.lang.String to -> to
    java.lang.String from -> from
    java.util.List packetExtensions -> packetExtensions
    java.util.Map properties -> properties
    org.jivesoftware.smack.packet.XMPPError error -> error
    java.lang.String nextID() -> nextID
    void setDefaultXmlns(java.lang.String) -> setDefaultXmlns
    java.lang.String getPacketID() -> getPacketID
    void setPacketID(java.lang.String) -> setPacketID
    java.lang.String getTo() -> getTo
    void setTo(java.lang.String) -> setTo
    java.lang.String getFrom() -> getFrom
    void setFrom(java.lang.String) -> setFrom
    org.jivesoftware.smack.packet.XMPPError getError() -> getError
    void setError(org.jivesoftware.smack.packet.XMPPError) -> setError
    java.util.Collection getExtensions() -> getExtensions
    org.jivesoftware.smack.packet.PacketExtension getExtension(java.lang.String) -> getExtension
    org.jivesoftware.smack.packet.PacketExtension getExtension(java.lang.String,java.lang.String) -> getExtension
    void addExtension(org.jivesoftware.smack.packet.PacketExtension) -> addExtension
    void removeExtension(org.jivesoftware.smack.packet.PacketExtension) -> removeExtension
    java.lang.Object getProperty(java.lang.String) -> getProperty
    void setProperty(java.lang.String,java.lang.Object) -> setProperty
    void deleteProperty(java.lang.String) -> deleteProperty
    java.util.Collection getPropertyNames() -> getPropertyNames
    java.lang.String toXML() -> toXML
    java.lang.String getExtensionsXML() -> getExtensionsXML
    java.lang.String getXmlns() -> getXmlns
    java.lang.String getDefaultLanguage() -> getDefaultLanguage
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jivesoftware.smack.packet.PacketExtension -> org.jivesoftware.smack.packet.PacketExtension:
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.packet.Presence -> org.jivesoftware.smack.packet.Presence:
    org.jivesoftware.smack.packet.Presence$Type type -> type
    java.lang.String status -> status
    int priority -> priority
    org.jivesoftware.smack.packet.Presence$Mode mode -> mode
    java.lang.String language -> language
    boolean isAvailable() -> isAvailable
    boolean isAway() -> isAway
    org.jivesoftware.smack.packet.Presence$Type getType() -> getType
    void setType(org.jivesoftware.smack.packet.Presence$Type) -> setType
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> setStatus
    int getPriority() -> getPriority
    void setPriority(int) -> setPriority
    org.jivesoftware.smack.packet.Presence$Mode getMode() -> getMode
    void setMode(org.jivesoftware.smack.packet.Presence$Mode) -> setMode
    java.lang.String getLanguage() -> getLanguage
    void setLanguage(java.lang.String) -> setLanguage
    java.lang.String toXML() -> toXML
    java.lang.String toString() -> toString
org.jivesoftware.smack.packet.Presence$Mode -> org.jivesoftware.smack.packet.Presence$Mode:
    org.jivesoftware.smack.packet.Presence$Mode chat -> chat
    org.jivesoftware.smack.packet.Presence$Mode available -> available
    org.jivesoftware.smack.packet.Presence$Mode away -> away
    org.jivesoftware.smack.packet.Presence$Mode xa -> xa
    org.jivesoftware.smack.packet.Presence$Mode dnd -> dnd
    org.jivesoftware.smack.packet.Presence$Mode[] $VALUES -> $VALUES
    org.jivesoftware.smack.packet.Presence$Mode[] values() -> values
    org.jivesoftware.smack.packet.Presence$Mode valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.packet.Presence$Type -> org.jivesoftware.smack.packet.Presence$Type:
    org.jivesoftware.smack.packet.Presence$Type available -> available
    org.jivesoftware.smack.packet.Presence$Type unavailable -> unavailable
    org.jivesoftware.smack.packet.Presence$Type subscribe -> subscribe
    org.jivesoftware.smack.packet.Presence$Type subscribed -> subscribed
    org.jivesoftware.smack.packet.Presence$Type unsubscribe -> unsubscribe
    org.jivesoftware.smack.packet.Presence$Type unsubscribed -> unsubscribed
    org.jivesoftware.smack.packet.Presence$Type error -> error
    org.jivesoftware.smack.packet.Presence$Type[] $VALUES -> $VALUES
    org.jivesoftware.smack.packet.Presence$Type[] values() -> values
    org.jivesoftware.smack.packet.Presence$Type valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.packet.Privacy -> org.jivesoftware.smack.packet.Privacy:
    boolean declineActiveList -> declineActiveList
    java.lang.String activeName -> activeName
    boolean declineDefaultList -> declineDefaultList
    java.lang.String defaultName -> defaultName
    java.util.Map itemLists -> itemLists
    java.util.List setPrivacyList(java.lang.String,java.util.List) -> setPrivacyList
    java.util.List setActivePrivacyList() -> setActivePrivacyList
    void deletePrivacyList(java.lang.String) -> deletePrivacyList
    java.util.List getActivePrivacyList() -> getActivePrivacyList
    java.util.List getDefaultPrivacyList() -> getDefaultPrivacyList
    java.util.List getPrivacyList(java.lang.String) -> getPrivacyList
    org.jivesoftware.smack.packet.PrivacyItem getItem(java.lang.String,int) -> getItem
    boolean changeDefaultList(java.lang.String) -> changeDefaultList
    void deleteList(java.lang.String) -> deleteList
    java.lang.String getActiveName() -> getActiveName
    void setActiveName(java.lang.String) -> setActiveName
    java.lang.String getDefaultName() -> getDefaultName
    void setDefaultName(java.lang.String) -> setDefaultName
    java.util.Map getItemLists() -> getItemLists
    boolean isDeclineActiveList() -> isDeclineActiveList
    void setDeclineActiveList(boolean) -> setDeclineActiveList
    boolean isDeclineDefaultList() -> isDeclineDefaultList
    void setDeclineDefaultList(boolean) -> setDeclineDefaultList
    java.util.Set getPrivacyListNames() -> getPrivacyListNames
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.PrivacyItem -> org.jivesoftware.smack.packet.PrivacyItem:
    boolean allow -> allow
    int order -> order
    org.jivesoftware.smack.packet.PrivacyItem$PrivacyRule rule -> rule
    boolean filterIQ -> filterIQ
    boolean filterMessage -> filterMessage
    boolean filterPresence_in -> filterPresence_in
    boolean filterPresence_out -> filterPresence_out
    boolean isAllow() -> isAllow
    void setAllow(boolean) -> setAllow
    boolean isFilterIQ() -> isFilterIQ
    void setFilterIQ(boolean) -> setFilterIQ
    boolean isFilterMessage() -> isFilterMessage
    void setFilterMessage(boolean) -> setFilterMessage
    boolean isFilterPresence_in() -> isFilterPresence_in
    void setFilterPresence_in(boolean) -> setFilterPresence_in
    boolean isFilterPresence_out() -> isFilterPresence_out
    void setFilterPresence_out(boolean) -> setFilterPresence_out
    int getOrder() -> getOrder
    void setOrder(int) -> setOrder
    void setValue(java.lang.String) -> setValue
    org.jivesoftware.smack.packet.PrivacyItem$Type getType() -> getType
    java.lang.String getValue() -> getValue
    boolean isFilterEverything() -> isFilterEverything
    org.jivesoftware.smack.packet.PrivacyItem$PrivacyRule getRule() -> getRule
    void setRule(org.jivesoftware.smack.packet.PrivacyItem$PrivacyRule) -> setRule
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.packet.PrivacyItem$PrivacyRule -> org.jivesoftware.smack.packet.PrivacyItem$PrivacyRule:
    org.jivesoftware.smack.packet.PrivacyItem$Type type -> type
    java.lang.String value -> value
    java.lang.String SUBSCRIPTION_BOTH -> SUBSCRIPTION_BOTH
    java.lang.String SUBSCRIPTION_TO -> SUBSCRIPTION_TO
    java.lang.String SUBSCRIPTION_FROM -> SUBSCRIPTION_FROM
    java.lang.String SUBSCRIPTION_NONE -> SUBSCRIPTION_NONE
    org.jivesoftware.smack.packet.PrivacyItem$PrivacyRule fromString(java.lang.String) -> fromString
    org.jivesoftware.smack.packet.PrivacyItem$Type getType() -> getType
    void setType(org.jivesoftware.smack.packet.PrivacyItem$Type) -> setType
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    void setSuscriptionValue(java.lang.String) -> setSuscriptionValue
    boolean isSuscription() -> isSuscription
org.jivesoftware.smack.packet.PrivacyItem$Type -> org.jivesoftware.smack.packet.PrivacyItem$Type:
    org.jivesoftware.smack.packet.PrivacyItem$Type group -> group
    org.jivesoftware.smack.packet.PrivacyItem$Type jid -> jid
    org.jivesoftware.smack.packet.PrivacyItem$Type subscription -> subscription
    org.jivesoftware.smack.packet.PrivacyItem$Type[] $VALUES -> $VALUES
    org.jivesoftware.smack.packet.PrivacyItem$Type[] values() -> values
    org.jivesoftware.smack.packet.PrivacyItem$Type valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.packet.Registration -> org.jivesoftware.smack.packet.Registration:
    java.lang.String instructions -> instructions
    java.util.Map attributes -> attributes
    java.util.List requiredFields -> requiredFields
    boolean registered -> registered
    boolean remove -> remove
    java.lang.String getInstructions() -> getInstructions
    void setInstructions(java.lang.String) -> setInstructions
    java.util.Map getAttributes() -> getAttributes
    void addRequiredField(java.lang.String) -> addRequiredField
    java.util.List getRequiredFields() -> getRequiredFields
    void addAttribute(java.lang.String,java.lang.String) -> addAttribute
    void setRegistered(boolean) -> setRegistered
    boolean isRegistered() -> isRegistered
    java.lang.String getField(java.lang.String) -> getField
    java.util.List getFieldNames() -> getFieldNames
    void setUsername(java.lang.String) -> setUsername
    void setPassword(java.lang.String) -> setPassword
    void setRemove(boolean) -> setRemove
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.RosterPacket -> org.jivesoftware.smack.packet.RosterPacket:
    java.util.List rosterItems -> rosterItems
    java.lang.String version -> version
    void addRosterItem(org.jivesoftware.smack.packet.RosterPacket$Item) -> addRosterItem
    java.lang.String getVersion() -> getVersion
    void setVersion(java.lang.String) -> setVersion
    int getRosterItemCount() -> getRosterItemCount
    java.util.Collection getRosterItems() -> getRosterItems
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.RosterPacket$Item -> org.jivesoftware.smack.packet.RosterPacket$Item:
    java.lang.String user -> user
    java.lang.String name -> name
    org.jivesoftware.smack.packet.RosterPacket$ItemType itemType -> itemType
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus itemStatus -> itemStatus
    java.util.Set groupNames -> groupNames
    java.lang.String getUser() -> getUser
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    org.jivesoftware.smack.packet.RosterPacket$ItemType getItemType() -> getItemType
    void setItemType(org.jivesoftware.smack.packet.RosterPacket$ItemType) -> setItemType
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus getItemStatus() -> getItemStatus
    void setItemStatus(org.jivesoftware.smack.packet.RosterPacket$ItemStatus) -> setItemStatus
    java.util.Set getGroupNames() -> getGroupNames
    void addGroupName(java.lang.String) -> addGroupName
    void removeGroupName(java.lang.String) -> removeGroupName
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.packet.RosterPacket$ItemStatus -> org.jivesoftware.smack.packet.RosterPacket$ItemStatus:
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus SUBSCRIPTION_PENDING -> SUBSCRIPTION_PENDING
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus UNSUBSCRIPTION_PENDING -> UNSUBSCRIPTION_PENDING
    java.lang.String value -> value
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus fromString(java.lang.String) -> fromString
    java.lang.String toString() -> toString
org.jivesoftware.smack.packet.RosterPacket$ItemType -> org.jivesoftware.smack.packet.RosterPacket$ItemType:
    org.jivesoftware.smack.packet.RosterPacket$ItemType none -> none
    org.jivesoftware.smack.packet.RosterPacket$ItemType to -> to
    org.jivesoftware.smack.packet.RosterPacket$ItemType from -> from
    org.jivesoftware.smack.packet.RosterPacket$ItemType both -> both
    org.jivesoftware.smack.packet.RosterPacket$ItemType remove -> remove
    org.jivesoftware.smack.packet.RosterPacket$ItemType[] $VALUES -> $VALUES
    org.jivesoftware.smack.packet.RosterPacket$ItemType[] values() -> values
    org.jivesoftware.smack.packet.RosterPacket$ItemType valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.packet.Session -> org.jivesoftware.smack.packet.Session:
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.StreamError -> org.jivesoftware.smack.packet.StreamError:
    java.lang.String code -> code
    java.lang.String getCode() -> getCode
    java.lang.String toString() -> toString
org.jivesoftware.smack.packet.XMPPError -> org.jivesoftware.smack.packet.XMPPError:
    int code -> code
    org.jivesoftware.smack.packet.XMPPError$Type type -> type
    java.lang.String condition -> condition
    java.lang.String message -> message
    java.util.List applicationExtensions -> applicationExtensions
    void init(org.jivesoftware.smack.packet.XMPPError$Condition) -> init
    java.lang.String getCondition() -> getCondition
    org.jivesoftware.smack.packet.XMPPError$Type getType() -> getType
    int getCode() -> getCode
    java.lang.String getMessage() -> getMessage
    java.lang.String toXML() -> toXML
    java.lang.String toString() -> toString
    java.util.List getExtensions() -> getExtensions
    org.jivesoftware.smack.packet.PacketExtension getExtension(java.lang.String,java.lang.String) -> getExtension
    void addExtension(org.jivesoftware.smack.packet.PacketExtension) -> addExtension
    void setExtension(java.util.List) -> setExtension
org.jivesoftware.smack.packet.XMPPError$Condition -> org.jivesoftware.smack.packet.XMPPError$Condition:
    org.jivesoftware.smack.packet.XMPPError$Condition interna_server_error -> interna_server_error
    org.jivesoftware.smack.packet.XMPPError$Condition forbidden -> forbidden
    org.jivesoftware.smack.packet.XMPPError$Condition bad_request -> bad_request
    org.jivesoftware.smack.packet.XMPPError$Condition conflict -> conflict
    org.jivesoftware.smack.packet.XMPPError$Condition feature_not_implemented -> feature_not_implemented
    org.jivesoftware.smack.packet.XMPPError$Condition gone -> gone
    org.jivesoftware.smack.packet.XMPPError$Condition item_not_found -> item_not_found
    org.jivesoftware.smack.packet.XMPPError$Condition jid_malformed -> jid_malformed
    org.jivesoftware.smack.packet.XMPPError$Condition no_acceptable -> no_acceptable
    org.jivesoftware.smack.packet.XMPPError$Condition not_allowed -> not_allowed
    org.jivesoftware.smack.packet.XMPPError$Condition not_authorized -> not_authorized
    org.jivesoftware.smack.packet.XMPPError$Condition payment_required -> payment_required
    org.jivesoftware.smack.packet.XMPPError$Condition recipient_unavailable -> recipient_unavailable
    org.jivesoftware.smack.packet.XMPPError$Condition redirect -> redirect
    org.jivesoftware.smack.packet.XMPPError$Condition registration_required -> registration_required
    org.jivesoftware.smack.packet.XMPPError$Condition remote_server_error -> remote_server_error
    org.jivesoftware.smack.packet.XMPPError$Condition remote_server_not_found -> remote_server_not_found
    org.jivesoftware.smack.packet.XMPPError$Condition remote_server_timeout -> remote_server_timeout
    org.jivesoftware.smack.packet.XMPPError$Condition resource_constraint -> resource_constraint
    org.jivesoftware.smack.packet.XMPPError$Condition service_unavailable -> service_unavailable
    org.jivesoftware.smack.packet.XMPPError$Condition subscription_required -> subscription_required
    org.jivesoftware.smack.packet.XMPPError$Condition undefined_condition -> undefined_condition
    org.jivesoftware.smack.packet.XMPPError$Condition unexpected_request -> unexpected_request
    org.jivesoftware.smack.packet.XMPPError$Condition request_timeout -> request_timeout
    java.lang.String value -> value
    java.lang.String toString() -> toString
    java.lang.String access$000(org.jivesoftware.smack.packet.XMPPError$Condition) -> access$000
org.jivesoftware.smack.packet.XMPPError$ErrorSpecification -> org.jivesoftware.smack.packet.XMPPError$ErrorSpecification:
    int code -> code
    org.jivesoftware.smack.packet.XMPPError$Type type -> type
    org.jivesoftware.smack.packet.XMPPError$Condition condition -> condition
    java.util.Map instances -> instances
    java.util.Map errorSpecifications() -> errorSpecifications
    org.jivesoftware.smack.packet.XMPPError$ErrorSpecification specFor(org.jivesoftware.smack.packet.XMPPError$Condition) -> specFor
    org.jivesoftware.smack.packet.XMPPError$Condition getCondition() -> getCondition
    org.jivesoftware.smack.packet.XMPPError$Type getType() -> getType
    int getCode() -> getCode
org.jivesoftware.smack.packet.XMPPError$Type -> org.jivesoftware.smack.packet.XMPPError$Type:
    org.jivesoftware.smack.packet.XMPPError$Type WAIT -> WAIT
    org.jivesoftware.smack.packet.XMPPError$Type CANCEL -> CANCEL
    org.jivesoftware.smack.packet.XMPPError$Type MODIFY -> MODIFY
    org.jivesoftware.smack.packet.XMPPError$Type AUTH -> AUTH
    org.jivesoftware.smack.packet.XMPPError$Type CONTINUE -> CONTINUE
    org.jivesoftware.smack.packet.XMPPError$Type[] $VALUES -> $VALUES
    org.jivesoftware.smack.packet.XMPPError$Type[] values() -> values
    org.jivesoftware.smack.packet.XMPPError$Type valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.provider.IQProvider -> org.jivesoftware.smack.provider.IQProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smack.provider.PacketExtensionProvider -> org.jivesoftware.smack.provider.PacketExtensionProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smack.provider.PrivacyProvider -> org.jivesoftware.smack.provider.PrivacyProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    void parseList(org.xmlpull.v1.XmlPullParser,org.jivesoftware.smack.packet.Privacy) -> parseList
    org.jivesoftware.smack.packet.PrivacyItem parseItem(org.xmlpull.v1.XmlPullParser) -> parseItem
org.jivesoftware.smack.provider.ProviderManager -> org.jivesoftware.smack.provider.ProviderManager:
    org.jivesoftware.smack.provider.ProviderManager instance -> instance
    java.util.Map extensionProviders -> extensionProviders
    java.util.Map iqProviders -> iqProviders
    org.jivesoftware.smack.provider.ProviderManager getInstance() -> getInstance
    void setInstance(org.jivesoftware.smack.provider.ProviderManager) -> setInstance
    void initialize() -> initialize
    java.lang.Object getIQProvider(java.lang.String,java.lang.String) -> getIQProvider
    java.util.Collection getIQProviders() -> getIQProviders
    void addIQProvider(java.lang.String,java.lang.String,java.lang.Object) -> addIQProvider
    void removeIQProvider(java.lang.String,java.lang.String) -> removeIQProvider
    java.lang.Object getExtensionProvider(java.lang.String,java.lang.String) -> getExtensionProvider
    void addExtensionProvider(java.lang.String,java.lang.String,java.lang.Object) -> addExtensionProvider
    void removeExtensionProvider(java.lang.String,java.lang.String) -> removeExtensionProvider
    java.util.Collection getExtensionProviders() -> getExtensionProviders
    java.lang.String getProviderKey(java.lang.String,java.lang.String) -> getProviderKey
    java.lang.ClassLoader[] getClassLoaders() -> getClassLoaders
org.jivesoftware.smack.proxy.DirectSocketFactory -> org.jivesoftware.smack.proxy.DirectSocketFactory:
    java.net.Socket createSocket(java.lang.String,int) -> createSocket
    java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int) -> createSocket
org.jivesoftware.smack.proxy.HTTPProxySocketFactory -> org.jivesoftware.smack.proxy.HTTPProxySocketFactory:
    org.jivesoftware.smack.proxy.ProxyInfo proxy -> proxy
    java.util.regex.Pattern RESPONSE_PATTERN -> RESPONSE_PATTERN
    java.net.Socket createSocket(java.lang.String,int) -> createSocket
    java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket httpProxifiedSocket(java.lang.String,int) -> httpProxifiedSocket
org.jivesoftware.smack.proxy.ProxyException -> org.jivesoftware.smack.proxy.ProxyException:
org.jivesoftware.smack.proxy.ProxyInfo -> org.jivesoftware.smack.proxy.ProxyInfo:
    java.lang.String proxyAddress -> proxyAddress
    int proxyPort -> proxyPort
    java.lang.String proxyUsername -> proxyUsername
    java.lang.String proxyPassword -> proxyPassword
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType proxyType -> proxyType
    org.jivesoftware.smack.proxy.ProxyInfo forHttpProxy(java.lang.String,int,java.lang.String,java.lang.String) -> forHttpProxy
    org.jivesoftware.smack.proxy.ProxyInfo forSocks4Proxy(java.lang.String,int,java.lang.String,java.lang.String) -> forSocks4Proxy
    org.jivesoftware.smack.proxy.ProxyInfo forSocks5Proxy(java.lang.String,int,java.lang.String,java.lang.String) -> forSocks5Proxy
    org.jivesoftware.smack.proxy.ProxyInfo forNoProxy() -> forNoProxy
    org.jivesoftware.smack.proxy.ProxyInfo forDefaultProxy() -> forDefaultProxy
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType getProxyType() -> getProxyType
    java.lang.String getProxyAddress() -> getProxyAddress
    int getProxyPort() -> getProxyPort
    java.lang.String getProxyUsername() -> getProxyUsername
    java.lang.String getProxyPassword() -> getProxyPassword
    javax.net.SocketFactory getSocketFactory() -> getSocketFactory
org.jivesoftware.smack.proxy.ProxyInfo$ProxyType -> org.jivesoftware.smack.proxy.ProxyInfo$ProxyType:
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType NONE -> NONE
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType HTTP -> HTTP
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType SOCKS4 -> SOCKS4
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType SOCKS5 -> SOCKS5
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType[] $VALUES -> $VALUES
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType[] values() -> values
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.proxy.Socks4ProxySocketFactory -> org.jivesoftware.smack.proxy.Socks4ProxySocketFactory:
    org.jivesoftware.smack.proxy.ProxyInfo proxy -> proxy
    java.net.Socket createSocket(java.lang.String,int) -> createSocket
    java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket socks4ProxifiedSocket(java.lang.String,int) -> socks4ProxifiedSocket
org.jivesoftware.smack.proxy.Socks5ProxySocketFactory -> org.jivesoftware.smack.proxy.Socks5ProxySocketFactory:
    org.jivesoftware.smack.proxy.ProxyInfo proxy -> proxy
    java.net.Socket createSocket(java.lang.String,int) -> createSocket
    java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket socks5ProxifiedSocket(java.lang.String,int) -> socks5ProxifiedSocket
    void fill(java.io.InputStream,byte[],int) -> fill
org.jivesoftware.smack.sasl.SASLAnonymous -> org.jivesoftware.smack.sasl.SASLAnonymous:
    java.lang.String getName() -> getName
    void authenticate(java.lang.String,java.lang.String,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> authenticate
    void authenticate(java.lang.String,java.lang.String,java.lang.String) -> authenticate
    void authenticate() -> authenticate
    void challengeReceived(java.lang.String) -> challengeReceived
org.jivesoftware.smack.sasl.SASLCramMD5Mechanism -> org.jivesoftware.smack.sasl.SASLCramMD5Mechanism:
    java.lang.String getName() -> getName
org.jivesoftware.smack.sasl.SASLDigestMD5Mechanism -> org.jivesoftware.smack.sasl.SASLDigestMD5Mechanism:
    java.lang.String getName() -> getName
org.jivesoftware.smack.sasl.SASLExternalMechanism -> org.jivesoftware.smack.sasl.SASLExternalMechanism:
    java.lang.String getName() -> getName
org.jivesoftware.smack.sasl.SASLFacebookConnect -> org.jivesoftware.smack.sasl.SASLFacebookConnect:
    java.lang.String sessionKey -> sessionKey
    java.lang.String sessionSecret -> sessionSecret
    java.lang.String apiKey -> apiKey
    void authenticate() -> authenticate
    void authenticate(java.lang.String,java.lang.String,java.lang.String) -> authenticate
    void authenticate(java.lang.String,java.lang.String,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> authenticate
    java.lang.String getName() -> getName
    void challengeReceived(java.lang.String) -> challengeReceived
    java.util.Map getQueryMap(java.lang.String) -> getQueryMap
    java.lang.String convertToHex(byte[]) -> convertToHex
    java.lang.String MD5(java.lang.String) -> MD5
org.jivesoftware.smack.sasl.SASLFacebookConnect$1 -> org.jivesoftware.smack.sasl.SASLFacebookConnect$1:
    java.lang.StringBuilder val$stanza -> val$stanza
    org.jivesoftware.smack.sasl.SASLFacebookConnect this$0 -> this$0
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.sasl.SASLFacebookConnect$2 -> org.jivesoftware.smack.sasl.SASLFacebookConnect$2:
    java.lang.StringBuilder val$stanza -> val$stanza
    org.jivesoftware.smack.sasl.SASLFacebookConnect this$0 -> this$0
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.sasl.SASLGSSAPIMechanism -> org.jivesoftware.smack.sasl.SASLGSSAPIMechanism:
    java.lang.String getName() -> getName
    void authenticate(java.lang.String,java.lang.String,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> authenticate
    void authenticate(java.lang.String,java.lang.String,java.lang.String) -> authenticate
org.jivesoftware.smack.sasl.SASLMechanism -> org.jivesoftware.smack.sasl.SASLMechanism:
    org.jivesoftware.smack.SASLAuthentication saslAuthentication -> saslAuthentication
    org.apache.harmony.javax.security.sasl.SaslClient sc -> sc
    java.lang.String authenticationId -> authenticationId
    java.lang.String password -> password
    java.lang.String hostname -> hostname
    void authenticate(java.lang.String,java.lang.String,java.lang.String) -> authenticate
    void authenticate(java.lang.String,java.lang.String,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> authenticate
    void authenticate() -> authenticate
    void challengeReceived(java.lang.String) -> challengeReceived
    java.lang.String getName() -> getName
    org.jivesoftware.smack.SASLAuthentication getSASLAuthentication() -> getSASLAuthentication
    void handle(org.apache.harmony.javax.security.auth.callback.Callback[]) -> handle
org.jivesoftware.smack.sasl.SASLMechanism$AuthMechanism -> org.jivesoftware.smack.sasl.SASLMechanism$AuthMechanism:
    java.lang.String name -> name
    java.lang.String authenticationText -> authenticationText
    org.jivesoftware.smack.sasl.SASLMechanism this$0 -> this$0
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.sasl.SASLMechanism$Challenge -> org.jivesoftware.smack.sasl.SASLMechanism$Challenge:
    java.lang.String data -> data
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.sasl.SASLMechanism$Failure -> org.jivesoftware.smack.sasl.SASLMechanism$Failure:
    java.lang.String condition -> condition
    java.lang.String getCondition() -> getCondition
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.sasl.SASLMechanism$Response -> org.jivesoftware.smack.sasl.SASLMechanism$Response:
    java.lang.String authenticationText -> authenticationText
    org.jivesoftware.smack.sasl.SASLMechanism this$0 -> this$0
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.sasl.SASLMechanism$Success -> org.jivesoftware.smack.sasl.SASLMechanism$Success:
    java.lang.String data -> data
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.sasl.SASLPlainMechanism -> org.jivesoftware.smack.sasl.SASLPlainMechanism:
    java.lang.String getName() -> getName
org.jivesoftware.smack.util.Base64 -> org.jivesoftware.smack.util.Base64:
    int NO_OPTIONS -> NO_OPTIONS
    int ENCODE -> ENCODE
    int DECODE -> DECODE
    int GZIP -> GZIP
    int DONT_BREAK_LINES -> DONT_BREAK_LINES
    int URL_SAFE -> URL_SAFE
    int ORDERED -> ORDERED
    int MAX_LINE_LENGTH -> MAX_LINE_LENGTH
    byte EQUALS_SIGN -> EQUALS_SIGN
    byte NEW_LINE -> NEW_LINE
    java.lang.String PREFERRED_ENCODING -> PREFERRED_ENCODING
    byte WHITE_SPACE_ENC -> WHITE_SPACE_ENC
    byte EQUALS_SIGN_ENC -> EQUALS_SIGN_ENC
    byte[] _STANDARD_ALPHABET -> _STANDARD_ALPHABET
    byte[] _STANDARD_DECODABET -> _STANDARD_DECODABET
    byte[] _URL_SAFE_ALPHABET -> _URL_SAFE_ALPHABET
    byte[] _URL_SAFE_DECODABET -> _URL_SAFE_DECODABET
    byte[] _ORDERED_ALPHABET -> _ORDERED_ALPHABET
    byte[] _ORDERED_DECODABET -> _ORDERED_DECODABET
    byte[] getAlphabet(int) -> getAlphabet
    byte[] getDecodabet(int) -> getDecodabet
    void main(java.lang.String[]) -> main
    void usage(java.lang.String) -> usage
    byte[] encode3to4(byte[],byte[],int,int) -> encode3to4
    byte[] encode3to4(byte[],int,int,byte[],int,int) -> encode3to4
    java.lang.String encodeObject(java.io.Serializable) -> encodeObject
    java.lang.String encodeObject(java.io.Serializable,int) -> encodeObject
    java.lang.String encodeBytes(byte[]) -> encodeBytes
    java.lang.String encodeBytes(byte[],int) -> encodeBytes
    java.lang.String encodeBytes(byte[],int,int) -> encodeBytes
    java.lang.String encodeBytes(byte[],int,int,int) -> encodeBytes
    int decode4to3(byte[],int,byte[],int,int) -> decode4to3
    byte[] decode(byte[],int,int,int) -> decode
    byte[] decode(java.lang.String) -> decode
    byte[] decode(java.lang.String,int) -> decode
    java.lang.Object decodeToObject(java.lang.String) -> decodeToObject
    boolean encodeToFile(byte[],java.lang.String) -> encodeToFile
    boolean decodeToFile(java.lang.String,java.lang.String) -> decodeToFile
    byte[] decodeFromFile(java.lang.String) -> decodeFromFile
    java.lang.String encodeFromFile(java.lang.String) -> encodeFromFile
    void encodeFileToFile(java.lang.String,java.lang.String) -> encodeFileToFile
    void decodeFileToFile(java.lang.String,java.lang.String) -> decodeFileToFile
    byte[] access$000(int) -> access$000
    byte[] access$100(int) -> access$100
    byte[] access$200(byte[],int,int,byte[],int,int) -> access$200
    int access$300(byte[],int,byte[],int,int) -> access$300
    byte[] access$400(byte[],byte[],int,int) -> access$400
org.jivesoftware.smack.util.Base64$InputStream -> org.jivesoftware.smack.util.Base64$InputStream:
    boolean encode -> encode
    int position -> position
    byte[] buffer -> buffer
    int bufferLength -> bufferLength
    int numSigBytes -> numSigBytes
    int lineLength -> lineLength
    boolean breakLines -> breakLines
    int options -> options
    byte[] alphabet -> alphabet
    byte[] decodabet -> decodabet
    int read() -> read
    int read(byte[],int,int) -> read
org.jivesoftware.smack.util.Base64$OutputStream -> org.jivesoftware.smack.util.Base64$OutputStream:
    boolean encode -> encode
    int position -> position
    byte[] buffer -> buffer
    int bufferLength -> bufferLength
    int lineLength -> lineLength
    boolean breakLines -> breakLines
    byte[] b4 -> b4
    boolean suspendEncoding -> suspendEncoding
    int options -> options
    byte[] alphabet -> alphabet
    byte[] decodabet -> decodabet
    void write(int) -> write
    void write(byte[],int,int) -> write
    void flushBase64() -> flushBase64
    void close() -> close
    void suspendEncoding() -> suspendEncoding
    void resumeEncoding() -> resumeEncoding
org.jivesoftware.smack.util.Cache -> org.jivesoftware.smack.util.Cache:
    java.util.Map map -> map
    org.jivesoftware.smack.util.Cache$LinkedList lastAccessedList -> lastAccessedList
    org.jivesoftware.smack.util.Cache$LinkedList ageList -> ageList
    int maxCacheSize -> maxCacheSize
    long maxLifetime -> maxLifetime
    long cacheHits -> cacheHits
    long cacheMisses -> cacheMisses
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object remove(java.lang.Object,boolean) -> remove
    void clear() -> clear
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Collection values() -> values
    boolean containsKey(java.lang.Object) -> containsKey
    void putAll(java.util.Map) -> putAll
    boolean containsValue(java.lang.Object) -> containsValue
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    long getCacheHits() -> getCacheHits
    long getCacheMisses() -> getCacheMisses
    int getMaxCacheSize() -> getMaxCacheSize
    void setMaxCacheSize(int) -> setMaxCacheSize
    long getMaxLifetime() -> getMaxLifetime
    void setMaxLifetime(long) -> setMaxLifetime
    void deleteExpiredEntries() -> deleteExpiredEntries
    void cullCache() -> cullCache
org.jivesoftware.smack.util.Cache$1 -> org.jivesoftware.smack.util.Cache$1:
    java.util.Collection values -> values
    org.jivesoftware.smack.util.Cache this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
org.jivesoftware.smack.util.Cache$1$1 -> org.jivesoftware.smack.util.Cache$1$1:
    java.util.Iterator it -> it
    org.jivesoftware.smack.util.Cache$1 this$1 -> this$1
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.jivesoftware.smack.util.Cache$2 -> org.jivesoftware.smack.util.Cache$2:
    java.util.Set set -> set
    org.jivesoftware.smack.util.Cache this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
    java.util.Set access$000(org.jivesoftware.smack.util.Cache$2) -> access$000
org.jivesoftware.smack.util.Cache$2$1 -> org.jivesoftware.smack.util.Cache$2$1:
    java.util.Iterator it -> it
    org.jivesoftware.smack.util.Cache$2 this$1 -> this$1
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
org.jivesoftware.smack.util.Cache$2$1$1 -> org.jivesoftware.smack.util.Cache$2$1$1:
    org.jivesoftware.smack.util.Cache$2$1 this$2 -> this$2
    java.lang.Object setValue(java.lang.Object) -> setValue
org.jivesoftware.smack.util.Cache$CacheObject -> org.jivesoftware.smack.util.Cache$CacheObject:
    java.lang.Object object -> object
    org.jivesoftware.smack.util.Cache$LinkedListNode lastAccessedListNode -> lastAccessedListNode
    org.jivesoftware.smack.util.Cache$LinkedListNode ageListNode -> ageListNode
    int readCount -> readCount
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jivesoftware.smack.util.Cache$LinkedList -> org.jivesoftware.smack.util.Cache$LinkedList:
    org.jivesoftware.smack.util.Cache$LinkedListNode head -> head
    org.jivesoftware.smack.util.Cache$LinkedListNode getFirst() -> getFirst
    org.jivesoftware.smack.util.Cache$LinkedListNode getLast() -> getLast
    org.jivesoftware.smack.util.Cache$LinkedListNode addFirst(org.jivesoftware.smack.util.Cache$LinkedListNode) -> addFirst
    org.jivesoftware.smack.util.Cache$LinkedListNode addFirst(java.lang.Object) -> addFirst
    org.jivesoftware.smack.util.Cache$LinkedListNode addLast(java.lang.Object) -> addLast
    void clear() -> clear
    java.lang.String toString() -> toString
org.jivesoftware.smack.util.Cache$LinkedListNode -> org.jivesoftware.smack.util.Cache$LinkedListNode:
    org.jivesoftware.smack.util.Cache$LinkedListNode previous -> previous
    org.jivesoftware.smack.util.Cache$LinkedListNode next -> next
    java.lang.Object object -> object
    long timestamp -> timestamp
    void remove() -> remove
    java.lang.String toString() -> toString
org.jivesoftware.smack.util.DNSUtil -> org.jivesoftware.smack.util.DNSUtil:
    java.util.Map ccache -> ccache
    java.util.Map scache -> scache
    org.jivesoftware.smack.util.DNSUtil$HostAddress resolveSRV(java.lang.String) -> resolveSRV
    org.jivesoftware.smack.util.DNSUtil$HostAddress resolveXMPPDomain(java.lang.String) -> resolveXMPPDomain
    org.jivesoftware.smack.util.DNSUtil$HostAddress resolveXMPPServerDomain(java.lang.String) -> resolveXMPPServerDomain
org.jivesoftware.smack.util.DNSUtil$1 -> org.jivesoftware.smack.util.DNSUtil$1:
org.jivesoftware.smack.util.DNSUtil$HostAddress -> org.jivesoftware.smack.util.DNSUtil$HostAddress:
    java.lang.String host -> host
    int port -> port
    java.lang.String getHost() -> getHost
    int getPort() -> getPort
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
org.jivesoftware.smack.util.ObservableReader -> org.jivesoftware.smack.util.ObservableReader:
    java.io.Reader wrappedReader -> wrappedReader
    java.util.List listeners -> listeners
    int read(char[],int,int) -> read
    void close() -> close
    int read() -> read
    int read(char[]) -> read
    long skip(long) -> skip
    boolean ready() -> ready
    boolean markSupported() -> markSupported
    void mark(int) -> mark
    void reset() -> reset
    void addReaderListener(org.jivesoftware.smack.util.ReaderListener) -> addReaderListener
    void removeReaderListener(org.jivesoftware.smack.util.ReaderListener) -> removeReaderListener
org.jivesoftware.smack.util.ObservableWriter -> org.jivesoftware.smack.util.ObservableWriter:
    java.io.Writer wrappedWriter -> wrappedWriter
    java.util.List listeners -> listeners
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
    void write(int) -> write
    void write(char[]) -> write
    void write(java.lang.String) -> write
    void write(java.lang.String,int,int) -> write
    void notifyListeners(java.lang.String) -> notifyListeners
    void addWriterListener(org.jivesoftware.smack.util.WriterListener) -> addWriterListener
    void removeWriterListener(org.jivesoftware.smack.util.WriterListener) -> removeWriterListener
org.jivesoftware.smack.util.PacketParserUtils -> org.jivesoftware.smack.util.PacketParserUtils:
    java.lang.String PROPERTIES_NAMESPACE -> PROPERTIES_NAMESPACE
    org.jivesoftware.smack.packet.Packet parseMessage(org.xmlpull.v1.XmlPullParser) -> parseMessage
    java.lang.String parseContent(org.xmlpull.v1.XmlPullParser) -> parseContent
    org.jivesoftware.smack.packet.Presence parsePresence(org.xmlpull.v1.XmlPullParser) -> parsePresence
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser,org.jivesoftware.smack.Connection) -> parseIQ
    org.jivesoftware.smack.packet.Authentication parseAuthentication(org.xmlpull.v1.XmlPullParser) -> parseAuthentication
    org.jivesoftware.smack.packet.RosterPacket parseRoster(org.xmlpull.v1.XmlPullParser) -> parseRoster
    org.jivesoftware.smack.packet.Registration parseRegistration(org.xmlpull.v1.XmlPullParser) -> parseRegistration
    org.jivesoftware.smack.packet.Bind parseResourceBinding(org.xmlpull.v1.XmlPullParser) -> parseResourceBinding
    java.util.Collection parseMechanisms(org.xmlpull.v1.XmlPullParser) -> parseMechanisms
    java.util.Collection parseCompressionMethods(org.xmlpull.v1.XmlPullParser) -> parseCompressionMethods
    java.util.Map parseProperties(org.xmlpull.v1.XmlPullParser) -> parseProperties
    org.jivesoftware.smack.sasl.SASLMechanism$Failure parseSASLFailure(org.xmlpull.v1.XmlPullParser) -> parseSASLFailure
    org.jivesoftware.smack.packet.StreamError parseStreamError(org.xmlpull.v1.XmlPullParser) -> parseStreamError
    org.jivesoftware.smack.packet.XMPPError parseError(org.xmlpull.v1.XmlPullParser) -> parseError
    org.jivesoftware.smack.packet.PacketExtension parsePacketExtension(java.lang.String,java.lang.String,org.xmlpull.v1.XmlPullParser) -> parsePacketExtension
    java.lang.String getLanguageAttribute(org.xmlpull.v1.XmlPullParser) -> getLanguageAttribute
    java.lang.Object parseWithIntrospection(java.lang.String,java.lang.Class,org.xmlpull.v1.XmlPullParser) -> parseWithIntrospection
    java.lang.Object decode(java.lang.Class,java.lang.String) -> decode
org.jivesoftware.smack.util.PacketParserUtils$1 -> org.jivesoftware.smack.util.PacketParserUtils$1:
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.util.PacketParserUtils$2 -> org.jivesoftware.smack.util.PacketParserUtils$2:
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.util.ReaderListener -> org.jivesoftware.smack.util.ReaderListener:
    void read(java.lang.String) -> read
org.jivesoftware.smack.util.StringUtils -> org.jivesoftware.smack.util.StringUtils:
    char[] QUOTE_ENCODE -> QUOTE_ENCODE
    char[] APOS_ENCODE -> APOS_ENCODE
    char[] AMP_ENCODE -> AMP_ENCODE
    char[] LT_ENCODE -> LT_ENCODE
    char[] GT_ENCODE -> GT_ENCODE
    java.security.MessageDigest digest -> digest
    java.util.Random randGen -> randGen
    char[] numbersAndLetters -> numbersAndLetters
    java.lang.String parseName(java.lang.String) -> parseName
    java.lang.String parseServer(java.lang.String) -> parseServer
    java.lang.String parseResource(java.lang.String) -> parseResource
    java.lang.String parseBareAddress(java.lang.String) -> parseBareAddress
    java.lang.String escapeNode(java.lang.String) -> escapeNode
    java.lang.String unescapeNode(java.lang.String) -> unescapeNode
    java.lang.String escapeForXML(java.lang.String) -> escapeForXML
    java.lang.String hash(java.lang.String) -> hash
    java.lang.String encodeHex(byte[]) -> encodeHex
    java.lang.String encodeBase64(java.lang.String) -> encodeBase64
    java.lang.String encodeBase64(byte[]) -> encodeBase64
    java.lang.String encodeBase64(byte[],boolean) -> encodeBase64
    java.lang.String encodeBase64(byte[],int,int,boolean) -> encodeBase64
    byte[] decodeBase64(java.lang.String) -> decodeBase64
    java.lang.String randomString(int) -> randomString
org.jivesoftware.smack.util.WriterListener -> org.jivesoftware.smack.util.WriterListener:
    void write(java.lang.String) -> write
org.jivesoftware.smack.util.collections.AbstractEmptyIterator -> org.jivesoftware.smack.util.collections.AbstractEmptyIterator:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
    void remove() -> remove
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    void reset() -> reset
org.jivesoftware.smack.util.collections.AbstractHashedMap -> org.jivesoftware.smack.util.collections.AbstractHashedMap:
    java.lang.String NO_NEXT_ENTRY -> NO_NEXT_ENTRY
    java.lang.String NO_PREVIOUS_ENTRY -> NO_PREVIOUS_ENTRY
    java.lang.String REMOVE_INVALID -> REMOVE_INVALID
    java.lang.String GETKEY_INVALID -> GETKEY_INVALID
    java.lang.String GETVALUE_INVALID -> GETVALUE_INVALID
    java.lang.String SETVALUE_INVALID -> SETVALUE_INVALID
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    int DEFAULT_THRESHOLD -> DEFAULT_THRESHOLD
    float DEFAULT_LOAD_FACTOR -> DEFAULT_LOAD_FACTOR
    int MAXIMUM_CAPACITY -> MAXIMUM_CAPACITY
    java.lang.Object NULL -> NULL
    float loadFactor -> loadFactor
    int size -> size
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry[] data -> data
    int threshold -> threshold
    int modCount -> modCount
    org.jivesoftware.smack.util.collections.AbstractHashedMap$EntrySet entrySet -> entrySet
    org.jivesoftware.smack.util.collections.AbstractHashedMap$KeySet keySet -> keySet
    org.jivesoftware.smack.util.collections.AbstractHashedMap$Values values -> values
    void init() -> init
    java.lang.Object get(java.lang.Object) -> get
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    int hash(java.lang.Object) -> hash
    boolean isEqualKey(java.lang.Object,java.lang.Object) -> isEqualKey
    boolean isEqualValue(java.lang.Object,java.lang.Object) -> isEqualValue
    int hashIndex(int,int) -> hashIndex
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry getEntry(java.lang.Object) -> getEntry
    void updateEntry(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry,java.lang.Object) -> updateEntry
    void reuseEntry(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry,int,int,java.lang.Object,java.lang.Object) -> reuseEntry
    void addMapping(int,int,java.lang.Object,java.lang.Object) -> addMapping
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry createEntry(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry,int,java.lang.Object,java.lang.Object) -> createEntry
    void addEntry(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry,int) -> addEntry
    void removeMapping(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry,int,org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry) -> removeMapping
    void removeEntry(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry,int,org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry) -> removeEntry
    void destroyEntry(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry) -> destroyEntry
    void checkCapacity() -> checkCapacity
    void ensureCapacity(int) -> ensureCapacity
    int calculateNewCapacity(int) -> calculateNewCapacity
    int calculateThreshold(int,float) -> calculateThreshold
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry entryNext(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry) -> entryNext
    int entryHashCode(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry) -> entryHashCode
    java.lang.Object entryKey(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry) -> entryKey
    java.lang.Object entryValue(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry) -> entryValue
    org.jivesoftware.smack.util.collections.MapIterator mapIterator() -> mapIterator
    java.util.Set entrySet() -> entrySet
    java.util.Iterator createEntrySetIterator() -> createEntrySetIterator
    java.util.Set keySet() -> keySet
    java.util.Iterator createKeySetIterator() -> createKeySetIterator
    java.util.Collection values() -> values
    java.util.Iterator createValuesIterator() -> createValuesIterator
    void doWriteObject(java.io.ObjectOutputStream) -> doWriteObject
    void doReadObject(java.io.ObjectInputStream) -> doReadObject
    java.lang.Object clone() -> clone
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.jivesoftware.smack.util.collections.AbstractHashedMap$EntrySet -> org.jivesoftware.smack.util.collections.AbstractHashedMap$EntrySet:
    org.jivesoftware.smack.util.collections.AbstractHashedMap parent -> parent
    int size() -> size
    void clear() -> clear
    boolean contains(java.util.Map$Entry) -> contains
    boolean remove(java.lang.Object) -> remove
    java.util.Iterator iterator() -> iterator
org.jivesoftware.smack.util.collections.AbstractHashedMap$EntrySetIterator -> org.jivesoftware.smack.util.collections.AbstractHashedMap$EntrySetIterator:
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry next() -> next
    java.lang.Object next() -> next
org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry -> org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry:
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry next -> next
    int hashCode -> hashCode
    java.lang.Object key -> key
    java.lang.Object value -> value
    java.lang.Object getKey() -> getKey
    void setKey(java.lang.Object) -> setKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object access$000(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry) -> access$000
    java.lang.Object access$002(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry,java.lang.Object) -> access$002
    java.lang.Object access$102(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry,java.lang.Object) -> access$102
    java.lang.Object access$100(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry) -> access$100
org.jivesoftware.smack.util.collections.AbstractHashedMap$HashIterator -> org.jivesoftware.smack.util.collections.AbstractHashedMap$HashIterator:
    org.jivesoftware.smack.util.collections.AbstractHashedMap parent -> parent
    int hashIndex -> hashIndex
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry last -> last
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry next -> next
    int expectedModCount -> expectedModCount
    boolean hasNext() -> hasNext
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry nextEntry() -> nextEntry
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry currentEntry() -> currentEntry
    void remove() -> remove
    java.lang.String toString() -> toString
org.jivesoftware.smack.util.collections.AbstractHashedMap$HashMapIterator -> org.jivesoftware.smack.util.collections.AbstractHashedMap$HashMapIterator:
    java.lang.Object next() -> next
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
org.jivesoftware.smack.util.collections.AbstractHashedMap$KeySet -> org.jivesoftware.smack.util.collections.AbstractHashedMap$KeySet:
    org.jivesoftware.smack.util.collections.AbstractHashedMap parent -> parent
    int size() -> size
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    java.util.Iterator iterator() -> iterator
org.jivesoftware.smack.util.collections.AbstractHashedMap$KeySetIterator -> org.jivesoftware.smack.util.collections.AbstractHashedMap$KeySetIterator:
    java.lang.Object next() -> next
org.jivesoftware.smack.util.collections.AbstractHashedMap$Values -> org.jivesoftware.smack.util.collections.AbstractHashedMap$Values:
    org.jivesoftware.smack.util.collections.AbstractHashedMap parent -> parent
    int size() -> size
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
org.jivesoftware.smack.util.collections.AbstractHashedMap$ValuesIterator -> org.jivesoftware.smack.util.collections.AbstractHashedMap$ValuesIterator:
    java.lang.Object next() -> next
org.jivesoftware.smack.util.collections.AbstractKeyValue -> org.jivesoftware.smack.util.collections.AbstractKeyValue:
    java.lang.Object key -> key
    java.lang.Object value -> value
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.String toString() -> toString
org.jivesoftware.smack.util.collections.AbstractMapEntry -> org.jivesoftware.smack.util.collections.AbstractMapEntry:
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jivesoftware.smack.util.collections.AbstractReferenceMap -> org.jivesoftware.smack.util.collections.AbstractReferenceMap:
    int HARD -> HARD
    int SOFT -> SOFT
    int WEAK -> WEAK
    int keyType -> keyType
    int valueType -> valueType
    boolean purgeValues -> purgeValues
    java.lang.ref.ReferenceQueue queue -> queue
    void init() -> init
    void verify(java.lang.String,int) -> verify
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    org.jivesoftware.smack.util.collections.MapIterator mapIterator() -> mapIterator
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    void purgeBeforeRead() -> purgeBeforeRead
    void purgeBeforeWrite() -> purgeBeforeWrite
    void purge() -> purge
    void purge(java.lang.ref.Reference) -> purge
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry getEntry(java.lang.Object) -> getEntry
    int hashEntry(java.lang.Object,java.lang.Object) -> hashEntry
    boolean isEqualKey(java.lang.Object,java.lang.Object) -> isEqualKey
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry createEntry(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry,int,java.lang.Object,java.lang.Object) -> createEntry
    java.util.Iterator createEntrySetIterator() -> createEntrySetIterator
    java.util.Iterator createKeySetIterator() -> createKeySetIterator
    java.util.Iterator createValuesIterator() -> createValuesIterator
    void doWriteObject(java.io.ObjectOutputStream) -> doWriteObject
    void doReadObject(java.io.ObjectInputStream) -> doReadObject
    java.lang.ref.ReferenceQueue access$000(org.jivesoftware.smack.util.collections.AbstractReferenceMap) -> access$000
org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntry -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntry:
    org.jivesoftware.smack.util.collections.AbstractReferenceMap parent -> parent
    java.lang.ref.Reference refKey -> refKey
    java.lang.ref.Reference refValue -> refValue
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.ref.Reference toReference(int,java.lang.Object,int) -> toReference
    boolean purge(java.lang.ref.Reference) -> purge
    org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntry next() -> next
org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntrySet -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntrySet:
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntrySetIterator -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntrySetIterator:
    org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntry next() -> next
    java.lang.Object next() -> next
org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceIteratorBase -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceIteratorBase:
    org.jivesoftware.smack.util.collections.AbstractReferenceMap parent -> parent
    int index -> index
    org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntry entry -> entry
    org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntry previous -> previous
    java.lang.Object nextKey -> nextKey
    java.lang.Object nextValue -> nextValue
    java.lang.Object currentKey -> currentKey
    java.lang.Object currentValue -> currentValue
    int expectedModCount -> expectedModCount
    boolean hasNext() -> hasNext
    void checkMod() -> checkMod
    boolean nextNull() -> nextNull
    org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntry nextEntry() -> nextEntry
    org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntry currentEntry() -> currentEntry
    org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntry superNext() -> superNext
    void remove() -> remove
org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceKeySet -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceKeySet:
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceKeySetIterator -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceKeySetIterator:
    java.lang.Object next() -> next
org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceMapIterator -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceMapIterator:
    java.lang.Object next() -> next
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceValues -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceValues:
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceValuesIterator -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceValuesIterator:
    java.lang.Object next() -> next
org.jivesoftware.smack.util.collections.AbstractReferenceMap$SoftRef -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$SoftRef:
    int hash -> hash
    int hashCode() -> hashCode
org.jivesoftware.smack.util.collections.AbstractReferenceMap$WeakRef -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$WeakRef:
    int hash -> hash
    int hashCode() -> hashCode
org.jivesoftware.smack.util.collections.DefaultMapEntry -> org.jivesoftware.smack.util.collections.DefaultMapEntry:
org.jivesoftware.smack.util.collections.EmptyIterator -> org.jivesoftware.smack.util.collections.EmptyIterator:
    org.jivesoftware.smack.util.collections.ResettableIterator RESETTABLE_INSTANCE -> RESETTABLE_INSTANCE
    java.util.Iterator INSTANCE -> INSTANCE
    java.util.Iterator getInstance() -> getInstance
    void reset() -> reset
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
    void remove() -> remove
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
    int previousIndex() -> previousIndex
    int nextIndex() -> nextIndex
    java.lang.Object previous() -> previous
    boolean hasPrevious() -> hasPrevious
    java.lang.Object next() -> next
    boolean hasNext() -> hasNext
org.jivesoftware.smack.util.collections.EmptyMapIterator -> org.jivesoftware.smack.util.collections.EmptyMapIterator:
    org.jivesoftware.smack.util.collections.MapIterator INSTANCE -> INSTANCE
    void reset() -> reset
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
    void remove() -> remove
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
    int previousIndex() -> previousIndex
    int nextIndex() -> nextIndex
    java.lang.Object previous() -> previous
    boolean hasPrevious() -> hasPrevious
    java.lang.Object next() -> next
    boolean hasNext() -> hasNext
org.jivesoftware.smack.util.collections.IterableMap -> org.jivesoftware.smack.util.collections.IterableMap:
    org.jivesoftware.smack.util.collections.MapIterator mapIterator() -> mapIterator
org.jivesoftware.smack.util.collections.KeyValue -> org.jivesoftware.smack.util.collections.KeyValue:
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
org.jivesoftware.smack.util.collections.MapIterator -> org.jivesoftware.smack.util.collections.MapIterator:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    void remove() -> remove
    java.lang.Object setValue(java.lang.Object) -> setValue
org.jivesoftware.smack.util.collections.ReferenceMap -> org.jivesoftware.smack.util.collections.ReferenceMap:
    long serialVersionUID -> serialVersionUID
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
org.jivesoftware.smack.util.collections.ResettableIterator -> org.jivesoftware.smack.util.collections.ResettableIterator:
    void reset() -> reset
org.jivesoftware.smackx.CapsVerListener -> org.jivesoftware.smackx.CapsVerListener:
    void capsVerUpdated(java.lang.String) -> capsVerUpdated
org.jivesoftware.smackx.ChatState -> org.jivesoftware.smackx.ChatState:
    org.jivesoftware.smackx.ChatState active -> active
    org.jivesoftware.smackx.ChatState composing -> composing
    org.jivesoftware.smackx.ChatState paused -> paused
    org.jivesoftware.smackx.ChatState inactive -> inactive
    org.jivesoftware.smackx.ChatState gone -> gone
    org.jivesoftware.smackx.ChatState[] $VALUES -> $VALUES
    org.jivesoftware.smackx.ChatState[] values() -> values
    org.jivesoftware.smackx.ChatState valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.ChatStateListener -> org.jivesoftware.smackx.ChatStateListener:
    void stateChanged(org.jivesoftware.smack.Chat,org.jivesoftware.smackx.ChatState) -> stateChanged
org.jivesoftware.smackx.ChatStateManager -> org.jivesoftware.smackx.ChatStateManager:
    java.util.Map managers -> managers
    org.jivesoftware.smack.filter.PacketFilter filter -> filter
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smackx.ChatStateManager$OutgoingMessageInterceptor outgoingInterceptor -> outgoingInterceptor
    org.jivesoftware.smackx.ChatStateManager$IncomingMessageInterceptor incomingInterceptor -> incomingInterceptor
    java.util.Map chatStates -> chatStates
    org.jivesoftware.smackx.ChatStateManager getInstance(org.jivesoftware.smack.Connection) -> getInstance
    void init() -> init
    void setCurrentState(org.jivesoftware.smackx.ChatState,org.jivesoftware.smack.Chat) -> setCurrentState
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean updateChatState(org.jivesoftware.smack.Chat,org.jivesoftware.smackx.ChatState) -> updateChatState
    void fireNewChatState(org.jivesoftware.smack.Chat,org.jivesoftware.smackx.ChatState) -> fireNewChatState
    org.jivesoftware.smack.Connection access$200(org.jivesoftware.smackx.ChatStateManager) -> access$200
    boolean access$300(org.jivesoftware.smackx.ChatStateManager,org.jivesoftware.smack.Chat,org.jivesoftware.smackx.ChatState) -> access$300
    void access$400(org.jivesoftware.smackx.ChatStateManager,org.jivesoftware.smack.Chat,org.jivesoftware.smackx.ChatState) -> access$400
org.jivesoftware.smackx.ChatStateManager$1 -> org.jivesoftware.smackx.ChatStateManager$1:
org.jivesoftware.smackx.ChatStateManager$IncomingMessageInterceptor -> org.jivesoftware.smackx.ChatStateManager$IncomingMessageInterceptor:
    org.jivesoftware.smackx.ChatStateManager this$0 -> this$0
    void chatCreated(org.jivesoftware.smack.Chat,boolean) -> chatCreated
    void processMessage(org.jivesoftware.smack.Chat,org.jivesoftware.smack.packet.Message) -> processMessage
org.jivesoftware.smackx.ChatStateManager$OutgoingMessageInterceptor -> org.jivesoftware.smackx.ChatStateManager$OutgoingMessageInterceptor:
    org.jivesoftware.smackx.ChatStateManager this$0 -> this$0
    void interceptPacket(org.jivesoftware.smack.packet.Packet) -> interceptPacket
org.jivesoftware.smackx.DefaultMessageEventRequestListener -> org.jivesoftware.smackx.DefaultMessageEventRequestListener:
    void deliveredNotificationRequested(java.lang.String,java.lang.String,org.jivesoftware.smackx.MessageEventManager) -> deliveredNotificationRequested
    void displayedNotificationRequested(java.lang.String,java.lang.String,org.jivesoftware.smackx.MessageEventManager) -> displayedNotificationRequested
    void composingNotificationRequested(java.lang.String,java.lang.String,org.jivesoftware.smackx.MessageEventManager) -> composingNotificationRequested
    void offlineNotificationRequested(java.lang.String,java.lang.String,org.jivesoftware.smackx.MessageEventManager) -> offlineNotificationRequested
org.jivesoftware.smackx.EntityCapsManager -> org.jivesoftware.smackx.EntityCapsManager:
    java.lang.String HASH_METHOD -> HASH_METHOD
    java.lang.String HASH_METHOD_CAPS -> HASH_METHOD_CAPS
    java.lang.String entityNode -> entityNode
    java.util.Map caps -> caps
    java.util.Map userCaps -> userCaps
    java.util.Set capsVerListeners -> capsVerListeners
    java.lang.String currentCapsVersion -> currentCapsVersion
    void addDiscoverInfoByNode(java.lang.String,org.jivesoftware.smackx.packet.DiscoverInfo) -> addDiscoverInfoByNode
    void addUserCapsNode(java.lang.String,java.lang.String) -> addUserCapsNode
    void removeUserCapsNode(java.lang.String) -> removeUserCapsNode
    java.lang.String getNodeVersionByUser(java.lang.String) -> getNodeVersionByUser
    org.jivesoftware.smackx.packet.DiscoverInfo getDiscoverInfoByUser(java.lang.String) -> getDiscoverInfoByUser
    java.lang.String getCapsVersion() -> getCapsVersion
    java.lang.String getNode() -> getNode
    void setNode(java.lang.String) -> setNode
    org.jivesoftware.smackx.packet.DiscoverInfo getDiscoverInfoByNode(java.lang.String) -> getDiscoverInfoByNode
    void cleanupDicsoverInfo(org.jivesoftware.smackx.packet.DiscoverInfo) -> cleanupDicsoverInfo
    void addPacketListener(org.jivesoftware.smack.Connection) -> addPacketListener
    void addCapsVerListener(org.jivesoftware.smackx.CapsVerListener) -> addCapsVerListener
    void removeCapsVerListener(org.jivesoftware.smackx.CapsVerListener) -> removeCapsVerListener
    void notifyCapsVerListeners() -> notifyCapsVerListeners
    java.lang.String capsToHash(java.lang.String) -> capsToHash
    java.lang.String formFieldValuesToCaps(java.util.Iterator) -> formFieldValuesToCaps
    void calculateEntityCapsVersion(org.jivesoftware.smackx.packet.DiscoverInfo,java.lang.String,java.lang.String,java.util.List,org.jivesoftware.smackx.packet.DataForm) -> calculateEntityCapsVersion
    void setCurrentCapsVersion(org.jivesoftware.smackx.packet.DiscoverInfo,java.lang.String) -> setCurrentCapsVersion
org.jivesoftware.smackx.EntityCapsManager$1 -> org.jivesoftware.smackx.EntityCapsManager$1:
    org.jivesoftware.smackx.EntityCapsManager this$0 -> this$0
    int compare(org.jivesoftware.smackx.FormField,org.jivesoftware.smackx.FormField) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
org.jivesoftware.smackx.EntityCapsManager$CapsPacketListener -> org.jivesoftware.smackx.EntityCapsManager$CapsPacketListener:
    org.jivesoftware.smackx.EntityCapsManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.Form -> org.jivesoftware.smackx.Form:
    java.lang.String TYPE_FORM -> TYPE_FORM
    java.lang.String TYPE_SUBMIT -> TYPE_SUBMIT
    java.lang.String TYPE_CANCEL -> TYPE_CANCEL
    java.lang.String TYPE_RESULT -> TYPE_RESULT
    org.jivesoftware.smackx.packet.DataForm dataForm -> dataForm
    org.jivesoftware.smackx.Form getFormFrom(org.jivesoftware.smack.packet.Packet) -> getFormFrom
    void addField(org.jivesoftware.smackx.FormField) -> addField
    void setAnswer(java.lang.String,java.lang.String) -> setAnswer
    void setAnswer(java.lang.String,int) -> setAnswer
    void setAnswer(java.lang.String,long) -> setAnswer
    void setAnswer(java.lang.String,float) -> setAnswer
    void setAnswer(java.lang.String,double) -> setAnswer
    void setAnswer(java.lang.String,boolean) -> setAnswer
    void setAnswer(org.jivesoftware.smackx.FormField,java.lang.Object) -> setAnswer
    void setAnswer(java.lang.String,java.util.List) -> setAnswer
    void setDefaultAnswer(java.lang.String) -> setDefaultAnswer
    java.util.Iterator getFields() -> getFields
    org.jivesoftware.smackx.FormField getField(java.lang.String) -> getField
    java.lang.String getInstructions() -> getInstructions
    java.lang.String getTitle() -> getTitle
    java.lang.String getType() -> getType
    void setInstructions(java.lang.String) -> setInstructions
    void setTitle(java.lang.String) -> setTitle
    org.jivesoftware.smackx.packet.DataForm getDataFormToSend() -> getDataFormToSend
    boolean isFormType() -> isFormType
    boolean isSubmitType() -> isSubmitType
    org.jivesoftware.smackx.Form createAnswerForm() -> createAnswerForm
org.jivesoftware.smackx.FormField -> org.jivesoftware.smackx.FormField:
    java.lang.String TYPE_BOOLEAN -> TYPE_BOOLEAN
    java.lang.String TYPE_FIXED -> TYPE_FIXED
    java.lang.String TYPE_HIDDEN -> TYPE_HIDDEN
    java.lang.String TYPE_JID_MULTI -> TYPE_JID_MULTI
    java.lang.String TYPE_JID_SINGLE -> TYPE_JID_SINGLE
    java.lang.String TYPE_LIST_MULTI -> TYPE_LIST_MULTI
    java.lang.String TYPE_LIST_SINGLE -> TYPE_LIST_SINGLE
    java.lang.String TYPE_TEXT_MULTI -> TYPE_TEXT_MULTI
    java.lang.String TYPE_TEXT_PRIVATE -> TYPE_TEXT_PRIVATE
    java.lang.String TYPE_TEXT_SINGLE -> TYPE_TEXT_SINGLE
    java.lang.String description -> description
    boolean required -> required
    java.lang.String label -> label
    java.lang.String variable -> variable
    java.lang.String type -> type
    java.util.List options -> options
    java.util.List values -> values
    java.lang.String getDescription() -> getDescription
    java.lang.String getLabel() -> getLabel
    java.util.Iterator getOptions() -> getOptions
    boolean isRequired() -> isRequired
    java.lang.String getType() -> getType
    java.util.Iterator getValues() -> getValues
    java.lang.String getVariable() -> getVariable
    void setDescription(java.lang.String) -> setDescription
    void setLabel(java.lang.String) -> setLabel
    void setRequired(boolean) -> setRequired
    void setType(java.lang.String) -> setType
    void addValue(java.lang.String) -> addValue
    void addValues(java.util.List) -> addValues
    void resetValues() -> resetValues
    void addOption(org.jivesoftware.smackx.FormField$Option) -> addOption
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.FormField$Option -> org.jivesoftware.smackx.FormField$Option:
    java.lang.String label -> label
    java.lang.String value -> value
    java.lang.String getLabel() -> getLabel
    java.lang.String getValue() -> getValue
    java.lang.String toString() -> toString
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.Gateway -> org.jivesoftware.smackx.Gateway:
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smackx.ServiceDiscoveryManager sdManager -> sdManager
    org.jivesoftware.smack.Roster roster -> roster
    java.lang.String entityJID -> entityJID
    org.jivesoftware.smack.packet.Registration registerInfo -> registerInfo
    org.jivesoftware.smackx.packet.DiscoverInfo$Identity identity -> identity
    org.jivesoftware.smackx.packet.DiscoverInfo info -> info
    void discoverInfo() -> discoverInfo
    org.jivesoftware.smackx.packet.DiscoverInfo$Identity getIdentity() -> getIdentity
    org.jivesoftware.smack.packet.Registration getRegisterInfo() -> getRegisterInfo
    void refreshRegisterInfo() -> refreshRegisterInfo
    boolean canRegister() -> canRegister
    java.util.List getRequiredFields() -> getRequiredFields
    java.lang.String getName() -> getName
    java.lang.String getType() -> getType
    boolean isRegistered() -> isRegistered
    java.lang.String getField(java.lang.String) -> getField
    java.util.List getFieldNames() -> getFieldNames
    java.lang.String getUsername() -> getUsername
    java.lang.String getPassword() -> getPassword
    java.lang.String getInstructions() -> getInstructions
    void register(java.lang.String,java.lang.String,java.util.Map) -> register
    void register(java.lang.String,java.lang.String) -> register
    void unregister() -> unregister
    void login() -> login
    void login(org.jivesoftware.smack.packet.Presence) -> login
    void logout() -> logout
    java.lang.String access$100(org.jivesoftware.smackx.Gateway) -> access$100
    org.jivesoftware.smack.Roster access$200(org.jivesoftware.smackx.Gateway) -> access$200
    org.jivesoftware.smack.Connection access$300(org.jivesoftware.smackx.Gateway) -> access$300
org.jivesoftware.smackx.Gateway$1 -> org.jivesoftware.smackx.Gateway$1:
org.jivesoftware.smackx.Gateway$GatewayPresenceListener -> org.jivesoftware.smackx.Gateway$GatewayPresenceListener:
    org.jivesoftware.smackx.Gateway this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.GatewayManager -> org.jivesoftware.smackx.GatewayManager:
    java.util.Map instances -> instances
    org.jivesoftware.smackx.ServiceDiscoveryManager sdManager -> sdManager
    java.util.Map localGateways -> localGateways
    java.util.Map nonLocalGateways -> nonLocalGateways
    java.util.Map gateways -> gateways
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smack.Roster roster -> roster
    void loadLocalGateways() -> loadLocalGateways
    void discoverGateway(java.lang.String) -> discoverGateway
    void loadNonLocalGateways() -> loadNonLocalGateways
    org.jivesoftware.smackx.GatewayManager getInstanceFor(org.jivesoftware.smack.Connection) -> getInstanceFor
    java.util.List getLocalGateways() -> getLocalGateways
    java.util.List getNonLocalGateways() -> getNonLocalGateways
    void refreshNonLocalGateways() -> refreshNonLocalGateways
    org.jivesoftware.smackx.Gateway getGateway(java.lang.String) -> getGateway
org.jivesoftware.smackx.GroupChatInvitation -> org.jivesoftware.smackx.GroupChatInvitation:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String roomAddress -> roomAddress
    java.lang.String getRoomAddress() -> getRoomAddress
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.GroupChatInvitation$Provider -> org.jivesoftware.smackx.GroupChatInvitation$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.LastActivityManager -> org.jivesoftware.smackx.LastActivityManager:
    long lastMessageSent -> lastMessageSent
    org.jivesoftware.smack.Connection connection -> connection
    void resetIdleTime() -> resetIdleTime
    long getIdleTime() -> getIdleTime
    org.jivesoftware.smackx.packet.LastActivity getLastActivity(org.jivesoftware.smack.Connection,java.lang.String) -> getLastActivity
    void access$100(org.jivesoftware.smackx.LastActivityManager) -> access$100
    long access$200(org.jivesoftware.smackx.LastActivityManager) -> access$200
    org.jivesoftware.smack.Connection access$300(org.jivesoftware.smackx.LastActivityManager) -> access$300
org.jivesoftware.smackx.LastActivityManager$1 -> org.jivesoftware.smackx.LastActivityManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smackx.LastActivityManager$2 -> org.jivesoftware.smackx.LastActivityManager$2:
    org.jivesoftware.smackx.LastActivityManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.LastActivityManager$3 -> org.jivesoftware.smackx.LastActivityManager$3:
    org.jivesoftware.smackx.LastActivityManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.MessageEventManager -> org.jivesoftware.smackx.MessageEventManager:
    java.util.List messageEventNotificationListeners -> messageEventNotificationListeners
    java.util.List messageEventRequestListeners -> messageEventRequestListeners
    org.jivesoftware.smack.Connection con -> con
    org.jivesoftware.smack.filter.PacketFilter packetFilter -> packetFilter
    org.jivesoftware.smack.PacketListener packetListener -> packetListener
    void addNotificationsRequests(org.jivesoftware.smack.packet.Message,boolean,boolean,boolean,boolean) -> addNotificationsRequests
    void addMessageEventRequestListener(org.jivesoftware.smackx.MessageEventRequestListener) -> addMessageEventRequestListener
    void removeMessageEventRequestListener(org.jivesoftware.smackx.MessageEventRequestListener) -> removeMessageEventRequestListener
    void addMessageEventNotificationListener(org.jivesoftware.smackx.MessageEventNotificationListener) -> addMessageEventNotificationListener
    void removeMessageEventNotificationListener(org.jivesoftware.smackx.MessageEventNotificationListener) -> removeMessageEventNotificationListener
    void fireMessageEventRequestListeners(java.lang.String,java.lang.String,java.lang.String) -> fireMessageEventRequestListeners
    void fireMessageEventNotificationListeners(java.lang.String,java.lang.String,java.lang.String) -> fireMessageEventNotificationListeners
    void init() -> init
    void sendDeliveredNotification(java.lang.String,java.lang.String) -> sendDeliveredNotification
    void sendDisplayedNotification(java.lang.String,java.lang.String) -> sendDisplayedNotification
    void sendComposingNotification(java.lang.String,java.lang.String) -> sendComposingNotification
    void sendCancelledNotification(java.lang.String,java.lang.String) -> sendCancelledNotification
    void destroy() -> destroy
    void finalize() -> finalize
    void access$000(org.jivesoftware.smackx.MessageEventManager,java.lang.String,java.lang.String,java.lang.String) -> access$000
    void access$100(org.jivesoftware.smackx.MessageEventManager,java.lang.String,java.lang.String,java.lang.String) -> access$100
org.jivesoftware.smackx.MessageEventManager$1 -> org.jivesoftware.smackx.MessageEventManager$1:
    org.jivesoftware.smackx.MessageEventManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.MessageEventNotificationListener -> org.jivesoftware.smackx.MessageEventNotificationListener:
    void deliveredNotification(java.lang.String,java.lang.String) -> deliveredNotification
    void displayedNotification(java.lang.String,java.lang.String) -> displayedNotification
    void composingNotification(java.lang.String,java.lang.String) -> composingNotification
    void offlineNotification(java.lang.String,java.lang.String) -> offlineNotification
    void cancelledNotification(java.lang.String,java.lang.String) -> cancelledNotification
org.jivesoftware.smackx.MessageEventRequestListener -> org.jivesoftware.smackx.MessageEventRequestListener:
    void deliveredNotificationRequested(java.lang.String,java.lang.String,org.jivesoftware.smackx.MessageEventManager) -> deliveredNotificationRequested
    void displayedNotificationRequested(java.lang.String,java.lang.String,org.jivesoftware.smackx.MessageEventManager) -> displayedNotificationRequested
    void composingNotificationRequested(java.lang.String,java.lang.String,org.jivesoftware.smackx.MessageEventManager) -> composingNotificationRequested
    void offlineNotificationRequested(java.lang.String,java.lang.String,org.jivesoftware.smackx.MessageEventManager) -> offlineNotificationRequested
org.jivesoftware.smackx.MultipleRecipientInfo -> org.jivesoftware.smackx.MultipleRecipientInfo:
    org.jivesoftware.smackx.packet.MultipleAddresses extension -> extension
    java.util.List getTOAddresses() -> getTOAddresses
    java.util.List getCCAddresses() -> getCCAddresses
    java.lang.String getReplyRoom() -> getReplyRoom
    boolean shouldNotReply() -> shouldNotReply
    org.jivesoftware.smackx.packet.MultipleAddresses$Address getReplyAddress() -> getReplyAddress
org.jivesoftware.smackx.MultipleRecipientManager -> org.jivesoftware.smackx.MultipleRecipientManager:
    org.jivesoftware.smack.util.Cache services -> services
    void send(org.jivesoftware.smack.Connection,org.jivesoftware.smack.packet.Packet,java.util.List,java.util.List,java.util.List) -> send
    void send(org.jivesoftware.smack.Connection,org.jivesoftware.smack.packet.Packet,java.util.List,java.util.List,java.util.List,java.lang.String,java.lang.String,boolean) -> send
    void reply(org.jivesoftware.smack.Connection,org.jivesoftware.smack.packet.Message,org.jivesoftware.smack.packet.Message) -> reply
    org.jivesoftware.smackx.MultipleRecipientInfo getMultipleRecipientInfo(org.jivesoftware.smack.packet.Packet) -> getMultipleRecipientInfo
    void sendToIndividualRecipients(org.jivesoftware.smack.Connection,org.jivesoftware.smack.packet.Packet,java.util.List,java.util.List,java.util.List) -> sendToIndividualRecipients
    void sendThroughService(org.jivesoftware.smack.Connection,org.jivesoftware.smack.packet.Packet,java.util.List,java.util.List,java.util.List,java.lang.String,java.lang.String,boolean,java.lang.String) -> sendThroughService
    java.lang.String getMultipleRecipienServiceAddress(org.jivesoftware.smack.Connection) -> getMultipleRecipienServiceAddress
org.jivesoftware.smackx.MultipleRecipientManager$PacketCopy -> org.jivesoftware.smackx.MultipleRecipientManager$PacketCopy:
    java.lang.String text -> text
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.NodeInformationProvider -> org.jivesoftware.smackx.NodeInformationProvider:
    java.util.List getNodeItems() -> getNodeItems
    java.util.List getNodeFeatures() -> getNodeFeatures
    java.util.List getNodeIdentities() -> getNodeIdentities
org.jivesoftware.smackx.OfflineMessageHeader -> org.jivesoftware.smackx.OfflineMessageHeader:
    java.lang.String user -> user
    java.lang.String jid -> jid
    java.lang.String stamp -> stamp
    java.lang.String getUser() -> getUser
    java.lang.String getJid() -> getJid
    java.lang.String getStamp() -> getStamp
org.jivesoftware.smackx.OfflineMessageManager -> org.jivesoftware.smackx.OfflineMessageManager:
    java.lang.String namespace -> namespace
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smack.filter.PacketFilter packetFilter -> packetFilter
    boolean supportsFlexibleRetrieval() -> supportsFlexibleRetrieval
    int getMessageCount() -> getMessageCount
    java.util.Iterator getHeaders() -> getHeaders
    java.util.Iterator getMessages(java.util.List) -> getMessages
    java.util.Iterator getMessages() -> getMessages
    void deleteMessages(java.util.List) -> deleteMessages
    void deleteMessages() -> deleteMessages
org.jivesoftware.smackx.OfflineMessageManager$1 -> org.jivesoftware.smackx.OfflineMessageManager$1:
    java.util.List val$nodes -> val$nodes
    org.jivesoftware.smackx.OfflineMessageManager this$0 -> this$0
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smackx.PEPListener -> org.jivesoftware.smackx.PEPListener:
    void eventReceived(java.lang.String,org.jivesoftware.smackx.packet.PEPEvent) -> eventReceived
org.jivesoftware.smackx.PEPManager -> org.jivesoftware.smackx.PEPManager:
    java.util.List pepListeners -> pepListeners
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smack.filter.PacketFilter packetFilter -> packetFilter
    org.jivesoftware.smack.PacketListener packetListener -> packetListener
    void addPEPListener(org.jivesoftware.smackx.PEPListener) -> addPEPListener
    void removePEPListener(org.jivesoftware.smackx.PEPListener) -> removePEPListener
    void publish(org.jivesoftware.smackx.packet.PEPItem) -> publish
    void firePEPListeners(java.lang.String,org.jivesoftware.smackx.packet.PEPEvent) -> firePEPListeners
    void init() -> init
    void destroy() -> destroy
    void finalize() -> finalize
    void access$000(org.jivesoftware.smackx.PEPManager,java.lang.String,org.jivesoftware.smackx.packet.PEPEvent) -> access$000
org.jivesoftware.smackx.PEPManager$1 -> org.jivesoftware.smackx.PEPManager$1:
    org.jivesoftware.smackx.PEPManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.PrivateDataManager -> org.jivesoftware.smackx.PrivateDataManager:
    java.util.Map privateDataProviders -> privateDataProviders
    org.jivesoftware.smack.Connection connection -> connection
    java.lang.String user -> user
    org.jivesoftware.smackx.provider.PrivateDataProvider getPrivateDataProvider(java.lang.String,java.lang.String) -> getPrivateDataProvider
    void addPrivateDataProvider(java.lang.String,java.lang.String,org.jivesoftware.smackx.provider.PrivateDataProvider) -> addPrivateDataProvider
    void removePrivateDataProvider(java.lang.String,java.lang.String) -> removePrivateDataProvider
    org.jivesoftware.smackx.packet.PrivateData getPrivateData(java.lang.String,java.lang.String) -> getPrivateData
    void setPrivateData(org.jivesoftware.smackx.packet.PrivateData) -> setPrivateData
    java.lang.String getProviderKey(java.lang.String,java.lang.String) -> getProviderKey
org.jivesoftware.smackx.PrivateDataManager$1 -> org.jivesoftware.smackx.PrivateDataManager$1:
    java.lang.String val$elementName -> val$elementName
    java.lang.String val$namespace -> val$namespace
    org.jivesoftware.smackx.PrivateDataManager this$0 -> this$0
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.PrivateDataManager$2 -> org.jivesoftware.smackx.PrivateDataManager$2:
    org.jivesoftware.smackx.packet.PrivateData val$privateData -> val$privateData
    org.jivesoftware.smackx.PrivateDataManager this$0 -> this$0
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.PrivateDataManager$PrivateDataIQProvider -> org.jivesoftware.smackx.PrivateDataManager$PrivateDataIQProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.PrivateDataManager$PrivateDataResult -> org.jivesoftware.smackx.PrivateDataManager$PrivateDataResult:
    org.jivesoftware.smackx.packet.PrivateData privateData -> privateData
    org.jivesoftware.smackx.packet.PrivateData getPrivateData() -> getPrivateData
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.RemoteRosterEntry -> org.jivesoftware.smackx.RemoteRosterEntry:
    java.lang.String user -> user
    java.lang.String name -> name
    java.util.List groupNames -> groupNames
    java.lang.String getUser() -> getUser
    java.lang.String getName() -> getName
    java.util.Iterator getGroupNames() -> getGroupNames
    java.lang.String[] getGroupArrayNames() -> getGroupArrayNames
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.ReportedData -> org.jivesoftware.smackx.ReportedData:
    java.util.List columns -> columns
    java.util.List rows -> rows
    java.lang.String title -> title
    org.jivesoftware.smackx.ReportedData getReportedDataFrom(org.jivesoftware.smack.packet.Packet) -> getReportedDataFrom
    void addRow(org.jivesoftware.smackx.ReportedData$Row) -> addRow
    void addColumn(org.jivesoftware.smackx.ReportedData$Column) -> addColumn
    java.util.Iterator getRows() -> getRows
    java.util.Iterator getColumns() -> getColumns
    java.lang.String getTitle() -> getTitle
org.jivesoftware.smackx.ReportedData$Column -> org.jivesoftware.smackx.ReportedData$Column:
    java.lang.String label -> label
    java.lang.String variable -> variable
    java.lang.String type -> type
    java.lang.String getLabel() -> getLabel
    java.lang.String getType() -> getType
    java.lang.String getVariable() -> getVariable
org.jivesoftware.smackx.ReportedData$Field -> org.jivesoftware.smackx.ReportedData$Field:
    java.lang.String variable -> variable
    java.util.List values -> values
    java.lang.String getVariable() -> getVariable
    java.util.Iterator getValues() -> getValues
org.jivesoftware.smackx.ReportedData$Row -> org.jivesoftware.smackx.ReportedData$Row:
    java.util.List fields -> fields
    java.util.Iterator getValues(java.lang.String) -> getValues
    java.util.Iterator getFields() -> getFields
org.jivesoftware.smackx.RosterExchangeListener -> org.jivesoftware.smackx.RosterExchangeListener:
    void entriesReceived(java.lang.String,java.util.Iterator) -> entriesReceived
org.jivesoftware.smackx.RosterExchangeManager -> org.jivesoftware.smackx.RosterExchangeManager:
    java.util.List rosterExchangeListeners -> rosterExchangeListeners
    org.jivesoftware.smack.Connection con -> con
    org.jivesoftware.smack.filter.PacketFilter packetFilter -> packetFilter
    org.jivesoftware.smack.PacketListener packetListener -> packetListener
    void addRosterListener(org.jivesoftware.smackx.RosterExchangeListener) -> addRosterListener
    void removeRosterListener(org.jivesoftware.smackx.RosterExchangeListener) -> removeRosterListener
    void send(org.jivesoftware.smack.Roster,java.lang.String) -> send
    void send(org.jivesoftware.smack.RosterEntry,java.lang.String) -> send
    void send(org.jivesoftware.smack.RosterGroup,java.lang.String) -> send
    void fireRosterExchangeListeners(java.lang.String,java.util.Iterator) -> fireRosterExchangeListeners
    void init() -> init
    void destroy() -> destroy
    void finalize() -> finalize
    void access$000(org.jivesoftware.smackx.RosterExchangeManager,java.lang.String,java.util.Iterator) -> access$000
org.jivesoftware.smackx.RosterExchangeManager$1 -> org.jivesoftware.smackx.RosterExchangeManager$1:
    org.jivesoftware.smackx.RosterExchangeManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.ServiceDiscoveryManager -> org.jivesoftware.smackx.ServiceDiscoveryManager:
    java.lang.String identityName -> identityName
    java.lang.String identityType -> identityType
    java.lang.String entityNode -> entityNode
    boolean cacheNonCaps -> cacheNonCaps
    java.lang.String currentCapsVersion -> currentCapsVersion
    boolean sendPresence -> sendPresence
    java.util.Map nonCapsCache -> nonCapsCache
    org.jivesoftware.smackx.EntityCapsManager capsManager -> capsManager
    java.util.Map instances -> instances
    org.jivesoftware.smack.Connection connection -> connection
    java.util.List features -> features
    org.jivesoftware.smackx.packet.DataForm extendedInfo -> extendedInfo
    java.util.Map nodeInformationProviders -> nodeInformationProviders
    org.jivesoftware.smackx.ServiceDiscoveryManager getInstanceFor(org.jivesoftware.smack.Connection) -> getInstanceFor
    java.lang.String getIdentityName() -> getIdentityName
    void setIdentityName(java.lang.String) -> setIdentityName
    java.lang.String getIdentityType() -> getIdentityType
    void setIdentityType(java.lang.String) -> setIdentityType
    void setNonCapsCaching(boolean) -> setNonCapsCaching
    boolean isNonCapsCachingEnabled() -> isNonCapsCachingEnabled
    void addDiscoverInfoTo(org.jivesoftware.smackx.packet.DiscoverInfo) -> addDiscoverInfoTo
    org.jivesoftware.smackx.packet.DiscoverInfo getOwnDiscoverInfo() -> getOwnDiscoverInfo
    void init() -> init
    org.jivesoftware.smackx.NodeInformationProvider getNodeInformationProvider(java.lang.String) -> getNodeInformationProvider
    void setNodeInformationProvider(java.lang.String,org.jivesoftware.smackx.NodeInformationProvider) -> setNodeInformationProvider
    void removeNodeInformationProvider(java.lang.String) -> removeNodeInformationProvider
    java.util.Iterator getFeatures() -> getFeatures
    void addFeature(java.lang.String) -> addFeature
    void removeFeature(java.lang.String) -> removeFeature
    boolean includesFeature(java.lang.String) -> includesFeature
    void setExtendedInfo(org.jivesoftware.smackx.packet.DataForm) -> setExtendedInfo
    void removeExtendedInfo() -> removeExtendedInfo
    org.jivesoftware.smackx.packet.DiscoverInfo discoverInfoByCaps(java.lang.String) -> discoverInfoByCaps
    org.jivesoftware.smackx.packet.DiscoverInfo discoverInfo(java.lang.String) -> discoverInfo
    org.jivesoftware.smackx.packet.DiscoverInfo discoverInfo(java.lang.String,java.lang.String) -> discoverInfo
    org.jivesoftware.smackx.packet.DiscoverItems discoverItems(java.lang.String) -> discoverItems
    org.jivesoftware.smackx.packet.DiscoverItems discoverItems(java.lang.String,java.lang.String) -> discoverItems
    boolean canPublishItems(java.lang.String) -> canPublishItems
    boolean canPublishItems(org.jivesoftware.smackx.packet.DiscoverInfo) -> canPublishItems
    void publishItems(java.lang.String,org.jivesoftware.smackx.packet.DiscoverItems) -> publishItems
    void publishItems(java.lang.String,java.lang.String,org.jivesoftware.smackx.packet.DiscoverItems) -> publishItems
    org.jivesoftware.smackx.packet.DiscoverInfo cloneDiscoverInfo(org.jivesoftware.smackx.packet.DiscoverInfo) -> cloneDiscoverInfo
    void setEntityCapsManager(org.jivesoftware.smackx.EntityCapsManager) -> setEntityCapsManager
    void renewEntityCapsVersion() -> renewEntityCapsVersion
    java.lang.String getEntityCapsVersion() -> getEntityCapsVersion
    org.jivesoftware.smackx.EntityCapsManager getEntityCapsManager() -> getEntityCapsManager
    void setSendPresence() -> setSendPresence
    boolean isSendPresence() -> isSendPresence
    java.util.Map access$100() -> access$100
    org.jivesoftware.smack.Connection access$200(org.jivesoftware.smackx.ServiceDiscoveryManager) -> access$200
    org.jivesoftware.smackx.EntityCapsManager access$300(org.jivesoftware.smackx.ServiceDiscoveryManager) -> access$300
    java.lang.String access$400(org.jivesoftware.smackx.ServiceDiscoveryManager) -> access$400
    org.jivesoftware.smackx.NodeInformationProvider access$500(org.jivesoftware.smackx.ServiceDiscoveryManager,java.lang.String) -> access$500
    boolean access$600(org.jivesoftware.smackx.ServiceDiscoveryManager) -> access$600
org.jivesoftware.smackx.ServiceDiscoveryManager$1 -> org.jivesoftware.smackx.ServiceDiscoveryManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smackx.ServiceDiscoveryManager$2 -> org.jivesoftware.smackx.ServiceDiscoveryManager$2:
    org.jivesoftware.smackx.ServiceDiscoveryManager this$0 -> this$0
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void reconnectingIn(int) -> reconnectingIn
    void reconnectionSuccessful() -> reconnectionSuccessful
org.jivesoftware.smackx.ServiceDiscoveryManager$3 -> org.jivesoftware.smackx.ServiceDiscoveryManager$3:
    org.jivesoftware.smackx.ServiceDiscoveryManager this$0 -> this$0
    void interceptPacket(org.jivesoftware.smack.packet.Packet) -> interceptPacket
org.jivesoftware.smackx.ServiceDiscoveryManager$4 -> org.jivesoftware.smackx.ServiceDiscoveryManager$4:
    org.jivesoftware.smackx.ServiceDiscoveryManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.ServiceDiscoveryManager$5 -> org.jivesoftware.smackx.ServiceDiscoveryManager$5:
    org.jivesoftware.smackx.ServiceDiscoveryManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.ServiceDiscoveryManager$CapsPresenceRenewer -> org.jivesoftware.smackx.ServiceDiscoveryManager$CapsPresenceRenewer:
    org.jivesoftware.smackx.ServiceDiscoveryManager this$0 -> this$0
    void capsVerUpdated(java.lang.String) -> capsVerUpdated
org.jivesoftware.smackx.SharedGroupManager -> org.jivesoftware.smackx.SharedGroupManager:
    java.util.List getSharedGroups(org.jivesoftware.smack.Connection) -> getSharedGroups
org.jivesoftware.smackx.XHTMLManager -> org.jivesoftware.smackx.XHTMLManager:
    java.lang.String namespace -> namespace
    java.util.Iterator getBodies(org.jivesoftware.smack.packet.Message) -> getBodies
    void addBody(org.jivesoftware.smack.packet.Message,java.lang.String) -> addBody
    boolean isXHTMLMessage(org.jivesoftware.smack.packet.Message) -> isXHTMLMessage
    void setServiceEnabled(org.jivesoftware.smack.Connection,boolean) -> setServiceEnabled
    boolean isServiceEnabled(org.jivesoftware.smack.Connection) -> isServiceEnabled
    boolean isServiceEnabled(org.jivesoftware.smack.Connection,java.lang.String) -> isServiceEnabled
org.jivesoftware.smackx.XHTMLManager$1 -> org.jivesoftware.smackx.XHTMLManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smackx.XHTMLText -> org.jivesoftware.smackx.XHTMLText:
    java.lang.StringBuilder text -> text
    void appendOpenAnchorTag(java.lang.String,java.lang.String) -> appendOpenAnchorTag
    void appendCloseAnchorTag() -> appendCloseAnchorTag
    void appendOpenBlockQuoteTag(java.lang.String) -> appendOpenBlockQuoteTag
    void appendCloseBlockQuoteTag() -> appendCloseBlockQuoteTag
    void appendOpenBodyTag(java.lang.String,java.lang.String) -> appendOpenBodyTag
    java.lang.String closeBodyTag() -> closeBodyTag
    void appendBrTag() -> appendBrTag
    void appendOpenCiteTag() -> appendOpenCiteTag
    void appendOpenCodeTag() -> appendOpenCodeTag
    void appendCloseCodeTag() -> appendCloseCodeTag
    void appendOpenEmTag() -> appendOpenEmTag
    void appendCloseEmTag() -> appendCloseEmTag
    void appendOpenHeaderTag(int,java.lang.String) -> appendOpenHeaderTag
    void appendCloseHeaderTag(int) -> appendCloseHeaderTag
    void appendImageTag(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> appendImageTag
    void appendLineItemTag(java.lang.String) -> appendLineItemTag
    void appendOpenOrderedListTag(java.lang.String) -> appendOpenOrderedListTag
    void appendCloseOrderedListTag() -> appendCloseOrderedListTag
    void appendOpenUnorderedListTag(java.lang.String) -> appendOpenUnorderedListTag
    void appendCloseUnorderedListTag() -> appendCloseUnorderedListTag
    void appendOpenParagraphTag(java.lang.String) -> appendOpenParagraphTag
    void appendCloseParagraphTag() -> appendCloseParagraphTag
    void appendOpenInlinedQuoteTag(java.lang.String) -> appendOpenInlinedQuoteTag
    void appendCloseInlinedQuoteTag() -> appendCloseInlinedQuoteTag
    void appendOpenSpanTag(java.lang.String) -> appendOpenSpanTag
    void appendCloseSpanTag() -> appendCloseSpanTag
    void appendOpenStrongTag() -> appendOpenStrongTag
    void appendCloseStrongTag() -> appendCloseStrongTag
    void append(java.lang.String) -> append
    java.lang.String toString() -> toString
org.jivesoftware.smackx.bookmark.BookmarkManager -> org.jivesoftware.smackx.bookmark.BookmarkManager:
    java.util.Map bookmarkManagerMap -> bookmarkManagerMap
    org.jivesoftware.smackx.PrivateDataManager privateDataManager -> privateDataManager
    org.jivesoftware.smackx.bookmark.Bookmarks bookmarks -> bookmarks
    java.lang.Object bookmarkLock -> bookmarkLock
    org.jivesoftware.smackx.bookmark.BookmarkManager getBookmarkManager(org.jivesoftware.smack.Connection) -> getBookmarkManager
    java.util.Collection getBookmarkedConferences() -> getBookmarkedConferences
    void addBookmarkedConference(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String) -> addBookmarkedConference
    void removeBookmarkedConference(java.lang.String) -> removeBookmarkedConference
    java.util.Collection getBookmarkedURLs() -> getBookmarkedURLs
    void addBookmarkedURL(java.lang.String,java.lang.String,boolean) -> addBookmarkedURL
    void removeBookmarkedURL(java.lang.String) -> removeBookmarkedURL
    org.jivesoftware.smackx.bookmark.Bookmarks retrieveBookmarks() -> retrieveBookmarks
org.jivesoftware.smackx.bookmark.BookmarkedConference -> org.jivesoftware.smackx.bookmark.BookmarkedConference:
    java.lang.String name -> name
    boolean autoJoin -> autoJoin
    java.lang.String jid -> jid
    java.lang.String nickname -> nickname
    java.lang.String password -> password
    boolean isShared -> isShared
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    boolean isAutoJoin() -> isAutoJoin
    void setAutoJoin(boolean) -> setAutoJoin
    java.lang.String getJid() -> getJid
    java.lang.String getNickname() -> getNickname
    void setNickname(java.lang.String) -> setNickname
    java.lang.String getPassword() -> getPassword
    void setPassword(java.lang.String) -> setPassword
    boolean equals(java.lang.Object) -> equals
    void setShared(boolean) -> setShared
    boolean isShared() -> isShared
org.jivesoftware.smackx.bookmark.BookmarkedURL -> org.jivesoftware.smackx.bookmark.BookmarkedURL:
    java.lang.String name -> name
    java.lang.String URL -> URL
    boolean isRss -> isRss
    boolean isShared -> isShared
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getURL() -> getURL
    void setRss(boolean) -> setRss
    boolean isRss() -> isRss
    boolean equals(java.lang.Object) -> equals
    void setShared(boolean) -> setShared
    boolean isShared() -> isShared
org.jivesoftware.smackx.bookmark.Bookmarks -> org.jivesoftware.smackx.bookmark.Bookmarks:
    java.util.List bookmarkedURLS -> bookmarkedURLS
    java.util.List bookmarkedConferences -> bookmarkedConferences
    void addBookmarkedURL(org.jivesoftware.smackx.bookmark.BookmarkedURL) -> addBookmarkedURL
    void removeBookmarkedURL(org.jivesoftware.smackx.bookmark.BookmarkedURL) -> removeBookmarkedURL
    void clearBookmarkedURLS() -> clearBookmarkedURLS
    void addBookmarkedConference(org.jivesoftware.smackx.bookmark.BookmarkedConference) -> addBookmarkedConference
    void removeBookmarkedConference(org.jivesoftware.smackx.bookmark.BookmarkedConference) -> removeBookmarkedConference
    void clearBookmarkedConferences() -> clearBookmarkedConferences
    java.util.List getBookmarkedURLS() -> getBookmarkedURLS
    java.util.List getBookmarkedConferences() -> getBookmarkedConferences
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    org.jivesoftware.smackx.bookmark.BookmarkedURL getURLStorage(org.xmlpull.v1.XmlPullParser) -> getURLStorage
    org.jivesoftware.smackx.bookmark.BookmarkedConference getConferenceStorage(org.xmlpull.v1.XmlPullParser) -> getConferenceStorage
    org.jivesoftware.smackx.bookmark.BookmarkedURL access$000(org.xmlpull.v1.XmlPullParser) -> access$000
    org.jivesoftware.smackx.bookmark.BookmarkedConference access$100(org.xmlpull.v1.XmlPullParser) -> access$100
org.jivesoftware.smackx.bookmark.Bookmarks$Provider -> org.jivesoftware.smackx.bookmark.Bookmarks$Provider:
    org.jivesoftware.smackx.packet.PrivateData parsePrivateData(org.xmlpull.v1.XmlPullParser) -> parsePrivateData
org.jivesoftware.smackx.bookmark.SharedBookmark -> org.jivesoftware.smackx.bookmark.SharedBookmark:
    boolean isShared() -> isShared
org.jivesoftware.smackx.bytestreams.BytestreamListener -> org.jivesoftware.smackx.bytestreams.BytestreamListener:
    void incomingBytestreamRequest(org.jivesoftware.smackx.bytestreams.BytestreamRequest) -> incomingBytestreamRequest
org.jivesoftware.smackx.bytestreams.BytestreamManager -> org.jivesoftware.smackx.bytestreams.BytestreamManager:
    void addIncomingBytestreamListener(org.jivesoftware.smackx.bytestreams.BytestreamListener) -> addIncomingBytestreamListener
    void removeIncomingBytestreamListener(org.jivesoftware.smackx.bytestreams.BytestreamListener) -> removeIncomingBytestreamListener
    void addIncomingBytestreamListener(org.jivesoftware.smackx.bytestreams.BytestreamListener,java.lang.String) -> addIncomingBytestreamListener
    void removeIncomingBytestreamListener(java.lang.String) -> removeIncomingBytestreamListener
    org.jivesoftware.smackx.bytestreams.BytestreamSession establishSession(java.lang.String) -> establishSession
    org.jivesoftware.smackx.bytestreams.BytestreamSession establishSession(java.lang.String,java.lang.String) -> establishSession
org.jivesoftware.smackx.bytestreams.BytestreamRequest -> org.jivesoftware.smackx.bytestreams.BytestreamRequest:
    java.lang.String getFrom() -> getFrom
    java.lang.String getSessionID() -> getSessionID
    org.jivesoftware.smackx.bytestreams.BytestreamSession accept() -> accept
    void reject() -> reject
org.jivesoftware.smackx.bytestreams.BytestreamSession -> org.jivesoftware.smackx.bytestreams.BytestreamSession:
    java.io.InputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
    void close() -> close
    int getReadTimeout() -> getReadTimeout
    void setReadTimeout(int) -> setReadTimeout
org.jivesoftware.smackx.bytestreams.ibb.CloseListener -> org.jivesoftware.smackx.bytestreams.ibb.CloseListener:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager manager -> manager
    org.jivesoftware.smack.filter.PacketFilter closeFilter -> closeFilter
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    org.jivesoftware.smack.filter.PacketFilter getFilter() -> getFilter
org.jivesoftware.smackx.bytestreams.ibb.DataListener -> org.jivesoftware.smackx.bytestreams.ibb.DataListener:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager manager -> manager
    org.jivesoftware.smack.filter.PacketFilter dataFilter -> dataFilter
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    org.jivesoftware.smack.filter.PacketFilter getFilter() -> getFilter
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamListener -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamListener:
    void incomingBytestreamRequest(org.jivesoftware.smackx.bytestreams.BytestreamRequest) -> incomingBytestreamRequest
    void incomingBytestreamRequest(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamRequest) -> incomingBytestreamRequest
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager:
    java.lang.String NAMESPACE -> NAMESPACE
    int MAXIMUM_BLOCK_SIZE -> MAXIMUM_BLOCK_SIZE
    java.lang.String SESSION_ID_PREFIX -> SESSION_ID_PREFIX
    java.util.Random randomGenerator -> randomGenerator
    java.util.Map managers -> managers
    org.jivesoftware.smack.Connection connection -> connection
    java.util.Map userListeners -> userListeners
    java.util.List allRequestListeners -> allRequestListeners
    org.jivesoftware.smackx.bytestreams.ibb.InitiationListener initiationListener -> initiationListener
    org.jivesoftware.smackx.bytestreams.ibb.DataListener dataListener -> dataListener
    org.jivesoftware.smackx.bytestreams.ibb.CloseListener closeListener -> closeListener
    java.util.Map sessions -> sessions
    int defaultBlockSize -> defaultBlockSize
    int maximumBlockSize -> maximumBlockSize
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType stanza -> stanza
    java.util.List ignoredBytestreamRequests -> ignoredBytestreamRequests
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager getByteStreamManager(org.jivesoftware.smack.Connection) -> getByteStreamManager
    void addIncomingBytestreamListener(org.jivesoftware.smackx.bytestreams.BytestreamListener) -> addIncomingBytestreamListener
    void removeIncomingBytestreamListener(org.jivesoftware.smackx.bytestreams.BytestreamListener) -> removeIncomingBytestreamListener
    void addIncomingBytestreamListener(org.jivesoftware.smackx.bytestreams.BytestreamListener,java.lang.String) -> addIncomingBytestreamListener
    void removeIncomingBytestreamListener(java.lang.String) -> removeIncomingBytestreamListener
    void ignoreBytestreamRequestOnce(java.lang.String) -> ignoreBytestreamRequestOnce
    int getDefaultBlockSize() -> getDefaultBlockSize
    void setDefaultBlockSize(int) -> setDefaultBlockSize
    int getMaximumBlockSize() -> getMaximumBlockSize
    void setMaximumBlockSize(int) -> setMaximumBlockSize
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType getStanza() -> getStanza
    void setStanza(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType) -> setStanza
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession establishSession(java.lang.String) -> establishSession
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession establishSession(java.lang.String,java.lang.String) -> establishSession
    void replyRejectPacket(org.jivesoftware.smack.packet.IQ) -> replyRejectPacket
    void replyResourceConstraintPacket(org.jivesoftware.smack.packet.IQ) -> replyResourceConstraintPacket
    void replyItemNotFoundPacket(org.jivesoftware.smack.packet.IQ) -> replyItemNotFoundPacket
    java.lang.String getNextSessionID() -> getNextSessionID
    org.jivesoftware.smack.Connection getConnection() -> getConnection
    org.jivesoftware.smackx.bytestreams.BytestreamListener getUserListener(java.lang.String) -> getUserListener
    java.util.List getAllRequestListeners() -> getAllRequestListeners
    java.util.Map getSessions() -> getSessions
    java.util.List getIgnoredBytestreamRequests() -> getIgnoredBytestreamRequests
    void disableService() -> disableService
    org.jivesoftware.smackx.bytestreams.BytestreamSession establishSession(java.lang.String,java.lang.String) -> establishSession
    org.jivesoftware.smackx.bytestreams.BytestreamSession establishSession(java.lang.String) -> establishSession
    void access$000(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager) -> access$000
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$1 -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$1$1 -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$1$1:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager val$manager -> val$manager
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$1 this$0 -> this$0
    void connectionClosed() -> connectionClosed
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType IQ -> IQ
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType MESSAGE -> MESSAGE
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType[] $VALUES -> $VALUES
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType[] values() -> values
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamRequest -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamRequest:
    org.jivesoftware.smackx.bytestreams.ibb.packet.Open byteStreamRequest -> byteStreamRequest
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager manager -> manager
    java.lang.String getFrom() -> getFrom
    java.lang.String getSessionID() -> getSessionID
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession accept() -> accept
    void reject() -> reject
    org.jivesoftware.smackx.bytestreams.BytestreamSession accept() -> accept
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession:
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smackx.bytestreams.ibb.packet.Open byteStreamRequest -> byteStreamRequest
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream inputStream -> inputStream
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBOutputStream outputStream -> outputStream
    java.lang.String remoteJID -> remoteJID
    boolean closeBothStreamsEnabled -> closeBothStreamsEnabled
    boolean isClosed -> isClosed
    java.io.InputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
    int getReadTimeout() -> getReadTimeout
    void setReadTimeout(int) -> setReadTimeout
    boolean isCloseBothStreamsEnabled() -> isCloseBothStreamsEnabled
    void setCloseBothStreamsEnabled(boolean) -> setCloseBothStreamsEnabled
    void close() -> close
    void closeByPeer(org.jivesoftware.smackx.bytestreams.ibb.packet.Close) -> closeByPeer
    void closeByLocal(boolean) -> closeByLocal
    org.jivesoftware.smack.Connection access$800(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession) -> access$800
    java.lang.String access$1000(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession) -> access$1000
    org.jivesoftware.smackx.bytestreams.ibb.packet.Open access$1100(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession) -> access$1100
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$1 -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$1:
    int[] $SwitchMap$org$jivesoftware$smackx$bytestreams$ibb$InBandBytestreamManager$StanzaType -> $SwitchMap$org$jivesoftware$smackx$bytestreams$ibb$InBandBytestreamManager$StanzaType
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBDataPacketFilter -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBDataPacketFilter:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession this$0 -> this$0
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream:
    org.jivesoftware.smack.PacketListener dataPacketListener -> dataPacketListener
    java.util.concurrent.BlockingQueue dataQueue -> dataQueue
    byte[] buffer -> buffer
    int bufferPointer -> bufferPointer
    long seq -> seq
    boolean isClosed -> isClosed
    boolean closeInvoked -> closeInvoked
    int readTimeout -> readTimeout
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession this$0 -> this$0
    org.jivesoftware.smack.PacketListener getDataPacketListener() -> getDataPacketListener
    org.jivesoftware.smack.filter.PacketFilter getDataPacketFilter() -> getDataPacketFilter
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    boolean loadBuffer() -> loadBuffer
    void checkClosed() -> checkClosed
    boolean markSupported() -> markSupported
    void close() -> close
    void closeInternal() -> closeInternal
    void cleanup() -> cleanup
    int access$400(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream) -> access$400
    int access$402(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream,int) -> access$402
    void access$500(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream) -> access$500
    void access$600(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream) -> access$600
    boolean access$700(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream) -> access$700
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBOutputStream -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBOutputStream:
    byte[] buffer -> buffer
    int bufferPointer -> bufferPointer
    long seq -> seq
    boolean isClosed -> isClosed
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession this$0 -> this$0
    void writeToXML(org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension) -> writeToXML
    void write(int) -> write
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void writeOut(byte[],int,int) -> writeOut
    void flush() -> flush
    void flushBuffer() -> flushBuffer
    void close() -> close
    void closeInternal(boolean) -> closeInternal
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IQIBBInputStream -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IQIBBInputStream:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession this$0 -> this$0
    org.jivesoftware.smack.PacketListener getDataPacketListener() -> getDataPacketListener
    org.jivesoftware.smack.filter.PacketFilter getDataPacketFilter() -> getDataPacketFilter
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IQIBBInputStream$1 -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IQIBBInputStream$1:
    long lastSequence -> lastSequence
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IQIBBInputStream this$1 -> this$1
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IQIBBOutputStream -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IQIBBOutputStream:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession this$0 -> this$0
    void writeToXML(org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension) -> writeToXML
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$MessageIBBInputStream -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$MessageIBBInputStream:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession this$0 -> this$0
    org.jivesoftware.smack.PacketListener getDataPacketListener() -> getDataPacketListener
    org.jivesoftware.smack.filter.PacketFilter getDataPacketFilter() -> getDataPacketFilter
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$MessageIBBInputStream$1 -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$MessageIBBInputStream$1:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$MessageIBBInputStream this$1 -> this$1
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$MessageIBBOutputStream -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$MessageIBBOutputStream:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession this$0 -> this$0
    void writeToXML(org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension) -> writeToXML
org.jivesoftware.smackx.bytestreams.ibb.InitiationListener -> org.jivesoftware.smackx.bytestreams.ibb.InitiationListener:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager manager -> manager
    org.jivesoftware.smack.filter.PacketFilter initFilter -> initFilter
    java.util.concurrent.ExecutorService initiationListenerExecutor -> initiationListenerExecutor
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    void processRequest(org.jivesoftware.smack.packet.Packet) -> processRequest
    org.jivesoftware.smack.filter.PacketFilter getFilter() -> getFilter
    void shutdown() -> shutdown
    void access$000(org.jivesoftware.smackx.bytestreams.ibb.InitiationListener,org.jivesoftware.smack.packet.Packet) -> access$000
org.jivesoftware.smackx.bytestreams.ibb.InitiationListener$1 -> org.jivesoftware.smackx.bytestreams.ibb.InitiationListener$1:
    org.jivesoftware.smack.packet.Packet val$packet -> val$packet
    org.jivesoftware.smackx.bytestreams.ibb.InitiationListener this$0 -> this$0
    void run() -> run
org.jivesoftware.smackx.bytestreams.ibb.packet.Close -> org.jivesoftware.smackx.bytestreams.ibb.packet.Close:
    java.lang.String sessionID -> sessionID
    java.lang.String getSessionID() -> getSessionID
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.bytestreams.ibb.packet.Data -> org.jivesoftware.smackx.bytestreams.ibb.packet.Data:
    org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension dataPacketExtension -> dataPacketExtension
    org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension getDataPacketExtension() -> getDataPacketExtension
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension -> org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String sessionID -> sessionID
    long seq -> seq
    java.lang.String data -> data
    byte[] decodedData -> decodedData
    java.lang.String getSessionID() -> getSessionID
    long getSeq() -> getSeq
    java.lang.String getData() -> getData
    byte[] getDecodedData() -> getDecodedData
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.bytestreams.ibb.packet.Open -> org.jivesoftware.smackx.bytestreams.ibb.packet.Open:
    java.lang.String sessionID -> sessionID
    int blockSize -> blockSize
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType stanza -> stanza
    java.lang.String getSessionID() -> getSessionID
    int getBlockSize() -> getBlockSize
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType getStanza() -> getStanza
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.bytestreams.ibb.provider.CloseIQProvider -> org.jivesoftware.smackx.bytestreams.ibb.provider.CloseIQProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.bytestreams.ibb.provider.DataPacketProvider -> org.jivesoftware.smackx.bytestreams.ibb.provider.DataPacketProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.bytestreams.ibb.provider.OpenIQProvider -> org.jivesoftware.smackx.bytestreams.ibb.provider.OpenIQProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.bytestreams.socks5.InitiationListener -> org.jivesoftware.smackx.bytestreams.socks5.InitiationListener:
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager manager -> manager
    org.jivesoftware.smack.filter.PacketFilter initFilter -> initFilter
    java.util.concurrent.ExecutorService initiationListenerExecutor -> initiationListenerExecutor
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    void processRequest(org.jivesoftware.smack.packet.Packet) -> processRequest
    org.jivesoftware.smack.filter.PacketFilter getFilter() -> getFilter
    void shutdown() -> shutdown
    void access$000(org.jivesoftware.smackx.bytestreams.socks5.InitiationListener,org.jivesoftware.smack.packet.Packet) -> access$000
org.jivesoftware.smackx.bytestreams.socks5.InitiationListener$1 -> org.jivesoftware.smackx.bytestreams.socks5.InitiationListener$1:
    org.jivesoftware.smack.packet.Packet val$packet -> val$packet
    org.jivesoftware.smackx.bytestreams.socks5.InitiationListener this$0 -> this$0
    void run() -> run
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamListener -> org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamListener:
    void incomingBytestreamRequest(org.jivesoftware.smackx.bytestreams.BytestreamRequest) -> incomingBytestreamRequest
    void incomingBytestreamRequest(org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest) -> incomingBytestreamRequest
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager -> org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String SESSION_ID_PREFIX -> SESSION_ID_PREFIX
    java.util.Random randomGenerator -> randomGenerator
    java.util.Map managers -> managers
    org.jivesoftware.smack.Connection connection -> connection
    java.util.Map userListeners -> userListeners
    java.util.List allRequestListeners -> allRequestListeners
    org.jivesoftware.smackx.bytestreams.socks5.InitiationListener initiationListener -> initiationListener
    int targetResponseTimeout -> targetResponseTimeout
    int proxyConnectionTimeout -> proxyConnectionTimeout
    java.util.List proxyBlacklist -> proxyBlacklist
    java.lang.String lastWorkingProxy -> lastWorkingProxy
    boolean proxyPrioritizationEnabled -> proxyPrioritizationEnabled
    java.util.List ignoredBytestreamRequests -> ignoredBytestreamRequests
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager getBytestreamManager(org.jivesoftware.smack.Connection) -> getBytestreamManager
    void addIncomingBytestreamListener(org.jivesoftware.smackx.bytestreams.BytestreamListener) -> addIncomingBytestreamListener
    void removeIncomingBytestreamListener(org.jivesoftware.smackx.bytestreams.BytestreamListener) -> removeIncomingBytestreamListener
    void addIncomingBytestreamListener(org.jivesoftware.smackx.bytestreams.BytestreamListener,java.lang.String) -> addIncomingBytestreamListener
    void removeIncomingBytestreamListener(java.lang.String) -> removeIncomingBytestreamListener
    void ignoreBytestreamRequestOnce(java.lang.String) -> ignoreBytestreamRequestOnce
    void disableService() -> disableService
    int getTargetResponseTimeout() -> getTargetResponseTimeout
    void setTargetResponseTimeout(int) -> setTargetResponseTimeout
    int getProxyConnectionTimeout() -> getProxyConnectionTimeout
    void setProxyConnectionTimeout(int) -> setProxyConnectionTimeout
    boolean isProxyPrioritizationEnabled() -> isProxyPrioritizationEnabled
    void setProxyPrioritizationEnabled(boolean) -> setProxyPrioritizationEnabled
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamSession establishSession(java.lang.String) -> establishSession
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamSession establishSession(java.lang.String,java.lang.String) -> establishSession
    boolean supportsSocks5(java.lang.String) -> supportsSocks5
    java.util.List determineProxies() -> determineProxies
    java.util.List determineStreamHostInfos(java.util.List) -> determineStreamHostInfos
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream createStreamHostRequest(java.lang.String) -> createStreamHostRequest
    java.util.List getLocalStreamHost() -> getLocalStreamHost
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream createBytestreamInitiation(java.lang.String,java.lang.String,java.util.List) -> createBytestreamInitiation
    void replyRejectPacket(org.jivesoftware.smack.packet.IQ) -> replyRejectPacket
    void activate() -> activate
    void enableService() -> enableService
    java.lang.String getNextSessionID() -> getNextSessionID
    org.jivesoftware.smack.Connection getConnection() -> getConnection
    org.jivesoftware.smackx.bytestreams.BytestreamListener getUserListener(java.lang.String) -> getUserListener
    java.util.List getAllRequestListeners() -> getAllRequestListeners
    java.util.List getIgnoredBytestreamRequests() -> getIgnoredBytestreamRequests
    org.jivesoftware.smackx.bytestreams.BytestreamSession establishSession(java.lang.String,java.lang.String) -> establishSession
    org.jivesoftware.smackx.bytestreams.BytestreamSession establishSession(java.lang.String) -> establishSession
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager$1 -> org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager$1$1 -> org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager$1$1:
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager val$manager -> val$manager
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager$1 this$0 -> this$0
    void connectionClosed() -> connectionClosed
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest -> org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest:
    long BLACKLIST_LIFETIME -> BLACKLIST_LIFETIME
    int BLACKLIST_MAX_SIZE -> BLACKLIST_MAX_SIZE
    org.jivesoftware.smack.util.Cache ADDRESS_BLACKLIST -> ADDRESS_BLACKLIST
    int CONNECTION_FAILURE_THRESHOLD -> CONNECTION_FAILURE_THRESHOLD
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream bytestreamRequest -> bytestreamRequest
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager manager -> manager
    int totalConnectTimeout -> totalConnectTimeout
    int minimumConnectTimeout -> minimumConnectTimeout
    int getConnectFailureThreshold() -> getConnectFailureThreshold
    void setConnectFailureThreshold(int) -> setConnectFailureThreshold
    int getTotalConnectTimeout() -> getTotalConnectTimeout
    void setTotalConnectTimeout(int) -> setTotalConnectTimeout
    int getMinimumConnectTimeout() -> getMinimumConnectTimeout
    void setMinimumConnectTimeout(int) -> setMinimumConnectTimeout
    java.lang.String getFrom() -> getFrom
    java.lang.String getSessionID() -> getSessionID
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamSession accept() -> accept
    void reject() -> reject
    void cancelRequest() -> cancelRequest
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream createUsedHostResponse(org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost) -> createUsedHostResponse
    void incrementConnectionFailures(java.lang.String) -> incrementConnectionFailures
    int getConnectionFailures(java.lang.String) -> getConnectionFailures
    org.jivesoftware.smackx.bytestreams.BytestreamSession accept() -> accept
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamSession -> org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamSession:
    java.net.Socket socket -> socket
    boolean isDirect -> isDirect
    boolean isDirect() -> isDirect
    boolean isMediated() -> isMediated
    java.io.InputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
    int getReadTimeout() -> getReadTimeout
    void setReadTimeout(int) -> setReadTimeout
    void close() -> close
org.jivesoftware.smackx.bytestreams.socks5.Socks5Client -> org.jivesoftware.smackx.bytestreams.socks5.Socks5Client:
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost streamHost -> streamHost
    java.lang.String digest -> digest
    java.net.Socket getSocket(int) -> getSocket
    boolean establish(java.net.Socket) -> establish
    byte[] createSocks5ConnectRequest() -> createSocks5ConnectRequest
org.jivesoftware.smackx.bytestreams.socks5.Socks5Client$1 -> org.jivesoftware.smackx.bytestreams.socks5.Socks5Client$1:
    org.jivesoftware.smackx.bytestreams.socks5.Socks5Client this$0 -> this$0
    java.net.Socket call() -> call
    java.lang.Object call() -> call
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientForInitiator -> org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientForInitiator:
    org.jivesoftware.smack.Connection connection -> connection
    java.lang.String sessionID -> sessionID
    java.lang.String target -> target
    java.net.Socket getSocket(int) -> getSocket
    void activate() -> activate
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream createStreamHostActivation() -> createStreamHostActivation
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy -> org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy:
    org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy socks5Server -> socks5Server
    org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy$Socks5ServerProcess serverProcess -> serverProcess
    java.lang.Thread serverThread -> serverThread
    java.net.ServerSocket serverSocket -> serverSocket
    java.util.Map connectionMap -> connectionMap
    java.util.List allowedConnections -> allowedConnections
    java.util.Set localAddresses -> localAddresses
    org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy getSocks5Proxy() -> getSocks5Proxy
    void start() -> start
    void stop() -> stop
    void addLocalAddress(java.lang.String) -> addLocalAddress
    void removeLocalAddress(java.lang.String) -> removeLocalAddress
    java.util.List getLocalAddresses() -> getLocalAddresses
    void replaceLocalAddresses(java.util.List) -> replaceLocalAddresses
    int getPort() -> getPort
    java.net.Socket getSocket(java.lang.String) -> getSocket
    void addTransfer(java.lang.String) -> addTransfer
    void removeTransfer(java.lang.String) -> removeTransfer
    boolean isRunning() -> isRunning
    java.net.ServerSocket access$100(org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy) -> access$100
    java.util.List access$200(org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy) -> access$200
    java.util.Map access$300(org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy) -> access$300
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy$1 -> org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy$1:
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy$Socks5ServerProcess -> org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy$Socks5ServerProcess:
    org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy this$0 -> this$0
    void run() -> run
    void establishConnection(java.net.Socket) -> establishConnection
org.jivesoftware.smackx.bytestreams.socks5.Socks5Utils -> org.jivesoftware.smackx.bytestreams.socks5.Socks5Utils:
    java.lang.String createDigest(java.lang.String,java.lang.String,java.lang.String) -> createDigest
    byte[] receiveSocks5Message(java.io.DataInputStream) -> receiveSocks5Message
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream -> org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream:
    java.lang.String sessionID -> sessionID
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode mode -> mode
    java.util.List streamHosts -> streamHosts
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHostUsed usedHost -> usedHost
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Activate toActivate -> toActivate
    void setSessionID(java.lang.String) -> setSessionID
    java.lang.String getSessionID() -> getSessionID
    void setMode(org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode) -> setMode
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode getMode() -> getMode
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost addStreamHost(java.lang.String,java.lang.String) -> addStreamHost
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost addStreamHost(java.lang.String,java.lang.String,int) -> addStreamHost
    void addStreamHost(org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost) -> addStreamHost
    java.util.Collection getStreamHosts() -> getStreamHosts
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost getStreamHost(java.lang.String) -> getStreamHost
    int countStreamHosts() -> countStreamHosts
    void setUsedHost(java.lang.String) -> setUsedHost
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHostUsed getUsedHost() -> getUsedHost
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Activate getToActivate() -> getToActivate
    void setToActivate(java.lang.String) -> setToActivate
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Activate -> org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Activate:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENTNAME -> ELEMENTNAME
    java.lang.String target -> target
    java.lang.String getTarget() -> getTarget
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getElementName() -> getElementName
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode -> org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode:
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode tcp -> tcp
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode udp -> udp
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode[] $VALUES -> $VALUES
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode[] values() -> values
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode valueOf(java.lang.String) -> valueOf
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode fromName(java.lang.String) -> fromName
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost -> org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENTNAME -> ELEMENTNAME
    java.lang.String JID -> JID
    java.lang.String addy -> addy
    int port -> port
    java.lang.String getJID() -> getJID
    java.lang.String getAddress() -> getAddress
    void setPort(int) -> setPort
    int getPort() -> getPort
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getElementName() -> getElementName
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHostUsed -> org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHostUsed:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENTNAME -> ELEMENTNAME
    java.lang.String JID -> JID
    java.lang.String getJID() -> getJID
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getElementName() -> getElementName
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.bytestreams.socks5.provider.BytestreamsProvider -> org.jivesoftware.smackx.bytestreams.socks5.provider.BytestreamsProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.commands.AdHocCommand -> org.jivesoftware.smackx.commands.AdHocCommand:
    org.jivesoftware.smackx.packet.AdHocCommandData data -> data
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition getSpecificErrorCondition(org.jivesoftware.smack.packet.XMPPError) -> getSpecificErrorCondition
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    void setNode(java.lang.String) -> setNode
    java.lang.String getNode() -> getNode
    java.lang.String getOwnerJID() -> getOwnerJID
    java.util.List getNotes() -> getNotes
    void addNote(org.jivesoftware.smackx.commands.AdHocCommandNote) -> addNote
    java.lang.String getRaw() -> getRaw
    org.jivesoftware.smackx.Form getForm() -> getForm
    void setForm(org.jivesoftware.smackx.Form) -> setForm
    void execute() -> execute
    void next(org.jivesoftware.smackx.Form) -> next
    void complete(org.jivesoftware.smackx.Form) -> complete
    void prev() -> prev
    void cancel() -> cancel
    java.util.List getActions() -> getActions
    void addActionAvailable(org.jivesoftware.smackx.commands.AdHocCommand$Action) -> addActionAvailable
    org.jivesoftware.smackx.commands.AdHocCommand$Action getExecuteAction() -> getExecuteAction
    void setExecuteAction(org.jivesoftware.smackx.commands.AdHocCommand$Action) -> setExecuteAction
    org.jivesoftware.smackx.commands.AdHocCommand$Status getStatus() -> getStatus
    void setData(org.jivesoftware.smackx.packet.AdHocCommandData) -> setData
    org.jivesoftware.smackx.packet.AdHocCommandData getData() -> getData
    boolean isValidAction(org.jivesoftware.smackx.commands.AdHocCommand$Action) -> isValidAction
org.jivesoftware.smackx.commands.AdHocCommand$Action -> org.jivesoftware.smackx.commands.AdHocCommand$Action:
    org.jivesoftware.smackx.commands.AdHocCommand$Action execute -> execute
    org.jivesoftware.smackx.commands.AdHocCommand$Action cancel -> cancel
    org.jivesoftware.smackx.commands.AdHocCommand$Action prev -> prev
    org.jivesoftware.smackx.commands.AdHocCommand$Action next -> next
    org.jivesoftware.smackx.commands.AdHocCommand$Action complete -> complete
    org.jivesoftware.smackx.commands.AdHocCommand$Action unknown -> unknown
    org.jivesoftware.smackx.commands.AdHocCommand$Action[] $VALUES -> $VALUES
    org.jivesoftware.smackx.commands.AdHocCommand$Action[] values() -> values
    org.jivesoftware.smackx.commands.AdHocCommand$Action valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition -> org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition:
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition badAction -> badAction
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition malformedAction -> malformedAction
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition badLocale -> badLocale
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition badPayload -> badPayload
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition badSessionid -> badSessionid
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition sessionExpired -> sessionExpired
    java.lang.String value -> value
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition[] $VALUES -> $VALUES
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition[] values() -> values
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
org.jivesoftware.smackx.commands.AdHocCommand$Status -> org.jivesoftware.smackx.commands.AdHocCommand$Status:
    org.jivesoftware.smackx.commands.AdHocCommand$Status executing -> executing
    org.jivesoftware.smackx.commands.AdHocCommand$Status completed -> completed
    org.jivesoftware.smackx.commands.AdHocCommand$Status canceled -> canceled
    org.jivesoftware.smackx.commands.AdHocCommand$Status[] $VALUES -> $VALUES
    org.jivesoftware.smackx.commands.AdHocCommand$Status[] values() -> values
    org.jivesoftware.smackx.commands.AdHocCommand$Status valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.commands.AdHocCommandManager -> org.jivesoftware.smackx.commands.AdHocCommandManager:
    java.lang.String DISCO_NAMESPACE -> DISCO_NAMESPACE
    java.lang.String discoNode -> discoNode
    int SESSION_TIMEOUT -> SESSION_TIMEOUT
    java.util.Map instances -> instances
    java.lang.Thread sessionsSweeper -> sessionsSweeper
    org.jivesoftware.smack.Connection connection -> connection
    java.util.Map commands -> commands
    java.util.Map executingCommands -> executingCommands
    org.jivesoftware.smackx.commands.AdHocCommandManager getAddHocCommandsManager(org.jivesoftware.smack.Connection) -> getAddHocCommandsManager
    void registerCommand(java.lang.String,java.lang.String,java.lang.Class) -> registerCommand
    void registerCommand(java.lang.String,java.lang.String,org.jivesoftware.smackx.commands.LocalCommandFactory) -> registerCommand
    org.jivesoftware.smackx.packet.DiscoverItems discoverCommands(java.lang.String) -> discoverCommands
    void publishCommands(java.lang.String) -> publishCommands
    org.jivesoftware.smackx.commands.RemoteCommand getRemoteCommand(java.lang.String,java.lang.String) -> getRemoteCommand
    void init() -> init
    void processAdHocCommand(org.jivesoftware.smackx.packet.AdHocCommandData) -> processAdHocCommand
    void respondError(org.jivesoftware.smackx.packet.AdHocCommandData,org.jivesoftware.smack.packet.XMPPError$Condition) -> respondError
    void respondError(org.jivesoftware.smackx.packet.AdHocCommandData,org.jivesoftware.smack.packet.XMPPError$Condition,org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition) -> respondError
    void respondError(org.jivesoftware.smackx.packet.AdHocCommandData,org.jivesoftware.smack.packet.XMPPError) -> respondError
    org.jivesoftware.smackx.commands.LocalCommand newInstanceOfCmd(java.lang.String,java.lang.String) -> newInstanceOfCmd
    java.util.Collection getRegisteredCommands() -> getRegisteredCommands
    org.jivesoftware.smack.Connection access$100(org.jivesoftware.smackx.commands.AdHocCommandManager) -> access$100
    java.util.Map access$200() -> access$200
    java.util.Collection access$300(org.jivesoftware.smackx.commands.AdHocCommandManager) -> access$300
    void access$400(org.jivesoftware.smackx.commands.AdHocCommandManager,org.jivesoftware.smackx.packet.AdHocCommandData) -> access$400
    java.util.Map access$500(org.jivesoftware.smackx.commands.AdHocCommandManager) -> access$500
org.jivesoftware.smackx.commands.AdHocCommandManager$1 -> org.jivesoftware.smackx.commands.AdHocCommandManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smackx.commands.AdHocCommandManager$2 -> org.jivesoftware.smackx.commands.AdHocCommandManager$2:
    java.lang.Class val$clazz -> val$clazz
    org.jivesoftware.smackx.commands.AdHocCommandManager this$0 -> this$0
    org.jivesoftware.smackx.commands.LocalCommand getInstance() -> getInstance
org.jivesoftware.smackx.commands.AdHocCommandManager$3 -> org.jivesoftware.smackx.commands.AdHocCommandManager$3:
    java.lang.String val$name -> val$name
    org.jivesoftware.smackx.commands.AdHocCommandManager this$0 -> this$0
    java.util.List getNodeItems() -> getNodeItems
    java.util.List getNodeFeatures() -> getNodeFeatures
    java.util.List getNodeIdentities() -> getNodeIdentities
org.jivesoftware.smackx.commands.AdHocCommandManager$4 -> org.jivesoftware.smackx.commands.AdHocCommandManager$4:
    org.jivesoftware.smackx.commands.AdHocCommandManager this$0 -> this$0
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectionSuccessful() -> reconnectionSuccessful
    void reconnectingIn(int) -> reconnectingIn
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
org.jivesoftware.smackx.commands.AdHocCommandManager$5 -> org.jivesoftware.smackx.commands.AdHocCommandManager$5:
    org.jivesoftware.smackx.commands.AdHocCommandManager this$0 -> this$0
    java.util.List getNodeItems() -> getNodeItems
    java.util.List getNodeFeatures() -> getNodeFeatures
    java.util.List getNodeIdentities() -> getNodeIdentities
org.jivesoftware.smackx.commands.AdHocCommandManager$6 -> org.jivesoftware.smackx.commands.AdHocCommandManager$6:
    org.jivesoftware.smackx.commands.AdHocCommandManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.commands.AdHocCommandManager$7 -> org.jivesoftware.smackx.commands.AdHocCommandManager$7:
    org.jivesoftware.smackx.commands.AdHocCommandManager this$0 -> this$0
    void run() -> run
org.jivesoftware.smackx.commands.AdHocCommandManager$AdHocCommandInfo -> org.jivesoftware.smackx.commands.AdHocCommandManager$AdHocCommandInfo:
    java.lang.String node -> node
    java.lang.String name -> name
    java.lang.String ownerJID -> ownerJID
    org.jivesoftware.smackx.commands.LocalCommandFactory factory -> factory
    org.jivesoftware.smackx.commands.LocalCommand getCommandInstance() -> getCommandInstance
    java.lang.String getName() -> getName
    java.lang.String getNode() -> getNode
    java.lang.String getOwnerJID() -> getOwnerJID
org.jivesoftware.smackx.commands.AdHocCommandNote -> org.jivesoftware.smackx.commands.AdHocCommandNote:
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type type -> type
    java.lang.String value -> value
    java.lang.String getValue() -> getValue
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type getType() -> getType
org.jivesoftware.smackx.commands.AdHocCommandNote$Type -> org.jivesoftware.smackx.commands.AdHocCommandNote$Type:
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type info -> info
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type warn -> warn
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type error -> error
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type[] $VALUES -> $VALUES
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type[] values() -> values
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.commands.LocalCommand -> org.jivesoftware.smackx.commands.LocalCommand:
    long creationDate -> creationDate
    java.lang.String sessionID -> sessionID
    java.lang.String ownerJID -> ownerJID
    int currenStage -> currenStage
    void setSessionID(java.lang.String) -> setSessionID
    java.lang.String getSessionID() -> getSessionID
    void setOwnerJID(java.lang.String) -> setOwnerJID
    java.lang.String getOwnerJID() -> getOwnerJID
    long getCreationDate() -> getCreationDate
    boolean isLastStage() -> isLastStage
    boolean hasPermission(java.lang.String) -> hasPermission
    int getCurrentStage() -> getCurrentStage
    void setData(org.jivesoftware.smackx.packet.AdHocCommandData) -> setData
    void incrementStage() -> incrementStage
    void decrementStage() -> decrementStage
org.jivesoftware.smackx.commands.LocalCommandFactory -> org.jivesoftware.smackx.commands.LocalCommandFactory:
    org.jivesoftware.smackx.commands.LocalCommand getInstance() -> getInstance
org.jivesoftware.smackx.commands.RemoteCommand -> org.jivesoftware.smackx.commands.RemoteCommand:
    org.jivesoftware.smack.Connection connection -> connection
    java.lang.String jid -> jid
    java.lang.String sessionID -> sessionID
    long packetReplyTimeout -> packetReplyTimeout
    void cancel() -> cancel
    void complete(org.jivesoftware.smackx.Form) -> complete
    void execute() -> execute
    void execute(org.jivesoftware.smackx.Form) -> execute
    void next(org.jivesoftware.smackx.Form) -> next
    void prev() -> prev
    void executeAction(org.jivesoftware.smackx.commands.AdHocCommand$Action,long) -> executeAction
    void executeAction(org.jivesoftware.smackx.commands.AdHocCommand$Action,org.jivesoftware.smackx.Form,long) -> executeAction
    java.lang.String getOwnerJID() -> getOwnerJID
    long getPacketReplyTimeout() -> getPacketReplyTimeout
    void setPacketReplyTimeout(long) -> setPacketReplyTimeout
org.jivesoftware.smackx.filetransfer.FaultTolerantNegotiator -> org.jivesoftware.smackx.filetransfer.FaultTolerantNegotiator:
    org.jivesoftware.smackx.filetransfer.StreamNegotiator primaryNegotiator -> primaryNegotiator
    org.jivesoftware.smackx.filetransfer.StreamNegotiator secondaryNegotiator -> secondaryNegotiator
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smack.filter.PacketFilter primaryFilter -> primaryFilter
    org.jivesoftware.smack.filter.PacketFilter secondaryFilter -> secondaryFilter
    org.jivesoftware.smack.filter.PacketFilter getInitiationPacketFilter(java.lang.String,java.lang.String) -> getInitiationPacketFilter
    java.io.InputStream negotiateIncomingStream(org.jivesoftware.smack.packet.Packet) -> negotiateIncomingStream
    org.jivesoftware.smack.packet.Packet initiateIncomingStream(org.jivesoftware.smack.Connection,org.jivesoftware.smackx.packet.StreamInitiation) -> initiateIncomingStream
    java.io.InputStream createIncomingStream(org.jivesoftware.smackx.packet.StreamInitiation) -> createIncomingStream
    org.jivesoftware.smackx.filetransfer.StreamNegotiator determineNegotiator(org.jivesoftware.smack.packet.Packet) -> determineNegotiator
    java.io.OutputStream createOutgoingStream(java.lang.String,java.lang.String,java.lang.String) -> createOutgoingStream
    java.lang.String[] getNamespaces() -> getNamespaces
    void cleanup() -> cleanup
    org.jivesoftware.smackx.filetransfer.StreamNegotiator access$000(org.jivesoftware.smackx.filetransfer.FaultTolerantNegotiator,org.jivesoftware.smack.packet.Packet) -> access$000
org.jivesoftware.smackx.filetransfer.FaultTolerantNegotiator$NegotiatorService -> org.jivesoftware.smackx.filetransfer.FaultTolerantNegotiator$NegotiatorService:
    org.jivesoftware.smack.PacketCollector collector -> collector
    org.jivesoftware.smackx.filetransfer.FaultTolerantNegotiator this$0 -> this$0
    java.io.InputStream call() -> call
    java.lang.Object call() -> call
org.jivesoftware.smackx.filetransfer.FileTransfer -> org.jivesoftware.smackx.filetransfer.FileTransfer:
    java.lang.String fileName -> fileName
    java.lang.String filePath -> filePath
    long fileSize -> fileSize
    java.lang.String peer -> peer
    org.jivesoftware.smackx.filetransfer.FileTransfer$Status status -> status
    java.lang.Object statusMonitor -> statusMonitor
    org.jivesoftware.smackx.filetransfer.FileTransferNegotiator negotiator -> negotiator
    java.lang.String streamID -> streamID
    long amountWritten -> amountWritten
    org.jivesoftware.smackx.filetransfer.FileTransfer$Error error -> error
    java.lang.Exception exception -> exception
    int BUFFER_SIZE -> BUFFER_SIZE
    void setFileInfo(java.lang.String,long) -> setFileInfo
    void setFileInfo(java.lang.String,java.lang.String,long) -> setFileInfo
    long getFileSize() -> getFileSize
    java.lang.String getFileName() -> getFileName
    java.lang.String getFilePath() -> getFilePath
    java.lang.String getPeer() -> getPeer
    double getProgress() -> getProgress
    boolean isDone() -> isDone
    org.jivesoftware.smackx.filetransfer.FileTransfer$Status getStatus() -> getStatus
    void setError(org.jivesoftware.smackx.filetransfer.FileTransfer$Error) -> setError
    org.jivesoftware.smackx.filetransfer.FileTransfer$Error getError() -> getError
    java.lang.Exception getException() -> getException
    java.lang.String getStreamID() -> getStreamID
    void cancel() -> cancel
    void setException(java.lang.Exception) -> setException
    void setStatus(org.jivesoftware.smackx.filetransfer.FileTransfer$Status) -> setStatus
    boolean updateStatus(org.jivesoftware.smackx.filetransfer.FileTransfer$Status,org.jivesoftware.smackx.filetransfer.FileTransfer$Status) -> updateStatus
    void writeToStream(java.io.InputStream,java.io.OutputStream) -> writeToStream
    long getAmountWritten() -> getAmountWritten
org.jivesoftware.smackx.filetransfer.FileTransfer$Error -> org.jivesoftware.smackx.filetransfer.FileTransfer$Error:
    org.jivesoftware.smackx.filetransfer.FileTransfer$Error none -> none
    org.jivesoftware.smackx.filetransfer.FileTransfer$Error not_acceptable -> not_acceptable
    org.jivesoftware.smackx.filetransfer.FileTransfer$Error bad_file -> bad_file
    org.jivesoftware.smackx.filetransfer.FileTransfer$Error no_response -> no_response
    org.jivesoftware.smackx.filetransfer.FileTransfer$Error connection -> connection
    org.jivesoftware.smackx.filetransfer.FileTransfer$Error stream -> stream
    java.lang.String msg -> msg
    org.jivesoftware.smackx.filetransfer.FileTransfer$Error[] $VALUES -> $VALUES
    org.jivesoftware.smackx.filetransfer.FileTransfer$Error[] values() -> values
    org.jivesoftware.smackx.filetransfer.FileTransfer$Error valueOf(java.lang.String) -> valueOf
    java.lang.String getMessage() -> getMessage
    java.lang.String toString() -> toString
org.jivesoftware.smackx.filetransfer.FileTransfer$Status -> org.jivesoftware.smackx.filetransfer.FileTransfer$Status:
    org.jivesoftware.smackx.filetransfer.FileTransfer$Status error -> error
    org.jivesoftware.smackx.filetransfer.FileTransfer$Status initial -> initial
    org.jivesoftware.smackx.filetransfer.FileTransfer$Status negotiating_transfer -> negotiating_transfer
    org.jivesoftware.smackx.filetransfer.FileTransfer$Status refused -> refused
    org.jivesoftware.smackx.filetransfer.FileTransfer$Status negotiating_stream -> negotiating_stream
    org.jivesoftware.smackx.filetransfer.FileTransfer$Status negotiated -> negotiated
    org.jivesoftware.smackx.filetransfer.FileTransfer$Status in_progress -> in_progress
    org.jivesoftware.smackx.filetransfer.FileTransfer$Status complete -> complete
    org.jivesoftware.smackx.filetransfer.FileTransfer$Status cancelled -> cancelled
    java.lang.String status -> status
    org.jivesoftware.smackx.filetransfer.FileTransfer$Status[] $VALUES -> $VALUES
    org.jivesoftware.smackx.filetransfer.FileTransfer$Status[] values() -> values
    org.jivesoftware.smackx.filetransfer.FileTransfer$Status valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
org.jivesoftware.smackx.filetransfer.FileTransferListener -> org.jivesoftware.smackx.filetransfer.FileTransferListener:
    void fileTransferRequest(org.jivesoftware.smackx.filetransfer.FileTransferRequest) -> fileTransferRequest
org.jivesoftware.smackx.filetransfer.FileTransferManager -> org.jivesoftware.smackx.filetransfer.FileTransferManager:
    org.jivesoftware.smackx.filetransfer.FileTransferNegotiator fileTransferNegotiator -> fileTransferNegotiator
    java.util.List listeners -> listeners
    org.jivesoftware.smack.Connection connection -> connection
    void addFileTransferListener(org.jivesoftware.smackx.filetransfer.FileTransferListener) -> addFileTransferListener
    void initListeners() -> initListeners
    void fireNewRequest(org.jivesoftware.smackx.packet.StreamInitiation) -> fireNewRequest
    void removeFileTransferListener(org.jivesoftware.smackx.filetransfer.FileTransferListener) -> removeFileTransferListener
    org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer createOutgoingFileTransfer(java.lang.String) -> createOutgoingFileTransfer
    org.jivesoftware.smackx.filetransfer.IncomingFileTransfer createIncomingFileTransfer(org.jivesoftware.smackx.filetransfer.FileTransferRequest) -> createIncomingFileTransfer
    void rejectIncomingFileTransfer(org.jivesoftware.smackx.filetransfer.FileTransferRequest) -> rejectIncomingFileTransfer
org.jivesoftware.smackx.filetransfer.FileTransferManager$1 -> org.jivesoftware.smackx.filetransfer.FileTransferManager$1:
    org.jivesoftware.smackx.filetransfer.FileTransferManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.filetransfer.FileTransferNegotiator -> org.jivesoftware.smackx.filetransfer.FileTransferNegotiator:
    java.lang.String[] NAMESPACE -> NAMESPACE
    java.util.Map transferObject -> transferObject
    java.lang.String STREAM_INIT_PREFIX -> STREAM_INIT_PREFIX
    java.lang.String STREAM_DATA_FIELD_NAME -> STREAM_DATA_FIELD_NAME
    java.util.Random randomGenerator -> randomGenerator
    boolean IBB_ONLY -> IBB_ONLY
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smackx.filetransfer.StreamNegotiator byteStreamTransferManager -> byteStreamTransferManager
    org.jivesoftware.smackx.filetransfer.StreamNegotiator inbandTransferManager -> inbandTransferManager
    org.jivesoftware.smackx.filetransfer.FileTransferNegotiator getInstanceFor(org.jivesoftware.smack.Connection) -> getInstanceFor
    void setServiceEnabled(org.jivesoftware.smack.Connection,boolean) -> setServiceEnabled
    boolean isServiceEnabled(org.jivesoftware.smack.Connection) -> isServiceEnabled
    org.jivesoftware.smack.packet.IQ createIQ(java.lang.String,java.lang.String,java.lang.String,org.jivesoftware.smack.packet.IQ$Type) -> createIQ
    java.util.Collection getSupportedProtocols() -> getSupportedProtocols
    void configureConnection(org.jivesoftware.smack.Connection) -> configureConnection
    void cleanup(org.jivesoftware.smack.Connection) -> cleanup
    org.jivesoftware.smackx.filetransfer.StreamNegotiator selectStreamNegotiator(org.jivesoftware.smackx.filetransfer.FileTransferRequest) -> selectStreamNegotiator
    org.jivesoftware.smackx.FormField getStreamMethodField(org.jivesoftware.smackx.packet.DataForm) -> getStreamMethodField
    org.jivesoftware.smackx.filetransfer.StreamNegotiator getNegotiator(org.jivesoftware.smackx.FormField) -> getNegotiator
    void rejectStream(org.jivesoftware.smackx.packet.StreamInitiation) -> rejectStream
    java.lang.String getNextStreamID() -> getNextStreamID
    org.jivesoftware.smackx.filetransfer.StreamNegotiator negotiateOutgoingTransfer(java.lang.String,java.lang.String,java.lang.String,long,java.lang.String,int) -> negotiateOutgoingTransfer
    org.jivesoftware.smackx.filetransfer.StreamNegotiator getOutgoingNegotiator(org.jivesoftware.smackx.FormField) -> getOutgoingNegotiator
    org.jivesoftware.smackx.packet.DataForm createDefaultInitiationForm() -> createDefaultInitiationForm
    void access$000(org.jivesoftware.smackx.filetransfer.FileTransferNegotiator,org.jivesoftware.smack.Connection) -> access$000
org.jivesoftware.smackx.filetransfer.FileTransferNegotiator$1 -> org.jivesoftware.smackx.filetransfer.FileTransferNegotiator$1:
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.filetransfer.FileTransferNegotiator$2 -> org.jivesoftware.smackx.filetransfer.FileTransferNegotiator$2:
    org.jivesoftware.smack.Connection val$connection -> val$connection
    org.jivesoftware.smackx.filetransfer.FileTransferNegotiator this$0 -> this$0
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void reconnectionSuccessful() -> reconnectionSuccessful
    void reconnectingIn(int) -> reconnectingIn
org.jivesoftware.smackx.filetransfer.FileTransferRequest -> org.jivesoftware.smackx.filetransfer.FileTransferRequest:
    org.jivesoftware.smackx.packet.StreamInitiation streamInitiation -> streamInitiation
    org.jivesoftware.smackx.filetransfer.FileTransferManager manager -> manager
    java.lang.String getFileName() -> getFileName
    long getFileSize() -> getFileSize
    java.lang.String getDescription() -> getDescription
    java.lang.String getMimeType() -> getMimeType
    java.lang.String getRequestor() -> getRequestor
    java.lang.String getStreamID() -> getStreamID
    org.jivesoftware.smackx.packet.StreamInitiation getStreamInitiation() -> getStreamInitiation
    org.jivesoftware.smackx.filetransfer.IncomingFileTransfer accept() -> accept
    void reject() -> reject
org.jivesoftware.smackx.filetransfer.IBBTransferNegotiator -> org.jivesoftware.smackx.filetransfer.IBBTransferNegotiator:
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager manager -> manager
    java.io.OutputStream createOutgoingStream(java.lang.String,java.lang.String,java.lang.String) -> createOutgoingStream
    java.io.InputStream createIncomingStream(org.jivesoftware.smackx.packet.StreamInitiation) -> createIncomingStream
    org.jivesoftware.smack.filter.PacketFilter getInitiationPacketFilter(java.lang.String,java.lang.String) -> getInitiationPacketFilter
    java.lang.String[] getNamespaces() -> getNamespaces
    java.io.InputStream negotiateIncomingStream(org.jivesoftware.smack.packet.Packet) -> negotiateIncomingStream
    void cleanup() -> cleanup
org.jivesoftware.smackx.filetransfer.IBBTransferNegotiator$1 -> org.jivesoftware.smackx.filetransfer.IBBTransferNegotiator$1:
org.jivesoftware.smackx.filetransfer.IBBTransferNegotiator$ByteStreamRequest -> org.jivesoftware.smackx.filetransfer.IBBTransferNegotiator$ByteStreamRequest:
org.jivesoftware.smackx.filetransfer.IBBTransferNegotiator$IBBOpenSidFilter -> org.jivesoftware.smackx.filetransfer.IBBTransferNegotiator$IBBOpenSidFilter:
    java.lang.String sessionID -> sessionID
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smackx.filetransfer.IncomingFileTransfer -> org.jivesoftware.smackx.filetransfer.IncomingFileTransfer:
    org.jivesoftware.smackx.filetransfer.FileTransferRequest recieveRequest -> recieveRequest
    java.io.InputStream inputStream -> inputStream
    java.io.InputStream recieveFile() -> recieveFile
    void recieveFile(java.io.File) -> recieveFile
    void handleXMPPException(org.jivesoftware.smack.XMPPException) -> handleXMPPException
    java.io.InputStream negotiateStream() -> negotiateStream
    void cancel() -> cancel
    java.io.InputStream access$002(org.jivesoftware.smackx.filetransfer.IncomingFileTransfer,java.io.InputStream) -> access$002
    java.io.InputStream access$100(org.jivesoftware.smackx.filetransfer.IncomingFileTransfer) -> access$100
    void access$200(org.jivesoftware.smackx.filetransfer.IncomingFileTransfer,org.jivesoftware.smack.XMPPException) -> access$200
    java.io.InputStream access$000(org.jivesoftware.smackx.filetransfer.IncomingFileTransfer) -> access$000
    org.jivesoftware.smackx.filetransfer.FileTransferRequest access$300(org.jivesoftware.smackx.filetransfer.IncomingFileTransfer) -> access$300
org.jivesoftware.smackx.filetransfer.IncomingFileTransfer$1 -> org.jivesoftware.smackx.filetransfer.IncomingFileTransfer$1:
    java.io.File val$file -> val$file
    org.jivesoftware.smackx.filetransfer.IncomingFileTransfer this$0 -> this$0
    void run() -> run
org.jivesoftware.smackx.filetransfer.IncomingFileTransfer$2 -> org.jivesoftware.smackx.filetransfer.IncomingFileTransfer$2:
    org.jivesoftware.smackx.filetransfer.StreamNegotiator val$streamNegotiator -> val$streamNegotiator
    org.jivesoftware.smackx.filetransfer.IncomingFileTransfer this$0 -> this$0
    java.io.InputStream call() -> call
    java.lang.Object call() -> call
org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer -> org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer:
    int RESPONSE_TIMEOUT -> RESPONSE_TIMEOUT
    org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer$NegotiationProgress callback -> callback
    java.io.OutputStream outputStream -> outputStream
    java.lang.String initiator -> initiator
    java.lang.Thread transferThread -> transferThread
    int getResponseTimeout() -> getResponseTimeout
    void setResponseTimeout(int) -> setResponseTimeout
    void setOutputStream(java.io.OutputStream) -> setOutputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
    java.io.OutputStream sendFile(java.lang.String,long,java.lang.String) -> sendFile
    void sendFile(java.lang.String,long,java.lang.String,org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer$NegotiationProgress) -> sendFile
    void checkTransferThread() -> checkTransferThread
    void sendFile(java.io.File,java.lang.String) -> sendFile
    void sendStream(java.io.InputStream,java.lang.String,long,java.lang.String) -> sendStream
    void handleXMPPException(org.jivesoftware.smack.XMPPException) -> handleXMPPException
    long getBytesSent() -> getBytesSent
    java.io.OutputStream negotiateStream(java.lang.String,long,java.lang.String) -> negotiateStream
    void cancel() -> cancel
    boolean updateStatus(org.jivesoftware.smackx.filetransfer.FileTransfer$Status,org.jivesoftware.smackx.filetransfer.FileTransfer$Status) -> updateStatus
    void setStatus(org.jivesoftware.smackx.filetransfer.FileTransfer$Status) -> setStatus
    void setException(java.lang.Exception) -> setException
    java.io.OutputStream access$002(org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer,java.io.OutputStream) -> access$002
    java.io.OutputStream access$100(org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer,java.lang.String,long,java.lang.String) -> access$100
    java.io.OutputStream access$000(org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer) -> access$000
    void access$200(org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer,org.jivesoftware.smack.XMPPException) -> access$200
org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer$1 -> org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer$1:
    java.lang.String val$fileName -> val$fileName
    long val$fileSize -> val$fileSize
    java.lang.String val$description -> val$description
    org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer$NegotiationProgress val$progress -> val$progress
    org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer this$0 -> this$0
    void run() -> run
org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer$2 -> org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer$2:
    java.io.File val$file -> val$file
    java.lang.String val$description -> val$description
    org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer this$0 -> this$0
    void run() -> run
org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer$3 -> org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer$3:
    java.lang.String val$fileName -> val$fileName
    long val$fileSize -> val$fileSize
    java.lang.String val$description -> val$description
    java.io.InputStream val$in -> val$in
    org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer this$0 -> this$0
    void run() -> run
org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer$NegotiationProgress -> org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer$NegotiationProgress:
    void statusUpdated(org.jivesoftware.smackx.filetransfer.FileTransfer$Status,org.jivesoftware.smackx.filetransfer.FileTransfer$Status) -> statusUpdated
    void outputStreamEstablished(java.io.OutputStream) -> outputStreamEstablished
    void errorEstablishingStream(java.lang.Exception) -> errorEstablishingStream
org.jivesoftware.smackx.filetransfer.Socks5TransferNegotiator -> org.jivesoftware.smackx.filetransfer.Socks5TransferNegotiator:
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager manager -> manager
    java.io.OutputStream createOutgoingStream(java.lang.String,java.lang.String,java.lang.String) -> createOutgoingStream
    java.io.InputStream createIncomingStream(org.jivesoftware.smackx.packet.StreamInitiation) -> createIncomingStream
    org.jivesoftware.smack.filter.PacketFilter getInitiationPacketFilter(java.lang.String,java.lang.String) -> getInitiationPacketFilter
    java.lang.String[] getNamespaces() -> getNamespaces
    java.io.InputStream negotiateIncomingStream(org.jivesoftware.smack.packet.Packet) -> negotiateIncomingStream
    void cleanup() -> cleanup
org.jivesoftware.smackx.filetransfer.Socks5TransferNegotiator$1 -> org.jivesoftware.smackx.filetransfer.Socks5TransferNegotiator$1:
org.jivesoftware.smackx.filetransfer.Socks5TransferNegotiator$ByteStreamRequest -> org.jivesoftware.smackx.filetransfer.Socks5TransferNegotiator$ByteStreamRequest:
org.jivesoftware.smackx.filetransfer.Socks5TransferNegotiator$BytestreamSIDFilter -> org.jivesoftware.smackx.filetransfer.Socks5TransferNegotiator$BytestreamSIDFilter:
    java.lang.String sessionID -> sessionID
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smackx.filetransfer.StreamNegotiator -> org.jivesoftware.smackx.filetransfer.StreamNegotiator:
    org.jivesoftware.smackx.packet.StreamInitiation createInitiationAccept(org.jivesoftware.smackx.packet.StreamInitiation,java.lang.String[]) -> createInitiationAccept
    org.jivesoftware.smack.packet.IQ createError(java.lang.String,java.lang.String,java.lang.String,org.jivesoftware.smack.packet.XMPPError) -> createError
    org.jivesoftware.smack.packet.Packet initiateIncomingStream(org.jivesoftware.smack.Connection,org.jivesoftware.smackx.packet.StreamInitiation) -> initiateIncomingStream
    org.jivesoftware.smack.filter.PacketFilter getInitiationPacketFilter(java.lang.String,java.lang.String) -> getInitiationPacketFilter
    java.io.InputStream negotiateIncomingStream(org.jivesoftware.smack.packet.Packet) -> negotiateIncomingStream
    java.io.InputStream createIncomingStream(org.jivesoftware.smackx.packet.StreamInitiation) -> createIncomingStream
    java.io.OutputStream createOutgoingStream(java.lang.String,java.lang.String,java.lang.String) -> createOutgoingStream
    java.lang.String[] getNamespaces() -> getNamespaces
    void cleanup() -> cleanup
org.jivesoftware.smackx.muc.Affiliate -> org.jivesoftware.smackx.muc.Affiliate:
    java.lang.String jid -> jid
    java.lang.String affiliation -> affiliation
    java.lang.String role -> role
    java.lang.String nick -> nick
    java.lang.String getJid() -> getJid
    java.lang.String getAffiliation() -> getAffiliation
    java.lang.String getRole() -> getRole
    java.lang.String getNick() -> getNick
org.jivesoftware.smackx.muc.ConnectionDetachedPacketCollector -> org.jivesoftware.smackx.muc.ConnectionDetachedPacketCollector:
    int MAX_PACKETS -> MAX_PACKETS
    java.util.LinkedList resultQueue -> resultQueue
    org.jivesoftware.smack.packet.Packet pollResult() -> pollResult
    org.jivesoftware.smack.packet.Packet nextResult() -> nextResult
    org.jivesoftware.smack.packet.Packet nextResult(long) -> nextResult
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.muc.DeafOccupantInterceptor -> org.jivesoftware.smackx.muc.DeafOccupantInterceptor:
    void interceptPacket(org.jivesoftware.smack.packet.Packet) -> interceptPacket
org.jivesoftware.smackx.muc.DeafOccupantInterceptor$1 -> org.jivesoftware.smackx.muc.DeafOccupantInterceptor$1:
org.jivesoftware.smackx.muc.DeafOccupantInterceptor$DeafExtension -> org.jivesoftware.smackx.muc.DeafOccupantInterceptor$DeafExtension:
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.muc.DefaultParticipantStatusListener -> org.jivesoftware.smackx.muc.DefaultParticipantStatusListener:
    void joined(java.lang.String) -> joined
    void left(java.lang.String) -> left
    void kicked(java.lang.String,java.lang.String,java.lang.String) -> kicked
    void voiceGranted(java.lang.String) -> voiceGranted
    void voiceRevoked(java.lang.String) -> voiceRevoked
    void banned(java.lang.String,java.lang.String,java.lang.String) -> banned
    void membershipGranted(java.lang.String) -> membershipGranted
    void membershipRevoked(java.lang.String) -> membershipRevoked
    void moderatorGranted(java.lang.String) -> moderatorGranted
    void moderatorRevoked(java.lang.String) -> moderatorRevoked
    void ownershipGranted(java.lang.String) -> ownershipGranted
    void ownershipRevoked(java.lang.String) -> ownershipRevoked
    void adminGranted(java.lang.String) -> adminGranted
    void adminRevoked(java.lang.String) -> adminRevoked
    void nicknameChanged(java.lang.String,java.lang.String) -> nicknameChanged
org.jivesoftware.smackx.muc.DefaultUserStatusListener -> org.jivesoftware.smackx.muc.DefaultUserStatusListener:
    void kicked(java.lang.String,java.lang.String) -> kicked
    void voiceGranted() -> voiceGranted
    void voiceRevoked() -> voiceRevoked
    void banned(java.lang.String,java.lang.String) -> banned
    void membershipGranted() -> membershipGranted
    void membershipRevoked() -> membershipRevoked
    void moderatorGranted() -> moderatorGranted
    void moderatorRevoked() -> moderatorRevoked
    void ownershipGranted() -> ownershipGranted
    void ownershipRevoked() -> ownershipRevoked
    void adminGranted() -> adminGranted
    void adminRevoked() -> adminRevoked
org.jivesoftware.smackx.muc.DiscussionHistory -> org.jivesoftware.smackx.muc.DiscussionHistory:
    int maxChars -> maxChars
    int maxStanzas -> maxStanzas
    int seconds -> seconds
    java.util.Date since -> since
    int getMaxChars() -> getMaxChars
    int getMaxStanzas() -> getMaxStanzas
    int getSeconds() -> getSeconds
    java.util.Date getSince() -> getSince
    void setMaxChars(int) -> setMaxChars
    void setMaxStanzas(int) -> setMaxStanzas
    void setSeconds(int) -> setSeconds
    void setSince(java.util.Date) -> setSince
    boolean isConfigured() -> isConfigured
    org.jivesoftware.smackx.packet.MUCInitialPresence$History getMUCHistory() -> getMUCHistory
org.jivesoftware.smackx.muc.HostedRoom -> org.jivesoftware.smackx.muc.HostedRoom:
    java.lang.String jid -> jid
    java.lang.String name -> name
    java.lang.String getJid() -> getJid
    java.lang.String getName() -> getName
org.jivesoftware.smackx.muc.InvitationListener -> org.jivesoftware.smackx.muc.InvitationListener:
    void invitationReceived(org.jivesoftware.smack.Connection,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.jivesoftware.smack.packet.Message) -> invitationReceived
org.jivesoftware.smackx.muc.InvitationRejectionListener -> org.jivesoftware.smackx.muc.InvitationRejectionListener:
    void invitationDeclined(java.lang.String,java.lang.String) -> invitationDeclined
org.jivesoftware.smackx.muc.MultiUserChat -> org.jivesoftware.smackx.muc.MultiUserChat:
    java.lang.String discoNamespace -> discoNamespace
    java.lang.String discoNode -> discoNode
    java.util.Map joinedRooms -> joinedRooms
    org.jivesoftware.smack.Connection connection -> connection
    java.lang.String room -> room
    java.lang.String subject -> subject
    java.lang.String nickname -> nickname
    boolean joined -> joined
    java.util.Map occupantsMap -> occupantsMap
    java.util.List invitationRejectionListeners -> invitationRejectionListeners
    java.util.List subjectUpdatedListeners -> subjectUpdatedListeners
    java.util.List userStatusListeners -> userStatusListeners
    java.util.List participantStatusListeners -> participantStatusListeners
    org.jivesoftware.smack.filter.PacketFilter presenceFilter -> presenceFilter
    java.util.List presenceInterceptors -> presenceInterceptors
    org.jivesoftware.smack.filter.PacketFilter messageFilter -> messageFilter
    org.jivesoftware.smackx.muc.RoomListenerMultiplexor roomListenerMultiplexor -> roomListenerMultiplexor
    org.jivesoftware.smackx.muc.ConnectionDetachedPacketCollector messageCollector -> messageCollector
    java.util.List connectionListeners -> connectionListeners
    boolean isServiceEnabled(org.jivesoftware.smack.Connection,java.lang.String) -> isServiceEnabled
    java.util.Iterator getJoinedRooms(org.jivesoftware.smack.Connection) -> getJoinedRooms
    java.util.Iterator getJoinedRooms(org.jivesoftware.smack.Connection,java.lang.String) -> getJoinedRooms
    org.jivesoftware.smackx.muc.RoomInfo getRoomInfo(org.jivesoftware.smack.Connection,java.lang.String) -> getRoomInfo
    java.util.Collection getServiceNames(org.jivesoftware.smack.Connection) -> getServiceNames
    java.util.Collection getHostedRooms(org.jivesoftware.smack.Connection,java.lang.String) -> getHostedRooms
    java.lang.String getRoom() -> getRoom
    void create(java.lang.String) -> create
    void join(java.lang.String) -> join
    void join(java.lang.String,java.lang.String) -> join
    void join(java.lang.String,java.lang.String,org.jivesoftware.smackx.muc.DiscussionHistory,long) -> join
    boolean isJoined() -> isJoined
    void leave() -> leave
    org.jivesoftware.smackx.Form getConfigurationForm() -> getConfigurationForm
    void sendConfigurationForm(org.jivesoftware.smackx.Form) -> sendConfigurationForm
    org.jivesoftware.smackx.Form getRegistrationForm() -> getRegistrationForm
    void sendRegistrationForm(org.jivesoftware.smackx.Form) -> sendRegistrationForm
    void destroy(java.lang.String,java.lang.String) -> destroy
    void invite(java.lang.String,java.lang.String) -> invite
    void invite(org.jivesoftware.smack.packet.Message,java.lang.String,java.lang.String) -> invite
    void decline(org.jivesoftware.smack.Connection,java.lang.String,java.lang.String,java.lang.String) -> decline
    void addInvitationListener(org.jivesoftware.smack.Connection,org.jivesoftware.smackx.muc.InvitationListener) -> addInvitationListener
    void removeInvitationListener(org.jivesoftware.smack.Connection,org.jivesoftware.smackx.muc.InvitationListener) -> removeInvitationListener
    void addInvitationRejectionListener(org.jivesoftware.smackx.muc.InvitationRejectionListener) -> addInvitationRejectionListener
    void removeInvitationRejectionListener(org.jivesoftware.smackx.muc.InvitationRejectionListener) -> removeInvitationRejectionListener
    void fireInvitationRejectionListeners(java.lang.String,java.lang.String) -> fireInvitationRejectionListeners
    void addSubjectUpdatedListener(org.jivesoftware.smackx.muc.SubjectUpdatedListener) -> addSubjectUpdatedListener
    void removeSubjectUpdatedListener(org.jivesoftware.smackx.muc.SubjectUpdatedListener) -> removeSubjectUpdatedListener
    void fireSubjectUpdatedListeners(java.lang.String,java.lang.String) -> fireSubjectUpdatedListeners
    void addPresenceInterceptor(org.jivesoftware.smack.PacketInterceptor) -> addPresenceInterceptor
    void removePresenceInterceptor(org.jivesoftware.smack.PacketInterceptor) -> removePresenceInterceptor
    java.lang.String getSubject() -> getSubject
    java.lang.String getReservedNickname() -> getReservedNickname
    java.lang.String getNickname() -> getNickname
    void changeNickname(java.lang.String) -> changeNickname
    void changeAvailabilityStatus(java.lang.String,org.jivesoftware.smack.packet.Presence$Mode) -> changeAvailabilityStatus
    void kickParticipant(java.lang.String,java.lang.String) -> kickParticipant
    void grantVoice(java.util.Collection) -> grantVoice
    void grantVoice(java.lang.String) -> grantVoice
    void revokeVoice(java.util.Collection) -> revokeVoice
    void revokeVoice(java.lang.String) -> revokeVoice
    void banUsers(java.util.Collection) -> banUsers
    void banUser(java.lang.String,java.lang.String) -> banUser
    void grantMembership(java.util.Collection) -> grantMembership
    void grantMembership(java.lang.String) -> grantMembership
    void revokeMembership(java.util.Collection) -> revokeMembership
    void revokeMembership(java.lang.String) -> revokeMembership
    void grantModerator(java.util.Collection) -> grantModerator
    void grantModerator(java.lang.String) -> grantModerator
    void revokeModerator(java.util.Collection) -> revokeModerator
    void revokeModerator(java.lang.String) -> revokeModerator
    void grantOwnership(java.util.Collection) -> grantOwnership
    void grantOwnership(java.lang.String) -> grantOwnership
    void revokeOwnership(java.util.Collection) -> revokeOwnership
    void revokeOwnership(java.lang.String) -> revokeOwnership
    void grantAdmin(java.util.Collection) -> grantAdmin
    void grantAdmin(java.lang.String) -> grantAdmin
    void revokeAdmin(java.util.Collection) -> revokeAdmin
    void revokeAdmin(java.lang.String) -> revokeAdmin
    void changeAffiliationByOwner(java.lang.String,java.lang.String) -> changeAffiliationByOwner
    void changeAffiliationByOwner(java.util.Collection,java.lang.String) -> changeAffiliationByOwner
    void changeAffiliationByAdmin(java.lang.String,java.lang.String,java.lang.String) -> changeAffiliationByAdmin
    void changeAffiliationByAdmin(java.util.Collection,java.lang.String) -> changeAffiliationByAdmin
    void changeRole(java.lang.String,java.lang.String,java.lang.String) -> changeRole
    void changeRole(java.util.Collection,java.lang.String) -> changeRole
    int getOccupantsCount() -> getOccupantsCount
    java.util.Iterator getOccupants() -> getOccupants
    org.jivesoftware.smack.packet.Presence getOccupantPresence(java.lang.String) -> getOccupantPresence
    org.jivesoftware.smackx.muc.Occupant getOccupant(java.lang.String) -> getOccupant
    void addParticipantListener(org.jivesoftware.smack.PacketListener) -> addParticipantListener
    void removeParticipantListener(org.jivesoftware.smack.PacketListener) -> removeParticipantListener
    java.util.Collection getOwners() -> getOwners
    java.util.Collection getAdmins() -> getAdmins
    java.util.Collection getMembers() -> getMembers
    java.util.Collection getOutcasts() -> getOutcasts
    java.util.Collection getAffiliatesByOwner(java.lang.String) -> getAffiliatesByOwner
    java.util.Collection getAffiliatesByAdmin(java.lang.String) -> getAffiliatesByAdmin
    java.util.Collection getModerators() -> getModerators
    java.util.Collection getParticipants() -> getParticipants
    java.util.Collection getOccupants(java.lang.String) -> getOccupants
    void sendMessage(java.lang.String) -> sendMessage
    org.jivesoftware.smack.Chat createPrivateChat(java.lang.String,org.jivesoftware.smack.MessageListener) -> createPrivateChat
    org.jivesoftware.smack.packet.Message createMessage() -> createMessage
    void sendMessage(org.jivesoftware.smack.packet.Message) -> sendMessage
    org.jivesoftware.smack.packet.Message pollMessage() -> pollMessage
    org.jivesoftware.smack.packet.Message nextMessage() -> nextMessage
    org.jivesoftware.smack.packet.Message nextMessage(long) -> nextMessage
    void addMessageListener(org.jivesoftware.smack.PacketListener) -> addMessageListener
    void removeMessageListener(org.jivesoftware.smack.PacketListener) -> removeMessageListener
    void changeSubject(java.lang.String) -> changeSubject
    void userHasJoined() -> userHasJoined
    void userHasLeft() -> userHasLeft
    org.jivesoftware.smackx.packet.MUCUser getMUCUserExtension(org.jivesoftware.smack.packet.Packet) -> getMUCUserExtension
    void addUserStatusListener(org.jivesoftware.smackx.muc.UserStatusListener) -> addUserStatusListener
    void removeUserStatusListener(org.jivesoftware.smackx.muc.UserStatusListener) -> removeUserStatusListener
    void fireUserStatusListeners(java.lang.String,java.lang.Object[]) -> fireUserStatusListeners
    void addParticipantStatusListener(org.jivesoftware.smackx.muc.ParticipantStatusListener) -> addParticipantStatusListener
    void removeParticipantStatusListener(org.jivesoftware.smackx.muc.ParticipantStatusListener) -> removeParticipantStatusListener
    void fireParticipantStatusListeners(java.lang.String,java.util.List) -> fireParticipantStatusListeners
    void init() -> init
    void checkRoleModifications(java.lang.String,java.lang.String,boolean,java.lang.String) -> checkRoleModifications
    void checkAffiliationModifications(java.lang.String,java.lang.String,boolean,java.lang.String) -> checkAffiliationModifications
    void checkPresenceCode(java.lang.String,boolean,org.jivesoftware.smackx.packet.MUCUser,java.lang.String) -> checkPresenceCode
    void finalize() -> finalize
    java.util.Iterator access$000(org.jivesoftware.smack.Connection) -> access$000
    java.lang.String access$102(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String) -> access$102
    void access$200(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String,java.lang.String) -> access$200
    java.lang.String access$300(org.jivesoftware.smackx.muc.MultiUserChat) -> access$300
    java.lang.String access$400(org.jivesoftware.smackx.muc.MultiUserChat) -> access$400
    java.util.Map access$500(org.jivesoftware.smackx.muc.MultiUserChat) -> access$500
    org.jivesoftware.smackx.packet.MUCUser access$600(org.jivesoftware.smackx.muc.MultiUserChat,org.jivesoftware.smack.packet.Packet) -> access$600
    void access$700(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String,java.lang.String,boolean,java.lang.String) -> access$700
    void access$800(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String,java.lang.String,boolean,java.lang.String) -> access$800
    void access$900(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String,java.util.List) -> access$900
    void access$1000(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String,boolean,org.jivesoftware.smackx.packet.MUCUser,java.lang.String) -> access$1000
    void access$1100(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String,java.lang.String) -> access$1100
org.jivesoftware.smackx.muc.MultiUserChat$1 -> org.jivesoftware.smackx.muc.MultiUserChat$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smackx.muc.MultiUserChat$1$1 -> org.jivesoftware.smackx.muc.MultiUserChat$1$1:
    org.jivesoftware.smack.Connection val$connection -> val$connection
    org.jivesoftware.smackx.muc.MultiUserChat$1 this$0 -> this$0
    java.util.List getNodeItems() -> getNodeItems
    java.util.List getNodeFeatures() -> getNodeFeatures
    java.util.List getNodeIdentities() -> getNodeIdentities
org.jivesoftware.smackx.muc.MultiUserChat$2 -> org.jivesoftware.smackx.muc.MultiUserChat$2:
    java.lang.String val$subject -> val$subject
    org.jivesoftware.smackx.muc.MultiUserChat this$0 -> this$0
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smackx.muc.MultiUserChat$3 -> org.jivesoftware.smackx.muc.MultiUserChat$3:
    org.jivesoftware.smackx.muc.MultiUserChat this$0 -> this$0
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smackx.muc.MultiUserChat$4 -> org.jivesoftware.smackx.muc.MultiUserChat$4:
    org.jivesoftware.smackx.muc.MultiUserChat this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.muc.MultiUserChat$5 -> org.jivesoftware.smackx.muc.MultiUserChat$5:
    org.jivesoftware.smackx.muc.MultiUserChat this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.muc.MultiUserChat$6 -> org.jivesoftware.smackx.muc.MultiUserChat$6:
    org.jivesoftware.smackx.muc.MultiUserChat this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.muc.MultiUserChat$InvitationsMonitor -> org.jivesoftware.smackx.muc.MultiUserChat$InvitationsMonitor:
    java.util.Map monitors -> monitors
    java.util.List invitationsListeners -> invitationsListeners
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smack.filter.PacketFilter invitationFilter -> invitationFilter
    org.jivesoftware.smack.PacketListener invitationPacketListener -> invitationPacketListener
    org.jivesoftware.smackx.muc.MultiUserChat$InvitationsMonitor getInvitationsMonitor(org.jivesoftware.smack.Connection) -> getInvitationsMonitor
    void addInvitationListener(org.jivesoftware.smackx.muc.InvitationListener) -> addInvitationListener
    void removeInvitationListener(org.jivesoftware.smackx.muc.InvitationListener) -> removeInvitationListener
    void fireInvitationListeners(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.jivesoftware.smack.packet.Message) -> fireInvitationListeners
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectingIn(int) -> reconnectingIn
    void reconnectionSuccessful() -> reconnectionSuccessful
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void init() -> init
    void cancel() -> cancel
    void access$1200(org.jivesoftware.smackx.muc.MultiUserChat$InvitationsMonitor,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.jivesoftware.smack.packet.Message) -> access$1200
org.jivesoftware.smackx.muc.MultiUserChat$InvitationsMonitor$1 -> org.jivesoftware.smackx.muc.MultiUserChat$InvitationsMonitor$1:
    org.jivesoftware.smackx.muc.MultiUserChat$InvitationsMonitor this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.muc.Occupant -> org.jivesoftware.smackx.muc.Occupant:
    java.lang.String affiliation -> affiliation
    java.lang.String role -> role
    java.lang.String jid -> jid
    java.lang.String nick -> nick
    java.lang.String getJid() -> getJid
    java.lang.String getAffiliation() -> getAffiliation
    java.lang.String getRole() -> getRole
    java.lang.String getNick() -> getNick
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jivesoftware.smackx.muc.PacketMultiplexListener -> org.jivesoftware.smackx.muc.PacketMultiplexListener:
    org.jivesoftware.smack.filter.PacketFilter MESSAGE_FILTER -> MESSAGE_FILTER
    org.jivesoftware.smack.filter.PacketFilter PRESENCE_FILTER -> PRESENCE_FILTER
    org.jivesoftware.smack.filter.PacketFilter SUBJECT_FILTER -> SUBJECT_FILTER
    org.jivesoftware.smack.filter.PacketFilter DECLINES_FILTER -> DECLINES_FILTER
    org.jivesoftware.smackx.muc.ConnectionDetachedPacketCollector messageCollector -> messageCollector
    org.jivesoftware.smack.PacketListener presenceListener -> presenceListener
    org.jivesoftware.smack.PacketListener subjectListener -> subjectListener
    org.jivesoftware.smack.PacketListener declinesListener -> declinesListener
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.muc.PacketMultiplexListener$1 -> org.jivesoftware.smackx.muc.PacketMultiplexListener$1:
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smackx.muc.ParticipantStatusListener -> org.jivesoftware.smackx.muc.ParticipantStatusListener:
    void joined(java.lang.String) -> joined
    void left(java.lang.String) -> left
    void kicked(java.lang.String,java.lang.String,java.lang.String) -> kicked
    void voiceGranted(java.lang.String) -> voiceGranted
    void voiceRevoked(java.lang.String) -> voiceRevoked
    void banned(java.lang.String,java.lang.String,java.lang.String) -> banned
    void membershipGranted(java.lang.String) -> membershipGranted
    void membershipRevoked(java.lang.String) -> membershipRevoked
    void moderatorGranted(java.lang.String) -> moderatorGranted
    void moderatorRevoked(java.lang.String) -> moderatorRevoked
    void ownershipGranted(java.lang.String) -> ownershipGranted
    void ownershipRevoked(java.lang.String) -> ownershipRevoked
    void adminGranted(java.lang.String) -> adminGranted
    void adminRevoked(java.lang.String) -> adminRevoked
    void nicknameChanged(java.lang.String,java.lang.String) -> nicknameChanged
org.jivesoftware.smackx.muc.RoomInfo -> org.jivesoftware.smackx.muc.RoomInfo:
    java.lang.String room -> room
    java.lang.String description -> description
    java.lang.String subject -> subject
    int occupantsCount -> occupantsCount
    boolean membersOnly -> membersOnly
    boolean moderated -> moderated
    boolean nonanonymous -> nonanonymous
    boolean passwordProtected -> passwordProtected
    boolean persistent -> persistent
    java.lang.String getRoom() -> getRoom
    java.lang.String getDescription() -> getDescription
    java.lang.String getSubject() -> getSubject
    int getOccupantsCount() -> getOccupantsCount
    boolean isMembersOnly() -> isMembersOnly
    boolean isModerated() -> isModerated
    boolean isNonanonymous() -> isNonanonymous
    boolean isPasswordProtected() -> isPasswordProtected
    boolean isPersistent() -> isPersistent
org.jivesoftware.smackx.muc.RoomListenerMultiplexor -> org.jivesoftware.smackx.muc.RoomListenerMultiplexor:
    java.util.Map monitors -> monitors
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smackx.muc.RoomListenerMultiplexor$RoomMultiplexFilter filter -> filter
    org.jivesoftware.smackx.muc.RoomListenerMultiplexor$RoomMultiplexListener listener -> listener
    org.jivesoftware.smackx.muc.RoomListenerMultiplexor getRoomMultiplexor(org.jivesoftware.smack.Connection) -> getRoomMultiplexor
    void addRoom(java.lang.String,org.jivesoftware.smackx.muc.PacketMultiplexListener) -> addRoom
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectingIn(int) -> reconnectingIn
    void reconnectionSuccessful() -> reconnectionSuccessful
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void init() -> init
    void removeRoom(java.lang.String) -> removeRoom
    void cancel() -> cancel
org.jivesoftware.smackx.muc.RoomListenerMultiplexor$1 -> org.jivesoftware.smackx.muc.RoomListenerMultiplexor$1:
org.jivesoftware.smackx.muc.RoomListenerMultiplexor$RoomMultiplexFilter -> org.jivesoftware.smackx.muc.RoomListenerMultiplexor$RoomMultiplexFilter:
    java.util.Map roomAddressTable -> roomAddressTable
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
    void addRoom(java.lang.String) -> addRoom
    void removeRoom(java.lang.String) -> removeRoom
org.jivesoftware.smackx.muc.RoomListenerMultiplexor$RoomMultiplexListener -> org.jivesoftware.smackx.muc.RoomListenerMultiplexor$RoomMultiplexListener:
    java.util.Map roomListenersByAddress -> roomListenersByAddress
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    void addRoom(java.lang.String,org.jivesoftware.smackx.muc.PacketMultiplexListener) -> addRoom
    void removeRoom(java.lang.String) -> removeRoom
org.jivesoftware.smackx.muc.SubjectUpdatedListener -> org.jivesoftware.smackx.muc.SubjectUpdatedListener:
    void subjectUpdated(java.lang.String,java.lang.String) -> subjectUpdated
org.jivesoftware.smackx.muc.UserStatusListener -> org.jivesoftware.smackx.muc.UserStatusListener:
    void kicked(java.lang.String,java.lang.String) -> kicked
    void voiceGranted() -> voiceGranted
    void voiceRevoked() -> voiceRevoked
    void banned(java.lang.String,java.lang.String) -> banned
    void membershipGranted() -> membershipGranted
    void membershipRevoked() -> membershipRevoked
    void moderatorGranted() -> moderatorGranted
    void moderatorRevoked() -> moderatorRevoked
    void ownershipGranted() -> ownershipGranted
    void ownershipRevoked() -> ownershipRevoked
    void adminGranted() -> adminGranted
    void adminRevoked() -> adminRevoked
org.jivesoftware.smackx.packet.AdHocCommandData -> org.jivesoftware.smackx.packet.AdHocCommandData:
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String node -> node
    java.lang.String sessionID -> sessionID
    java.util.List notes -> notes
    org.jivesoftware.smackx.packet.DataForm form -> form
    org.jivesoftware.smackx.commands.AdHocCommand$Action action -> action
    org.jivesoftware.smackx.commands.AdHocCommand$Status status -> status
    java.util.ArrayList actions -> actions
    org.jivesoftware.smackx.commands.AdHocCommand$Action executeAction -> executeAction
    java.lang.String lang -> lang
    java.lang.String getChildElementXML() -> getChildElementXML
    java.lang.String getId() -> getId
    void setId(java.lang.String) -> setId
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getNode() -> getNode
    void setNode(java.lang.String) -> setNode
    java.util.List getNotes() -> getNotes
    void addNote(org.jivesoftware.smackx.commands.AdHocCommandNote) -> addNote
    void remveNote(org.jivesoftware.smackx.commands.AdHocCommandNote) -> remveNote
    org.jivesoftware.smackx.packet.DataForm getForm() -> getForm
    void setForm(org.jivesoftware.smackx.packet.DataForm) -> setForm
    org.jivesoftware.smackx.commands.AdHocCommand$Action getAction() -> getAction
    void setAction(org.jivesoftware.smackx.commands.AdHocCommand$Action) -> setAction
    org.jivesoftware.smackx.commands.AdHocCommand$Status getStatus() -> getStatus
    void setStatus(org.jivesoftware.smackx.commands.AdHocCommand$Status) -> setStatus
    java.util.List getActions() -> getActions
    void addAction(org.jivesoftware.smackx.commands.AdHocCommand$Action) -> addAction
    void setExecuteAction(org.jivesoftware.smackx.commands.AdHocCommand$Action) -> setExecuteAction
    org.jivesoftware.smackx.commands.AdHocCommand$Action getExecuteAction() -> getExecuteAction
    void setSessionID(java.lang.String) -> setSessionID
    java.lang.String getSessionID() -> getSessionID
org.jivesoftware.smackx.packet.AdHocCommandData$SpecificError -> org.jivesoftware.smackx.packet.AdHocCommandData$SpecificError:
    java.lang.String namespace -> namespace
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition condition -> condition
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition getCondition() -> getCondition
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.AttentionExtension -> org.jivesoftware.smackx.packet.AttentionExtension:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.AttentionExtension$Provider -> org.jivesoftware.smackx.packet.AttentionExtension$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.packet.CapsExtension -> org.jivesoftware.smackx.packet.CapsExtension:
    java.lang.String node -> node
    java.lang.String version -> version
    java.lang.String hash -> hash
    java.lang.String XMLNS -> XMLNS
    java.lang.String NODE_NAME -> NODE_NAME
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getNode() -> getNode
    void setNode(java.lang.String) -> setNode
    java.lang.String getVersion() -> getVersion
    void setVersion(java.lang.String) -> setVersion
    java.lang.String getHash() -> getHash
    void setHash(java.lang.String) -> setHash
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.ChatStateExtension -> org.jivesoftware.smackx.packet.ChatStateExtension:
    org.jivesoftware.smackx.ChatState state -> state
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.ChatStateExtension$Provider -> org.jivesoftware.smackx.packet.ChatStateExtension$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.packet.DataForm -> org.jivesoftware.smackx.packet.DataForm:
    java.lang.String type -> type
    java.lang.String title -> title
    java.util.List instructions -> instructions
    org.jivesoftware.smackx.packet.DataForm$ReportedData reportedData -> reportedData
    java.util.List items -> items
    java.util.List fields -> fields
    java.lang.String getType() -> getType
    java.lang.String getTitle() -> getTitle
    java.util.Iterator getInstructions() -> getInstructions
    org.jivesoftware.smackx.packet.DataForm$ReportedData getReportedData() -> getReportedData
    java.util.Iterator getItems() -> getItems
    java.util.Iterator getFields() -> getFields
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    void setTitle(java.lang.String) -> setTitle
    void setInstructions(java.util.List) -> setInstructions
    void setReportedData(org.jivesoftware.smackx.packet.DataForm$ReportedData) -> setReportedData
    void addField(org.jivesoftware.smackx.FormField) -> addField
    void addInstruction(java.lang.String) -> addInstruction
    void addItem(org.jivesoftware.smackx.packet.DataForm$Item) -> addItem
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.DataForm$Item -> org.jivesoftware.smackx.packet.DataForm$Item:
    java.util.List fields -> fields
    java.util.Iterator getFields() -> getFields
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.DataForm$ReportedData -> org.jivesoftware.smackx.packet.DataForm$ReportedData:
    java.util.List fields -> fields
    java.util.Iterator getFields() -> getFields
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.DefaultPrivateData -> org.jivesoftware.smackx.packet.DefaultPrivateData:
    java.lang.String elementName -> elementName
    java.lang.String namespace -> namespace
    java.util.Map map -> map
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    java.util.Iterator getNames() -> getNames
    java.lang.String getValue(java.lang.String) -> getValue
    void setValue(java.lang.String,java.lang.String) -> setValue
org.jivesoftware.smackx.packet.DelayInfo -> org.jivesoftware.smackx.packet.DelayInfo:
    org.jivesoftware.smackx.packet.DelayInformation wrappedInfo -> wrappedInfo
    java.lang.String getFrom() -> getFrom
    java.lang.String getReason() -> getReason
    java.util.Date getStamp() -> getStamp
    void setFrom(java.lang.String) -> setFrom
    void setReason(java.lang.String) -> setReason
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.DelayInformation -> org.jivesoftware.smackx.packet.DelayInformation:
    java.text.DateFormat XEP_0091_UTC_FORMAT -> XEP_0091_UTC_FORMAT
    java.util.Date stamp -> stamp
    java.lang.String from -> from
    java.lang.String reason -> reason
    java.lang.String getFrom() -> getFrom
    void setFrom(java.lang.String) -> setFrom
    java.util.Date getStamp() -> getStamp
    java.lang.String getReason() -> getReason
    void setReason(java.lang.String) -> setReason
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.DiscoverInfo -> org.jivesoftware.smackx.packet.DiscoverInfo:
    java.util.List features -> features
    java.util.List identities -> identities
    java.lang.String node -> node
    void addFeature(java.lang.String) -> addFeature
    void addFeature(org.jivesoftware.smackx.packet.DiscoverInfo$Feature) -> addFeature
    java.util.Iterator getFeatures() -> getFeatures
    void addIdentity(org.jivesoftware.smackx.packet.DiscoverInfo$Identity) -> addIdentity
    java.util.Iterator getIdentities() -> getIdentities
    java.lang.String getNode() -> getNode
    void setNode(java.lang.String) -> setNode
    boolean containsFeature(java.lang.String) -> containsFeature
    java.lang.String getChildElementXML() -> getChildElementXML
    org.jivesoftware.smackx.packet.DiscoverInfo clone() -> clone
    java.lang.Object clone() -> clone
org.jivesoftware.smackx.packet.DiscoverInfo$Feature -> org.jivesoftware.smackx.packet.DiscoverInfo$Feature:
    java.lang.String variable -> variable
    java.lang.String getVar() -> getVar
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.DiscoverInfo$Identity -> org.jivesoftware.smackx.packet.DiscoverInfo$Identity:
    java.lang.String category -> category
    java.lang.String name -> name
    java.lang.String type -> type
    java.lang.String getCategory() -> getCategory
    java.lang.String getName() -> getName
    java.lang.String getType() -> getType
    void setType(java.lang.String) -> setType
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.DiscoverItems -> org.jivesoftware.smackx.packet.DiscoverItems:
    java.util.List items -> items
    java.lang.String node -> node
    void addItem(org.jivesoftware.smackx.packet.DiscoverItems$Item) -> addItem
    java.util.Iterator getItems() -> getItems
    java.lang.String getNode() -> getNode
    void setNode(java.lang.String) -> setNode
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.packet.DiscoverItems$Item -> org.jivesoftware.smackx.packet.DiscoverItems$Item:
    java.lang.String UPDATE_ACTION -> UPDATE_ACTION
    java.lang.String REMOVE_ACTION -> REMOVE_ACTION
    java.lang.String entityID -> entityID
    java.lang.String name -> name
    java.lang.String node -> node
    java.lang.String action -> action
    java.lang.String getEntityID() -> getEntityID
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getNode() -> getNode
    void setNode(java.lang.String) -> setNode
    java.lang.String getAction() -> getAction
    void setAction(java.lang.String) -> setAction
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.Header -> org.jivesoftware.smackx.packet.Header:
    java.lang.String name -> name
    java.lang.String value -> value
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.HeadersExtension -> org.jivesoftware.smackx.packet.HeadersExtension:
    java.lang.String NAMESPACE -> NAMESPACE
    java.util.Collection headers -> headers
    java.util.Collection getHeaders() -> getHeaders
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.LastActivity -> org.jivesoftware.smackx.packet.LastActivity:
    long lastActivity -> lastActivity
    java.lang.String message -> message
    java.lang.String getChildElementXML() -> getChildElementXML
    void setLastActivity(long) -> setLastActivity
    void setMessage(java.lang.String) -> setMessage
    long getIdleTime() -> getIdleTime
    java.lang.String getStatusMessage() -> getStatusMessage
    org.jivesoftware.smackx.packet.LastActivity getLastActivity(org.jivesoftware.smack.Connection,java.lang.String) -> getLastActivity
    void access$000(org.jivesoftware.smackx.packet.LastActivity,java.lang.String) -> access$000
org.jivesoftware.smackx.packet.LastActivity$Provider -> org.jivesoftware.smackx.packet.LastActivity$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.packet.MUCAdmin -> org.jivesoftware.smackx.packet.MUCAdmin:
    java.util.List items -> items
    java.util.Iterator getItems() -> getItems
    void addItem(org.jivesoftware.smackx.packet.MUCAdmin$Item) -> addItem
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.packet.MUCAdmin$Item -> org.jivesoftware.smackx.packet.MUCAdmin$Item:
    java.lang.String actor -> actor
    java.lang.String reason -> reason
    java.lang.String affiliation -> affiliation
    java.lang.String jid -> jid
    java.lang.String nick -> nick
    java.lang.String role -> role
    java.lang.String getActor() -> getActor
    java.lang.String getReason() -> getReason
    java.lang.String getAffiliation() -> getAffiliation
    java.lang.String getJid() -> getJid
    java.lang.String getNick() -> getNick
    java.lang.String getRole() -> getRole
    void setActor(java.lang.String) -> setActor
    void setReason(java.lang.String) -> setReason
    void setJid(java.lang.String) -> setJid
    void setNick(java.lang.String) -> setNick
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCInitialPresence -> org.jivesoftware.smackx.packet.MUCInitialPresence:
    java.lang.String password -> password
    org.jivesoftware.smackx.packet.MUCInitialPresence$History history -> history
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    org.jivesoftware.smackx.packet.MUCInitialPresence$History getHistory() -> getHistory
    java.lang.String getPassword() -> getPassword
    void setHistory(org.jivesoftware.smackx.packet.MUCInitialPresence$History) -> setHistory
    void setPassword(java.lang.String) -> setPassword
org.jivesoftware.smackx.packet.MUCInitialPresence$History -> org.jivesoftware.smackx.packet.MUCInitialPresence$History:
    int maxChars -> maxChars
    int maxStanzas -> maxStanzas
    int seconds -> seconds
    java.util.Date since -> since
    int getMaxChars() -> getMaxChars
    int getMaxStanzas() -> getMaxStanzas
    int getSeconds() -> getSeconds
    java.util.Date getSince() -> getSince
    void setMaxChars(int) -> setMaxChars
    void setMaxStanzas(int) -> setMaxStanzas
    void setSeconds(int) -> setSeconds
    void setSince(java.util.Date) -> setSince
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCOwner -> org.jivesoftware.smackx.packet.MUCOwner:
    java.util.List items -> items
    org.jivesoftware.smackx.packet.MUCOwner$Destroy destroy -> destroy
    java.util.Iterator getItems() -> getItems
    org.jivesoftware.smackx.packet.MUCOwner$Destroy getDestroy() -> getDestroy
    void setDestroy(org.jivesoftware.smackx.packet.MUCOwner$Destroy) -> setDestroy
    void addItem(org.jivesoftware.smackx.packet.MUCOwner$Item) -> addItem
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.packet.MUCOwner$Destroy -> org.jivesoftware.smackx.packet.MUCOwner$Destroy:
    java.lang.String reason -> reason
    java.lang.String jid -> jid
    java.lang.String getJid() -> getJid
    java.lang.String getReason() -> getReason
    void setJid(java.lang.String) -> setJid
    void setReason(java.lang.String) -> setReason
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCOwner$Item -> org.jivesoftware.smackx.packet.MUCOwner$Item:
    java.lang.String actor -> actor
    java.lang.String reason -> reason
    java.lang.String affiliation -> affiliation
    java.lang.String jid -> jid
    java.lang.String nick -> nick
    java.lang.String role -> role
    java.lang.String getActor() -> getActor
    java.lang.String getReason() -> getReason
    java.lang.String getAffiliation() -> getAffiliation
    java.lang.String getJid() -> getJid
    java.lang.String getNick() -> getNick
    java.lang.String getRole() -> getRole
    void setActor(java.lang.String) -> setActor
    void setReason(java.lang.String) -> setReason
    void setJid(java.lang.String) -> setJid
    void setNick(java.lang.String) -> setNick
    void setRole(java.lang.String) -> setRole
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCUser -> org.jivesoftware.smackx.packet.MUCUser:
    org.jivesoftware.smackx.packet.MUCUser$Invite invite -> invite
    org.jivesoftware.smackx.packet.MUCUser$Decline decline -> decline
    org.jivesoftware.smackx.packet.MUCUser$Item item -> item
    java.lang.String password -> password
    org.jivesoftware.smackx.packet.MUCUser$Status status -> status
    org.jivesoftware.smackx.packet.MUCUser$Destroy destroy -> destroy
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    org.jivesoftware.smackx.packet.MUCUser$Invite getInvite() -> getInvite
    org.jivesoftware.smackx.packet.MUCUser$Decline getDecline() -> getDecline
    org.jivesoftware.smackx.packet.MUCUser$Item getItem() -> getItem
    java.lang.String getPassword() -> getPassword
    org.jivesoftware.smackx.packet.MUCUser$Status getStatus() -> getStatus
    org.jivesoftware.smackx.packet.MUCUser$Destroy getDestroy() -> getDestroy
    void setInvite(org.jivesoftware.smackx.packet.MUCUser$Invite) -> setInvite
    void setDecline(org.jivesoftware.smackx.packet.MUCUser$Decline) -> setDecline
    void setItem(org.jivesoftware.smackx.packet.MUCUser$Item) -> setItem
    void setPassword(java.lang.String) -> setPassword
    void setStatus(org.jivesoftware.smackx.packet.MUCUser$Status) -> setStatus
    void setDestroy(org.jivesoftware.smackx.packet.MUCUser$Destroy) -> setDestroy
org.jivesoftware.smackx.packet.MUCUser$Decline -> org.jivesoftware.smackx.packet.MUCUser$Decline:
    java.lang.String reason -> reason
    java.lang.String from -> from
    java.lang.String to -> to
    java.lang.String getFrom() -> getFrom
    java.lang.String getReason() -> getReason
    java.lang.String getTo() -> getTo
    void setFrom(java.lang.String) -> setFrom
    void setReason(java.lang.String) -> setReason
    void setTo(java.lang.String) -> setTo
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCUser$Destroy -> org.jivesoftware.smackx.packet.MUCUser$Destroy:
    java.lang.String reason -> reason
    java.lang.String jid -> jid
    java.lang.String getJid() -> getJid
    java.lang.String getReason() -> getReason
    void setJid(java.lang.String) -> setJid
    void setReason(java.lang.String) -> setReason
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCUser$Invite -> org.jivesoftware.smackx.packet.MUCUser$Invite:
    java.lang.String reason -> reason
    java.lang.String from -> from
    java.lang.String to -> to
    java.lang.String getFrom() -> getFrom
    java.lang.String getReason() -> getReason
    java.lang.String getTo() -> getTo
    void setFrom(java.lang.String) -> setFrom
    void setReason(java.lang.String) -> setReason
    void setTo(java.lang.String) -> setTo
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCUser$Item -> org.jivesoftware.smackx.packet.MUCUser$Item:
    java.lang.String actor -> actor
    java.lang.String reason -> reason
    java.lang.String affiliation -> affiliation
    java.lang.String jid -> jid
    java.lang.String nick -> nick
    java.lang.String role -> role
    java.lang.String getActor() -> getActor
    java.lang.String getReason() -> getReason
    java.lang.String getAffiliation() -> getAffiliation
    java.lang.String getJid() -> getJid
    java.lang.String getNick() -> getNick
    java.lang.String getRole() -> getRole
    void setActor(java.lang.String) -> setActor
    void setReason(java.lang.String) -> setReason
    void setJid(java.lang.String) -> setJid
    void setNick(java.lang.String) -> setNick
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCUser$Status -> org.jivesoftware.smackx.packet.MUCUser$Status:
    java.lang.String code -> code
    java.lang.String getCode() -> getCode
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MessageEvent -> org.jivesoftware.smackx.packet.MessageEvent:
    java.lang.String OFFLINE -> OFFLINE
    java.lang.String COMPOSING -> COMPOSING
    java.lang.String DISPLAYED -> DISPLAYED
    java.lang.String DELIVERED -> DELIVERED
    java.lang.String CANCELLED -> CANCELLED
    boolean offline -> offline
    boolean delivered -> delivered
    boolean displayed -> displayed
    boolean composing -> composing
    boolean cancelled -> cancelled
    java.lang.String packetID -> packetID
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    boolean isComposing() -> isComposing
    boolean isDelivered() -> isDelivered
    boolean isDisplayed() -> isDisplayed
    boolean isOffline() -> isOffline
    boolean isCancelled() -> isCancelled
    java.lang.String getPacketID() -> getPacketID
    java.util.Iterator getEventTypes() -> getEventTypes
    void setComposing(boolean) -> setComposing
    void setDelivered(boolean) -> setDelivered
    void setDisplayed(boolean) -> setDisplayed
    void setOffline(boolean) -> setOffline
    void setCancelled(boolean) -> setCancelled
    void setPacketID(java.lang.String) -> setPacketID
    boolean isMessageEventRequest() -> isMessageEventRequest
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MultipleAddresses -> org.jivesoftware.smackx.packet.MultipleAddresses:
    java.lang.String BCC -> BCC
    java.lang.String CC -> CC
    java.lang.String NO_REPLY -> NO_REPLY
    java.lang.String REPLY_ROOM -> REPLY_ROOM
    java.lang.String REPLY_TO -> REPLY_TO
    java.lang.String TO -> TO
    java.util.List addresses -> addresses
    void addAddress(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String) -> addAddress
    void setNoReply() -> setNoReply
    java.util.List getAddressesOfType(java.lang.String) -> getAddressesOfType
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MultipleAddresses$1 -> org.jivesoftware.smackx.packet.MultipleAddresses$1:
org.jivesoftware.smackx.packet.MultipleAddresses$Address -> org.jivesoftware.smackx.packet.MultipleAddresses$Address:
    java.lang.String type -> type
    java.lang.String jid -> jid
    java.lang.String node -> node
    java.lang.String description -> description
    boolean delivered -> delivered
    java.lang.String uri -> uri
    java.lang.String getType() -> getType
    java.lang.String getJid() -> getJid
    void setJid(java.lang.String) -> setJid
    java.lang.String getNode() -> getNode
    void setNode(java.lang.String) -> setNode
    java.lang.String getDescription() -> getDescription
    void setDescription(java.lang.String) -> setDescription
    boolean isDelivered() -> isDelivered
    void setDelivered(boolean) -> setDelivered
    java.lang.String getUri() -> getUri
    void setUri(java.lang.String) -> setUri
    java.lang.String toXML() -> toXML
    void access$100(org.jivesoftware.smackx.packet.MultipleAddresses$Address,java.lang.String) -> access$100
    void access$200(org.jivesoftware.smackx.packet.MultipleAddresses$Address,java.lang.String) -> access$200
    void access$300(org.jivesoftware.smackx.packet.MultipleAddresses$Address,java.lang.String) -> access$300
    void access$400(org.jivesoftware.smackx.packet.MultipleAddresses$Address,boolean) -> access$400
    void access$500(org.jivesoftware.smackx.packet.MultipleAddresses$Address,java.lang.String) -> access$500
    java.lang.String access$600(org.jivesoftware.smackx.packet.MultipleAddresses$Address) -> access$600
org.jivesoftware.smackx.packet.Nick -> org.jivesoftware.smackx.packet.Nick:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String name -> name
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.Nick$Provider -> org.jivesoftware.smackx.packet.Nick$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.packet.OfflineMessageInfo -> org.jivesoftware.smackx.packet.OfflineMessageInfo:
    java.lang.String node -> node
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getNode() -> getNode
    void setNode(java.lang.String) -> setNode
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.OfflineMessageInfo$Provider -> org.jivesoftware.smackx.packet.OfflineMessageInfo$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.packet.OfflineMessageRequest -> org.jivesoftware.smackx.packet.OfflineMessageRequest:
    java.util.List items -> items
    boolean purge -> purge
    boolean fetch -> fetch
    java.util.Iterator getItems() -> getItems
    void addItem(org.jivesoftware.smackx.packet.OfflineMessageRequest$Item) -> addItem
    boolean isPurge() -> isPurge
    void setPurge(boolean) -> setPurge
    boolean isFetch() -> isFetch
    void setFetch(boolean) -> setFetch
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.packet.OfflineMessageRequest$Item -> org.jivesoftware.smackx.packet.OfflineMessageRequest$Item:
    java.lang.String action -> action
    java.lang.String jid -> jid
    java.lang.String node -> node
    java.lang.String getNode() -> getNode
    java.lang.String getAction() -> getAction
    void setAction(java.lang.String) -> setAction
    java.lang.String getJid() -> getJid
    void setJid(java.lang.String) -> setJid
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.OfflineMessageRequest$Provider -> org.jivesoftware.smackx.packet.OfflineMessageRequest$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    org.jivesoftware.smackx.packet.OfflineMessageRequest$Item parseItem(org.xmlpull.v1.XmlPullParser) -> parseItem
org.jivesoftware.smackx.packet.PEPEvent -> org.jivesoftware.smackx.packet.PEPEvent:
    org.jivesoftware.smackx.packet.PEPItem item -> item
    void addPEPItem(org.jivesoftware.smackx.packet.PEPItem) -> addPEPItem
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.PEPItem -> org.jivesoftware.smackx.packet.PEPItem:
    java.lang.String id -> id
    java.lang.String getNode() -> getNode
    java.lang.String getItemDetailsXML() -> getItemDetailsXML
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.PEPPubSub -> org.jivesoftware.smackx.packet.PEPPubSub:
    org.jivesoftware.smackx.packet.PEPItem item -> item
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.packet.PrivateData -> org.jivesoftware.smackx.packet.PrivateData:
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.RosterExchange -> org.jivesoftware.smackx.packet.RosterExchange:
    java.util.List remoteRosterEntries -> remoteRosterEntries
    void addRosterEntry(org.jivesoftware.smack.RosterEntry) -> addRosterEntry
    void addRosterEntry(org.jivesoftware.smackx.RemoteRosterEntry) -> addRosterEntry
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.util.Iterator getRosterEntries() -> getRosterEntries
    int getEntryCount() -> getEntryCount
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.SharedGroupsInfo -> org.jivesoftware.smackx.packet.SharedGroupsInfo:
    java.util.List groups -> groups
    java.util.List getGroups() -> getGroups
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.packet.SharedGroupsInfo$Provider -> org.jivesoftware.smackx.packet.SharedGroupsInfo$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.packet.StreamInitiation -> org.jivesoftware.smackx.packet.StreamInitiation:
    java.lang.String id -> id
    java.lang.String mimeType -> mimeType
    org.jivesoftware.smackx.packet.StreamInitiation$File file -> file
    org.jivesoftware.smackx.packet.StreamInitiation$Feature featureNegotiation -> featureNegotiation
    void setSesssionID(java.lang.String) -> setSesssionID
    java.lang.String getSessionID() -> getSessionID
    void setMimeType(java.lang.String) -> setMimeType
    java.lang.String getMimeType() -> getMimeType
    void setFile(org.jivesoftware.smackx.packet.StreamInitiation$File) -> setFile
    org.jivesoftware.smackx.packet.StreamInitiation$File getFile() -> getFile
    void setFeatureNegotiationForm(org.jivesoftware.smackx.packet.DataForm) -> setFeatureNegotiationForm
    org.jivesoftware.smackx.packet.DataForm getFeatureNegotiationForm() -> getFeatureNegotiationForm
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.packet.StreamInitiation$Feature -> org.jivesoftware.smackx.packet.StreamInitiation$Feature:
    org.jivesoftware.smackx.packet.DataForm data -> data
    org.jivesoftware.smackx.packet.StreamInitiation this$0 -> this$0
    org.jivesoftware.smackx.packet.DataForm getData() -> getData
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getElementName() -> getElementName
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.StreamInitiation$File -> org.jivesoftware.smackx.packet.StreamInitiation$File:
    java.lang.String name -> name
    long size -> size
    java.lang.String hash -> hash
    java.util.Date date -> date
    java.lang.String desc -> desc
    boolean isRanged -> isRanged
    java.lang.String getName() -> getName
    long getSize() -> getSize
    void setHash(java.lang.String) -> setHash
    java.lang.String getHash() -> getHash
    void setDate(java.util.Date) -> setDate
    java.util.Date getDate() -> getDate
    void setDesc(java.lang.String) -> setDesc
    java.lang.String getDesc() -> getDesc
    void setRanged(boolean) -> setRanged
    boolean isRanged() -> isRanged
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.SyncPacketSend -> org.jivesoftware.smackx.packet.SyncPacketSend:
    org.jivesoftware.smack.packet.Packet getReply(org.jivesoftware.smack.Connection,org.jivesoftware.smack.packet.Packet,long) -> getReply
    org.jivesoftware.smack.packet.Packet getReply(org.jivesoftware.smack.Connection,org.jivesoftware.smack.packet.Packet) -> getReply
org.jivesoftware.smackx.packet.Time -> org.jivesoftware.smackx.packet.Time:
    java.text.SimpleDateFormat utcFormat -> utcFormat
    java.text.DateFormat displayFormat -> displayFormat
    java.lang.String utc -> utc
    java.lang.String tz -> tz
    java.lang.String display -> display
    java.util.Date getTime() -> getTime
    void setTime(java.util.Date) -> setTime
    java.lang.String getUtc() -> getUtc
    void setUtc(java.lang.String) -> setUtc
    java.lang.String getTz() -> getTz
    void setTz(java.lang.String) -> setTz
    java.lang.String getDisplay() -> getDisplay
    void setDisplay(java.lang.String) -> setDisplay
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.packet.VCard -> org.jivesoftware.smackx.packet.VCard:
    java.util.Map homePhones -> homePhones
    java.util.Map workPhones -> workPhones
    java.util.Map homeAddr -> homeAddr
    java.util.Map workAddr -> workAddr
    java.lang.String firstName -> firstName
    java.lang.String lastName -> lastName
    java.lang.String middleName -> middleName
    java.lang.String emailHome -> emailHome
    java.lang.String emailWork -> emailWork
    java.lang.String organization -> organization
    java.lang.String organizationUnit -> organizationUnit
    java.lang.String avatar -> avatar
    java.util.Map otherSimpleFields -> otherSimpleFields
    java.util.Map otherUnescapableFields -> otherUnescapableFields
    java.lang.String getField(java.lang.String) -> getField
    void setField(java.lang.String,java.lang.String) -> setField
    void setField(java.lang.String,java.lang.String,boolean) -> setField
    java.lang.String getFirstName() -> getFirstName
    void setFirstName(java.lang.String) -> setFirstName
    java.lang.String getLastName() -> getLastName
    void setLastName(java.lang.String) -> setLastName
    java.lang.String getMiddleName() -> getMiddleName
    void setMiddleName(java.lang.String) -> setMiddleName
    java.lang.String getNickName() -> getNickName
    void setNickName(java.lang.String) -> setNickName
    java.lang.String getEmailHome() -> getEmailHome
    void setEmailHome(java.lang.String) -> setEmailHome
    java.lang.String getEmailWork() -> getEmailWork
    void setEmailWork(java.lang.String) -> setEmailWork
    java.lang.String getJabberId() -> getJabberId
    void setJabberId(java.lang.String) -> setJabberId
    java.lang.String getOrganization() -> getOrganization
    void setOrganization(java.lang.String) -> setOrganization
    java.lang.String getOrganizationUnit() -> getOrganizationUnit
    void setOrganizationUnit(java.lang.String) -> setOrganizationUnit
    java.lang.String getAddressFieldHome(java.lang.String) -> getAddressFieldHome
    void setAddressFieldHome(java.lang.String,java.lang.String) -> setAddressFieldHome
    java.lang.String getAddressFieldWork(java.lang.String) -> getAddressFieldWork
    void setAddressFieldWork(java.lang.String,java.lang.String) -> setAddressFieldWork
    void setPhoneHome(java.lang.String,java.lang.String) -> setPhoneHome
    java.lang.String getPhoneHome(java.lang.String) -> getPhoneHome
    void setPhoneWork(java.lang.String,java.lang.String) -> setPhoneWork
    java.lang.String getPhoneWork(java.lang.String) -> getPhoneWork
    void setAvatar(java.net.URL) -> setAvatar
    void setAvatar(byte[]) -> setAvatar
    void setAvatar(byte[],java.lang.String) -> setAvatar
    void setEncodedImage(java.lang.String) -> setEncodedImage
    byte[] getAvatar() -> getAvatar
    byte[] getBytes(java.net.URL) -> getBytes
    byte[] getFileBytes(java.io.File) -> getFileBytes
    java.lang.String getAvatarHash() -> getAvatarHash
    void updateFN() -> updateFN
    void save(org.jivesoftware.smack.Connection) -> save
    void load(org.jivesoftware.smack.Connection) -> load
    void load(org.jivesoftware.smack.Connection,java.lang.String) -> load
    void doLoad(org.jivesoftware.smack.Connection,java.lang.String) -> doLoad
    java.lang.String getChildElementXML() -> getChildElementXML
    void copyFieldsFrom(org.jivesoftware.smackx.packet.VCard) -> copyFieldsFrom
    void checkAuthenticated(org.jivesoftware.smack.Connection,boolean) -> checkAuthenticated
    boolean hasContent() -> hasContent
    boolean hasNameField() -> hasNameField
    boolean hasOrganizationFields() -> hasOrganizationFields
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean access$000(org.jivesoftware.smackx.packet.VCard) -> access$000
    boolean access$200(org.jivesoftware.smackx.packet.VCard) -> access$200
    java.lang.String access$300(org.jivesoftware.smackx.packet.VCard) -> access$300
    java.lang.String access$400(org.jivesoftware.smackx.packet.VCard) -> access$400
    java.util.Map access$500(org.jivesoftware.smackx.packet.VCard) -> access$500
    java.util.Map access$600(org.jivesoftware.smackx.packet.VCard) -> access$600
    java.util.Map access$700(org.jivesoftware.smackx.packet.VCard) -> access$700
    java.util.Map access$800(org.jivesoftware.smackx.packet.VCard) -> access$800
    java.util.Map access$1100(org.jivesoftware.smackx.packet.VCard) -> access$1100
    java.util.Map access$1200(org.jivesoftware.smackx.packet.VCard) -> access$1200
    boolean access$1300(org.jivesoftware.smackx.packet.VCard) -> access$1300
    java.lang.String access$1400(org.jivesoftware.smackx.packet.VCard) -> access$1400
    java.lang.String access$1500(org.jivesoftware.smackx.packet.VCard) -> access$1500
    java.lang.String access$1600(org.jivesoftware.smackx.packet.VCard) -> access$1600
    java.lang.String access$1700(org.jivesoftware.smackx.packet.VCard) -> access$1700
    java.lang.String access$1800(org.jivesoftware.smackx.packet.VCard) -> access$1800
org.jivesoftware.smackx.packet.VCard$ContentBuilder -> org.jivesoftware.smackx.packet.VCard$ContentBuilder:
    void addTagContent() -> addTagContent
org.jivesoftware.smackx.packet.VCard$VCardWriter -> org.jivesoftware.smackx.packet.VCard$VCardWriter:
    java.lang.StringBuilder sb -> sb
    org.jivesoftware.smackx.packet.VCard this$0 -> this$0
    void write() -> write
    void buildActualContent() -> buildActualContent
    void appendEmail(java.lang.String,java.lang.String) -> appendEmail
    void appendPhones(java.util.Map,java.lang.String) -> appendPhones
    void appendAddress(java.util.Map,java.lang.String) -> appendAddress
    void appendEmptyTag(java.lang.Object) -> appendEmptyTag
    void appendGenericFields() -> appendGenericFields
    void appendOrganization() -> appendOrganization
    void appendN() -> appendN
    void appendTag(java.lang.String,java.lang.String,java.lang.String,boolean,org.jivesoftware.smackx.packet.VCard$ContentBuilder) -> appendTag
    void appendTag(java.lang.String,boolean,org.jivesoftware.smackx.packet.VCard$ContentBuilder) -> appendTag
    void appendTag(java.lang.String,java.lang.String) -> appendTag
    void access$100(org.jivesoftware.smackx.packet.VCard$VCardWriter) -> access$100
    void access$900(org.jivesoftware.smackx.packet.VCard$VCardWriter,java.lang.Object) -> access$900
    void access$1000(org.jivesoftware.smackx.packet.VCard$VCardWriter,java.lang.String,java.lang.String) -> access$1000
    java.lang.StringBuilder access$1900(org.jivesoftware.smackx.packet.VCard$VCardWriter) -> access$1900
org.jivesoftware.smackx.packet.VCard$VCardWriter$1 -> org.jivesoftware.smackx.packet.VCard$VCardWriter$1:
    org.jivesoftware.smackx.packet.VCard$VCardWriter this$1 -> this$1
    void addTagContent() -> addTagContent
org.jivesoftware.smackx.packet.VCard$VCardWriter$2 -> org.jivesoftware.smackx.packet.VCard$VCardWriter$2:
    java.lang.String val$type -> val$type
    java.lang.String val$email -> val$email
    org.jivesoftware.smackx.packet.VCard$VCardWriter this$1 -> this$1
    void addTagContent() -> addTagContent
org.jivesoftware.smackx.packet.VCard$VCardWriter$3 -> org.jivesoftware.smackx.packet.VCard$VCardWriter$3:
    java.util.Map$Entry val$entry -> val$entry
    java.lang.String val$code -> val$code
    org.jivesoftware.smackx.packet.VCard$VCardWriter this$1 -> this$1
    void addTagContent() -> addTagContent
org.jivesoftware.smackx.packet.VCard$VCardWriter$4 -> org.jivesoftware.smackx.packet.VCard$VCardWriter$4:
    java.lang.String val$code -> val$code
    java.util.Map val$addr -> val$addr
    org.jivesoftware.smackx.packet.VCard$VCardWriter this$1 -> this$1
    void addTagContent() -> addTagContent
org.jivesoftware.smackx.packet.VCard$VCardWriter$5 -> org.jivesoftware.smackx.packet.VCard$VCardWriter$5:
    org.jivesoftware.smackx.packet.VCard$VCardWriter this$1 -> this$1
    void addTagContent() -> addTagContent
org.jivesoftware.smackx.packet.VCard$VCardWriter$6 -> org.jivesoftware.smackx.packet.VCard$VCardWriter$6:
    org.jivesoftware.smackx.packet.VCard$VCardWriter this$1 -> this$1
    void addTagContent() -> addTagContent
org.jivesoftware.smackx.packet.VCard$VCardWriter$7 -> org.jivesoftware.smackx.packet.VCard$VCardWriter$7:
    java.lang.String val$tagText -> val$tagText
    org.jivesoftware.smackx.packet.VCard$VCardWriter this$1 -> this$1
    void addTagContent() -> addTagContent
org.jivesoftware.smackx.packet.Version -> org.jivesoftware.smackx.packet.Version:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String os -> os
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getVersion() -> getVersion
    void setVersion(java.lang.String) -> setVersion
    java.lang.String getOs() -> getOs
    void setOs(java.lang.String) -> setOs
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.packet.XHTMLExtension -> org.jivesoftware.smackx.packet.XHTMLExtension:
    java.util.List bodies -> bodies
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    java.util.Iterator getBodies() -> getBodies
    void addBody(java.lang.String) -> addBody
    int getBodiesCount() -> getBodiesCount
org.jivesoftware.smackx.provider.AdHocCommandDataProvider -> org.jivesoftware.smackx.provider.AdHocCommandDataProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.provider.AdHocCommandDataProvider$BadActionError -> org.jivesoftware.smackx.provider.AdHocCommandDataProvider$BadActionError:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.AdHocCommandDataProvider$BadLocaleError -> org.jivesoftware.smackx.provider.AdHocCommandDataProvider$BadLocaleError:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.AdHocCommandDataProvider$BadPayloadError -> org.jivesoftware.smackx.provider.AdHocCommandDataProvider$BadPayloadError:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.AdHocCommandDataProvider$BadSessionIDError -> org.jivesoftware.smackx.provider.AdHocCommandDataProvider$BadSessionIDError:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.AdHocCommandDataProvider$MalformedActionError -> org.jivesoftware.smackx.provider.AdHocCommandDataProvider$MalformedActionError:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.AdHocCommandDataProvider$SessionExpiredError -> org.jivesoftware.smackx.provider.AdHocCommandDataProvider$SessionExpiredError:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.CapsExtensionProvider -> org.jivesoftware.smackx.provider.CapsExtensionProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.DataFormProvider -> org.jivesoftware.smackx.provider.DataFormProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    org.jivesoftware.smackx.FormField parseField(org.xmlpull.v1.XmlPullParser) -> parseField
    org.jivesoftware.smackx.packet.DataForm$Item parseItem(org.xmlpull.v1.XmlPullParser) -> parseItem
    org.jivesoftware.smackx.packet.DataForm$ReportedData parseReported(org.xmlpull.v1.XmlPullParser) -> parseReported
    org.jivesoftware.smackx.FormField$Option parseOption(org.xmlpull.v1.XmlPullParser) -> parseOption
org.jivesoftware.smackx.provider.DelayInfoProvider -> org.jivesoftware.smackx.provider.DelayInfoProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.DelayInformationProvider -> org.jivesoftware.smackx.provider.DelayInformationProvider:
    java.text.SimpleDateFormat XEP_0091_UTC_FALLBACK_FORMAT -> XEP_0091_UTC_FALLBACK_FORMAT
    java.text.SimpleDateFormat XEP_0082_UTC_FORMAT_WITHOUT_MILLIS -> XEP_0082_UTC_FORMAT_WITHOUT_MILLIS
    java.util.Map formats -> formats
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    java.util.Date handleDateWithMissingLeadingZeros(java.lang.String) -> handleDateWithMissingLeadingZeros
    java.util.Calendar parseXEP91Date(java.lang.String,java.text.DateFormat) -> parseXEP91Date
    java.util.List filterDatesBefore(java.util.Calendar,java.util.Calendar[]) -> filterDatesBefore
    java.util.Calendar determineNearestDate(java.util.Calendar,java.util.List) -> determineNearestDate
org.jivesoftware.smackx.provider.DelayInformationProvider$1 -> org.jivesoftware.smackx.provider.DelayInformationProvider$1:
    java.util.Calendar val$now -> val$now
    org.jivesoftware.smackx.provider.DelayInformationProvider this$0 -> this$0
    int compare(java.util.Calendar,java.util.Calendar) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
org.jivesoftware.smackx.provider.DiscoverInfoProvider -> org.jivesoftware.smackx.provider.DiscoverInfoProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.provider.DiscoverItemsProvider -> org.jivesoftware.smackx.provider.DiscoverItemsProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.provider.EmbeddedExtensionProvider -> org.jivesoftware.smackx.provider.EmbeddedExtensionProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.provider.HeaderProvider -> org.jivesoftware.smackx.provider.HeaderProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.HeadersProvider -> org.jivesoftware.smackx.provider.HeadersProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.provider.MUCAdminProvider -> org.jivesoftware.smackx.provider.MUCAdminProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    org.jivesoftware.smackx.packet.MUCAdmin$Item parseItem(org.xmlpull.v1.XmlPullParser) -> parseItem
org.jivesoftware.smackx.provider.MUCOwnerProvider -> org.jivesoftware.smackx.provider.MUCOwnerProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    org.jivesoftware.smackx.packet.MUCOwner$Item parseItem(org.xmlpull.v1.XmlPullParser) -> parseItem
    org.jivesoftware.smackx.packet.MUCOwner$Destroy parseDestroy(org.xmlpull.v1.XmlPullParser) -> parseDestroy
org.jivesoftware.smackx.provider.MUCUserProvider -> org.jivesoftware.smackx.provider.MUCUserProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    org.jivesoftware.smackx.packet.MUCUser$Item parseItem(org.xmlpull.v1.XmlPullParser) -> parseItem
    org.jivesoftware.smackx.packet.MUCUser$Invite parseInvite(org.xmlpull.v1.XmlPullParser) -> parseInvite
    org.jivesoftware.smackx.packet.MUCUser$Decline parseDecline(org.xmlpull.v1.XmlPullParser) -> parseDecline
    org.jivesoftware.smackx.packet.MUCUser$Destroy parseDestroy(org.xmlpull.v1.XmlPullParser) -> parseDestroy
org.jivesoftware.smackx.provider.MessageEventProvider -> org.jivesoftware.smackx.provider.MessageEventProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.MultipleAddressesProvider -> org.jivesoftware.smackx.provider.MultipleAddressesProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.PEPProvider -> org.jivesoftware.smackx.provider.PEPProvider:
    java.util.Map nodeParsers -> nodeParsers
    org.jivesoftware.smack.packet.PacketExtension pepItem -> pepItem
    void registerPEPParserExtension(java.lang.String,org.jivesoftware.smack.provider.PacketExtensionProvider) -> registerPEPParserExtension
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.PrivateDataProvider -> org.jivesoftware.smackx.provider.PrivateDataProvider:
    org.jivesoftware.smackx.packet.PrivateData parsePrivateData(org.xmlpull.v1.XmlPullParser) -> parsePrivateData
org.jivesoftware.smackx.provider.RosterExchangeProvider -> org.jivesoftware.smackx.provider.RosterExchangeProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.StreamInitiationProvider -> org.jivesoftware.smackx.provider.StreamInitiationProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.provider.VCardProvider -> org.jivesoftware.smackx.provider.VCardProvider:
    java.lang.String PREFERRED_ENCODING -> PREFERRED_ENCODING
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    org.jivesoftware.smackx.packet.VCard createVCardFromXML(java.lang.String) -> createVCardFromXML
org.jivesoftware.smackx.provider.VCardProvider$VCardReader -> org.jivesoftware.smackx.provider.VCardProvider$VCardReader:
    org.jivesoftware.smackx.packet.VCard vCard -> vCard
    org.w3c.dom.Document document -> document
    void initializeFields() -> initializeFields
    void setupEmails() -> setupEmails
    void setupPhones() -> setupPhones
    boolean isWorkHome(java.lang.String) -> isWorkHome
    void setupAddresses() -> setupAddresses
    java.lang.String getTagContents(java.lang.String) -> getTagContents
    void setupSimpleFields() -> setupSimpleFields
    java.lang.String getTextContent(org.w3c.dom.Node) -> getTextContent
    void appendText(java.lang.StringBuilder,org.w3c.dom.Node) -> appendText
org.jivesoftware.smackx.provider.XHTMLExtensionProvider -> org.jivesoftware.smackx.provider.XHTMLExtensionProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.pubsub.AccessModel -> org.jivesoftware.smackx.pubsub.AccessModel:
    org.jivesoftware.smackx.pubsub.AccessModel open -> open
    org.jivesoftware.smackx.pubsub.AccessModel authorize -> authorize
    org.jivesoftware.smackx.pubsub.AccessModel presence -> presence
    org.jivesoftware.smackx.pubsub.AccessModel roster -> roster
    org.jivesoftware.smackx.pubsub.AccessModel whitelist -> whitelist
    org.jivesoftware.smackx.pubsub.AccessModel[] $VALUES -> $VALUES
    org.jivesoftware.smackx.pubsub.AccessModel[] values() -> values
    org.jivesoftware.smackx.pubsub.AccessModel valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.pubsub.Affiliation -> org.jivesoftware.smackx.pubsub.Affiliation:
    java.lang.String node -> node
    org.jivesoftware.smackx.pubsub.Affiliation$Type type -> type
    java.lang.String getNodeId() -> getNodeId
    org.jivesoftware.smackx.pubsub.Affiliation$Type getType() -> getType
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    void appendAttribute(java.lang.StringBuilder,java.lang.String,java.lang.String) -> appendAttribute
org.jivesoftware.smackx.pubsub.Affiliation$Type -> org.jivesoftware.smackx.pubsub.Affiliation$Type:
    org.jivesoftware.smackx.pubsub.Affiliation$Type member -> member
    org.jivesoftware.smackx.pubsub.Affiliation$Type none -> none
    org.jivesoftware.smackx.pubsub.Affiliation$Type outcast -> outcast
    org.jivesoftware.smackx.pubsub.Affiliation$Type owner -> owner
    org.jivesoftware.smackx.pubsub.Affiliation$Type publisher -> publisher
    org.jivesoftware.smackx.pubsub.Affiliation$Type[] $VALUES -> $VALUES
    org.jivesoftware.smackx.pubsub.Affiliation$Type[] values() -> values
    org.jivesoftware.smackx.pubsub.Affiliation$Type valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.pubsub.AffiliationsExtension -> org.jivesoftware.smackx.pubsub.AffiliationsExtension:
    java.util.List items -> items
    java.util.List getAffiliations() -> getAffiliations
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.pubsub.ChildrenAssociationPolicy -> org.jivesoftware.smackx.pubsub.ChildrenAssociationPolicy:
    org.jivesoftware.smackx.pubsub.ChildrenAssociationPolicy all -> all
    org.jivesoftware.smackx.pubsub.ChildrenAssociationPolicy owners -> owners
    org.jivesoftware.smackx.pubsub.ChildrenAssociationPolicy whitelist -> whitelist
    org.jivesoftware.smackx.pubsub.ChildrenAssociationPolicy[] $VALUES -> $VALUES
    org.jivesoftware.smackx.pubsub.ChildrenAssociationPolicy[] values() -> values
    org.jivesoftware.smackx.pubsub.ChildrenAssociationPolicy valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.pubsub.CollectionNode -> org.jivesoftware.smackx.pubsub.CollectionNode:
org.jivesoftware.smackx.pubsub.ConfigurationEvent -> org.jivesoftware.smackx.pubsub.ConfigurationEvent:
    org.jivesoftware.smackx.pubsub.ConfigureForm form -> form
    org.jivesoftware.smackx.pubsub.ConfigureForm getConfiguration() -> getConfiguration
    java.util.List getExtensions() -> getExtensions
org.jivesoftware.smackx.pubsub.ConfigureForm -> org.jivesoftware.smackx.pubsub.ConfigureForm:
    org.jivesoftware.smackx.pubsub.AccessModel getAccessModel() -> getAccessModel
    void setAccessModel(org.jivesoftware.smackx.pubsub.AccessModel) -> setAccessModel
    java.lang.String getBodyXSLT() -> getBodyXSLT
    void setBodyXSLT(java.lang.String) -> setBodyXSLT
    java.util.Iterator getChildren() -> getChildren
    void setChildren(java.util.List) -> setChildren
    org.jivesoftware.smackx.pubsub.ChildrenAssociationPolicy getChildrenAssociationPolicy() -> getChildrenAssociationPolicy
    void setChildrenAssociationPolicy(org.jivesoftware.smackx.pubsub.ChildrenAssociationPolicy) -> setChildrenAssociationPolicy
    java.util.Iterator getChildrenAssociationWhitelist() -> getChildrenAssociationWhitelist
    void setChildrenAssociationWhitelist(java.util.List) -> setChildrenAssociationWhitelist
    int getChildrenMax() -> getChildrenMax
    void setChildrenMax(int) -> setChildrenMax
    java.lang.String getCollection() -> getCollection
    void setCollection(java.lang.String) -> setCollection
    java.lang.String getDataformXSLT() -> getDataformXSLT
    void setDataformXSLT(java.lang.String) -> setDataformXSLT
    boolean isDeliverPayloads() -> isDeliverPayloads
    void setDeliverPayloads(boolean) -> setDeliverPayloads
    org.jivesoftware.smackx.pubsub.ItemReply getItemReply() -> getItemReply
    void setItemReply(org.jivesoftware.smackx.pubsub.ItemReply) -> setItemReply
    int getMaxItems() -> getMaxItems
    void setMaxItems(int) -> setMaxItems
    int getMaxPayloadSize() -> getMaxPayloadSize
    void setMaxPayloadSize(int) -> setMaxPayloadSize
    org.jivesoftware.smackx.pubsub.NodeType getNodeType() -> getNodeType
    void setNodeType(org.jivesoftware.smackx.pubsub.NodeType) -> setNodeType
    boolean isNotifyConfig() -> isNotifyConfig
    void setNotifyConfig(boolean) -> setNotifyConfig
    boolean isNotifyDelete() -> isNotifyDelete
    void setNotifyDelete(boolean) -> setNotifyDelete
    boolean isNotifyRetract() -> isNotifyRetract
    void setNotifyRetract(boolean) -> setNotifyRetract
    boolean isPersistItems() -> isPersistItems
    void setPersistentItems(boolean) -> setPersistentItems
    boolean isPresenceBasedDelivery() -> isPresenceBasedDelivery
    void setPresenceBasedDelivery(boolean) -> setPresenceBasedDelivery
    org.jivesoftware.smackx.pubsub.PublishModel getPublishModel() -> getPublishModel
    void setPublishModel(org.jivesoftware.smackx.pubsub.PublishModel) -> setPublishModel
    java.util.Iterator getReplyRoom() -> getReplyRoom
    void setReplyRoom(java.util.List) -> setReplyRoom
    java.util.Iterator getReplyTo() -> getReplyTo
    void setReplyTo(java.util.List) -> setReplyTo
    java.util.Iterator getRosterGroupsAllowed() -> getRosterGroupsAllowed
    void setRosterGroupsAllowed(java.util.List) -> setRosterGroupsAllowed
    boolean isSubscibe() -> isSubscibe
    void setSubscribe(boolean) -> setSubscribe
    java.lang.String getTitle() -> getTitle
    void setTitle(java.lang.String) -> setTitle
    java.lang.String getDataType() -> getDataType
    void setDataType(java.lang.String) -> setDataType
    java.lang.String toString() -> toString
    boolean parseBoolean(java.lang.String) -> parseBoolean
    java.lang.String getFieldValue(org.jivesoftware.smackx.pubsub.ConfigureNodeFields) -> getFieldValue
    java.util.Iterator getFieldValues(org.jivesoftware.smackx.pubsub.ConfigureNodeFields) -> getFieldValues
    void addField(org.jivesoftware.smackx.pubsub.ConfigureNodeFields,java.lang.String) -> addField
    java.util.List getListSingle(java.lang.String) -> getListSingle
org.jivesoftware.smackx.pubsub.ConfigureNodeFields -> org.jivesoftware.smackx.pubsub.ConfigureNodeFields:
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields access_model -> access_model
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields body_xslt -> body_xslt
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields collection -> collection
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields dataform_xslt -> dataform_xslt
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields deliver_payloads -> deliver_payloads
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields itemreply -> itemreply
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields children_association_policy -> children_association_policy
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields children_association_whitelist -> children_association_whitelist
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields children -> children
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields children_max -> children_max
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields max_items -> max_items
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields max_payload_size -> max_payload_size
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields node_type -> node_type
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields notify_config -> notify_config
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields notify_delete -> notify_delete
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields notify_retract -> notify_retract
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields persist_items -> persist_items
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields presence_based_delivery -> presence_based_delivery
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields publish_model -> publish_model
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields replyroom -> replyroom
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields replyto -> replyto
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields roster_groups_allowed -> roster_groups_allowed
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields subscribe -> subscribe
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields title -> title
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields type -> type
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields[] $VALUES -> $VALUES
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields[] values() -> values
    org.jivesoftware.smackx.pubsub.ConfigureNodeFields valueOf(java.lang.String) -> valueOf
    java.lang.String getFieldName() -> getFieldName
org.jivesoftware.smackx.pubsub.EmbeddedPacketExtension -> org.jivesoftware.smackx.pubsub.EmbeddedPacketExtension:
    java.util.List getExtensions() -> getExtensions
org.jivesoftware.smackx.pubsub.EventElement -> org.jivesoftware.smackx.pubsub.EventElement:
    org.jivesoftware.smackx.pubsub.EventElementType type -> type
    org.jivesoftware.smackx.pubsub.NodeExtension ext -> ext
    org.jivesoftware.smackx.pubsub.EventElementType getEventType() -> getEventType
    java.util.List getExtensions() -> getExtensions
    org.jivesoftware.smackx.pubsub.NodeExtension getEvent() -> getEvent
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.pubsub.EventElementType -> org.jivesoftware.smackx.pubsub.EventElementType:
    org.jivesoftware.smackx.pubsub.EventElementType collection -> collection
    org.jivesoftware.smackx.pubsub.EventElementType configuration -> configuration
    org.jivesoftware.smackx.pubsub.EventElementType delete -> delete
    org.jivesoftware.smackx.pubsub.EventElementType items -> items
    org.jivesoftware.smackx.pubsub.EventElementType purge -> purge
    org.jivesoftware.smackx.pubsub.EventElementType subscription -> subscription
    org.jivesoftware.smackx.pubsub.EventElementType[] $VALUES -> $VALUES
    org.jivesoftware.smackx.pubsub.EventElementType[] values() -> values
    org.jivesoftware.smackx.pubsub.EventElementType valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.pubsub.FormNode -> org.jivesoftware.smackx.pubsub.FormNode:
    org.jivesoftware.smackx.Form configForm -> configForm
    org.jivesoftware.smackx.Form getForm() -> getForm
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.pubsub.FormNodeType -> org.jivesoftware.smackx.pubsub.FormNodeType:
    org.jivesoftware.smackx.pubsub.FormNodeType CONFIGURE_OWNER -> CONFIGURE_OWNER
    org.jivesoftware.smackx.pubsub.FormNodeType CONFIGURE -> CONFIGURE
    org.jivesoftware.smackx.pubsub.FormNodeType OPTIONS -> OPTIONS
    org.jivesoftware.smackx.pubsub.FormNodeType DEFAULT -> DEFAULT
    org.jivesoftware.smackx.pubsub.FormNodeType[] $VALUES -> $VALUES
    org.jivesoftware.smackx.pubsub.FormNodeType[] values() -> values
    org.jivesoftware.smackx.pubsub.FormNodeType valueOf(java.lang.String) -> valueOf
    org.jivesoftware.smackx.pubsub.PubSubElementType getNodeElement() -> getNodeElement
    org.jivesoftware.smackx.pubsub.FormNodeType valueOfFromElementName(java.lang.String,java.lang.String) -> valueOfFromElementName
org.jivesoftware.smackx.pubsub.FormType -> org.jivesoftware.smackx.pubsub.FormType:
    org.jivesoftware.smackx.pubsub.FormType form -> form
    org.jivesoftware.smackx.pubsub.FormType submit -> submit
    org.jivesoftware.smackx.pubsub.FormType cancel -> cancel
    org.jivesoftware.smackx.pubsub.FormType result -> result
    org.jivesoftware.smackx.pubsub.FormType[] $VALUES -> $VALUES
    org.jivesoftware.smackx.pubsub.FormType[] values() -> values
    org.jivesoftware.smackx.pubsub.FormType valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.pubsub.GetItemsRequest -> org.jivesoftware.smackx.pubsub.GetItemsRequest:
    java.lang.String subId -> subId
    int maxItems -> maxItems
    java.lang.String getSubscriptionId() -> getSubscriptionId
    int getMaxItems() -> getMaxItems
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.pubsub.Item -> org.jivesoftware.smackx.pubsub.Item:
    java.lang.String id -> id
    java.lang.String getId() -> getId
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    java.lang.String toString() -> toString
org.jivesoftware.smackx.pubsub.ItemDeleteEvent -> org.jivesoftware.smackx.pubsub.ItemDeleteEvent:
    java.util.List itemIds -> itemIds
    java.util.List getItemIds() -> getItemIds
    java.lang.String toString() -> toString
org.jivesoftware.smackx.pubsub.ItemPublishEvent -> org.jivesoftware.smackx.pubsub.ItemPublishEvent:
    java.util.List items -> items
    java.util.Date originalDate -> originalDate
    java.util.List getItems() -> getItems
    boolean isDelayed() -> isDelayed
    java.util.Date getPublishedDate() -> getPublishedDate
    java.lang.String toString() -> toString
org.jivesoftware.smackx.pubsub.ItemReply -> org.jivesoftware.smackx.pubsub.ItemReply:
    org.jivesoftware.smackx.pubsub.ItemReply owner -> owner
    org.jivesoftware.smackx.pubsub.ItemReply publisher -> publisher
    org.jivesoftware.smackx.pubsub.ItemReply[] $VALUES -> $VALUES
    org.jivesoftware.smackx.pubsub.ItemReply[] values() -> values
    org.jivesoftware.smackx.pubsub.ItemReply valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.pubsub.ItemsExtension -> org.jivesoftware.smackx.pubsub.ItemsExtension:
    org.jivesoftware.smackx.pubsub.ItemsExtension$ItemsElementType type -> type
    java.lang.Boolean notify -> notify
    java.util.List items -> items
    org.jivesoftware.smackx.pubsub.ItemsExtension$ItemsElementType getItemsElementType() -> getItemsElementType
    java.util.List getExtensions() -> getExtensions
    java.util.List getItems() -> getItems
    boolean getNotify() -> getNotify
    java.lang.String toXML() -> toXML
    java.lang.String toString() -> toString
org.jivesoftware.smackx.pubsub.ItemsExtension$ItemsElementType -> org.jivesoftware.smackx.pubsub.ItemsExtension$ItemsElementType:
    org.jivesoftware.smackx.pubsub.ItemsExtension$ItemsElementType items -> items
    org.jivesoftware.smackx.pubsub.ItemsExtension$ItemsElementType retract -> retract
    org.jivesoftware.smackx.pubsub.PubSubElementType elem -> elem
    java.lang.String att -> att
    org.jivesoftware.smackx.pubsub.ItemsExtension$ItemsElementType[] $VALUES -> $VALUES
    org.jivesoftware.smackx.pubsub.ItemsExtension$ItemsElementType[] values() -> values
    org.jivesoftware.smackx.pubsub.ItemsExtension$ItemsElementType valueOf(java.lang.String) -> valueOf
    org.jivesoftware.smackx.pubsub.PubSubElementType getNodeElement() -> getNodeElement
    java.lang.String getElementAttribute() -> getElementAttribute
org.jivesoftware.smackx.pubsub.LeafNode -> org.jivesoftware.smackx.pubsub.LeafNode:
    org.jivesoftware.smackx.packet.DiscoverItems discoverItems() -> discoverItems
    java.util.List getItems() -> getItems
    java.util.List getItems(java.lang.String) -> getItems
    java.util.List getItems(java.util.Collection) -> getItems
    java.util.List getItems(int) -> getItems
    java.util.List getItems(int,java.lang.String) -> getItems
    void publish() -> publish
    void publish(org.jivesoftware.smackx.pubsub.Item) -> publish
    void publish(java.util.Collection) -> publish
    void send() -> send
    void send(org.jivesoftware.smackx.pubsub.Item) -> send
    void send(java.util.Collection) -> send
    void deleteAllItems() -> deleteAllItems
    void deleteItem(java.lang.String) -> deleteItem
    void deleteItem(java.util.Collection) -> deleteItem
org.jivesoftware.smackx.pubsub.Node -> org.jivesoftware.smackx.pubsub.Node:
    org.jivesoftware.smack.Connection con -> con
    java.lang.String id -> id
    java.lang.String to -> to
    java.util.concurrent.ConcurrentHashMap itemEventToListenerMap -> itemEventToListenerMap
    java.util.concurrent.ConcurrentHashMap itemDeleteToListenerMap -> itemDeleteToListenerMap
    java.util.concurrent.ConcurrentHashMap configEventToListenerMap -> configEventToListenerMap
    void setTo(java.lang.String) -> setTo
    java.lang.String getId() -> getId
    org.jivesoftware.smackx.pubsub.ConfigureForm getNodeConfiguration() -> getNodeConfiguration
    void sendConfigurationForm(org.jivesoftware.smackx.Form) -> sendConfigurationForm
    org.jivesoftware.smackx.packet.DiscoverInfo discoverInfo() -> discoverInfo
    java.util.List getSubscriptions() -> getSubscriptions
    java.util.List getAllSubscriptions() -> getAllSubscriptions
    org.jivesoftware.smackx.pubsub.Subscription subscribe(java.lang.String) -> subscribe
    org.jivesoftware.smackx.pubsub.Subscription subscribe(java.lang.String,org.jivesoftware.smackx.pubsub.SubscribeForm) -> subscribe
    void unsubscribe(java.lang.String) -> unsubscribe
    void unsubscribe(java.lang.String,java.lang.String) -> unsubscribe
    org.jivesoftware.smackx.pubsub.SubscribeForm getSubscriptionOptions(java.lang.String) -> getSubscriptionOptions
    org.jivesoftware.smackx.pubsub.SubscribeForm getSubscriptionOptions(java.lang.String,java.lang.String) -> getSubscriptionOptions
    void addItemEventListener(org.jivesoftware.smackx.pubsub.listener.ItemEventListener) -> addItemEventListener
    void removeItemEventListener(org.jivesoftware.smackx.pubsub.listener.ItemEventListener) -> removeItemEventListener
    void addConfigurationListener(org.jivesoftware.smackx.pubsub.listener.NodeConfigListener) -> addConfigurationListener
    void removeConfigurationListener(org.jivesoftware.smackx.pubsub.listener.NodeConfigListener) -> removeConfigurationListener
    void addItemDeleteListener(org.jivesoftware.smackx.pubsub.listener.ItemDeleteListener) -> addItemDeleteListener
    void removeItemDeleteListener(org.jivesoftware.smackx.pubsub.listener.ItemDeleteListener) -> removeItemDeleteListener
    java.lang.String toString() -> toString
    org.jivesoftware.smackx.pubsub.packet.PubSub createPubsubPacket(org.jivesoftware.smack.packet.IQ$Type,org.jivesoftware.smack.packet.PacketExtension) -> createPubsubPacket
    org.jivesoftware.smackx.pubsub.packet.PubSub createPubsubPacket(org.jivesoftware.smack.packet.IQ$Type,org.jivesoftware.smack.packet.PacketExtension,org.jivesoftware.smackx.pubsub.packet.PubSubNamespace) -> createPubsubPacket
    org.jivesoftware.smack.packet.Packet sendPubsubPacket(org.jivesoftware.smack.packet.IQ$Type,org.jivesoftware.smackx.pubsub.NodeExtension) -> sendPubsubPacket
    org.jivesoftware.smack.packet.Packet sendPubsubPacket(org.jivesoftware.smack.packet.IQ$Type,org.jivesoftware.smackx.pubsub.NodeExtension,org.jivesoftware.smackx.pubsub.packet.PubSubNamespace) -> sendPubsubPacket
    java.util.List getSubscriptionIds(org.jivesoftware.smack.packet.Packet) -> getSubscriptionIds
    java.util.List access$000(org.jivesoftware.smack.packet.Packet) -> access$000
org.jivesoftware.smackx.pubsub.Node$EventContentFilter -> org.jivesoftware.smackx.pubsub.Node$EventContentFilter:
    java.lang.String firstElement -> firstElement
    java.lang.String secondElement -> secondElement
    org.jivesoftware.smackx.pubsub.Node this$0 -> this$0
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smackx.pubsub.Node$ItemDeleteTranslator -> org.jivesoftware.smackx.pubsub.Node$ItemDeleteTranslator:
    org.jivesoftware.smackx.pubsub.listener.ItemDeleteListener listener -> listener
    org.jivesoftware.smackx.pubsub.Node this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.pubsub.Node$ItemEventTranslator -> org.jivesoftware.smackx.pubsub.Node$ItemEventTranslator:
    org.jivesoftware.smackx.pubsub.listener.ItemEventListener listener -> listener
    org.jivesoftware.smackx.pubsub.Node this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.pubsub.Node$NodeConfigTranslator -> org.jivesoftware.smackx.pubsub.Node$NodeConfigTranslator:
    org.jivesoftware.smackx.pubsub.listener.NodeConfigListener listener -> listener
    org.jivesoftware.smackx.pubsub.Node this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.pubsub.NodeEvent -> org.jivesoftware.smackx.pubsub.NodeEvent:
    java.lang.String nodeId -> nodeId
    java.lang.String getNodeId() -> getNodeId
org.jivesoftware.smackx.pubsub.NodeExtension -> org.jivesoftware.smackx.pubsub.NodeExtension:
    org.jivesoftware.smackx.pubsub.PubSubElementType element -> element
    java.lang.String node -> node
    java.lang.String getNode() -> getNode
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    java.lang.String toString() -> toString
org.jivesoftware.smackx.pubsub.NodeType -> org.jivesoftware.smackx.pubsub.NodeType:
    org.jivesoftware.smackx.pubsub.NodeType leaf -> leaf
    org.jivesoftware.smackx.pubsub.NodeType collection -> collection
    org.jivesoftware.smackx.pubsub.NodeType[] $VALUES -> $VALUES
    org.jivesoftware.smackx.pubsub.NodeType[] values() -> values
    org.jivesoftware.smackx.pubsub.NodeType valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.pubsub.OptionsExtension -> org.jivesoftware.smackx.pubsub.OptionsExtension:
    java.lang.String jid -> jid
    java.lang.String id -> id
    java.lang.String getJid() -> getJid
    java.lang.String getId() -> getId
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.pubsub.PayloadItem -> org.jivesoftware.smackx.pubsub.PayloadItem:
    org.jivesoftware.smack.packet.PacketExtension payload -> payload
    org.jivesoftware.smack.packet.PacketExtension getPayload() -> getPayload
    java.lang.String toXML() -> toXML
    java.lang.String toString() -> toString
org.jivesoftware.smackx.pubsub.PresenceState -> org.jivesoftware.smackx.pubsub.PresenceState:
    org.jivesoftware.smackx.pubsub.PresenceState chat -> chat
    org.jivesoftware.smackx.pubsub.PresenceState online -> online
    org.jivesoftware.smackx.pubsub.PresenceState away -> away
    org.jivesoftware.smackx.pubsub.PresenceState xa -> xa
    org.jivesoftware.smackx.pubsub.PresenceState dnd -> dnd
    org.jivesoftware.smackx.pubsub.PresenceState[] $VALUES -> $VALUES
    org.jivesoftware.smackx.pubsub.PresenceState[] values() -> values
    org.jivesoftware.smackx.pubsub.PresenceState valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.pubsub.PubSubElementType -> org.jivesoftware.smackx.pubsub.PubSubElementType:
    org.jivesoftware.smackx.pubsub.PubSubElementType CREATE -> CREATE
    org.jivesoftware.smackx.pubsub.PubSubElementType DELETE -> DELETE
    org.jivesoftware.smackx.pubsub.PubSubElementType DELETE_EVENT -> DELETE_EVENT
    org.jivesoftware.smackx.pubsub.PubSubElementType CONFIGURE -> CONFIGURE
    org.jivesoftware.smackx.pubsub.PubSubElementType CONFIGURE_OWNER -> CONFIGURE_OWNER
    org.jivesoftware.smackx.pubsub.PubSubElementType CONFIGURATION -> CONFIGURATION
    org.jivesoftware.smackx.pubsub.PubSubElementType OPTIONS -> OPTIONS
    org.jivesoftware.smackx.pubsub.PubSubElementType DEFAULT -> DEFAULT
    org.jivesoftware.smackx.pubsub.PubSubElementType ITEMS -> ITEMS
    org.jivesoftware.smackx.pubsub.PubSubElementType PUBLISH -> PUBLISH
    org.jivesoftware.smackx.pubsub.PubSubElementType PUBLISH_OPTIONS -> PUBLISH_OPTIONS
    org.jivesoftware.smackx.pubsub.PubSubElementType PURGE_OWNER -> PURGE_OWNER
    org.jivesoftware.smackx.pubsub.PubSubElementType PURGE_EVENT -> PURGE_EVENT
    org.jivesoftware.smackx.pubsub.PubSubElementType RETRACT -> RETRACT
    org.jivesoftware.smackx.pubsub.PubSubElementType AFFILIATIONS -> AFFILIATIONS
    org.jivesoftware.smackx.pubsub.PubSubElementType SUBSCRIBE -> SUBSCRIBE
    org.jivesoftware.smackx.pubsub.PubSubElementType SUBSCRIPTION -> SUBSCRIPTION
    org.jivesoftware.smackx.pubsub.PubSubElementType SUBSCRIPTIONS -> SUBSCRIPTIONS
    org.jivesoftware.smackx.pubsub.PubSubElementType SUBSCRIPTIONS_OWNER -> SUBSCRIPTIONS_OWNER
    org.jivesoftware.smackx.pubsub.PubSubElementType UNSUBSCRIBE -> UNSUBSCRIBE
    java.lang.String eName -> eName
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace nSpace -> nSpace
    org.jivesoftware.smackx.pubsub.PubSubElementType[] $VALUES -> $VALUES
    org.jivesoftware.smackx.pubsub.PubSubElementType[] values() -> values
    org.jivesoftware.smackx.pubsub.PubSubElementType valueOf(java.lang.String) -> valueOf
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace getNamespace() -> getNamespace
    java.lang.String getElementName() -> getElementName
    org.jivesoftware.smackx.pubsub.PubSubElementType valueOfFromElemName(java.lang.String,java.lang.String) -> valueOfFromElemName
org.jivesoftware.smackx.pubsub.PubSubManager -> org.jivesoftware.smackx.pubsub.PubSubManager:
    org.jivesoftware.smack.Connection con -> con
    java.lang.String to -> to
    java.util.Map nodeMap -> nodeMap
    org.jivesoftware.smackx.pubsub.LeafNode createNode() -> createNode
    org.jivesoftware.smackx.pubsub.LeafNode createNode(java.lang.String) -> createNode
    org.jivesoftware.smackx.pubsub.Node createNode(java.lang.String,org.jivesoftware.smackx.Form) -> createNode
    org.jivesoftware.smackx.pubsub.Node getNode(java.lang.String) -> getNode
    org.jivesoftware.smackx.packet.DiscoverItems discoverNodes(java.lang.String) -> discoverNodes
    java.util.List getSubscriptions() -> getSubscriptions
    java.util.List getAffiliations() -> getAffiliations
    void deleteNode(java.lang.String) -> deleteNode
    org.jivesoftware.smackx.pubsub.ConfigureForm getDefaultConfiguration() -> getDefaultConfiguration
    org.jivesoftware.smackx.packet.DiscoverInfo getSupportedFeatures() -> getSupportedFeatures
    org.jivesoftware.smack.packet.Packet sendPubsubPacket(org.jivesoftware.smack.packet.IQ$Type,org.jivesoftware.smack.packet.PacketExtension,org.jivesoftware.smackx.pubsub.packet.PubSubNamespace) -> sendPubsubPacket
    org.jivesoftware.smack.packet.Packet sendPubsubPacket(org.jivesoftware.smack.packet.IQ$Type,org.jivesoftware.smack.packet.PacketExtension) -> sendPubsubPacket
    org.jivesoftware.smackx.pubsub.packet.PubSub createPubsubPacket(java.lang.String,org.jivesoftware.smack.packet.IQ$Type,org.jivesoftware.smack.packet.PacketExtension) -> createPubsubPacket
    org.jivesoftware.smackx.pubsub.packet.PubSub createPubsubPacket(java.lang.String,org.jivesoftware.smack.packet.IQ$Type,org.jivesoftware.smack.packet.PacketExtension,org.jivesoftware.smackx.pubsub.packet.PubSubNamespace) -> createPubsubPacket
    org.jivesoftware.smack.packet.Packet sendPubsubPacket(org.jivesoftware.smack.Connection,java.lang.String,org.jivesoftware.smack.packet.IQ$Type,org.jivesoftware.smack.packet.PacketExtension) -> sendPubsubPacket
    org.jivesoftware.smack.packet.Packet sendPubsubPacket(org.jivesoftware.smack.Connection,java.lang.String,org.jivesoftware.smack.packet.IQ$Type,org.jivesoftware.smack.packet.PacketExtension,org.jivesoftware.smackx.pubsub.packet.PubSubNamespace) -> sendPubsubPacket
    org.jivesoftware.smack.packet.Packet sendPubsubPacket(org.jivesoftware.smack.Connection,java.lang.String,org.jivesoftware.smack.packet.IQ$Type,org.jivesoftware.smackx.pubsub.packet.PubSub) -> sendPubsubPacket
    org.jivesoftware.smack.packet.Packet sendPubsubPacket(org.jivesoftware.smack.Connection,java.lang.String,org.jivesoftware.smack.packet.IQ$Type,org.jivesoftware.smackx.pubsub.packet.PubSub,org.jivesoftware.smackx.pubsub.packet.PubSubNamespace) -> sendPubsubPacket
org.jivesoftware.smackx.pubsub.PublishItem -> org.jivesoftware.smackx.pubsub.PublishItem:
    java.util.Collection items -> items
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.pubsub.PublishModel -> org.jivesoftware.smackx.pubsub.PublishModel:
    org.jivesoftware.smackx.pubsub.PublishModel publishers -> publishers
    org.jivesoftware.smackx.pubsub.PublishModel subscribers -> subscribers
    org.jivesoftware.smackx.pubsub.PublishModel open -> open
    org.jivesoftware.smackx.pubsub.PublishModel[] $VALUES -> $VALUES
    org.jivesoftware.smackx.pubsub.PublishModel[] values() -> values
    org.jivesoftware.smackx.pubsub.PublishModel valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.pubsub.RetractItem -> org.jivesoftware.smackx.pubsub.RetractItem:
    java.lang.String id -> id
    java.lang.String getId() -> getId
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.pubsub.SimplePayload -> org.jivesoftware.smackx.pubsub.SimplePayload:
    java.lang.String elemName -> elemName
    java.lang.String ns -> ns
    java.lang.String payload -> payload
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    java.lang.String toString() -> toString
org.jivesoftware.smackx.pubsub.SubscribeExtension -> org.jivesoftware.smackx.pubsub.SubscribeExtension:
    java.lang.String jid -> jid
    java.lang.String getJid() -> getJid
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.pubsub.SubscribeForm -> org.jivesoftware.smackx.pubsub.SubscribeForm:
    java.text.SimpleDateFormat format -> format
    boolean isDeliverOn() -> isDeliverOn
    void setDeliverOn(boolean) -> setDeliverOn
    boolean isDigestOn() -> isDigestOn
    void setDigestOn(boolean) -> setDigestOn
    int getDigestFrequency() -> getDigestFrequency
    void setDigestFrequency(int) -> setDigestFrequency
    java.util.Date getExpiry() -> getExpiry
    void setExpiry(java.util.Date) -> setExpiry
    boolean isIncludeBody() -> isIncludeBody
    void setIncludeBody(boolean) -> setIncludeBody
    java.util.Iterator getShowValues() -> getShowValues
    void setShowValues(java.util.Collection) -> setShowValues
    boolean parseBoolean(java.lang.String) -> parseBoolean
    java.lang.String getFieldValue(org.jivesoftware.smackx.pubsub.SubscribeOptionFields) -> getFieldValue
    java.util.Iterator getFieldValues(org.jivesoftware.smackx.pubsub.SubscribeOptionFields) -> getFieldValues
    void addField(org.jivesoftware.smackx.pubsub.SubscribeOptionFields,java.lang.String) -> addField
org.jivesoftware.smackx.pubsub.SubscribeOptionFields -> org.jivesoftware.smackx.pubsub.SubscribeOptionFields:
    org.jivesoftware.smackx.pubsub.SubscribeOptionFields deliver -> deliver
    org.jivesoftware.smackx.pubsub.SubscribeOptionFields digest -> digest
    org.jivesoftware.smackx.pubsub.SubscribeOptionFields digest_frequency -> digest_frequency
    org.jivesoftware.smackx.pubsub.SubscribeOptionFields expire -> expire
    org.jivesoftware.smackx.pubsub.SubscribeOptionFields include_body -> include_body
    org.jivesoftware.smackx.pubsub.SubscribeOptionFields show_values -> show_values
    org.jivesoftware.smackx.pubsub.SubscribeOptionFields subscription_type -> subscription_type
    org.jivesoftware.smackx.pubsub.SubscribeOptionFields subscription_depth -> subscription_depth
    org.jivesoftware.smackx.pubsub.SubscribeOptionFields[] $VALUES -> $VALUES
    org.jivesoftware.smackx.pubsub.SubscribeOptionFields[] values() -> values
    org.jivesoftware.smackx.pubsub.SubscribeOptionFields valueOf(java.lang.String) -> valueOf
    java.lang.String getFieldName() -> getFieldName
    org.jivesoftware.smackx.pubsub.SubscribeOptionFields valueOfFromElement(java.lang.String) -> valueOfFromElement
org.jivesoftware.smackx.pubsub.Subscription -> org.jivesoftware.smackx.pubsub.Subscription:
    java.lang.String jid -> jid
    java.lang.String id -> id
    org.jivesoftware.smackx.pubsub.Subscription$State state -> state
    boolean configRequired -> configRequired
    java.lang.String getJid() -> getJid
    java.lang.String getId() -> getId
    org.jivesoftware.smackx.pubsub.Subscription$State getState() -> getState
    boolean isConfigRequired() -> isConfigRequired
    java.lang.String toXML() -> toXML
    void appendAttribute(java.lang.StringBuilder,java.lang.String,java.lang.String) -> appendAttribute
org.jivesoftware.smackx.pubsub.Subscription$State -> org.jivesoftware.smackx.pubsub.Subscription$State:
    org.jivesoftware.smackx.pubsub.Subscription$State subscribed -> subscribed
    org.jivesoftware.smackx.pubsub.Subscription$State unconfigured -> unconfigured
    org.jivesoftware.smackx.pubsub.Subscription$State pending -> pending
    org.jivesoftware.smackx.pubsub.Subscription$State none -> none
    org.jivesoftware.smackx.pubsub.Subscription$State[] $VALUES -> $VALUES
    org.jivesoftware.smackx.pubsub.Subscription$State[] values() -> values
    org.jivesoftware.smackx.pubsub.Subscription$State valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.pubsub.SubscriptionEvent -> org.jivesoftware.smackx.pubsub.SubscriptionEvent:
    java.util.List subIds -> subIds
    java.util.List getSubscriptions() -> getSubscriptions
    void setSubscriptions(java.util.List) -> setSubscriptions
org.jivesoftware.smackx.pubsub.SubscriptionsExtension -> org.jivesoftware.smackx.pubsub.SubscriptionsExtension:
    java.util.List items -> items
    java.util.List getSubscriptions() -> getSubscriptions
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.pubsub.UnsubscribeExtension -> org.jivesoftware.smackx.pubsub.UnsubscribeExtension:
    java.lang.String jid -> jid
    java.lang.String id -> id
    java.lang.String getJid() -> getJid
    java.lang.String getId() -> getId
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.pubsub.listener.ItemDeleteListener -> org.jivesoftware.smackx.pubsub.listener.ItemDeleteListener:
    void handleDeletedItems(org.jivesoftware.smackx.pubsub.ItemDeleteEvent) -> handleDeletedItems
    void handlePurge() -> handlePurge
org.jivesoftware.smackx.pubsub.listener.ItemEventListener -> org.jivesoftware.smackx.pubsub.listener.ItemEventListener:
    void handlePublishedItems(org.jivesoftware.smackx.pubsub.ItemPublishEvent) -> handlePublishedItems
org.jivesoftware.smackx.pubsub.listener.NodeConfigListener -> org.jivesoftware.smackx.pubsub.listener.NodeConfigListener:
    void handleNodeConfiguration(org.jivesoftware.smackx.pubsub.ConfigurationEvent) -> handleNodeConfiguration
org.jivesoftware.smackx.pubsub.packet.PubSub -> org.jivesoftware.smackx.pubsub.packet.PubSub:
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace ns -> ns
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    void setPubSubNamespace(org.jivesoftware.smackx.pubsub.packet.PubSubNamespace) -> setPubSubNamespace
    org.jivesoftware.smack.packet.PacketExtension getExtension(org.jivesoftware.smackx.pubsub.PubSubElementType) -> getExtension
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace getPubSubNamespace() -> getPubSubNamespace
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.pubsub.packet.PubSubNamespace -> org.jivesoftware.smackx.pubsub.packet.PubSubNamespace:
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace BASIC -> BASIC
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace ERROR -> ERROR
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace EVENT -> EVENT
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace OWNER -> OWNER
    java.lang.String fragment -> fragment
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace[] $VALUES -> $VALUES
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace[] values() -> values
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace valueOf(java.lang.String) -> valueOf
    java.lang.String getXmlns() -> getXmlns
    java.lang.String getFragment() -> getFragment
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace valueOfFromXmlns(java.lang.String) -> valueOfFromXmlns
org.jivesoftware.smackx.pubsub.packet.SyncPacketSend -> org.jivesoftware.smackx.pubsub.packet.SyncPacketSend:
    org.jivesoftware.smack.packet.Packet getReply(org.jivesoftware.smack.Connection,org.jivesoftware.smack.packet.Packet,long) -> getReply
    org.jivesoftware.smack.packet.Packet getReply(org.jivesoftware.smack.Connection,org.jivesoftware.smack.packet.Packet) -> getReply
org.jivesoftware.smackx.pubsub.provider.AffiliationProvider -> org.jivesoftware.smackx.pubsub.provider.AffiliationProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.pubsub.provider.AffiliationsProvider -> org.jivesoftware.smackx.pubsub.provider.AffiliationsProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.pubsub.provider.ConfigEventProvider -> org.jivesoftware.smackx.pubsub.provider.ConfigEventProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.pubsub.provider.EventProvider -> org.jivesoftware.smackx.pubsub.provider.EventProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.pubsub.provider.FormNodeProvider -> org.jivesoftware.smackx.pubsub.provider.FormNodeProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.pubsub.provider.ItemProvider -> org.jivesoftware.smackx.pubsub.provider.ItemProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.pubsub.provider.ItemsProvider -> org.jivesoftware.smackx.pubsub.provider.ItemsProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.pubsub.provider.PubSubProvider -> org.jivesoftware.smackx.pubsub.provider.PubSubProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.pubsub.provider.RetractEventProvider -> org.jivesoftware.smackx.pubsub.provider.RetractEventProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.pubsub.provider.SimpleNodeProvider -> org.jivesoftware.smackx.pubsub.provider.SimpleNodeProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.pubsub.provider.SubscriptionProvider -> org.jivesoftware.smackx.pubsub.provider.SubscriptionProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.pubsub.provider.SubscriptionsProvider -> org.jivesoftware.smackx.pubsub.provider.SubscriptionsProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.pubsub.util.NodeUtils -> org.jivesoftware.smackx.pubsub.util.NodeUtils:
    org.jivesoftware.smackx.pubsub.ConfigureForm getFormFromPacket(org.jivesoftware.smack.packet.Packet,org.jivesoftware.smackx.pubsub.PubSubElementType) -> getFormFromPacket
org.jivesoftware.smackx.pubsub.util.XmlUtils -> org.jivesoftware.smackx.pubsub.util.XmlUtils:
    void appendAttribute(java.lang.StringBuilder,java.lang.String,java.lang.String) -> appendAttribute
org.jivesoftware.smackx.search.SimpleUserSearch -> org.jivesoftware.smackx.search.SimpleUserSearch:
    org.jivesoftware.smackx.Form form -> form
    org.jivesoftware.smackx.ReportedData data -> data
    void setForm(org.jivesoftware.smackx.Form) -> setForm
    org.jivesoftware.smackx.ReportedData getReportedData() -> getReportedData
    java.lang.String getChildElementXML() -> getChildElementXML
    java.lang.String getItemsToSearch() -> getItemsToSearch
    java.lang.String getSingleValue(org.jivesoftware.smackx.FormField) -> getSingleValue
    void parseItems(org.xmlpull.v1.XmlPullParser) -> parseItems
org.jivesoftware.smackx.search.UserSearch -> org.jivesoftware.smackx.search.UserSearch:
    java.lang.String getChildElementXML() -> getChildElementXML
    org.jivesoftware.smackx.Form getSearchForm(org.jivesoftware.smack.Connection,java.lang.String) -> getSearchForm
    org.jivesoftware.smackx.ReportedData sendSearchForm(org.jivesoftware.smack.Connection,org.jivesoftware.smackx.Form,java.lang.String) -> sendSearchForm
    org.jivesoftware.smackx.ReportedData sendSimpleSearchForm(org.jivesoftware.smack.Connection,org.jivesoftware.smackx.Form,java.lang.String) -> sendSimpleSearchForm
    void buildDataForm(org.jivesoftware.smackx.search.SimpleUserSearch,java.lang.String,org.xmlpull.v1.XmlPullParser) -> buildDataForm
    void access$000(org.jivesoftware.smackx.search.SimpleUserSearch,java.lang.String,org.xmlpull.v1.XmlPullParser) -> access$000
org.jivesoftware.smackx.search.UserSearch$Provider -> org.jivesoftware.smackx.search.UserSearch$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.search.UserSearchManager -> org.jivesoftware.smackx.search.UserSearchManager:
    org.jivesoftware.smack.Connection con -> con
    org.jivesoftware.smackx.search.UserSearch userSearch -> userSearch
    org.jivesoftware.smackx.Form getSearchForm(java.lang.String) -> getSearchForm
    org.jivesoftware.smackx.ReportedData getSearchResults(org.jivesoftware.smackx.Form,java.lang.String) -> getSearchResults
    java.util.Collection getSearchServices() -> getSearchServices
org.jivesoftware.smackx.workgroup.MetaData -> org.jivesoftware.smackx.workgroup.MetaData:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.util.Map metaData -> metaData
    java.util.Map getMetaData() -> getMetaData
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.workgroup.QueueUser -> org.jivesoftware.smackx.workgroup.QueueUser:
    java.lang.String userID -> userID
    int queuePosition -> queuePosition
    int estimatedTime -> estimatedTime
    java.util.Date joinDate -> joinDate
    java.lang.String getUserID() -> getUserID
    int getQueuePosition() -> getQueuePosition
    int getEstimatedRemainingTime() -> getEstimatedRemainingTime
    java.util.Date getQueueJoinTimestamp() -> getQueueJoinTimestamp
org.jivesoftware.smackx.workgroup.WorkgroupInvitation -> org.jivesoftware.smackx.workgroup.WorkgroupInvitation:
    java.lang.String uniqueID -> uniqueID
    java.lang.String sessionID -> sessionID
    java.lang.String groupChatName -> groupChatName
    java.lang.String issuingWorkgroupName -> issuingWorkgroupName
    java.lang.String messageBody -> messageBody
    java.lang.String invitationSender -> invitationSender
    java.util.Map metaData -> metaData
    java.lang.String getUniqueID() -> getUniqueID
    java.lang.String getSessionID() -> getSessionID
    java.lang.String getGroupChatName() -> getGroupChatName
    java.lang.String getWorkgroupName() -> getWorkgroupName
    java.lang.String getMessageBody() -> getMessageBody
    java.lang.String getInvitationSender() -> getInvitationSender
    java.util.Map getMetaData() -> getMetaData
org.jivesoftware.smackx.workgroup.WorkgroupInvitationListener -> org.jivesoftware.smackx.workgroup.WorkgroupInvitationListener:
    void invitationReceived(org.jivesoftware.smackx.workgroup.WorkgroupInvitation) -> invitationReceived
org.jivesoftware.smackx.workgroup.agent.Agent -> org.jivesoftware.smackx.workgroup.agent.Agent:
    org.jivesoftware.smack.Connection connection -> connection
    java.lang.String workgroupJID -> workgroupJID
    java.util.Collection getWorkgroups(java.lang.String,java.lang.String,org.jivesoftware.smack.Connection) -> getWorkgroups
    java.lang.String getUser() -> getUser
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
org.jivesoftware.smackx.workgroup.agent.AgentRoster -> org.jivesoftware.smackx.workgroup.agent.AgentRoster:
    int EVENT_AGENT_ADDED -> EVENT_AGENT_ADDED
    int EVENT_AGENT_REMOVED -> EVENT_AGENT_REMOVED
    int EVENT_PRESENCE_CHANGED -> EVENT_PRESENCE_CHANGED
    org.jivesoftware.smack.Connection connection -> connection
    java.lang.String workgroupJID -> workgroupJID
    java.util.List entries -> entries
    java.util.List listeners -> listeners
    java.util.Map presenceMap -> presenceMap
    boolean rosterInitialized -> rosterInitialized
    void reload() -> reload
    void addListener(org.jivesoftware.smackx.workgroup.agent.AgentRosterListener) -> addListener
    void removeListener(org.jivesoftware.smackx.workgroup.agent.AgentRosterListener) -> removeListener
    int getAgentCount() -> getAgentCount
    java.util.Set getAgents() -> getAgents
    boolean contains(java.lang.String) -> contains
    org.jivesoftware.smack.packet.Presence getPresence(java.lang.String) -> getPresence
    java.lang.String getPresenceMapKey(java.lang.String) -> getPresenceMapKey
    void fireEvent(int,java.lang.Object) -> fireEvent
    java.lang.String access$200(org.jivesoftware.smackx.workgroup.agent.AgentRoster,java.lang.String) -> access$200
    java.lang.String access$300(org.jivesoftware.smackx.workgroup.agent.AgentRoster) -> access$300
    java.util.Map access$400(org.jivesoftware.smackx.workgroup.agent.AgentRoster) -> access$400
    java.util.List access$500(org.jivesoftware.smackx.workgroup.agent.AgentRoster) -> access$500
    void access$600(org.jivesoftware.smackx.workgroup.agent.AgentRoster,int,java.lang.Object) -> access$600
org.jivesoftware.smackx.workgroup.agent.AgentRoster$1 -> org.jivesoftware.smackx.workgroup.agent.AgentRoster$1:
org.jivesoftware.smackx.workgroup.agent.AgentRoster$AgentStatusListener -> org.jivesoftware.smackx.workgroup.agent.AgentRoster$AgentStatusListener:
    org.jivesoftware.smackx.workgroup.agent.AgentRoster this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.workgroup.agent.AgentRoster$PresencePacketListener -> org.jivesoftware.smackx.workgroup.agent.AgentRoster$PresencePacketListener:
    org.jivesoftware.smackx.workgroup.agent.AgentRoster this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.workgroup.agent.AgentRosterListener -> org.jivesoftware.smackx.workgroup.agent.AgentRosterListener:
    void agentAdded(java.lang.String) -> agentAdded
    void agentRemoved(java.lang.String) -> agentRemoved
    void presenceChanged(org.jivesoftware.smack.packet.Presence) -> presenceChanged
org.jivesoftware.smackx.workgroup.agent.AgentSession -> org.jivesoftware.smackx.workgroup.agent.AgentSession:
    org.jivesoftware.smack.Connection connection -> connection
    java.lang.String workgroupJID -> workgroupJID
    boolean online -> online
    org.jivesoftware.smack.packet.Presence$Mode presenceMode -> presenceMode
    int maxChats -> maxChats
    java.util.Map metaData -> metaData
    java.util.Map queues -> queues
    java.util.List offerListeners -> offerListeners
    java.util.List invitationListeners -> invitationListeners
    java.util.List queueUsersListeners -> queueUsersListeners
    org.jivesoftware.smackx.workgroup.agent.AgentRoster agentRoster -> agentRoster
    org.jivesoftware.smackx.workgroup.agent.TranscriptManager transcriptManager -> transcriptManager
    org.jivesoftware.smackx.workgroup.agent.TranscriptSearchManager transcriptSearchManager -> transcriptSearchManager
    org.jivesoftware.smackx.workgroup.agent.Agent agent -> agent
    org.jivesoftware.smack.PacketListener packetListener -> packetListener
    void close() -> close
    org.jivesoftware.smackx.workgroup.agent.AgentRoster getAgentRoster() -> getAgentRoster
    org.jivesoftware.smack.packet.Presence$Mode getPresenceMode() -> getPresenceMode
    int getMaxChats() -> getMaxChats
    boolean isOnline() -> isOnline
    void setMetaData(java.lang.String,java.lang.String) -> setMetaData
    void removeMetaData(java.lang.String) -> removeMetaData
    java.lang.String getMetaData(java.lang.String) -> getMetaData
    void setOnline(boolean) -> setOnline
    void setStatus(org.jivesoftware.smack.packet.Presence$Mode,int) -> setStatus
    void setStatus(org.jivesoftware.smack.packet.Presence$Mode,int,java.lang.String) -> setStatus
    void setStatus(org.jivesoftware.smack.packet.Presence$Mode,java.lang.String) -> setStatus
    void dequeueUser(java.lang.String) -> dequeueUser
    org.jivesoftware.smackx.workgroup.packet.Transcripts getTranscripts(java.lang.String) -> getTranscripts
    org.jivesoftware.smackx.workgroup.packet.Transcript getTranscript(java.lang.String) -> getTranscript
    org.jivesoftware.smackx.Form getTranscriptSearchForm() -> getTranscriptSearchForm
    org.jivesoftware.smackx.ReportedData searchTranscripts(org.jivesoftware.smackx.Form) -> searchTranscripts
    org.jivesoftware.smackx.workgroup.packet.OccupantsInfo getOccupantsInfo(java.lang.String) -> getOccupantsInfo
    java.lang.String getWorkgroupJID() -> getWorkgroupJID
    org.jivesoftware.smackx.workgroup.agent.Agent getAgent() -> getAgent
    org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue getQueue(java.lang.String) -> getQueue
    java.util.Iterator getQueues() -> getQueues
    void addQueueUsersListener(org.jivesoftware.smackx.workgroup.agent.QueueUsersListener) -> addQueueUsersListener
    void removeQueueUsersListener(org.jivesoftware.smackx.workgroup.agent.QueueUsersListener) -> removeQueueUsersListener
    void addOfferListener(org.jivesoftware.smackx.workgroup.agent.OfferListener) -> addOfferListener
    void removeOfferListener(org.jivesoftware.smackx.workgroup.agent.OfferListener) -> removeOfferListener
    void addInvitationListener(org.jivesoftware.smackx.workgroup.WorkgroupInvitationListener) -> addInvitationListener
    void removeInvitationListener(org.jivesoftware.smackx.workgroup.WorkgroupInvitationListener) -> removeInvitationListener
    void fireOfferRequestEvent(org.jivesoftware.smackx.workgroup.packet.OfferRequestProvider$OfferRequestPacket) -> fireOfferRequestEvent
    void fireOfferRevokeEvent(org.jivesoftware.smackx.workgroup.packet.OfferRevokeProvider$OfferRevokePacket) -> fireOfferRevokeEvent
    void fireInvitationEvent(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map) -> fireInvitationEvent
    void fireQueueUsersEvent(org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue,org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue$Status,int,java.util.Date,java.util.Set) -> fireQueueUsersEvent
    void handlePacket(org.jivesoftware.smack.packet.Packet) -> handlePacket
    void setNote(java.lang.String,java.lang.String) -> setNote
    org.jivesoftware.smackx.workgroup.ext.notes.ChatNotes getNote(java.lang.String) -> getNote
    org.jivesoftware.smackx.workgroup.ext.history.AgentChatHistory getAgentHistory(java.lang.String,int,java.util.Date) -> getAgentHistory
    org.jivesoftware.smackx.workgroup.settings.SearchSettings getSearchSettings() -> getSearchSettings
    org.jivesoftware.smackx.workgroup.ext.macros.MacroGroup getMacros(boolean) -> getMacros
    void saveMacros(org.jivesoftware.smackx.workgroup.ext.macros.MacroGroup) -> saveMacros
    java.util.Map getChatMetadata(java.lang.String) -> getChatMetadata
    void sendRoomInvitation(org.jivesoftware.smackx.workgroup.packet.RoomInvitation$Type,java.lang.String,java.lang.String,java.lang.String) -> sendRoomInvitation
    void sendRoomTransfer(org.jivesoftware.smackx.workgroup.packet.RoomTransfer$Type,java.lang.String,java.lang.String,java.lang.String) -> sendRoomTransfer
    org.jivesoftware.smackx.workgroup.settings.GenericSettings getGenericSettings(org.jivesoftware.smack.Connection,java.lang.String) -> getGenericSettings
    boolean hasMonitorPrivileges(org.jivesoftware.smack.Connection) -> hasMonitorPrivileges
    void makeRoomOwner(org.jivesoftware.smack.Connection,java.lang.String) -> makeRoomOwner
    void access$000(org.jivesoftware.smackx.workgroup.agent.AgentSession,org.jivesoftware.smack.packet.Packet) -> access$000
org.jivesoftware.smackx.workgroup.agent.AgentSession$1 -> org.jivesoftware.smackx.workgroup.agent.AgentSession$1:
    org.jivesoftware.smackx.workgroup.agent.AgentSession this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.workgroup.agent.AgentSession$2 -> org.jivesoftware.smackx.workgroup.agent.AgentSession$2:
    org.jivesoftware.smackx.workgroup.agent.AgentSession this$0 -> this$0
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.agent.AgentSession$3 -> org.jivesoftware.smackx.workgroup.agent.AgentSession$3:
    org.jivesoftware.smackx.workgroup.agent.AgentSession this$0 -> this$0
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.agent.AgentSession$4 -> org.jivesoftware.smackx.workgroup.agent.AgentSession$4:
    org.jivesoftware.smackx.workgroup.packet.RoomInvitation val$invitation -> val$invitation
    org.jivesoftware.smackx.workgroup.agent.AgentSession this$0 -> this$0
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.agent.AgentSession$5 -> org.jivesoftware.smackx.workgroup.agent.AgentSession$5:
    org.jivesoftware.smackx.workgroup.packet.RoomTransfer val$transfer -> val$transfer
    org.jivesoftware.smackx.workgroup.agent.AgentSession this$0 -> this$0
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.agent.InvitationRequest -> org.jivesoftware.smackx.workgroup.agent.InvitationRequest:
    java.lang.String inviter -> inviter
    java.lang.String room -> room
    java.lang.String reason -> reason
    java.lang.String getInviter() -> getInviter
    java.lang.String getRoom() -> getRoom
    java.lang.String getReason() -> getReason
    boolean isUserRequest() -> isUserRequest
    boolean isInvitation() -> isInvitation
    boolean isTransfer() -> isTransfer
org.jivesoftware.smackx.workgroup.agent.Offer -> org.jivesoftware.smackx.workgroup.agent.Offer:
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smackx.workgroup.agent.AgentSession session -> session
    java.lang.String sessionID -> sessionID
    java.lang.String userJID -> userJID
    java.lang.String userID -> userID
    java.lang.String workgroupName -> workgroupName
    java.util.Date expiresDate -> expiresDate
    java.util.Map metaData -> metaData
    org.jivesoftware.smackx.workgroup.agent.OfferContent content -> content
    boolean accepted -> accepted
    boolean rejected -> rejected
    void accept() -> accept
    void reject() -> reject
    java.lang.String getUserID() -> getUserID
    java.lang.String getUserJID() -> getUserJID
    java.lang.String getWorkgroupName() -> getWorkgroupName
    java.util.Date getExpiresDate() -> getExpiresDate
    java.lang.String getSessionID() -> getSessionID
    java.util.Map getMetaData() -> getMetaData
    org.jivesoftware.smackx.workgroup.agent.OfferContent getContent() -> getContent
    boolean isAccepted() -> isAccepted
    boolean isRejected() -> isRejected
org.jivesoftware.smackx.workgroup.agent.Offer$AcceptPacket -> org.jivesoftware.smackx.workgroup.agent.Offer$AcceptPacket:
    org.jivesoftware.smackx.workgroup.agent.Offer this$0 -> this$0
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.agent.Offer$RejectPacket -> org.jivesoftware.smackx.workgroup.agent.Offer$RejectPacket:
    org.jivesoftware.smackx.workgroup.agent.Offer this$0 -> this$0
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.agent.OfferConfirmation -> org.jivesoftware.smackx.workgroup.agent.OfferConfirmation:
    java.lang.String userJID -> userJID
    long sessionID -> sessionID
    java.lang.String getUserJID() -> getUserJID
    void setUserJID(java.lang.String) -> setUserJID
    long getSessionID() -> getSessionID
    void setSessionID(long) -> setSessionID
    void notifyService(org.jivesoftware.smack.Connection,java.lang.String,java.lang.String) -> notifyService
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.agent.OfferConfirmation$NotifyServicePacket -> org.jivesoftware.smackx.workgroup.agent.OfferConfirmation$NotifyServicePacket:
    java.lang.String roomName -> roomName
    org.jivesoftware.smackx.workgroup.agent.OfferConfirmation this$0 -> this$0
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.agent.OfferConfirmation$Provider -> org.jivesoftware.smackx.workgroup.agent.OfferConfirmation$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.workgroup.agent.OfferConfirmationListener -> org.jivesoftware.smackx.workgroup.agent.OfferConfirmationListener:
    void offerConfirmed(org.jivesoftware.smackx.workgroup.agent.OfferConfirmation) -> offerConfirmed
org.jivesoftware.smackx.workgroup.agent.OfferContent -> org.jivesoftware.smackx.workgroup.agent.OfferContent:
    boolean isUserRequest() -> isUserRequest
    boolean isInvitation() -> isInvitation
    boolean isTransfer() -> isTransfer
org.jivesoftware.smackx.workgroup.agent.OfferListener -> org.jivesoftware.smackx.workgroup.agent.OfferListener:
    void offerReceived(org.jivesoftware.smackx.workgroup.agent.Offer) -> offerReceived
    void offerRevoked(org.jivesoftware.smackx.workgroup.agent.RevokedOffer) -> offerRevoked
org.jivesoftware.smackx.workgroup.agent.QueueUsersListener -> org.jivesoftware.smackx.workgroup.agent.QueueUsersListener:
    void statusUpdated(org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue,org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue$Status) -> statusUpdated
    void averageWaitTimeUpdated(org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue,int) -> averageWaitTimeUpdated
    void oldestEntryUpdated(org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue,java.util.Date) -> oldestEntryUpdated
    void usersUpdated(org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue,java.util.Set) -> usersUpdated
org.jivesoftware.smackx.workgroup.agent.RevokedOffer -> org.jivesoftware.smackx.workgroup.agent.RevokedOffer:
    java.lang.String userJID -> userJID
    java.lang.String userID -> userID
    java.lang.String workgroupName -> workgroupName
    java.lang.String sessionID -> sessionID
    java.lang.String reason -> reason
    java.util.Date timestamp -> timestamp
    java.lang.String getUserJID() -> getUserJID
    java.lang.String getUserID() -> getUserID
    java.lang.String getWorkgroupName() -> getWorkgroupName
    java.lang.String getSessionID() -> getSessionID
    java.lang.String getReason() -> getReason
    java.util.Date getTimestamp() -> getTimestamp
org.jivesoftware.smackx.workgroup.agent.TranscriptManager -> org.jivesoftware.smackx.workgroup.agent.TranscriptManager:
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smackx.workgroup.packet.Transcript getTranscript(java.lang.String,java.lang.String) -> getTranscript
    org.jivesoftware.smackx.workgroup.packet.Transcripts getTranscripts(java.lang.String,java.lang.String) -> getTranscripts
org.jivesoftware.smackx.workgroup.agent.TranscriptSearchManager -> org.jivesoftware.smackx.workgroup.agent.TranscriptSearchManager:
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smackx.Form getSearchForm(java.lang.String) -> getSearchForm
    org.jivesoftware.smackx.ReportedData submitSearch(java.lang.String,org.jivesoftware.smackx.Form) -> submitSearch
org.jivesoftware.smackx.workgroup.agent.TransferRequest -> org.jivesoftware.smackx.workgroup.agent.TransferRequest:
    java.lang.String inviter -> inviter
    java.lang.String room -> room
    java.lang.String reason -> reason
    java.lang.String getInviter() -> getInviter
    java.lang.String getRoom() -> getRoom
    java.lang.String getReason() -> getReason
    boolean isUserRequest() -> isUserRequest
    boolean isInvitation() -> isInvitation
    boolean isTransfer() -> isTransfer
org.jivesoftware.smackx.workgroup.agent.UserRequest -> org.jivesoftware.smackx.workgroup.agent.UserRequest:
    org.jivesoftware.smackx.workgroup.agent.UserRequest instance -> instance
    org.jivesoftware.smackx.workgroup.agent.OfferContent getInstance() -> getInstance
    boolean isUserRequest() -> isUserRequest
    boolean isInvitation() -> isInvitation
    boolean isTransfer() -> isTransfer
org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue -> org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue:
    java.lang.String name -> name
    org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue$Status status -> status
    int averageWaitTime -> averageWaitTime
    java.util.Date oldestEntry -> oldestEntry
    java.util.Set users -> users
    int maxChats -> maxChats
    int currentChats -> currentChats
    java.lang.String getName() -> getName
    org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue$Status getStatus() -> getStatus
    void setStatus(org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue$Status) -> setStatus
    int getUserCount() -> getUserCount
    java.util.Iterator getUsers() -> getUsers
    void setUsers(java.util.Set) -> setUsers
    int getAverageWaitTime() -> getAverageWaitTime
    void setAverageWaitTime(int) -> setAverageWaitTime
    java.util.Date getOldestEntry() -> getOldestEntry
    void setOldestEntry(java.util.Date) -> setOldestEntry
    int getMaxChats() -> getMaxChats
    void setMaxChats(int) -> setMaxChats
    int getCurrentChats() -> getCurrentChats
    void setCurrentChats(int) -> setCurrentChats
org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue$Status -> org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue$Status:
    org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue$Status OPEN -> OPEN
    org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue$Status ACTIVE -> ACTIVE
    org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue$Status CLOSED -> CLOSED
    java.lang.String value -> value
    org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue$Status fromString(java.lang.String) -> fromString
    java.lang.String toString() -> toString
org.jivesoftware.smackx.workgroup.ext.forms.WorkgroupForm -> org.jivesoftware.smackx.workgroup.ext.forms.WorkgroupForm:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.ext.forms.WorkgroupForm$InternalProvider -> org.jivesoftware.smackx.workgroup.ext.forms.WorkgroupForm$InternalProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.workgroup.ext.history.AgentChatHistory -> org.jivesoftware.smackx.workgroup.ext.history.AgentChatHistory:
    java.lang.String agentJID -> agentJID
    int maxSessions -> maxSessions
    long startDate -> startDate
    java.util.List agentChatSessions -> agentChatSessions
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    void addChatSession(org.jivesoftware.smackx.workgroup.ext.history.AgentChatSession) -> addChatSession
    java.util.Collection getAgentChatSessions() -> getAgentChatSessions
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.ext.history.AgentChatHistory$InternalProvider -> org.jivesoftware.smackx.workgroup.ext.history.AgentChatHistory$InternalProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    org.jivesoftware.smackx.workgroup.ext.history.AgentChatSession parseChatSetting(org.xmlpull.v1.XmlPullParser) -> parseChatSetting
org.jivesoftware.smackx.workgroup.ext.history.AgentChatSession -> org.jivesoftware.smackx.workgroup.ext.history.AgentChatSession:
    java.util.Date startDate -> startDate
    long duration -> duration
    java.lang.String visitorsName -> visitorsName
    java.lang.String visitorsEmail -> visitorsEmail
    java.lang.String sessionID -> sessionID
    java.lang.String question -> question
    java.util.Date getStartDate() -> getStartDate
    void setStartDate(java.util.Date) -> setStartDate
    long getDuration() -> getDuration
    void setDuration(long) -> setDuration
    java.lang.String getVisitorsName() -> getVisitorsName
    void setVisitorsName(java.lang.String) -> setVisitorsName
    java.lang.String getVisitorsEmail() -> getVisitorsEmail
    void setVisitorsEmail(java.lang.String) -> setVisitorsEmail
    java.lang.String getSessionID() -> getSessionID
    void setSessionID(java.lang.String) -> setSessionID
    void setQuestion(java.lang.String) -> setQuestion
    java.lang.String getQuestion() -> getQuestion
org.jivesoftware.smackx.workgroup.ext.history.ChatMetadata -> org.jivesoftware.smackx.workgroup.ext.history.ChatMetadata:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String sessionID -> sessionID
    java.util.Map map -> map
    java.lang.String getSessionID() -> getSessionID
    void setSessionID(java.lang.String) -> setSessionID
    void setMetadata(java.util.Map) -> setMetadata
    java.util.Map getMetadata() -> getMetadata
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.ext.history.ChatMetadata$Provider -> org.jivesoftware.smackx.workgroup.ext.history.ChatMetadata$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.workgroup.ext.macros.Macro -> org.jivesoftware.smackx.workgroup.ext.macros.Macro:
    int TEXT -> TEXT
    int URL -> URL
    int IMAGE -> IMAGE
    java.lang.String title -> title
    java.lang.String description -> description
    java.lang.String response -> response
    int type -> type
    java.lang.String getTitle() -> getTitle
    void setTitle(java.lang.String) -> setTitle
    java.lang.String getDescription() -> getDescription
    void setDescription(java.lang.String) -> setDescription
    java.lang.String getResponse() -> getResponse
    void setResponse(java.lang.String) -> setResponse
    int getType() -> getType
    void setType(int) -> setType
org.jivesoftware.smackx.workgroup.ext.macros.MacroGroup -> org.jivesoftware.smackx.workgroup.ext.macros.MacroGroup:
    java.util.List macros -> macros
    java.util.List macroGroups -> macroGroups
    java.lang.String title -> title
    void addMacro(org.jivesoftware.smackx.workgroup.ext.macros.Macro) -> addMacro
    void removeMacro(org.jivesoftware.smackx.workgroup.ext.macros.Macro) -> removeMacro
    org.jivesoftware.smackx.workgroup.ext.macros.Macro getMacroByTitle(java.lang.String) -> getMacroByTitle
    void addMacroGroup(org.jivesoftware.smackx.workgroup.ext.macros.MacroGroup) -> addMacroGroup
    void removeMacroGroup(org.jivesoftware.smackx.workgroup.ext.macros.MacroGroup) -> removeMacroGroup
    org.jivesoftware.smackx.workgroup.ext.macros.Macro getMacro(int) -> getMacro
    org.jivesoftware.smackx.workgroup.ext.macros.MacroGroup getMacroGroupByTitle(java.lang.String) -> getMacroGroupByTitle
    org.jivesoftware.smackx.workgroup.ext.macros.MacroGroup getMacroGroup(int) -> getMacroGroup
    java.util.List getMacros() -> getMacros
    void setMacros(java.util.List) -> setMacros
    java.util.List getMacroGroups() -> getMacroGroups
    void setMacroGroups(java.util.List) -> setMacroGroups
    java.lang.String getTitle() -> getTitle
    void setTitle(java.lang.String) -> setTitle
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.workgroup.ext.macros.Macros -> org.jivesoftware.smackx.workgroup.ext.macros.Macros:
    org.jivesoftware.smackx.workgroup.ext.macros.MacroGroup rootGroup -> rootGroup
    boolean personal -> personal
    org.jivesoftware.smackx.workgroup.ext.macros.MacroGroup personalMacroGroup -> personalMacroGroup
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    org.jivesoftware.smackx.workgroup.ext.macros.MacroGroup getRootGroup() -> getRootGroup
    void setRootGroup(org.jivesoftware.smackx.workgroup.ext.macros.MacroGroup) -> setRootGroup
    boolean isPersonal() -> isPersonal
    void setPersonal(boolean) -> setPersonal
    org.jivesoftware.smackx.workgroup.ext.macros.MacroGroup getPersonalMacroGroup() -> getPersonalMacroGroup
    void setPersonalMacroGroup(org.jivesoftware.smackx.workgroup.ext.macros.MacroGroup) -> setPersonalMacroGroup
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.ext.macros.Macros$InternalProvider -> org.jivesoftware.smackx.workgroup.ext.macros.Macros$InternalProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    org.jivesoftware.smackx.workgroup.ext.macros.Macro parseMacro(org.xmlpull.v1.XmlPullParser) -> parseMacro
    org.jivesoftware.smackx.workgroup.ext.macros.MacroGroup parseMacroGroup(org.xmlpull.v1.XmlPullParser) -> parseMacroGroup
    org.jivesoftware.smackx.workgroup.ext.macros.MacroGroup parseMacroGroups(java.lang.String) -> parseMacroGroups
org.jivesoftware.smackx.workgroup.ext.notes.ChatNotes -> org.jivesoftware.smackx.workgroup.ext.notes.ChatNotes:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String sessionID -> sessionID
    java.lang.String notes -> notes
    java.lang.String getSessionID() -> getSessionID
    void setSessionID(java.lang.String) -> setSessionID
    java.lang.String getNotes() -> getNotes
    void setNotes(java.lang.String) -> setNotes
    java.lang.String getChildElementXML() -> getChildElementXML
    java.lang.String replace(java.lang.String,java.lang.String,java.lang.String) -> replace
org.jivesoftware.smackx.workgroup.ext.notes.ChatNotes$Provider -> org.jivesoftware.smackx.workgroup.ext.notes.ChatNotes$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.workgroup.packet.AgentInfo -> org.jivesoftware.smackx.workgroup.packet.AgentInfo:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String jid -> jid
    java.lang.String name -> name
    java.lang.String getJid() -> getJid
    void setJid(java.lang.String) -> setJid
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.packet.AgentInfo$Provider -> org.jivesoftware.smackx.workgroup.packet.AgentInfo$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.workgroup.packet.AgentStatus -> org.jivesoftware.smackx.workgroup.packet.AgentStatus:
    java.text.SimpleDateFormat UTC_FORMAT -> UTC_FORMAT
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String workgroupJID -> workgroupJID
    java.util.List currentChats -> currentChats
    int maxChats -> maxChats
    java.lang.String getWorkgroupJID() -> getWorkgroupJID
    java.util.List getCurrentChats() -> getCurrentChats
    int getMaxChats() -> getMaxChats
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    java.text.SimpleDateFormat access$000() -> access$000
    java.lang.String access$102(org.jivesoftware.smackx.workgroup.packet.AgentStatus,java.lang.String) -> access$102
    java.util.List access$200(org.jivesoftware.smackx.workgroup.packet.AgentStatus) -> access$200
    int access$302(org.jivesoftware.smackx.workgroup.packet.AgentStatus,int) -> access$302
org.jivesoftware.smackx.workgroup.packet.AgentStatus$ChatInfo -> org.jivesoftware.smackx.workgroup.packet.AgentStatus$ChatInfo:
    java.lang.String sessionID -> sessionID
    java.lang.String userID -> userID
    java.util.Date date -> date
    java.lang.String email -> email
    java.lang.String username -> username
    java.lang.String question -> question
    java.lang.String getSessionID() -> getSessionID
    java.lang.String getUserID() -> getUserID
    java.util.Date getDate() -> getDate
    java.lang.String getEmail() -> getEmail
    java.lang.String getUsername() -> getUsername
    java.lang.String getQuestion() -> getQuestion
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.workgroup.packet.AgentStatus$Provider -> org.jivesoftware.smackx.workgroup.packet.AgentStatus$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    org.jivesoftware.smackx.workgroup.packet.AgentStatus$ChatInfo parseChatInfo(org.xmlpull.v1.XmlPullParser) -> parseChatInfo
org.jivesoftware.smackx.workgroup.packet.AgentStatusRequest -> org.jivesoftware.smackx.workgroup.packet.AgentStatusRequest:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.util.Set agents -> agents
    int getAgentCount() -> getAgentCount
    java.util.Set getAgents() -> getAgents
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getChildElementXML() -> getChildElementXML
    java.util.Set access$000(org.jivesoftware.smackx.workgroup.packet.AgentStatusRequest) -> access$000
org.jivesoftware.smackx.workgroup.packet.AgentStatusRequest$Item -> org.jivesoftware.smackx.workgroup.packet.AgentStatusRequest$Item:
    java.lang.String jid -> jid
    java.lang.String type -> type
    java.lang.String name -> name
    java.lang.String getJID() -> getJID
    java.lang.String getType() -> getType
    java.lang.String getName() -> getName
org.jivesoftware.smackx.workgroup.packet.AgentStatusRequest$Provider -> org.jivesoftware.smackx.workgroup.packet.AgentStatusRequest$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    org.jivesoftware.smackx.workgroup.packet.AgentStatusRequest$Item parseAgent(org.xmlpull.v1.XmlPullParser) -> parseAgent
org.jivesoftware.smackx.workgroup.packet.AgentWorkgroups -> org.jivesoftware.smackx.workgroup.packet.AgentWorkgroups:
    java.lang.String agentJID -> agentJID
    java.util.List workgroups -> workgroups
    java.lang.String getAgentJID() -> getAgentJID
    java.util.List getWorkgroups() -> getWorkgroups
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.packet.AgentWorkgroups$Provider -> org.jivesoftware.smackx.workgroup.packet.AgentWorkgroups$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.workgroup.packet.DepartQueuePacket -> org.jivesoftware.smackx.workgroup.packet.DepartQueuePacket:
    java.lang.String user -> user
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.packet.MetaDataProvider -> org.jivesoftware.smackx.workgroup.packet.MetaDataProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.workgroup.packet.MonitorPacket -> org.jivesoftware.smackx.workgroup.packet.MonitorPacket:
    java.lang.String sessionID -> sessionID
    boolean isMonitor -> isMonitor
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    boolean isMonitor() -> isMonitor
    void setMonitor(boolean) -> setMonitor
    java.lang.String getSessionID() -> getSessionID
    void setSessionID(java.lang.String) -> setSessionID
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.packet.MonitorPacket$InternalProvider -> org.jivesoftware.smackx.workgroup.packet.MonitorPacket$InternalProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.workgroup.packet.OccupantsInfo -> org.jivesoftware.smackx.workgroup.packet.OccupantsInfo:
    java.text.SimpleDateFormat UTC_FORMAT -> UTC_FORMAT
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String roomID -> roomID
    java.util.Set occupants -> occupants
    java.lang.String getRoomID() -> getRoomID
    int getOccupantsCount() -> getOccupantsCount
    java.util.Set getOccupants() -> getOccupants
    java.lang.String getChildElementXML() -> getChildElementXML
    java.util.Set access$000(org.jivesoftware.smackx.workgroup.packet.OccupantsInfo) -> access$000
    java.text.SimpleDateFormat access$100() -> access$100
org.jivesoftware.smackx.workgroup.packet.OccupantsInfo$OccupantInfo -> org.jivesoftware.smackx.workgroup.packet.OccupantsInfo$OccupantInfo:
    java.lang.String jid -> jid
    java.lang.String nickname -> nickname
    java.util.Date joined -> joined
    java.lang.String getJID() -> getJID
    java.lang.String getNickname() -> getNickname
    java.util.Date getJoined() -> getJoined
org.jivesoftware.smackx.workgroup.packet.OccupantsInfo$Provider -> org.jivesoftware.smackx.workgroup.packet.OccupantsInfo$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    org.jivesoftware.smackx.workgroup.packet.OccupantsInfo$OccupantInfo parseOccupantInfo(org.xmlpull.v1.XmlPullParser) -> parseOccupantInfo
org.jivesoftware.smackx.workgroup.packet.OfferRequestProvider -> org.jivesoftware.smackx.workgroup.packet.OfferRequestProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.workgroup.packet.OfferRequestProvider$OfferRequestPacket -> org.jivesoftware.smackx.workgroup.packet.OfferRequestProvider$OfferRequestPacket:
    int timeout -> timeout
    java.lang.String userID -> userID
    java.lang.String userJID -> userJID
    java.util.Map metaData -> metaData
    java.lang.String sessionID -> sessionID
    org.jivesoftware.smackx.workgroup.agent.OfferContent content -> content
    java.lang.String getUserID() -> getUserID
    java.lang.String getUserJID() -> getUserJID
    java.lang.String getSessionID() -> getSessionID
    int getTimeout() -> getTimeout
    org.jivesoftware.smackx.workgroup.agent.OfferContent getContent() -> getContent
    java.util.Map getMetaData() -> getMetaData
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.packet.OfferRevokeProvider -> org.jivesoftware.smackx.workgroup.packet.OfferRevokeProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.workgroup.packet.OfferRevokeProvider$OfferRevokePacket -> org.jivesoftware.smackx.workgroup.packet.OfferRevokeProvider$OfferRevokePacket:
    java.lang.String userJID -> userJID
    java.lang.String userID -> userID
    java.lang.String sessionID -> sessionID
    java.lang.String reason -> reason
    org.jivesoftware.smackx.workgroup.packet.OfferRevokeProvider this$0 -> this$0
    java.lang.String getUserJID() -> getUserJID
    java.lang.String getUserID() -> getUserID
    java.lang.String getReason() -> getReason
    java.lang.String getSessionID() -> getSessionID
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.packet.QueueDetails -> org.jivesoftware.smackx.workgroup.packet.QueueDetails:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.text.SimpleDateFormat DATE_FORMATTER -> DATE_FORMATTER
    java.util.Set users -> users
    int getUserCount() -> getUserCount
    java.util.Set getUsers() -> getUsers
    void addUser(org.jivesoftware.smackx.workgroup.QueueUser) -> addUser
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    java.text.SimpleDateFormat access$100() -> access$100
    void access$200(org.jivesoftware.smackx.workgroup.packet.QueueDetails,org.jivesoftware.smackx.workgroup.QueueUser) -> access$200
org.jivesoftware.smackx.workgroup.packet.QueueDetails$1 -> org.jivesoftware.smackx.workgroup.packet.QueueDetails$1:
org.jivesoftware.smackx.workgroup.packet.QueueDetails$Provider -> org.jivesoftware.smackx.workgroup.packet.QueueDetails$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.workgroup.packet.QueueOverview -> org.jivesoftware.smackx.workgroup.packet.QueueOverview:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.text.SimpleDateFormat DATE_FORMATTER -> DATE_FORMATTER
    int averageWaitTime -> averageWaitTime
    java.util.Date oldestEntry -> oldestEntry
    int userCount -> userCount
    org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue$Status status -> status
    void setAverageWaitTime(int) -> setAverageWaitTime
    int getAverageWaitTime() -> getAverageWaitTime
    void setOldestEntry(java.util.Date) -> setOldestEntry
    java.util.Date getOldestEntry() -> getOldestEntry
    void setUserCount(int) -> setUserCount
    int getUserCount() -> getUserCount
    org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue$Status getStatus() -> getStatus
    void setStatus(org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue$Status) -> setStatus
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    java.text.SimpleDateFormat access$000() -> access$000
org.jivesoftware.smackx.workgroup.packet.QueueOverview$Provider -> org.jivesoftware.smackx.workgroup.packet.QueueOverview$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.workgroup.packet.QueueUpdate -> org.jivesoftware.smackx.workgroup.packet.QueueUpdate:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    int position -> position
    int remainingTime -> remainingTime
    int getPosition() -> getPosition
    int getRemaingTime() -> getRemaingTime
    java.lang.String toXML() -> toXML
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
org.jivesoftware.smackx.workgroup.packet.QueueUpdate$Provider -> org.jivesoftware.smackx.workgroup.packet.QueueUpdate$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.workgroup.packet.RoomInvitation -> org.jivesoftware.smackx.workgroup.packet.RoomInvitation:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    org.jivesoftware.smackx.workgroup.packet.RoomInvitation$Type type -> type
    java.lang.String invitee -> invitee
    java.lang.String inviter -> inviter
    java.lang.String sessionID -> sessionID
    java.lang.String room -> room
    java.lang.String reason -> reason
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getInviter() -> getInviter
    java.lang.String getRoom() -> getRoom
    java.lang.String getReason() -> getReason
    java.lang.String getSessionID() -> getSessionID
    java.lang.String toXML() -> toXML
    org.jivesoftware.smackx.workgroup.packet.RoomInvitation$Type access$102(org.jivesoftware.smackx.workgroup.packet.RoomInvitation,org.jivesoftware.smackx.workgroup.packet.RoomInvitation$Type) -> access$102
    java.lang.String access$202(org.jivesoftware.smackx.workgroup.packet.RoomInvitation,java.lang.String) -> access$202
    java.lang.String access$302(org.jivesoftware.smackx.workgroup.packet.RoomInvitation,java.lang.String) -> access$302
    java.lang.String access$402(org.jivesoftware.smackx.workgroup.packet.RoomInvitation,java.lang.String) -> access$402
    java.lang.String access$502(org.jivesoftware.smackx.workgroup.packet.RoomInvitation,java.lang.String) -> access$502
    java.lang.String access$602(org.jivesoftware.smackx.workgroup.packet.RoomInvitation,java.lang.String) -> access$602
org.jivesoftware.smackx.workgroup.packet.RoomInvitation$1 -> org.jivesoftware.smackx.workgroup.packet.RoomInvitation$1:
org.jivesoftware.smackx.workgroup.packet.RoomInvitation$Provider -> org.jivesoftware.smackx.workgroup.packet.RoomInvitation$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.workgroup.packet.RoomInvitation$Type -> org.jivesoftware.smackx.workgroup.packet.RoomInvitation$Type:
    org.jivesoftware.smackx.workgroup.packet.RoomInvitation$Type user -> user
    org.jivesoftware.smackx.workgroup.packet.RoomInvitation$Type queue -> queue
    org.jivesoftware.smackx.workgroup.packet.RoomInvitation$Type workgroup -> workgroup
    org.jivesoftware.smackx.workgroup.packet.RoomInvitation$Type[] $VALUES -> $VALUES
    org.jivesoftware.smackx.workgroup.packet.RoomInvitation$Type[] values() -> values
    org.jivesoftware.smackx.workgroup.packet.RoomInvitation$Type valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.workgroup.packet.RoomTransfer -> org.jivesoftware.smackx.workgroup.packet.RoomTransfer:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    org.jivesoftware.smackx.workgroup.packet.RoomTransfer$Type type -> type
    java.lang.String invitee -> invitee
    java.lang.String inviter -> inviter
    java.lang.String sessionID -> sessionID
    java.lang.String room -> room
    java.lang.String reason -> reason
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getInviter() -> getInviter
    java.lang.String getRoom() -> getRoom
    java.lang.String getReason() -> getReason
    java.lang.String getSessionID() -> getSessionID
    java.lang.String toXML() -> toXML
    org.jivesoftware.smackx.workgroup.packet.RoomTransfer$Type access$102(org.jivesoftware.smackx.workgroup.packet.RoomTransfer,org.jivesoftware.smackx.workgroup.packet.RoomTransfer$Type) -> access$102
    java.lang.String access$202(org.jivesoftware.smackx.workgroup.packet.RoomTransfer,java.lang.String) -> access$202
    java.lang.String access$302(org.jivesoftware.smackx.workgroup.packet.RoomTransfer,java.lang.String) -> access$302
    java.lang.String access$402(org.jivesoftware.smackx.workgroup.packet.RoomTransfer,java.lang.String) -> access$402
    java.lang.String access$502(org.jivesoftware.smackx.workgroup.packet.RoomTransfer,java.lang.String) -> access$502
    java.lang.String access$602(org.jivesoftware.smackx.workgroup.packet.RoomTransfer,java.lang.String) -> access$602
org.jivesoftware.smackx.workgroup.packet.RoomTransfer$1 -> org.jivesoftware.smackx.workgroup.packet.RoomTransfer$1:
org.jivesoftware.smackx.workgroup.packet.RoomTransfer$Provider -> org.jivesoftware.smackx.workgroup.packet.RoomTransfer$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.workgroup.packet.RoomTransfer$Type -> org.jivesoftware.smackx.workgroup.packet.RoomTransfer$Type:
    org.jivesoftware.smackx.workgroup.packet.RoomTransfer$Type user -> user
    org.jivesoftware.smackx.workgroup.packet.RoomTransfer$Type queue -> queue
    org.jivesoftware.smackx.workgroup.packet.RoomTransfer$Type workgroup -> workgroup
    org.jivesoftware.smackx.workgroup.packet.RoomTransfer$Type[] $VALUES -> $VALUES
    org.jivesoftware.smackx.workgroup.packet.RoomTransfer$Type[] values() -> values
    org.jivesoftware.smackx.workgroup.packet.RoomTransfer$Type valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.workgroup.packet.SessionID -> org.jivesoftware.smackx.workgroup.packet.SessionID:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String sessionID -> sessionID
    java.lang.String getSessionID() -> getSessionID
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.workgroup.packet.SessionID$Provider -> org.jivesoftware.smackx.workgroup.packet.SessionID$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.workgroup.packet.Transcript -> org.jivesoftware.smackx.workgroup.packet.Transcript:
    java.lang.String sessionID -> sessionID
    java.util.List packets -> packets
    java.lang.String getSessionID() -> getSessionID
    java.util.List getPackets() -> getPackets
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.packet.TranscriptProvider -> org.jivesoftware.smackx.workgroup.packet.TranscriptProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.workgroup.packet.TranscriptSearch -> org.jivesoftware.smackx.workgroup.packet.TranscriptSearch:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.packet.TranscriptSearch$Provider -> org.jivesoftware.smackx.workgroup.packet.TranscriptSearch$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.workgroup.packet.Transcripts -> org.jivesoftware.smackx.workgroup.packet.Transcripts:
    java.text.SimpleDateFormat UTC_FORMAT -> UTC_FORMAT
    java.lang.String userID -> userID
    java.util.List summaries -> summaries
    java.lang.String getUserID() -> getUserID
    java.util.List getSummaries() -> getSummaries
    java.lang.String getChildElementXML() -> getChildElementXML
    java.text.SimpleDateFormat access$000() -> access$000
org.jivesoftware.smackx.workgroup.packet.Transcripts$AgentDetail -> org.jivesoftware.smackx.workgroup.packet.Transcripts$AgentDetail:
    java.lang.String agentJID -> agentJID
    java.util.Date joinTime -> joinTime
    java.util.Date leftTime -> leftTime
    java.lang.String getAgentJID() -> getAgentJID
    java.util.Date getJoinTime() -> getJoinTime
    java.util.Date getLeftTime() -> getLeftTime
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.workgroup.packet.Transcripts$TranscriptSummary -> org.jivesoftware.smackx.workgroup.packet.Transcripts$TranscriptSummary:
    java.lang.String sessionID -> sessionID
    java.util.Date joinTime -> joinTime
    java.util.Date leftTime -> leftTime
    java.util.List agentDetails -> agentDetails
    java.lang.String getSessionID() -> getSessionID
    java.util.Date getJoinTime() -> getJoinTime
    java.util.Date getLeftTime() -> getLeftTime
    java.util.List getAgentDetails() -> getAgentDetails
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.workgroup.packet.TranscriptsProvider -> org.jivesoftware.smackx.workgroup.packet.TranscriptsProvider:
    java.text.SimpleDateFormat UTC_FORMAT -> UTC_FORMAT
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    org.jivesoftware.smackx.workgroup.packet.Transcripts$TranscriptSummary parseSummary(org.xmlpull.v1.XmlPullParser) -> parseSummary
    java.util.List parseAgents(org.xmlpull.v1.XmlPullParser) -> parseAgents
org.jivesoftware.smackx.workgroup.packet.UserID -> org.jivesoftware.smackx.workgroup.packet.UserID:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String userID -> userID
    java.lang.String getUserID() -> getUserID
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.workgroup.packet.UserID$Provider -> org.jivesoftware.smackx.workgroup.packet.UserID$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.workgroup.packet.WorkgroupInformation -> org.jivesoftware.smackx.workgroup.packet.WorkgroupInformation:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String workgroupJID -> workgroupJID
    java.lang.String getWorkgroupJID() -> getWorkgroupJID
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.workgroup.packet.WorkgroupInformation$Provider -> org.jivesoftware.smackx.workgroup.packet.WorkgroupInformation$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.workgroup.settings.ChatSetting -> org.jivesoftware.smackx.workgroup.settings.ChatSetting:
    java.lang.String key -> key
    java.lang.String value -> value
    int type -> type
    java.lang.String getKey() -> getKey
    void setKey(java.lang.String) -> setKey
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    int getType() -> getType
    void setType(int) -> setType
org.jivesoftware.smackx.workgroup.settings.ChatSettings -> org.jivesoftware.smackx.workgroup.settings.ChatSettings:
    int IMAGE_SETTINGS -> IMAGE_SETTINGS
    int TEXT_SETTINGS -> TEXT_SETTINGS
    int BOT_SETTINGS -> BOT_SETTINGS
    java.util.List settings -> settings
    java.lang.String key -> key
    int type -> type
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    void setKey(java.lang.String) -> setKey
    void setType(int) -> setType
    void addSetting(org.jivesoftware.smackx.workgroup.settings.ChatSetting) -> addSetting
    java.util.Collection getSettings() -> getSettings
    org.jivesoftware.smackx.workgroup.settings.ChatSetting getChatSetting(java.lang.String) -> getChatSetting
    org.jivesoftware.smackx.workgroup.settings.ChatSetting getFirstEntry() -> getFirstEntry
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.settings.ChatSettings$InternalProvider -> org.jivesoftware.smackx.workgroup.settings.ChatSettings$InternalProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    org.jivesoftware.smackx.workgroup.settings.ChatSetting parseChatSetting(org.xmlpull.v1.XmlPullParser) -> parseChatSetting
org.jivesoftware.smackx.workgroup.settings.GenericSettings -> org.jivesoftware.smackx.workgroup.settings.GenericSettings:
    java.util.Map map -> map
    java.lang.String query -> query
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String getQuery() -> getQuery
    void setQuery(java.lang.String) -> setQuery
    java.util.Map getMap() -> getMap
    void setMap(java.util.Map) -> setMap
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.settings.GenericSettings$InternalProvider -> org.jivesoftware.smackx.workgroup.settings.GenericSettings$InternalProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.workgroup.settings.OfflineSettings -> org.jivesoftware.smackx.workgroup.settings.OfflineSettings:
    java.lang.String redirectURL -> redirectURL
    java.lang.String offlineText -> offlineText
    java.lang.String emailAddress -> emailAddress
    java.lang.String subject -> subject
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String getRedirectURL() -> getRedirectURL
    void setRedirectURL(java.lang.String) -> setRedirectURL
    java.lang.String getOfflineText() -> getOfflineText
    void setOfflineText(java.lang.String) -> setOfflineText
    java.lang.String getEmailAddress() -> getEmailAddress
    void setEmailAddress(java.lang.String) -> setEmailAddress
    java.lang.String getSubject() -> getSubject
    void setSubject(java.lang.String) -> setSubject
    boolean redirects() -> redirects
    boolean isConfigured() -> isConfigured
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.settings.OfflineSettings$InternalProvider -> org.jivesoftware.smackx.workgroup.settings.OfflineSettings$InternalProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.workgroup.settings.SearchSettings -> org.jivesoftware.smackx.workgroup.settings.SearchSettings:
    java.lang.String forumsLocation -> forumsLocation
    java.lang.String kbLocation -> kbLocation
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    boolean isSearchEnabled() -> isSearchEnabled
    java.lang.String getForumsLocation() -> getForumsLocation
    void setForumsLocation(java.lang.String) -> setForumsLocation
    java.lang.String getKbLocation() -> getKbLocation
    void setKbLocation(java.lang.String) -> setKbLocation
    boolean hasKB() -> hasKB
    boolean hasForums() -> hasForums
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.settings.SearchSettings$InternalProvider -> org.jivesoftware.smackx.workgroup.settings.SearchSettings$InternalProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.workgroup.settings.SoundSettings -> org.jivesoftware.smackx.workgroup.settings.SoundSettings:
    java.lang.String outgoingSound -> outgoingSound
    java.lang.String incomingSound -> incomingSound
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    void setOutgoingSound(java.lang.String) -> setOutgoingSound
    void setIncomingSound(java.lang.String) -> setIncomingSound
    byte[] getIncomingSoundBytes() -> getIncomingSoundBytes
    byte[] getOutgoingSoundBytes() -> getOutgoingSoundBytes
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.settings.SoundSettings$InternalProvider -> org.jivesoftware.smackx.workgroup.settings.SoundSettings$InternalProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.workgroup.settings.WorkgroupProperties -> org.jivesoftware.smackx.workgroup.settings.WorkgroupProperties:
    boolean authRequired -> authRequired
    java.lang.String email -> email
    java.lang.String fullName -> fullName
    java.lang.String jid -> jid
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    boolean isAuthRequired() -> isAuthRequired
    void setAuthRequired(boolean) -> setAuthRequired
    java.lang.String getEmail() -> getEmail
    void setEmail(java.lang.String) -> setEmail
    java.lang.String getFullName() -> getFullName
    void setFullName(java.lang.String) -> setFullName
    java.lang.String getJid() -> getJid
    void setJid(java.lang.String) -> setJid
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.settings.WorkgroupProperties$InternalProvider -> org.jivesoftware.smackx.workgroup.settings.WorkgroupProperties$InternalProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.workgroup.user.QueueListener -> org.jivesoftware.smackx.workgroup.user.QueueListener:
    void joinedQueue() -> joinedQueue
    void departedQueue() -> departedQueue
    void queuePositionUpdated(int) -> queuePositionUpdated
    void queueWaitTimeUpdated(int) -> queueWaitTimeUpdated
org.jivesoftware.smackx.workgroup.user.Workgroup -> org.jivesoftware.smackx.workgroup.user.Workgroup:
    java.lang.String workgroupJID -> workgroupJID
    org.jivesoftware.smack.Connection connection -> connection
    boolean inQueue -> inQueue
    java.util.List invitationListeners -> invitationListeners
    java.util.List queueListeners -> queueListeners
    java.util.List siteInviteListeners -> siteInviteListeners
    int queuePosition -> queuePosition
    int queueRemainingTime -> queueRemainingTime
    java.lang.String getWorkgroupJID() -> getWorkgroupJID
    boolean isInQueue() -> isInQueue
    boolean isAvailable() -> isAvailable
    int getQueuePosition() -> getQueuePosition
    int getQueueRemainingTime() -> getQueueRemainingTime
    void joinQueue() -> joinQueue
    void joinQueue(org.jivesoftware.smackx.Form) -> joinQueue
    void joinQueue(org.jivesoftware.smackx.Form,java.lang.String) -> joinQueue
    void joinQueue(java.util.Map,java.lang.String) -> joinQueue
    void departQueue() -> departQueue
    void addQueueListener(org.jivesoftware.smackx.workgroup.user.QueueListener) -> addQueueListener
    void removeQueueListener(org.jivesoftware.smackx.workgroup.user.QueueListener) -> removeQueueListener
    void addInvitationListener(org.jivesoftware.smackx.workgroup.WorkgroupInvitationListener) -> addInvitationListener
    void removeQueueListener(org.jivesoftware.smackx.workgroup.WorkgroupInvitationListener) -> removeQueueListener
    void fireInvitationEvent(org.jivesoftware.smackx.workgroup.WorkgroupInvitation) -> fireInvitationEvent
    void fireQueueJoinedEvent() -> fireQueueJoinedEvent
    void fireQueueDepartedEvent() -> fireQueueDepartedEvent
    void fireQueuePositionEvent(int) -> fireQueuePositionEvent
    void fireQueueTimeEvent(int) -> fireQueueTimeEvent
    void handlePacket(org.jivesoftware.smack.packet.Packet) -> handlePacket
    org.jivesoftware.smackx.workgroup.settings.ChatSetting getChatSetting(java.lang.String) -> getChatSetting
    org.jivesoftware.smackx.workgroup.settings.ChatSettings getChatSettings(int) -> getChatSettings
    org.jivesoftware.smackx.workgroup.settings.ChatSettings getChatSettings() -> getChatSettings
    org.jivesoftware.smackx.workgroup.settings.ChatSettings getChatSettings(java.lang.String,int) -> getChatSettings
    boolean isEmailAvailable() -> isEmailAvailable
    org.jivesoftware.smackx.workgroup.settings.OfflineSettings getOfflineSettings() -> getOfflineSettings
    org.jivesoftware.smackx.workgroup.settings.SoundSettings getSoundSettings() -> getSoundSettings
    org.jivesoftware.smackx.workgroup.settings.WorkgroupProperties getWorkgroupProperties() -> getWorkgroupProperties
    org.jivesoftware.smackx.workgroup.settings.WorkgroupProperties getWorkgroupProperties(java.lang.String) -> getWorkgroupProperties
    org.jivesoftware.smackx.Form getWorkgroupForm() -> getWorkgroupForm
    boolean access$002(org.jivesoftware.smackx.workgroup.user.Workgroup,boolean) -> access$002
    int access$102(org.jivesoftware.smackx.workgroup.user.Workgroup,int) -> access$102
    int access$202(org.jivesoftware.smackx.workgroup.user.Workgroup,int) -> access$202
    void access$300(org.jivesoftware.smackx.workgroup.user.Workgroup,org.jivesoftware.smack.packet.Packet) -> access$300
    org.jivesoftware.smack.Connection access$400(org.jivesoftware.smackx.workgroup.user.Workgroup) -> access$400
org.jivesoftware.smackx.workgroup.user.Workgroup$1 -> org.jivesoftware.smackx.workgroup.user.Workgroup$1:
    org.jivesoftware.smackx.workgroup.user.Workgroup this$0 -> this$0
    void joinedQueue() -> joinedQueue
    void departedQueue() -> departedQueue
    void queuePositionUpdated(int) -> queuePositionUpdated
    void queueWaitTimeUpdated(int) -> queueWaitTimeUpdated
org.jivesoftware.smackx.workgroup.user.Workgroup$2 -> org.jivesoftware.smackx.workgroup.user.Workgroup$2:
    org.jivesoftware.smackx.workgroup.user.Workgroup this$0 -> this$0
    void invitationReceived(org.jivesoftware.smack.Connection,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.jivesoftware.smack.packet.Message) -> invitationReceived
org.jivesoftware.smackx.workgroup.user.Workgroup$3 -> org.jivesoftware.smackx.workgroup.user.Workgroup$3:
    org.jivesoftware.smackx.workgroup.user.Workgroup this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.workgroup.user.Workgroup$JoinQueuePacket -> org.jivesoftware.smackx.workgroup.user.Workgroup$JoinQueuePacket:
    java.lang.String userID -> userID
    org.jivesoftware.smackx.packet.DataForm form -> form
    org.jivesoftware.smackx.workgroup.user.Workgroup this$0 -> this$0
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.workgroup.util.ListenerEventDispatcher -> org.jivesoftware.smackx.workgroup.util.ListenerEventDispatcher:
    java.util.ArrayList triplets -> triplets
    boolean hasFinishedDispatching -> hasFinishedDispatching
    boolean isRunning -> isRunning
    void addListenerTriplet(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> addListenerTriplet
    boolean hasFinished() -> hasFinished
    void run() -> run
org.jivesoftware.smackx.workgroup.util.ListenerEventDispatcher$TripletContainer -> org.jivesoftware.smackx.workgroup.util.ListenerEventDispatcher$TripletContainer:
    java.lang.Object listenerInstance -> listenerInstance
    java.lang.reflect.Method listenerMethod -> listenerMethod
    java.lang.Object[] methodArguments -> methodArguments
    org.jivesoftware.smackx.workgroup.util.ListenerEventDispatcher this$0 -> this$0
    java.lang.Object getListenerInstance() -> getListenerInstance
    java.lang.reflect.Method getListenerMethod() -> getListenerMethod
    java.lang.Object[] getMethodArguments() -> getMethodArguments
org.jivesoftware.smackx.workgroup.util.MetaDataUtils -> org.jivesoftware.smackx.workgroup.util.MetaDataUtils:
    java.util.Map parseMetaData(org.xmlpull.v1.XmlPullParser) -> parseMetaData
    java.lang.String serializeMetaData(java.util.Map) -> serializeMetaData
org.jivesoftware.smackx.workgroup.util.ModelUtil -> org.jivesoftware.smackx.workgroup.util.ModelUtil:
    boolean areEqual(java.lang.Object,java.lang.Object) -> areEqual
    boolean areBooleansEqual(java.lang.Boolean,java.lang.Boolean) -> areBooleansEqual
    boolean areDifferent(java.lang.Object,java.lang.Object) -> areDifferent
    boolean areBooleansDifferent(java.lang.Boolean,java.lang.Boolean) -> areBooleansDifferent
    boolean hasNonNullElement(java.lang.Object[]) -> hasNonNullElement
    java.lang.String concat(java.lang.String[]) -> concat
    java.lang.String concat(java.lang.String[],java.lang.String) -> concat
    boolean hasLength(java.lang.String) -> hasLength
    java.lang.String nullifyIfEmpty(java.lang.String) -> nullifyIfEmpty
    java.lang.String nullifyingToString(java.lang.Object) -> nullifyingToString
    boolean hasStringChanged(java.lang.String,java.lang.String) -> hasStringChanged
    java.lang.String getTimeFromLong(long) -> getTimeFromLong
    java.util.List iteratorAsList(java.util.Iterator) -> iteratorAsList
    java.util.Iterator reverseListIterator(java.util.ListIterator) -> reverseListIterator
org.jivesoftware.smackx.workgroup.util.ReverseListIterator -> org.jivesoftware.smackx.workgroup.util.ReverseListIterator:
    java.util.ListIterator _i -> _i
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.xbill.DNS.A6Record -> org.xbill.DNS.A6Record:
    long serialVersionUID -> serialVersionUID
    int prefixBits -> prefixBits
    java.net.InetAddress suffix -> suffix
    org.xbill.DNS.Name prefix -> prefix
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    int getPrefixBits() -> getPrefixBits
    java.net.InetAddress getSuffix() -> getSuffix
    org.xbill.DNS.Name getPrefix() -> getPrefix
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.AAAARecord -> org.xbill.DNS.AAAARecord:
    long serialVersionUID -> serialVersionUID
    java.net.InetAddress address -> address
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    java.net.InetAddress getAddress() -> getAddress
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.AFSDBRecord -> org.xbill.DNS.AFSDBRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    int getSubtype() -> getSubtype
    org.xbill.DNS.Name getHost() -> getHost
org.xbill.DNS.APLRecord -> org.xbill.DNS.APLRecord:
    long serialVersionUID -> serialVersionUID
    java.util.List elements -> elements
    org.xbill.DNS.Record getObject() -> getObject
    boolean validatePrefixLength(int,int) -> validatePrefixLength
    byte[] parseAddress(byte[],int) -> parseAddress
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    java.util.List getElements() -> getElements
    int addressLength(byte[]) -> addressLength
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
    boolean access$000(int,int) -> access$000
org.xbill.DNS.APLRecord$1 -> org.xbill.DNS.APLRecord$1:
org.xbill.DNS.APLRecord$Element -> org.xbill.DNS.APLRecord$Element:
    int family -> family
    boolean negative -> negative
    int prefixLength -> prefixLength
    java.lang.Object address -> address
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.xbill.DNS.ARecord -> org.xbill.DNS.ARecord:
    long serialVersionUID -> serialVersionUID
    int addr -> addr
    org.xbill.DNS.Record getObject() -> getObject
    int fromArray(byte[]) -> fromArray
    byte[] toArray(int) -> toArray
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    java.net.InetAddress getAddress() -> getAddress
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.Address -> org.xbill.DNS.Address:
    int IPv4 -> IPv4
    int IPv6 -> IPv6
    byte[] parseV4(java.lang.String) -> parseV4
    byte[] parseV6(java.lang.String) -> parseV6
    int[] toArray(java.lang.String,int) -> toArray
    int[] toArray(java.lang.String) -> toArray
    byte[] toByteArray(java.lang.String,int) -> toByteArray
    boolean isDottedQuad(java.lang.String) -> isDottedQuad
    java.lang.String toDottedQuad(byte[]) -> toDottedQuad
    java.lang.String toDottedQuad(int[]) -> toDottedQuad
    org.xbill.DNS.Record[] lookupHostName(java.lang.String) -> lookupHostName
    java.net.InetAddress addrFromRecord(java.lang.String,org.xbill.DNS.Record) -> addrFromRecord
    java.net.InetAddress getByName(java.lang.String) -> getByName
    java.net.InetAddress[] getAllByName(java.lang.String) -> getAllByName
    java.net.InetAddress getByAddress(java.lang.String) -> getByAddress
    java.net.InetAddress getByAddress(java.lang.String,int) -> getByAddress
    java.lang.String getHostName(java.net.InetAddress) -> getHostName
    int familyOf(java.net.InetAddress) -> familyOf
    int addressLength(int) -> addressLength
org.xbill.DNS.CERTRecord -> org.xbill.DNS.CERTRecord:
    int PKIX -> PKIX
    int SPKI -> SPKI
    int PGP -> PGP
    int URI -> URI
    int OID -> OID
    long serialVersionUID -> serialVersionUID
    int certType -> certType
    int keyTag -> keyTag
    int alg -> alg
    byte[] cert -> cert
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    int getCertType() -> getCertType
    int getKeyTag() -> getKeyTag
    int getAlgorithm() -> getAlgorithm
    byte[] getCert() -> getCert
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.CERTRecord$CertificateType -> org.xbill.DNS.CERTRecord$CertificateType:
    int PKIX -> PKIX
    int SPKI -> SPKI
    int PGP -> PGP
    int IPKIX -> IPKIX
    int ISPKI -> ISPKI
    int IPGP -> IPGP
    int ACPKIX -> ACPKIX
    int IACPKIX -> IACPKIX
    int URI -> URI
    int OID -> OID
    org.xbill.DNS.Mnemonic types -> types
    java.lang.String string(int) -> string
    int value(java.lang.String) -> value
org.xbill.DNS.CNAMERecord -> org.xbill.DNS.CNAMERecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    org.xbill.DNS.Name getTarget() -> getTarget
    org.xbill.DNS.Name getAlias() -> getAlias
org.xbill.DNS.Cache -> org.xbill.DNS.Cache:
    org.xbill.DNS.Cache$CacheMap data -> data
    int maxncache -> maxncache
    int maxcache -> maxcache
    int dclass -> dclass
    int defaultMaxEntries -> defaultMaxEntries
    int limitExpire(long,long) -> limitExpire
    java.lang.Object exactName(org.xbill.DNS.Name) -> exactName
    void removeName(org.xbill.DNS.Name) -> removeName
    org.xbill.DNS.Cache$Element[] allElements(java.lang.Object) -> allElements
    org.xbill.DNS.Cache$Element oneElement(org.xbill.DNS.Name,java.lang.Object,int,int) -> oneElement
    org.xbill.DNS.Cache$Element findElement(org.xbill.DNS.Name,int,int) -> findElement
    void addElement(org.xbill.DNS.Name,org.xbill.DNS.Cache$Element) -> addElement
    void removeElement(org.xbill.DNS.Name,int) -> removeElement
    void clearCache() -> clearCache
    void addRecord(org.xbill.DNS.Record,int,java.lang.Object) -> addRecord
    void addRRset(org.xbill.DNS.RRset,int) -> addRRset
    void addNegative(org.xbill.DNS.Name,int,org.xbill.DNS.SOARecord,int) -> addNegative
    org.xbill.DNS.SetResponse lookup(org.xbill.DNS.Name,int,int) -> lookup
    org.xbill.DNS.SetResponse lookupRecords(org.xbill.DNS.Name,int,int) -> lookupRecords
    org.xbill.DNS.RRset[] findRecords(org.xbill.DNS.Name,int,int) -> findRecords
    org.xbill.DNS.RRset[] findRecords(org.xbill.DNS.Name,int) -> findRecords
    org.xbill.DNS.RRset[] findAnyRecords(org.xbill.DNS.Name,int) -> findAnyRecords
    int getCred(int,boolean) -> getCred
    void markAdditional(org.xbill.DNS.RRset,java.util.Set) -> markAdditional
    org.xbill.DNS.SetResponse addMessage(org.xbill.DNS.Message) -> addMessage
    void flushSet(org.xbill.DNS.Name,int) -> flushSet
    void flushName(org.xbill.DNS.Name) -> flushName
    void setMaxNCache(int) -> setMaxNCache
    int getMaxNCache() -> getMaxNCache
    void setMaxCache(int) -> setMaxCache
    int getMaxCache() -> getMaxCache
    int getSize() -> getSize
    int getMaxEntries() -> getMaxEntries
    void setMaxEntries(int) -> setMaxEntries
    int getDClass() -> getDClass
    java.lang.String toString() -> toString
    int access$000(long,long) -> access$000
org.xbill.DNS.Cache$CacheMap -> org.xbill.DNS.Cache$CacheMap:
    int maxsize -> maxsize
    int getMaxSize() -> getMaxSize
    void setMaxSize(int) -> setMaxSize
    boolean removeEldestEntry(java.util.Map$Entry) -> removeEldestEntry
org.xbill.DNS.Cache$CacheRRset -> org.xbill.DNS.Cache$CacheRRset:
    long serialVersionUID -> serialVersionUID
    int credibility -> credibility
    int expire -> expire
    boolean expired() -> expired
    int compareCredibility(int) -> compareCredibility
    java.lang.String toString() -> toString
org.xbill.DNS.Cache$Element -> org.xbill.DNS.Cache$Element:
    boolean expired() -> expired
    int compareCredibility(int) -> compareCredibility
    int getType() -> getType
org.xbill.DNS.Cache$NegativeElement -> org.xbill.DNS.Cache$NegativeElement:
    int type -> type
    org.xbill.DNS.Name name -> name
    int credibility -> credibility
    int expire -> expire
    int getType() -> getType
    boolean expired() -> expired
    int compareCredibility(int) -> compareCredibility
    java.lang.String toString() -> toString
org.xbill.DNS.Client -> org.xbill.DNS.Client:
    long endTime -> endTime
    java.nio.channels.SelectionKey key -> key
    void blockUntil(java.nio.channels.SelectionKey,long) -> blockUntil
    void verboseLog(java.lang.String,byte[]) -> verboseLog
    void cleanup() -> cleanup
org.xbill.DNS.Compression -> org.xbill.DNS.Compression:
    int TABLE_SIZE -> TABLE_SIZE
    int MAX_POINTER -> MAX_POINTER
    org.xbill.DNS.Compression$Entry[] table -> table
    boolean verbose -> verbose
    void add(int,org.xbill.DNS.Name) -> add
    int get(org.xbill.DNS.Name) -> get
org.xbill.DNS.Compression$1 -> org.xbill.DNS.Compression$1:
org.xbill.DNS.Compression$Entry -> org.xbill.DNS.Compression$Entry:
    org.xbill.DNS.Name name -> name
    int pos -> pos
    org.xbill.DNS.Compression$Entry next -> next
org.xbill.DNS.Credibility -> org.xbill.DNS.Credibility:
    int HINT -> HINT
    int ADDITIONAL -> ADDITIONAL
    int GLUE -> GLUE
    int NONAUTH_AUTHORITY -> NONAUTH_AUTHORITY
    int NONAUTH_ANSWER -> NONAUTH_ANSWER
    int AUTH_AUTHORITY -> AUTH_AUTHORITY
    int AUTH_ANSWER -> AUTH_ANSWER
    int ZONE -> ZONE
    int NORMAL -> NORMAL
    int ANY -> ANY
org.xbill.DNS.DClass -> org.xbill.DNS.DClass:
    int IN -> IN
    int CH -> CH
    int CHAOS -> CHAOS
    int HS -> HS
    int HESIOD -> HESIOD
    int NONE -> NONE
    int ANY -> ANY
    org.xbill.DNS.Mnemonic classes -> classes
    void check(int) -> check
    java.lang.String string(int) -> string
    int value(java.lang.String) -> value
org.xbill.DNS.DClass$DClassMnemonic -> org.xbill.DNS.DClass$DClassMnemonic:
    void check(int) -> check
org.xbill.DNS.DHCIDRecord -> org.xbill.DNS.DHCIDRecord:
    long serialVersionUID -> serialVersionUID
    byte[] data -> data
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
    java.lang.String rrToString() -> rrToString
    byte[] getData() -> getData
org.xbill.DNS.DLVRecord -> org.xbill.DNS.DLVRecord:
    int SHA1_DIGEST_ID -> SHA1_DIGEST_ID
    int SHA256_DIGEST_ID -> SHA256_DIGEST_ID
    long serialVersionUID -> serialVersionUID
    int footprint -> footprint
    int alg -> alg
    int digestid -> digestid
    byte[] digest -> digest
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    int getAlgorithm() -> getAlgorithm
    int getDigestID() -> getDigestID
    byte[] getDigest() -> getDigest
    int getFootprint() -> getFootprint
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.DNAMERecord -> org.xbill.DNS.DNAMERecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    org.xbill.DNS.Name getTarget() -> getTarget
    org.xbill.DNS.Name getAlias() -> getAlias
org.xbill.DNS.DNSInput -> org.xbill.DNS.DNSInput:
    byte[] array -> array
    int pos -> pos
    int end -> end
    int saved_pos -> saved_pos
    int saved_end -> saved_end
    int current() -> current
    int remaining() -> remaining
    void require(int) -> require
    void setActive(int) -> setActive
    void clearActive() -> clearActive
    void jump(int) -> jump
    void save() -> save
    void restore() -> restore
    int readU8() -> readU8
    int readU16() -> readU16
    long readU32() -> readU32
    void readByteArray(byte[],int,int) -> readByteArray
    byte[] readByteArray(int) -> readByteArray
    byte[] readByteArray() -> readByteArray
    byte[] readCountedString() -> readCountedString
org.xbill.DNS.DNSKEYRecord -> org.xbill.DNS.DNSKEYRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.security.PublicKey getPublicKey() -> getPublicKey
    int getFootprint() -> getFootprint
    byte[] getKey() -> getKey
    int getAlgorithm() -> getAlgorithm
    int getProtocol() -> getProtocol
    int getFlags() -> getFlags
org.xbill.DNS.DNSKEYRecord$Flags -> org.xbill.DNS.DNSKEYRecord$Flags:
    int ZONE_KEY -> ZONE_KEY
    int SEP_KEY -> SEP_KEY
    int REVOKE -> REVOKE
org.xbill.DNS.DNSKEYRecord$Protocol -> org.xbill.DNS.DNSKEYRecord$Protocol:
    int DNSSEC -> DNSSEC
org.xbill.DNS.DNSOutput -> org.xbill.DNS.DNSOutput:
    byte[] array -> array
    int pos -> pos
    int saved_pos -> saved_pos
    int current() -> current
    void check(long,int) -> check
    void need(int) -> need
    void jump(int) -> jump
    void save() -> save
    void restore() -> restore
    void writeU8(int) -> writeU8
    void writeU16(int) -> writeU16
    void writeU32(long) -> writeU32
    void writeByteArray(byte[],int,int) -> writeByteArray
    void writeByteArray(byte[]) -> writeByteArray
    void writeCountedString(byte[]) -> writeCountedString
    byte[] toByteArray() -> toByteArray
org.xbill.DNS.DNSSEC -> org.xbill.DNS.DNSSEC:
    int ASN1_SEQ -> ASN1_SEQ
    int ASN1_INT -> ASN1_INT
    int DSA_LEN -> DSA_LEN
    void digestSIG(org.xbill.DNS.DNSOutput,org.xbill.DNS.SIGBase) -> digestSIG
    byte[] digestRRset(org.xbill.DNS.RRSIGRecord,org.xbill.DNS.RRset) -> digestRRset
    byte[] digestMessage(org.xbill.DNS.SIGRecord,org.xbill.DNS.Message,byte[]) -> digestMessage
    int BigIntegerLength(java.math.BigInteger) -> BigIntegerLength
    java.math.BigInteger readBigInteger(org.xbill.DNS.DNSInput,int) -> readBigInteger
    java.math.BigInteger readBigInteger(org.xbill.DNS.DNSInput) -> readBigInteger
    void writeBigInteger(org.xbill.DNS.DNSOutput,java.math.BigInteger) -> writeBigInteger
    java.security.PublicKey toRSAPublicKey(org.xbill.DNS.KEYBase) -> toRSAPublicKey
    java.security.PublicKey toDSAPublicKey(org.xbill.DNS.KEYBase) -> toDSAPublicKey
    java.security.PublicKey toPublicKey(org.xbill.DNS.KEYBase) -> toPublicKey
    byte[] fromRSAPublicKey(java.security.interfaces.RSAPublicKey) -> fromRSAPublicKey
    byte[] fromDSAPublicKey(java.security.interfaces.DSAPublicKey) -> fromDSAPublicKey
    byte[] fromPublicKey(java.security.PublicKey,int) -> fromPublicKey
    java.lang.String algString(int) -> algString
    byte[] DSASignaturefromDNS(byte[]) -> DSASignaturefromDNS
    byte[] DSASignaturetoDNS(byte[],int) -> DSASignaturetoDNS
    void verify(java.security.PublicKey,int,byte[],byte[]) -> verify
    boolean matches(org.xbill.DNS.SIGBase,org.xbill.DNS.KEYBase) -> matches
    void verify(org.xbill.DNS.RRset,org.xbill.DNS.RRSIGRecord,org.xbill.DNS.DNSKEYRecord) -> verify
    byte[] sign(java.security.PrivateKey,java.security.PublicKey,int,byte[]) -> sign
    void checkAlgorithm(java.security.PrivateKey,int) -> checkAlgorithm
    org.xbill.DNS.RRSIGRecord sign(org.xbill.DNS.RRset,org.xbill.DNS.DNSKEYRecord,java.security.PrivateKey,java.util.Date,java.util.Date) -> sign
    org.xbill.DNS.SIGRecord signMessage(org.xbill.DNS.Message,org.xbill.DNS.SIGRecord,org.xbill.DNS.KEYRecord,java.security.PrivateKey,java.util.Date,java.util.Date) -> signMessage
    void verifyMessage(org.xbill.DNS.Message,byte[],org.xbill.DNS.SIGRecord,org.xbill.DNS.SIGRecord,org.xbill.DNS.KEYRecord) -> verifyMessage
    byte[] generateDS(org.xbill.DNS.DNSKEYRecord,int) -> generateDS
org.xbill.DNS.DNSSEC$Algorithm -> org.xbill.DNS.DNSSEC$Algorithm:
    int RSAMD5 -> RSAMD5
    int DH -> DH
    int DSA -> DSA
    int ECC -> ECC
    int RSASHA1 -> RSASHA1
    int DSA_NSEC3_SHA1 -> DSA_NSEC3_SHA1
    int RSA_NSEC3_SHA1 -> RSA_NSEC3_SHA1
    int RSASHA256 -> RSASHA256
    int RSASHA512 -> RSASHA512
    int INDIRECT -> INDIRECT
    int PRIVATEDNS -> PRIVATEDNS
    int PRIVATEOID -> PRIVATEOID
    org.xbill.DNS.Mnemonic algs -> algs
    java.lang.String string(int) -> string
    int value(java.lang.String) -> value
org.xbill.DNS.DNSSEC$DNSSECException -> org.xbill.DNS.DNSSEC$DNSSECException:
org.xbill.DNS.DNSSEC$IncompatibleKeyException -> org.xbill.DNS.DNSSEC$IncompatibleKeyException:
org.xbill.DNS.DNSSEC$KeyMismatchException -> org.xbill.DNS.DNSSEC$KeyMismatchException:
    org.xbill.DNS.KEYBase key -> key
    org.xbill.DNS.SIGBase sig -> sig
org.xbill.DNS.DNSSEC$MalformedKeyException -> org.xbill.DNS.DNSSEC$MalformedKeyException:
org.xbill.DNS.DNSSEC$SignatureExpiredException -> org.xbill.DNS.DNSSEC$SignatureExpiredException:
    java.util.Date when -> when
    java.util.Date now -> now
    java.util.Date getExpiration() -> getExpiration
    java.util.Date getVerifyTime() -> getVerifyTime
org.xbill.DNS.DNSSEC$SignatureNotYetValidException -> org.xbill.DNS.DNSSEC$SignatureNotYetValidException:
    java.util.Date when -> when
    java.util.Date now -> now
    java.util.Date getExpiration() -> getExpiration
    java.util.Date getVerifyTime() -> getVerifyTime
org.xbill.DNS.DNSSEC$SignatureVerificationException -> org.xbill.DNS.DNSSEC$SignatureVerificationException:
org.xbill.DNS.DNSSEC$UnsupportedAlgorithmException -> org.xbill.DNS.DNSSEC$UnsupportedAlgorithmException:
org.xbill.DNS.DSRecord -> org.xbill.DNS.DSRecord:
    int SHA1_DIGEST_ID -> SHA1_DIGEST_ID
    int SHA256_DIGEST_ID -> SHA256_DIGEST_ID
    long serialVersionUID -> serialVersionUID
    int footprint -> footprint
    int alg -> alg
    int digestid -> digestid
    byte[] digest -> digest
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    int getAlgorithm() -> getAlgorithm
    int getDigestID() -> getDigestID
    byte[] getDigest() -> getDigest
    int getFootprint() -> getFootprint
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.DSRecord$Digest -> org.xbill.DNS.DSRecord$Digest:
    int SHA1 -> SHA1
    int SHA256 -> SHA256
org.xbill.DNS.EmptyRecord -> org.xbill.DNS.EmptyRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.ExtendedFlags -> org.xbill.DNS.ExtendedFlags:
    org.xbill.DNS.Mnemonic extflags -> extflags
    int DO -> DO
    java.lang.String string(int) -> string
    int value(java.lang.String) -> value
org.xbill.DNS.ExtendedResolver -> org.xbill.DNS.ExtendedResolver:
    int quantum -> quantum
    java.util.List resolvers -> resolvers
    boolean loadBalance -> loadBalance
    int lbStart -> lbStart
    int retries -> retries
    void init() -> init
    void setPort(int) -> setPort
    void setTCP(boolean) -> setTCP
    void setIgnoreTruncation(boolean) -> setIgnoreTruncation
    void setEDNS(int) -> setEDNS
    void setEDNS(int,int,int,java.util.List) -> setEDNS
    void setTSIGKey(org.xbill.DNS.TSIG) -> setTSIGKey
    void setTimeout(int,int) -> setTimeout
    void setTimeout(int) -> setTimeout
    org.xbill.DNS.Message send(org.xbill.DNS.Message) -> send
    java.lang.Object sendAsync(org.xbill.DNS.Message,org.xbill.DNS.ResolverListener) -> sendAsync
    org.xbill.DNS.Resolver getResolver(int) -> getResolver
    org.xbill.DNS.Resolver[] getResolvers() -> getResolvers
    void addResolver(org.xbill.DNS.Resolver) -> addResolver
    void deleteResolver(org.xbill.DNS.Resolver) -> deleteResolver
    void setLoadBalance(boolean) -> setLoadBalance
    void setRetries(int) -> setRetries
    java.util.List access$000(org.xbill.DNS.ExtendedResolver) -> access$000
    boolean access$100(org.xbill.DNS.ExtendedResolver) -> access$100
    int access$208(org.xbill.DNS.ExtendedResolver) -> access$208
    int access$200(org.xbill.DNS.ExtendedResolver) -> access$200
    int access$244(org.xbill.DNS.ExtendedResolver,int) -> access$244
    int access$300(org.xbill.DNS.ExtendedResolver) -> access$300
org.xbill.DNS.ExtendedResolver$Resolution -> org.xbill.DNS.ExtendedResolver$Resolution:
    org.xbill.DNS.Resolver[] resolvers -> resolvers
    int[] sent -> sent
    java.lang.Object[] inprogress -> inprogress
    int retries -> retries
    int outstanding -> outstanding
    boolean done -> done
    org.xbill.DNS.Message query -> query
    org.xbill.DNS.Message response -> response
    java.lang.Throwable thrown -> thrown
    org.xbill.DNS.ResolverListener listener -> listener
    void send(int) -> send
    org.xbill.DNS.Message start() -> start
    void startAsync(org.xbill.DNS.ResolverListener) -> startAsync
    void receiveMessage(java.lang.Object,org.xbill.DNS.Message) -> receiveMessage
    void handleException(java.lang.Object,java.lang.Exception) -> handleException
org.xbill.DNS.Flags -> org.xbill.DNS.Flags:
    org.xbill.DNS.Mnemonic flags -> flags
    byte QR -> QR
    byte AA -> AA
    byte TC -> TC
    byte RD -> RD
    byte RA -> RA
    byte AD -> AD
    byte CD -> CD
    int DO -> DO
    java.lang.String string(int) -> string
    int value(java.lang.String) -> value
    boolean isFlag(int) -> isFlag
org.xbill.DNS.FormattedTime -> org.xbill.DNS.FormattedTime:
    java.text.NumberFormat w2 -> w2
    java.text.NumberFormat w4 -> w4
    java.lang.String format(java.util.Date) -> format
    java.util.Date parse(java.lang.String) -> parse
org.xbill.DNS.GPOSRecord -> org.xbill.DNS.GPOSRecord:
    long serialVersionUID -> serialVersionUID
    byte[] latitude -> latitude
    byte[] longitude -> longitude
    byte[] altitude -> altitude
    org.xbill.DNS.Record getObject() -> getObject
    void validate(double,double) -> validate
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    java.lang.String getLongitudeString() -> getLongitudeString
    double getLongitude() -> getLongitude
    java.lang.String getLatitudeString() -> getLatitudeString
    double getLatitude() -> getLatitude
    java.lang.String getAltitudeString() -> getAltitudeString
    double getAltitude() -> getAltitude
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.Generator -> org.xbill.DNS.Generator:
    long start -> start
    long end -> end
    long step -> step
    java.lang.String namePattern -> namePattern
    int type -> type
    int dclass -> dclass
    long ttl -> ttl
    java.lang.String rdataPattern -> rdataPattern
    org.xbill.DNS.Name origin -> origin
    long current -> current
    boolean supportedType(int) -> supportedType
    java.lang.String substitute(java.lang.String,long) -> substitute
    org.xbill.DNS.Record nextRecord() -> nextRecord
    org.xbill.DNS.Record[] expand() -> expand
    java.lang.String toString() -> toString
org.xbill.DNS.HINFORecord -> org.xbill.DNS.HINFORecord:
    long serialVersionUID -> serialVersionUID
    byte[] cpu -> cpu
    byte[] os -> os
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String getCPU() -> getCPU
    java.lang.String getOS() -> getOS
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
    java.lang.String rrToString() -> rrToString
org.xbill.DNS.Header -> org.xbill.DNS.Header:
    int id -> id
    int flags -> flags
    int[] counts -> counts
    java.util.Random random -> random
    int LENGTH -> LENGTH
    void init() -> init
    void toWire(org.xbill.DNS.DNSOutput) -> toWire
    byte[] toWire() -> toWire
    boolean validFlag(int) -> validFlag
    void checkFlag(int) -> checkFlag
    void setFlag(int) -> setFlag
    void unsetFlag(int) -> unsetFlag
    boolean getFlag(int) -> getFlag
    boolean[] getFlags() -> getFlags
    int getID() -> getID
    void setID(int) -> setID
    void setRcode(int) -> setRcode
    int getRcode() -> getRcode
    void setOpcode(int) -> setOpcode
    int getOpcode() -> getOpcode
    void setCount(int,int) -> setCount
    void incCount(int) -> incCount
    void decCount(int) -> decCount
    int getCount(int) -> getCount
    java.lang.String printFlags() -> printFlags
    java.lang.String toStringWithRcode(int) -> toStringWithRcode
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.xbill.DNS.IPSECKEYRecord -> org.xbill.DNS.IPSECKEYRecord:
    long serialVersionUID -> serialVersionUID
    int precedence -> precedence
    int gatewayType -> gatewayType
    int algorithmType -> algorithmType
    java.lang.Object gateway -> gateway
    byte[] key -> key
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    int getPrecedence() -> getPrecedence
    int getGatewayType() -> getGatewayType
    int getAlgorithmType() -> getAlgorithmType
    java.lang.Object getGateway() -> getGateway
    byte[] getKey() -> getKey
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.IPSECKEYRecord$Algorithm -> org.xbill.DNS.IPSECKEYRecord$Algorithm:
    int DSA -> DSA
    int RSA -> RSA
org.xbill.DNS.IPSECKEYRecord$Gateway -> org.xbill.DNS.IPSECKEYRecord$Gateway:
    int None -> None
    int IPv4 -> IPv4
    int IPv6 -> IPv6
    int Name -> Name
org.xbill.DNS.ISDNRecord -> org.xbill.DNS.ISDNRecord:
    long serialVersionUID -> serialVersionUID
    byte[] address -> address
    byte[] subAddress -> subAddress
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String getAddress() -> getAddress
    java.lang.String getSubAddress() -> getSubAddress
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
    java.lang.String rrToString() -> rrToString
org.xbill.DNS.InvalidDClassException -> org.xbill.DNS.InvalidDClassException:
org.xbill.DNS.InvalidTTLException -> org.xbill.DNS.InvalidTTLException:
org.xbill.DNS.InvalidTypeException -> org.xbill.DNS.InvalidTypeException:
org.xbill.DNS.KEYBase -> org.xbill.DNS.KEYBase:
    long serialVersionUID -> serialVersionUID
    int flags -> flags
    int proto -> proto
    int alg -> alg
    byte[] key -> key
    int footprint -> footprint
    java.security.PublicKey publicKey -> publicKey
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    java.lang.String rrToString() -> rrToString
    int getFlags() -> getFlags
    int getProtocol() -> getProtocol
    int getAlgorithm() -> getAlgorithm
    byte[] getKey() -> getKey
    int getFootprint() -> getFootprint
    java.security.PublicKey getPublicKey() -> getPublicKey
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.KEYRecord -> org.xbill.DNS.KEYRecord:
    long serialVersionUID -> serialVersionUID
    int FLAG_NOCONF -> FLAG_NOCONF
    int FLAG_NOAUTH -> FLAG_NOAUTH
    int FLAG_NOKEY -> FLAG_NOKEY
    int OWNER_ZONE -> OWNER_ZONE
    int OWNER_HOST -> OWNER_HOST
    int OWNER_USER -> OWNER_USER
    int PROTOCOL_TLS -> PROTOCOL_TLS
    int PROTOCOL_EMAIL -> PROTOCOL_EMAIL
    int PROTOCOL_DNSSEC -> PROTOCOL_DNSSEC
    int PROTOCOL_IPSEC -> PROTOCOL_IPSEC
    int PROTOCOL_ANY -> PROTOCOL_ANY
    org.xbill.DNS.Record getObject() -> getObject
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.security.PublicKey getPublicKey() -> getPublicKey
    int getFootprint() -> getFootprint
    byte[] getKey() -> getKey
    int getAlgorithm() -> getAlgorithm
    int getProtocol() -> getProtocol
    int getFlags() -> getFlags
org.xbill.DNS.KEYRecord$Flags -> org.xbill.DNS.KEYRecord$Flags:
    int NOCONF -> NOCONF
    int NOAUTH -> NOAUTH
    int NOKEY -> NOKEY
    int USE_MASK -> USE_MASK
    int FLAG2 -> FLAG2
    int EXTEND -> EXTEND
    int FLAG4 -> FLAG4
    int FLAG5 -> FLAG5
    int USER -> USER
    int ZONE -> ZONE
    int HOST -> HOST
    int NTYP3 -> NTYP3
    int OWNER_MASK -> OWNER_MASK
    int FLAG8 -> FLAG8
    int FLAG9 -> FLAG9
    int FLAG10 -> FLAG10
    int FLAG11 -> FLAG11
    int SIG0 -> SIG0
    int SIG1 -> SIG1
    int SIG2 -> SIG2
    int SIG3 -> SIG3
    int SIG4 -> SIG4
    int SIG5 -> SIG5
    int SIG6 -> SIG6
    int SIG7 -> SIG7
    int SIG8 -> SIG8
    int SIG9 -> SIG9
    int SIG10 -> SIG10
    int SIG11 -> SIG11
    int SIG12 -> SIG12
    int SIG13 -> SIG13
    int SIG14 -> SIG14
    int SIG15 -> SIG15
    org.xbill.DNS.Mnemonic flags -> flags
    int value(java.lang.String) -> value
org.xbill.DNS.KEYRecord$Protocol -> org.xbill.DNS.KEYRecord$Protocol:
    int NONE -> NONE
    int TLS -> TLS
    int EMAIL -> EMAIL
    int DNSSEC -> DNSSEC
    int IPSEC -> IPSEC
    int ANY -> ANY
    org.xbill.DNS.Mnemonic protocols -> protocols
    java.lang.String string(int) -> string
    int value(java.lang.String) -> value
org.xbill.DNS.KXRecord -> org.xbill.DNS.KXRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    org.xbill.DNS.Name getTarget() -> getTarget
    int getPreference() -> getPreference
    org.xbill.DNS.Name getAdditionalName() -> getAdditionalName
org.xbill.DNS.LOCRecord -> org.xbill.DNS.LOCRecord:
    long serialVersionUID -> serialVersionUID
    java.text.NumberFormat w2 -> w2
    java.text.NumberFormat w3 -> w3
    long size -> size
    long hPrecision -> hPrecision
    long vPrecision -> vPrecision
    long latitude -> latitude
    long longitude -> longitude
    long altitude -> altitude
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    double parseFixedPoint(java.lang.String) -> parseFixedPoint
    long parsePosition(org.xbill.DNS.Tokenizer,java.lang.String) -> parsePosition
    long parseDouble(org.xbill.DNS.Tokenizer,java.lang.String,boolean,long,long,long) -> parseDouble
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    void renderFixedPoint(java.lang.StringBuffer,java.text.NumberFormat,long,long) -> renderFixedPoint
    java.lang.String positionToString(long,char,char) -> positionToString
    java.lang.String rrToString() -> rrToString
    double getLatitude() -> getLatitude
    double getLongitude() -> getLongitude
    double getAltitude() -> getAltitude
    double getSize() -> getSize
    double getHPrecision() -> getHPrecision
    double getVPrecision() -> getVPrecision
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
    long parseLOCformat(int) -> parseLOCformat
    int toLOCformat(long) -> toLOCformat
org.xbill.DNS.Lookup -> org.xbill.DNS.Lookup:
    org.xbill.DNS.Resolver defaultResolver -> defaultResolver
    org.xbill.DNS.Name[] defaultSearchPath -> defaultSearchPath
    java.util.Map defaultCaches -> defaultCaches
    org.xbill.DNS.Resolver resolver -> resolver
    org.xbill.DNS.Name[] searchPath -> searchPath
    org.xbill.DNS.Cache cache -> cache
    boolean temporary_cache -> temporary_cache
    int credibility -> credibility
    org.xbill.DNS.Name name -> name
    int type -> type
    int dclass -> dclass
    boolean verbose -> verbose
    int iterations -> iterations
    boolean foundAlias -> foundAlias
    boolean done -> done
    boolean doneCurrent -> doneCurrent
    java.util.List aliases -> aliases
    org.xbill.DNS.Record[] answers -> answers
    int result -> result
    java.lang.String error -> error
    boolean nxdomain -> nxdomain
    boolean badresponse -> badresponse
    java.lang.String badresponse_error -> badresponse_error
    boolean networkerror -> networkerror
    boolean timedout -> timedout
    boolean nametoolong -> nametoolong
    boolean referral -> referral
    org.xbill.DNS.Name[] noAliases -> noAliases
    int SUCCESSFUL -> SUCCESSFUL
    int UNRECOVERABLE -> UNRECOVERABLE
    int TRY_AGAIN -> TRY_AGAIN
    int HOST_NOT_FOUND -> HOST_NOT_FOUND
    int TYPE_NOT_FOUND -> TYPE_NOT_FOUND
    void refreshDefault() -> refreshDefault
    org.xbill.DNS.Resolver getDefaultResolver() -> getDefaultResolver
    void setDefaultResolver(org.xbill.DNS.Resolver) -> setDefaultResolver
    org.xbill.DNS.Cache getDefaultCache(int) -> getDefaultCache
    void setDefaultCache(org.xbill.DNS.Cache,int) -> setDefaultCache
    org.xbill.DNS.Name[] getDefaultSearchPath() -> getDefaultSearchPath
    void setDefaultSearchPath(org.xbill.DNS.Name[]) -> setDefaultSearchPath
    void setDefaultSearchPath(java.lang.String[]) -> setDefaultSearchPath
    void reset() -> reset
    void setResolver(org.xbill.DNS.Resolver) -> setResolver
    void setSearchPath(org.xbill.DNS.Name[]) -> setSearchPath
    void setSearchPath(java.lang.String[]) -> setSearchPath
    void setCache(org.xbill.DNS.Cache) -> setCache
    void setCredibility(int) -> setCredibility
    void follow(org.xbill.DNS.Name,org.xbill.DNS.Name) -> follow
    void processResponse(org.xbill.DNS.Name,org.xbill.DNS.SetResponse) -> processResponse
    void lookup(org.xbill.DNS.Name) -> lookup
    void resolve(org.xbill.DNS.Name,org.xbill.DNS.Name) -> resolve
    org.xbill.DNS.Record[] run() -> run
    void checkDone() -> checkDone
    org.xbill.DNS.Record[] getAnswers() -> getAnswers
    org.xbill.DNS.Name[] getAliases() -> getAliases
    int getResult() -> getResult
    java.lang.String getErrorString() -> getErrorString
org.xbill.DNS.MBRecord -> org.xbill.DNS.MBRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    org.xbill.DNS.Name getMailbox() -> getMailbox
    org.xbill.DNS.Name getAdditionalName() -> getAdditionalName
org.xbill.DNS.MDRecord -> org.xbill.DNS.MDRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    org.xbill.DNS.Name getMailAgent() -> getMailAgent
    org.xbill.DNS.Name getAdditionalName() -> getAdditionalName
org.xbill.DNS.MFRecord -> org.xbill.DNS.MFRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    org.xbill.DNS.Name getMailAgent() -> getMailAgent
    org.xbill.DNS.Name getAdditionalName() -> getAdditionalName
org.xbill.DNS.MGRecord -> org.xbill.DNS.MGRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    org.xbill.DNS.Name getMailbox() -> getMailbox
org.xbill.DNS.MINFORecord -> org.xbill.DNS.MINFORecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Name responsibleAddress -> responsibleAddress
    org.xbill.DNS.Name errorAddress -> errorAddress
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    org.xbill.DNS.Name getResponsibleAddress() -> getResponsibleAddress
    org.xbill.DNS.Name getErrorAddress() -> getErrorAddress
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.MRRecord -> org.xbill.DNS.MRRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    org.xbill.DNS.Name getNewName() -> getNewName
org.xbill.DNS.MXRecord -> org.xbill.DNS.MXRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    org.xbill.DNS.Name getTarget() -> getTarget
    int getPriority() -> getPriority
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
    org.xbill.DNS.Name getAdditionalName() -> getAdditionalName
org.xbill.DNS.Master -> org.xbill.DNS.Master:
    org.xbill.DNS.Name origin -> origin
    java.io.File file -> file
    org.xbill.DNS.Record last -> last
    long defaultTTL -> defaultTTL
    org.xbill.DNS.Master included -> included
    org.xbill.DNS.Tokenizer st -> st
    int currentType -> currentType
    int currentDClass -> currentDClass
    long currentTTL -> currentTTL
    boolean needSOATTL -> needSOATTL
    org.xbill.DNS.Generator generator -> generator
    java.util.List generators -> generators
    boolean noExpandGenerate -> noExpandGenerate
    org.xbill.DNS.Name parseName(java.lang.String,org.xbill.DNS.Name) -> parseName
    void parseTTLClassAndType() -> parseTTLClassAndType
    long parseUInt32(java.lang.String) -> parseUInt32
    void startGenerate() -> startGenerate
    void endGenerate() -> endGenerate
    org.xbill.DNS.Record nextGenerated() -> nextGenerated
    org.xbill.DNS.Record _nextRecord() -> _nextRecord
    org.xbill.DNS.Record nextRecord() -> nextRecord
    void expandGenerate(boolean) -> expandGenerate
    java.util.Iterator generators() -> generators
    void finalize() -> finalize
org.xbill.DNS.Message -> org.xbill.DNS.Message:
    int MAXLENGTH -> MAXLENGTH
    org.xbill.DNS.Header header -> header
    java.util.List[] sections -> sections
    int size -> size
    org.xbill.DNS.TSIG tsigkey -> tsigkey
    org.xbill.DNS.TSIGRecord querytsig -> querytsig
    int tsigerror -> tsigerror
    int tsigstart -> tsigstart
    int tsigState -> tsigState
    int sig0start -> sig0start
    int TSIG_UNSIGNED -> TSIG_UNSIGNED
    int TSIG_VERIFIED -> TSIG_VERIFIED
    int TSIG_INTERMEDIATE -> TSIG_INTERMEDIATE
    int TSIG_SIGNED -> TSIG_SIGNED
    int TSIG_FAILED -> TSIG_FAILED
    org.xbill.DNS.Record[] emptyRecordArray -> emptyRecordArray
    org.xbill.DNS.RRset[] emptyRRsetArray -> emptyRRsetArray
    org.xbill.DNS.Message newQuery(org.xbill.DNS.Record) -> newQuery
    org.xbill.DNS.Message newUpdate(org.xbill.DNS.Name) -> newUpdate
    void setHeader(org.xbill.DNS.Header) -> setHeader
    org.xbill.DNS.Header getHeader() -> getHeader
    void addRecord(org.xbill.DNS.Record,int) -> addRecord
    boolean removeRecord(org.xbill.DNS.Record,int) -> removeRecord
    void removeAllRecords(int) -> removeAllRecords
    boolean findRecord(org.xbill.DNS.Record,int) -> findRecord
    boolean findRecord(org.xbill.DNS.Record) -> findRecord
    boolean findRRset(org.xbill.DNS.Name,int,int) -> findRRset
    boolean findRRset(org.xbill.DNS.Name,int) -> findRRset
    org.xbill.DNS.Record getQuestion() -> getQuestion
    org.xbill.DNS.TSIGRecord getTSIG() -> getTSIG
    boolean isSigned() -> isSigned
    boolean isVerified() -> isVerified
    org.xbill.DNS.OPTRecord getOPT() -> getOPT
    int getRcode() -> getRcode
    org.xbill.DNS.Record[] getSectionArray(int) -> getSectionArray
    boolean sameSet(org.xbill.DNS.Record,org.xbill.DNS.Record) -> sameSet
    org.xbill.DNS.RRset[] getSectionRRsets(int) -> getSectionRRsets
    void toWire(org.xbill.DNS.DNSOutput) -> toWire
    int sectionToWire(org.xbill.DNS.DNSOutput,int,org.xbill.DNS.Compression,int) -> sectionToWire
    boolean toWire(org.xbill.DNS.DNSOutput,int) -> toWire
    byte[] toWire() -> toWire
    byte[] toWire(int) -> toWire
    void setTSIG(org.xbill.DNS.TSIG,int,org.xbill.DNS.TSIGRecord) -> setTSIG
    int numBytes() -> numBytes
    java.lang.String sectionToString(int) -> sectionToString
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.xbill.DNS.Mnemonic -> org.xbill.DNS.Mnemonic:
    java.lang.Integer[] cachedInts -> cachedInts
    int CASE_SENSITIVE -> CASE_SENSITIVE
    int CASE_UPPER -> CASE_UPPER
    int CASE_LOWER -> CASE_LOWER
    java.util.HashMap strings -> strings
    java.util.HashMap values -> values
    java.lang.String description -> description
    int wordcase -> wordcase
    java.lang.String prefix -> prefix
    int max -> max
    boolean numericok -> numericok
    void setMaximum(int) -> setMaximum
    void setPrefix(java.lang.String) -> setPrefix
    void setNumericAllowed(boolean) -> setNumericAllowed
    java.lang.Integer toInteger(int) -> toInteger
    void check(int) -> check
    java.lang.String sanitize(java.lang.String) -> sanitize
    int parseNumeric(java.lang.String) -> parseNumeric
    void add(int,java.lang.String) -> add
    void addAlias(int,java.lang.String) -> addAlias
    void addAll(org.xbill.DNS.Mnemonic) -> addAll
    java.lang.String getText(int) -> getText
    int getValue(java.lang.String) -> getValue
org.xbill.DNS.NAPTRRecord -> org.xbill.DNS.NAPTRRecord:
    long serialVersionUID -> serialVersionUID
    int order -> order
    int preference -> preference
    byte[] flags -> flags
    byte[] service -> service
    byte[] regexp -> regexp
    org.xbill.DNS.Name replacement -> replacement
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    int getOrder() -> getOrder
    int getPreference() -> getPreference
    java.lang.String getFlags() -> getFlags
    java.lang.String getService() -> getService
    java.lang.String getRegexp() -> getRegexp
    org.xbill.DNS.Name getReplacement() -> getReplacement
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
    org.xbill.DNS.Name getAdditionalName() -> getAdditionalName
org.xbill.DNS.NSAPRecord -> org.xbill.DNS.NSAPRecord:
    long serialVersionUID -> serialVersionUID
    byte[] address -> address
    org.xbill.DNS.Record getObject() -> getObject
    byte[] checkAndConvertAddress(java.lang.String) -> checkAndConvertAddress
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String getAddress() -> getAddress
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
    java.lang.String rrToString() -> rrToString
org.xbill.DNS.NSAP_PTRRecord -> org.xbill.DNS.NSAP_PTRRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    org.xbill.DNS.Name getTarget() -> getTarget
org.xbill.DNS.NSEC3PARAMRecord -> org.xbill.DNS.NSEC3PARAMRecord:
    long serialVersionUID -> serialVersionUID
    int hashAlg -> hashAlg
    int flags -> flags
    int iterations -> iterations
    byte[] salt -> salt
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    int getHashAlgorithm() -> getHashAlgorithm
    int getFlags() -> getFlags
    int getIterations() -> getIterations
    byte[] getSalt() -> getSalt
    byte[] hashName(org.xbill.DNS.Name) -> hashName
org.xbill.DNS.NSEC3Record -> org.xbill.DNS.NSEC3Record:
    int SHA1_DIGEST_ID -> SHA1_DIGEST_ID
    long serialVersionUID -> serialVersionUID
    int hashAlg -> hashAlg
    int flags -> flags
    int iterations -> iterations
    byte[] salt -> salt
    byte[] next -> next
    org.xbill.DNS.TypeBitmap types -> types
    org.xbill.DNS.utils.base32 b32 -> b32
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    int getHashAlgorithm() -> getHashAlgorithm
    int getFlags() -> getFlags
    int getIterations() -> getIterations
    byte[] getSalt() -> getSalt
    byte[] getNext() -> getNext
    int[] getTypes() -> getTypes
    boolean hasType(int) -> hasType
    byte[] hashName(org.xbill.DNS.Name,int,int,byte[]) -> hashName
    byte[] hashName(org.xbill.DNS.Name) -> hashName
org.xbill.DNS.NSEC3Record$Digest -> org.xbill.DNS.NSEC3Record$Digest:
    int SHA1 -> SHA1
org.xbill.DNS.NSEC3Record$Flags -> org.xbill.DNS.NSEC3Record$Flags:
    int OPT_OUT -> OPT_OUT
org.xbill.DNS.NSECRecord -> org.xbill.DNS.NSECRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Name next -> next
    org.xbill.DNS.TypeBitmap types -> types
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    org.xbill.DNS.Name getNext() -> getNext
    int[] getTypes() -> getTypes
    boolean hasType(int) -> hasType
org.xbill.DNS.NSRecord -> org.xbill.DNS.NSRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    org.xbill.DNS.Name getTarget() -> getTarget
    org.xbill.DNS.Name getAdditionalName() -> getAdditionalName
org.xbill.DNS.NULLRecord -> org.xbill.DNS.NULLRecord:
    long serialVersionUID -> serialVersionUID
    byte[] data -> data
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    byte[] getData() -> getData
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.NXTRecord -> org.xbill.DNS.NXTRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Name next -> next
    java.util.BitSet bitmap -> bitmap
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    org.xbill.DNS.Name getNext() -> getNext
    java.util.BitSet getBitmap() -> getBitmap
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.Name -> org.xbill.DNS.Name:
    long serialVersionUID -> serialVersionUID
    int LABEL_NORMAL -> LABEL_NORMAL
    int LABEL_COMPRESSION -> LABEL_COMPRESSION
    int LABEL_MASK -> LABEL_MASK
    byte[] name -> name
    long offsets -> offsets
    int hashcode -> hashcode
    byte[] emptyLabel -> emptyLabel
    byte[] wildLabel -> wildLabel
    org.xbill.DNS.Name root -> root
    org.xbill.DNS.Name empty -> empty
    int MAXNAME -> MAXNAME
    int MAXLABEL -> MAXLABEL
    int MAXLABELS -> MAXLABELS
    int MAXOFFSETS -> MAXOFFSETS
    java.text.DecimalFormat byteFormat -> byteFormat
    byte[] lowercase -> lowercase
    org.xbill.DNS.Name wild -> wild
    void setoffset(int,int) -> setoffset
    int offset(int) -> offset
    void setlabels(int) -> setlabels
    int getlabels() -> getlabels
    void copy(org.xbill.DNS.Name,org.xbill.DNS.Name) -> copy
    void append(byte[],int,int) -> append
    org.xbill.DNS.TextParseException parseException(java.lang.String,java.lang.String) -> parseException
    void appendFromString(java.lang.String,byte[],int,int) -> appendFromString
    void appendSafe(byte[],int,int) -> appendSafe
    org.xbill.DNS.Name fromString(java.lang.String,org.xbill.DNS.Name) -> fromString
    org.xbill.DNS.Name fromString(java.lang.String) -> fromString
    org.xbill.DNS.Name fromConstantString(java.lang.String) -> fromConstantString
    org.xbill.DNS.Name concatenate(org.xbill.DNS.Name,org.xbill.DNS.Name) -> concatenate
    org.xbill.DNS.Name relativize(org.xbill.DNS.Name) -> relativize
    org.xbill.DNS.Name wild(int) -> wild
    org.xbill.DNS.Name fromDNAME(org.xbill.DNS.DNAMERecord) -> fromDNAME
    boolean isWild() -> isWild
    boolean isAbsolute() -> isAbsolute
    short length() -> length
    int labels() -> labels
    boolean subdomain(org.xbill.DNS.Name) -> subdomain
    java.lang.String byteString(byte[],int) -> byteString
    java.lang.String toString() -> toString
    byte[] getLabel(int) -> getLabel
    java.lang.String getLabelString(int) -> getLabelString
    void toWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression) -> toWire
    byte[] toWire() -> toWire
    void toWireCanonical(org.xbill.DNS.DNSOutput) -> toWireCanonical
    byte[] toWireCanonical() -> toWireCanonical
    void toWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> toWire
    boolean equals(byte[],int) -> equals
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(java.lang.Object) -> compareTo
org.xbill.DNS.NameTooLongException -> org.xbill.DNS.NameTooLongException:
org.xbill.DNS.OPTRecord -> org.xbill.DNS.OPTRecord:
    long serialVersionUID -> serialVersionUID
    java.util.List options -> options
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    int getPayloadSize() -> getPayloadSize
    int getExtendedRcode() -> getExtendedRcode
    int getVersion() -> getVersion
    int getFlags() -> getFlags
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
    java.util.List getOptions() -> getOptions
    java.util.List getOptions(int) -> getOptions
org.xbill.DNS.OPTRecord$Option -> org.xbill.DNS.OPTRecord$Option:
    int code -> code
    byte[] data -> data
    java.lang.String toString() -> toString
org.xbill.DNS.Opcode -> org.xbill.DNS.Opcode:
    int QUERY -> QUERY
    int IQUERY -> IQUERY
    int STATUS -> STATUS
    int NOTIFY -> NOTIFY
    int UPDATE -> UPDATE
    org.xbill.DNS.Mnemonic opcodes -> opcodes
    java.lang.String string(int) -> string
    int value(java.lang.String) -> value
org.xbill.DNS.Options -> org.xbill.DNS.Options:
    java.util.Map table -> table
    void refresh() -> refresh
    void clear() -> clear
    void set(java.lang.String) -> set
    void set(java.lang.String,java.lang.String) -> set
    void unset(java.lang.String) -> unset
    boolean check(java.lang.String) -> check
    java.lang.String value(java.lang.String) -> value
    int intValue(java.lang.String) -> intValue
org.xbill.DNS.PTRRecord -> org.xbill.DNS.PTRRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    org.xbill.DNS.Name getTarget() -> getTarget
org.xbill.DNS.PXRecord -> org.xbill.DNS.PXRecord:
    long serialVersionUID -> serialVersionUID
    int preference -> preference
    org.xbill.DNS.Name map822 -> map822
    org.xbill.DNS.Name mapX400 -> mapX400
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
    int getPreference() -> getPreference
    org.xbill.DNS.Name getMap822() -> getMap822
    org.xbill.DNS.Name getMapX400() -> getMapX400
org.xbill.DNS.RPRecord -> org.xbill.DNS.RPRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Name mailbox -> mailbox
    org.xbill.DNS.Name textDomain -> textDomain
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    org.xbill.DNS.Name getMailbox() -> getMailbox
    org.xbill.DNS.Name getTextDomain() -> getTextDomain
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.RRSIGRecord -> org.xbill.DNS.RRSIGRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    byte[] getSignature() -> getSignature
    org.xbill.DNS.Name getSigner() -> getSigner
    int getFootprint() -> getFootprint
    java.util.Date getTimeSigned() -> getTimeSigned
    java.util.Date getExpire() -> getExpire
    long getOrigTTL() -> getOrigTTL
    int getLabels() -> getLabels
    int getAlgorithm() -> getAlgorithm
    int getTypeCovered() -> getTypeCovered
org.xbill.DNS.RRset -> org.xbill.DNS.RRset:
    long serialVersionUID -> serialVersionUID
    java.util.List rrs -> rrs
    short nsigs -> nsigs
    short position -> position
    void safeAddRR(org.xbill.DNS.Record) -> safeAddRR
    void addRR(org.xbill.DNS.Record) -> addRR
    void deleteRR(org.xbill.DNS.Record) -> deleteRR
    void clear() -> clear
    java.util.Iterator iterator(boolean,boolean) -> iterator
    java.util.Iterator rrs(boolean) -> rrs
    java.util.Iterator rrs() -> rrs
    java.util.Iterator sigs() -> sigs
    int size() -> size
    org.xbill.DNS.Name getName() -> getName
    int getType() -> getType
    int getDClass() -> getDClass
    long getTTL() -> getTTL
    org.xbill.DNS.Record first() -> first
    java.lang.String iteratorToString(java.util.Iterator) -> iteratorToString
    java.lang.String toString() -> toString
org.xbill.DNS.RTRecord -> org.xbill.DNS.RTRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    int getPreference() -> getPreference
    org.xbill.DNS.Name getIntermediateHost() -> getIntermediateHost
org.xbill.DNS.Rcode -> org.xbill.DNS.Rcode:
    org.xbill.DNS.Mnemonic rcodes -> rcodes
    org.xbill.DNS.Mnemonic tsigrcodes -> tsigrcodes
    int NOERROR -> NOERROR
    int FORMERR -> FORMERR
    int SERVFAIL -> SERVFAIL
    int NXDOMAIN -> NXDOMAIN
    int NOTIMP -> NOTIMP
    int NOTIMPL -> NOTIMPL
    int REFUSED -> REFUSED
    int YXDOMAIN -> YXDOMAIN
    int YXRRSET -> YXRRSET
    int NXRRSET -> NXRRSET
    int NOTAUTH -> NOTAUTH
    int NOTZONE -> NOTZONE
    int BADVERS -> BADVERS
    int BADSIG -> BADSIG
    int BADKEY -> BADKEY
    int BADTIME -> BADTIME
    int BADMODE -> BADMODE
    java.lang.String string(int) -> string
    java.lang.String TSIGstring(int) -> TSIGstring
    int value(java.lang.String) -> value
org.xbill.DNS.Record -> org.xbill.DNS.Record:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Name name -> name
    int type -> type
    int dclass -> dclass
    long ttl -> ttl
    java.text.DecimalFormat byteFormat -> byteFormat
    org.xbill.DNS.Record getObject() -> getObject
    org.xbill.DNS.Record getEmptyRecord(org.xbill.DNS.Name,int,int,long,boolean) -> getEmptyRecord
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    org.xbill.DNS.Record newRecord(org.xbill.DNS.Name,int,int,long,int,org.xbill.DNS.DNSInput) -> newRecord
    org.xbill.DNS.Record newRecord(org.xbill.DNS.Name,int,int,long,int,byte[]) -> newRecord
    org.xbill.DNS.Record newRecord(org.xbill.DNS.Name,int,int,long,byte[]) -> newRecord
    org.xbill.DNS.Record newRecord(org.xbill.DNS.Name,int,int,long) -> newRecord
    org.xbill.DNS.Record newRecord(org.xbill.DNS.Name,int,int) -> newRecord
    org.xbill.DNS.Record fromWire(org.xbill.DNS.DNSInput,int,boolean) -> fromWire
    org.xbill.DNS.Record fromWire(org.xbill.DNS.DNSInput,int) -> fromWire
    org.xbill.DNS.Record fromWire(byte[],int) -> fromWire
    void toWire(org.xbill.DNS.DNSOutput,int,org.xbill.DNS.Compression) -> toWire
    byte[] toWire(int) -> toWire
    void toWireCanonical(org.xbill.DNS.DNSOutput,boolean) -> toWireCanonical
    byte[] toWireCanonical(boolean) -> toWireCanonical
    byte[] toWireCanonical() -> toWireCanonical
    byte[] rdataToWireCanonical() -> rdataToWireCanonical
    java.lang.String rrToString() -> rrToString
    java.lang.String rdataToString() -> rdataToString
    java.lang.String toString() -> toString
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    byte[] byteArrayFromString(java.lang.String) -> byteArrayFromString
    java.lang.String byteArrayToString(byte[],boolean) -> byteArrayToString
    java.lang.String unknownToString(byte[]) -> unknownToString
    org.xbill.DNS.Record fromString(org.xbill.DNS.Name,int,int,long,org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> fromString
    org.xbill.DNS.Record fromString(org.xbill.DNS.Name,int,int,long,java.lang.String,org.xbill.DNS.Name) -> fromString
    org.xbill.DNS.Name getName() -> getName
    int getType() -> getType
    int getRRsetType() -> getRRsetType
    int getDClass() -> getDClass
    long getTTL() -> getTTL
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
    boolean sameRRset(org.xbill.DNS.Record) -> sameRRset
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.xbill.DNS.Record cloneRecord() -> cloneRecord
    org.xbill.DNS.Record withName(org.xbill.DNS.Name) -> withName
    org.xbill.DNS.Record withDClass(int,long) -> withDClass
    void setTTL(long) -> setTTL
    int compareTo(java.lang.Object) -> compareTo
    org.xbill.DNS.Name getAdditionalName() -> getAdditionalName
    int checkU8(java.lang.String,int) -> checkU8
    int checkU16(java.lang.String,int) -> checkU16
    long checkU32(java.lang.String,long) -> checkU32
    org.xbill.DNS.Name checkName(java.lang.String,org.xbill.DNS.Name) -> checkName
org.xbill.DNS.RelativeNameException -> org.xbill.DNS.RelativeNameException:
org.xbill.DNS.ResolveThread -> org.xbill.DNS.ResolveThread:
    org.xbill.DNS.Message query -> query
    java.lang.Object id -> id
    org.xbill.DNS.ResolverListener listener -> listener
    org.xbill.DNS.Resolver res -> res
    void run() -> run
org.xbill.DNS.Resolver -> org.xbill.DNS.Resolver:
    void setPort(int) -> setPort
    void setTCP(boolean) -> setTCP
    void setIgnoreTruncation(boolean) -> setIgnoreTruncation
    void setEDNS(int) -> setEDNS
    void setEDNS(int,int,int,java.util.List) -> setEDNS
    void setTSIGKey(org.xbill.DNS.TSIG) -> setTSIGKey
    void setTimeout(int,int) -> setTimeout
    void setTimeout(int) -> setTimeout
    org.xbill.DNS.Message send(org.xbill.DNS.Message) -> send
    java.lang.Object sendAsync(org.xbill.DNS.Message,org.xbill.DNS.ResolverListener) -> sendAsync
org.xbill.DNS.ResolverConfig -> org.xbill.DNS.ResolverConfig:
    java.lang.String[] servers -> servers
    org.xbill.DNS.Name[] searchlist -> searchlist
    org.xbill.DNS.ResolverConfig currentConfig -> currentConfig
    void addServer(java.lang.String,java.util.List) -> addServer
    void addSearch(java.lang.String,java.util.List) -> addSearch
    void configureFromLists(java.util.List,java.util.List) -> configureFromLists
    boolean findProperty() -> findProperty
    boolean findSunJVM() -> findSunJVM
    void findResolvConf(java.lang.String) -> findResolvConf
    void findUnix() -> findUnix
    void findNetware() -> findNetware
    void findWin(java.io.InputStream,java.util.Locale) -> findWin
    void findWin(java.io.InputStream) -> findWin
    void find95() -> find95
    void findNT() -> findNT
    void findAndroid() -> findAndroid
    java.lang.String[] servers() -> servers
    java.lang.String server() -> server
    org.xbill.DNS.Name[] searchPath() -> searchPath
    org.xbill.DNS.ResolverConfig getCurrentConfig() -> getCurrentConfig
    void refresh() -> refresh
org.xbill.DNS.ResolverListener -> org.xbill.DNS.ResolverListener:
    void receiveMessage(java.lang.Object,org.xbill.DNS.Message) -> receiveMessage
    void handleException(java.lang.Object,java.lang.Exception) -> handleException
org.xbill.DNS.ReverseMap -> org.xbill.DNS.ReverseMap:
    org.xbill.DNS.Name inaddr4 -> inaddr4
    org.xbill.DNS.Name inaddr6 -> inaddr6
    org.xbill.DNS.Name fromAddress(byte[]) -> fromAddress
    org.xbill.DNS.Name fromAddress(int[]) -> fromAddress
    org.xbill.DNS.Name fromAddress(java.net.InetAddress) -> fromAddress
    org.xbill.DNS.Name fromAddress(java.lang.String,int) -> fromAddress
    org.xbill.DNS.Name fromAddress(java.lang.String) -> fromAddress
org.xbill.DNS.SIG0 -> org.xbill.DNS.SIG0:
    short VALIDITY -> VALIDITY
    void signMessage(org.xbill.DNS.Message,org.xbill.DNS.KEYRecord,java.security.PrivateKey,org.xbill.DNS.SIGRecord) -> signMessage
    void verifyMessage(org.xbill.DNS.Message,byte[],org.xbill.DNS.KEYRecord,org.xbill.DNS.SIGRecord) -> verifyMessage
org.xbill.DNS.SIGBase -> org.xbill.DNS.SIGBase:
    long serialVersionUID -> serialVersionUID
    int covered -> covered
    int alg -> alg
    int labels -> labels
    long origttl -> origttl
    java.util.Date expire -> expire
    java.util.Date timeSigned -> timeSigned
    int footprint -> footprint
    org.xbill.DNS.Name signer -> signer
    byte[] signature -> signature
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    int getTypeCovered() -> getTypeCovered
    int getAlgorithm() -> getAlgorithm
    int getLabels() -> getLabels
    long getOrigTTL() -> getOrigTTL
    java.util.Date getExpire() -> getExpire
    java.util.Date getTimeSigned() -> getTimeSigned
    int getFootprint() -> getFootprint
    org.xbill.DNS.Name getSigner() -> getSigner
    byte[] getSignature() -> getSignature
    void setSignature(byte[]) -> setSignature
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.SIGRecord -> org.xbill.DNS.SIGRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    byte[] getSignature() -> getSignature
    org.xbill.DNS.Name getSigner() -> getSigner
    int getFootprint() -> getFootprint
    java.util.Date getTimeSigned() -> getTimeSigned
    java.util.Date getExpire() -> getExpire
    long getOrigTTL() -> getOrigTTL
    int getLabels() -> getLabels
    int getAlgorithm() -> getAlgorithm
    int getTypeCovered() -> getTypeCovered
org.xbill.DNS.SOARecord -> org.xbill.DNS.SOARecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Name host -> host
    org.xbill.DNS.Name admin -> admin
    long serial -> serial
    long refresh -> refresh
    long retry -> retry
    long expire -> expire
    long minimum -> minimum
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    org.xbill.DNS.Name getHost() -> getHost
    org.xbill.DNS.Name getAdmin() -> getAdmin
    long getSerial() -> getSerial
    long getRefresh() -> getRefresh
    long getRetry() -> getRetry
    long getExpire() -> getExpire
    long getMinimum() -> getMinimum
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.SPFRecord -> org.xbill.DNS.SPFRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    java.util.List getStringsAsByteArrays() -> getStringsAsByteArrays
    java.util.List getStrings() -> getStrings
org.xbill.DNS.SRVRecord -> org.xbill.DNS.SRVRecord:
    long serialVersionUID -> serialVersionUID
    int priority -> priority
    int weight -> weight
    int port -> port
    org.xbill.DNS.Name target -> target
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    int getPriority() -> getPriority
    int getWeight() -> getWeight
    int getPort() -> getPort
    org.xbill.DNS.Name getTarget() -> getTarget
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
    org.xbill.DNS.Name getAdditionalName() -> getAdditionalName
org.xbill.DNS.SSHFPRecord -> org.xbill.DNS.SSHFPRecord:
    long serialVersionUID -> serialVersionUID
    int alg -> alg
    int digestType -> digestType
    byte[] fingerprint -> fingerprint
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    int getAlgorithm() -> getAlgorithm
    int getDigestType() -> getDigestType
    byte[] getFingerPrint() -> getFingerPrint
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.SSHFPRecord$Algorithm -> org.xbill.DNS.SSHFPRecord$Algorithm:
    int RSA -> RSA
    int DSS -> DSS
org.xbill.DNS.SSHFPRecord$Digest -> org.xbill.DNS.SSHFPRecord$Digest:
    int SHA1 -> SHA1
org.xbill.DNS.Section -> org.xbill.DNS.Section:
    int QUESTION -> QUESTION
    int ANSWER -> ANSWER
    int AUTHORITY -> AUTHORITY
    int ADDITIONAL -> ADDITIONAL
    int ZONE -> ZONE
    int PREREQ -> PREREQ
    int UPDATE -> UPDATE
    org.xbill.DNS.Mnemonic sections -> sections
    java.lang.String[] longSections -> longSections
    java.lang.String[] updateSections -> updateSections
    java.lang.String string(int) -> string
    java.lang.String longString(int) -> longString
    java.lang.String updString(int) -> updString
    int value(java.lang.String) -> value
org.xbill.DNS.Serial -> org.xbill.DNS.Serial:
    long MAX32 -> MAX32
    int compare(long,long) -> compare
    long increment(long) -> increment
org.xbill.DNS.SetResponse -> org.xbill.DNS.SetResponse:
    int UNKNOWN -> UNKNOWN
    int NXDOMAIN -> NXDOMAIN
    int NXRRSET -> NXRRSET
    int DELEGATION -> DELEGATION
    int CNAME -> CNAME
    int DNAME -> DNAME
    int SUCCESSFUL -> SUCCESSFUL
    org.xbill.DNS.SetResponse unknown -> unknown
    org.xbill.DNS.SetResponse nxdomain -> nxdomain
    org.xbill.DNS.SetResponse nxrrset -> nxrrset
    int type -> type
    java.lang.Object data -> data
    org.xbill.DNS.SetResponse ofType(int) -> ofType
    void addRRset(org.xbill.DNS.RRset) -> addRRset
    boolean isUnknown() -> isUnknown
    boolean isNXDOMAIN() -> isNXDOMAIN
    boolean isNXRRSET() -> isNXRRSET
    boolean isDelegation() -> isDelegation
    boolean isCNAME() -> isCNAME
    boolean isDNAME() -> isDNAME
    boolean isSuccessful() -> isSuccessful
    org.xbill.DNS.RRset[] answers() -> answers
    org.xbill.DNS.CNAMERecord getCNAME() -> getCNAME
    org.xbill.DNS.DNAMERecord getDNAME() -> getDNAME
    org.xbill.DNS.RRset getNS() -> getNS
    java.lang.String toString() -> toString
org.xbill.DNS.SimpleResolver -> org.xbill.DNS.SimpleResolver:
    int DEFAULT_PORT -> DEFAULT_PORT
    int DEFAULT_EDNS_PAYLOADSIZE -> DEFAULT_EDNS_PAYLOADSIZE
    java.net.InetSocketAddress address -> address
    java.net.InetSocketAddress localAddress -> localAddress
    boolean useTCP -> useTCP
    boolean ignoreTruncation -> ignoreTruncation
    org.xbill.DNS.OPTRecord queryOPT -> queryOPT
    org.xbill.DNS.TSIG tsig -> tsig
    long timeoutValue -> timeoutValue
    short DEFAULT_UDPSIZE -> DEFAULT_UDPSIZE
    java.lang.String defaultResolver -> defaultResolver
    int uniqueID -> uniqueID
    java.net.InetSocketAddress getAddress() -> getAddress
    void setDefaultResolver(java.lang.String) -> setDefaultResolver
    void setPort(int) -> setPort
    void setAddress(java.net.InetSocketAddress) -> setAddress
    void setAddress(java.net.InetAddress) -> setAddress
    void setLocalAddress(java.net.InetSocketAddress) -> setLocalAddress
    void setLocalAddress(java.net.InetAddress) -> setLocalAddress
    void setTCP(boolean) -> setTCP
    void setIgnoreTruncation(boolean) -> setIgnoreTruncation
    void setEDNS(int,int,int,java.util.List) -> setEDNS
    void setEDNS(int) -> setEDNS
    void setTSIGKey(org.xbill.DNS.TSIG) -> setTSIGKey
    org.xbill.DNS.TSIG getTSIGKey() -> getTSIGKey
    void setTimeout(int,int) -> setTimeout
    void setTimeout(int) -> setTimeout
    long getTimeout() -> getTimeout
    org.xbill.DNS.Message parseMessage(byte[]) -> parseMessage
    void verifyTSIG(org.xbill.DNS.Message,org.xbill.DNS.Message,byte[],org.xbill.DNS.TSIG) -> verifyTSIG
    void applyEDNS(org.xbill.DNS.Message) -> applyEDNS
    int maxUDPSize(org.xbill.DNS.Message) -> maxUDPSize
    org.xbill.DNS.Message send(org.xbill.DNS.Message) -> send
    java.lang.Object sendAsync(org.xbill.DNS.Message,org.xbill.DNS.ResolverListener) -> sendAsync
    org.xbill.DNS.Message sendAXFR(org.xbill.DNS.Message) -> sendAXFR
org.xbill.DNS.SingleCompressedNameBase -> org.xbill.DNS.SingleCompressedNameBase:
    long serialVersionUID -> serialVersionUID
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.SingleNameBase -> org.xbill.DNS.SingleNameBase:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Name singleName -> singleName
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    org.xbill.DNS.Name getSingleName() -> getSingleName
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.TCPClient -> org.xbill.DNS.TCPClient:
    void bind(java.net.SocketAddress) -> bind
    void connect(java.net.SocketAddress) -> connect
    void send(byte[]) -> send
    byte[] _recv(int) -> _recv
    byte[] recv() -> recv
    byte[] sendrecv(java.net.SocketAddress,java.net.SocketAddress,byte[],long) -> sendrecv
    byte[] sendrecv(java.net.SocketAddress,byte[],long) -> sendrecv
org.xbill.DNS.TKEYRecord -> org.xbill.DNS.TKEYRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Name alg -> alg
    java.util.Date timeInception -> timeInception
    java.util.Date timeExpire -> timeExpire
    int mode -> mode
    int error -> error
    byte[] key -> key
    byte[] other -> other
    int SERVERASSIGNED -> SERVERASSIGNED
    int DIFFIEHELLMAN -> DIFFIEHELLMAN
    int GSSAPI -> GSSAPI
    int RESOLVERASSIGNED -> RESOLVERASSIGNED
    int DELETE -> DELETE
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String modeString() -> modeString
    java.lang.String rrToString() -> rrToString
    org.xbill.DNS.Name getAlgorithm() -> getAlgorithm
    java.util.Date getTimeInception() -> getTimeInception
    java.util.Date getTimeExpire() -> getTimeExpire
    int getMode() -> getMode
    int getError() -> getError
    byte[] getKey() -> getKey
    byte[] getOther() -> getOther
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.TSIG -> org.xbill.DNS.TSIG:
    java.lang.String HMAC_MD5_STR -> HMAC_MD5_STR
    java.lang.String HMAC_SHA1_STR -> HMAC_SHA1_STR
    java.lang.String HMAC_SHA256_STR -> HMAC_SHA256_STR
    org.xbill.DNS.Name HMAC_MD5 -> HMAC_MD5
    org.xbill.DNS.Name HMAC -> HMAC
    org.xbill.DNS.Name HMAC_SHA1 -> HMAC_SHA1
    org.xbill.DNS.Name HMAC_SHA256 -> HMAC_SHA256
    short FUDGE -> FUDGE
    org.xbill.DNS.Name name -> name
    org.xbill.DNS.Name alg -> alg
    java.lang.String digest -> digest
    byte[] key -> key
    void getDigest() -> getDigest
    org.xbill.DNS.TSIG fromString(java.lang.String) -> fromString
    org.xbill.DNS.TSIGRecord generate(org.xbill.DNS.Message,byte[],int,org.xbill.DNS.TSIGRecord) -> generate
    void apply(org.xbill.DNS.Message,int,org.xbill.DNS.TSIGRecord) -> apply
    void apply(org.xbill.DNS.Message,org.xbill.DNS.TSIGRecord) -> apply
    void applyStream(org.xbill.DNS.Message,org.xbill.DNS.TSIGRecord,boolean) -> applyStream
    byte verify(org.xbill.DNS.Message,byte[],int,org.xbill.DNS.TSIGRecord) -> verify
    int verify(org.xbill.DNS.Message,byte[],org.xbill.DNS.TSIGRecord) -> verify
    int recordLength() -> recordLength
    java.lang.String access$000(org.xbill.DNS.TSIG) -> access$000
    byte[] access$100(org.xbill.DNS.TSIG) -> access$100
    org.xbill.DNS.Name access$200(org.xbill.DNS.TSIG) -> access$200
    org.xbill.DNS.Name access$300(org.xbill.DNS.TSIG) -> access$300
org.xbill.DNS.TSIG$StreamVerifier -> org.xbill.DNS.TSIG$StreamVerifier:
    org.xbill.DNS.TSIG key -> key
    org.xbill.DNS.utils.HMAC verifier -> verifier
    int nresponses -> nresponses
    int lastsigned -> lastsigned
    org.xbill.DNS.TSIGRecord lastTSIG -> lastTSIG
    int verify(org.xbill.DNS.Message,byte[]) -> verify
org.xbill.DNS.TSIGRecord -> org.xbill.DNS.TSIGRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Name alg -> alg
    java.util.Date timeSigned -> timeSigned
    int fudge -> fudge
    byte[] signature -> signature
    int originalID -> originalID
    int error -> error
    byte[] other -> other
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    org.xbill.DNS.Name getAlgorithm() -> getAlgorithm
    java.util.Date getTimeSigned() -> getTimeSigned
    int getFudge() -> getFudge
    byte[] getSignature() -> getSignature
    int getOriginalID() -> getOriginalID
    int getError() -> getError
    byte[] getOther() -> getOther
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.TTL -> org.xbill.DNS.TTL:
    long MAX_VALUE -> MAX_VALUE
    void check(long) -> check
    long parse(java.lang.String,boolean) -> parse
    long parseTTL(java.lang.String) -> parseTTL
    java.lang.String format(long) -> format
org.xbill.DNS.TXTBase -> org.xbill.DNS.TXTBase:
    long serialVersionUID -> serialVersionUID
    java.util.List strings -> strings
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    java.util.List getStrings() -> getStrings
    java.util.List getStringsAsByteArrays() -> getStringsAsByteArrays
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.TXTRecord -> org.xbill.DNS.TXTRecord:
    long serialVersionUID -> serialVersionUID
    org.xbill.DNS.Record getObject() -> getObject
    java.util.List getStringsAsByteArrays() -> getStringsAsByteArrays
    java.util.List getStrings() -> getStrings
org.xbill.DNS.TextParseException -> org.xbill.DNS.TextParseException:
org.xbill.DNS.Tokenizer -> org.xbill.DNS.Tokenizer:
    java.lang.String delim -> delim
    java.lang.String quotes -> quotes
    int EOF -> EOF
    int EOL -> EOL
    int WHITESPACE -> WHITESPACE
    int IDENTIFIER -> IDENTIFIER
    int QUOTED_STRING -> QUOTED_STRING
    int COMMENT -> COMMENT
    java.io.PushbackInputStream is -> is
    boolean ungottenToken -> ungottenToken
    int multiline -> multiline
    boolean quoting -> quoting
    java.lang.String delimiters -> delimiters
    org.xbill.DNS.Tokenizer$Token current -> current
    java.lang.StringBuffer sb -> sb
    boolean wantClose -> wantClose
    java.lang.String filename -> filename
    int line -> line
    int getChar() -> getChar
    void ungetChar(int) -> ungetChar
    int skipWhitespace() -> skipWhitespace
    void checkUnbalancedParens() -> checkUnbalancedParens
    org.xbill.DNS.Tokenizer$Token get(boolean,boolean) -> get
    org.xbill.DNS.Tokenizer$Token get() -> get
    void unget() -> unget
    java.lang.String getString() -> getString
    java.lang.String _getIdentifier(java.lang.String) -> _getIdentifier
    java.lang.String getIdentifier() -> getIdentifier
    long getLong() -> getLong
    long getUInt32() -> getUInt32
    int getUInt16() -> getUInt16
    int getUInt8() -> getUInt8
    long getTTL() -> getTTL
    long getTTLLike() -> getTTLLike
    org.xbill.DNS.Name getName(org.xbill.DNS.Name) -> getName
    java.net.InetAddress getAddress(int) -> getAddress
    void getEOL() -> getEOL
    java.lang.String remainingStrings() -> remainingStrings
    byte[] getBase64(boolean) -> getBase64
    byte[] getBase64() -> getBase64
    byte[] getHex(boolean) -> getHex
    byte[] getHex() -> getHex
    byte[] getHexString() -> getHexString
    byte[] getBase32String(org.xbill.DNS.utils.base32) -> getBase32String
    org.xbill.DNS.TextParseException exception(java.lang.String) -> exception
    void close() -> close
    void finalize() -> finalize
org.xbill.DNS.Tokenizer$1 -> org.xbill.DNS.Tokenizer$1:
org.xbill.DNS.Tokenizer$Token -> org.xbill.DNS.Tokenizer$Token:
    int type -> type
    java.lang.String value -> value
    org.xbill.DNS.Tokenizer$Token set(int,java.lang.StringBuffer) -> set
    java.lang.String toString() -> toString
    boolean isString() -> isString
    boolean isEOL() -> isEOL
    org.xbill.DNS.Tokenizer$Token access$100(org.xbill.DNS.Tokenizer$Token,int,java.lang.StringBuffer) -> access$100
org.xbill.DNS.Tokenizer$TokenizerException -> org.xbill.DNS.Tokenizer$TokenizerException:
    java.lang.String message -> message
    java.lang.String getBaseMessage() -> getBaseMessage
org.xbill.DNS.Type -> org.xbill.DNS.Type:
    int A -> A
    int NS -> NS
    int MD -> MD
    int MF -> MF
    int CNAME -> CNAME
    int SOA -> SOA
    int MB -> MB
    int MG -> MG
    int MR -> MR
    int NULL -> NULL
    int WKS -> WKS
    int PTR -> PTR
    int HINFO -> HINFO
    int MINFO -> MINFO
    int MX -> MX
    int TXT -> TXT
    int RP -> RP
    int AFSDB -> AFSDB
    int X25 -> X25
    int ISDN -> ISDN
    int RT -> RT
    int NSAP -> NSAP
    int NSAP_PTR -> NSAP_PTR
    int SIG -> SIG
    int KEY -> KEY
    int PX -> PX
    int GPOS -> GPOS
    int AAAA -> AAAA
    int LOC -> LOC
    int NXT -> NXT
    int EID -> EID
    int NIMLOC -> NIMLOC
    int SRV -> SRV
    int ATMA -> ATMA
    int NAPTR -> NAPTR
    int KX -> KX
    int CERT -> CERT
    int A6 -> A6
    int DNAME -> DNAME
    int OPT -> OPT
    int APL -> APL
    int DS -> DS
    int SSHFP -> SSHFP
    int IPSECKEY -> IPSECKEY
    int RRSIG -> RRSIG
    int NSEC -> NSEC
    int DNSKEY -> DNSKEY
    int DHCID -> DHCID
    int NSEC3 -> NSEC3
    int NSEC3PARAM -> NSEC3PARAM
    int SPF -> SPF
    int TKEY -> TKEY
    int TSIG -> TSIG
    int IXFR -> IXFR
    int AXFR -> AXFR
    int MAILB -> MAILB
    int MAILA -> MAILA
    int ANY -> ANY
    int DLV -> DLV
    org.xbill.DNS.Type$TypeMnemonic types -> types
    void check(int) -> check
    java.lang.String string(int) -> string
    int value(java.lang.String,boolean) -> value
    int value(java.lang.String) -> value
    org.xbill.DNS.Record getProto(int) -> getProto
    boolean isRR(int) -> isRR
org.xbill.DNS.Type$TypeMnemonic -> org.xbill.DNS.Type$TypeMnemonic:
    java.util.HashMap objects -> objects
    void add(int,java.lang.String,org.xbill.DNS.Record) -> add
    void check(int) -> check
    org.xbill.DNS.Record getProto(int) -> getProto
org.xbill.DNS.TypeBitmap -> org.xbill.DNS.TypeBitmap:
    long serialVersionUID -> serialVersionUID
    java.util.TreeSet types -> types
    int[] toArray() -> toArray
    java.lang.String toString() -> toString
    void mapToWire(org.xbill.DNS.DNSOutput,java.util.TreeSet,int) -> mapToWire
    void toWire(org.xbill.DNS.DNSOutput) -> toWire
    boolean empty() -> empty
    boolean contains(int) -> contains
org.xbill.DNS.U16NameBase -> org.xbill.DNS.U16NameBase:
    long serialVersionUID -> serialVersionUID
    int u16Field -> u16Field
    org.xbill.DNS.Name nameField -> nameField
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    int getU16Field() -> getU16Field
    org.xbill.DNS.Name getNameField() -> getNameField
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.UDPClient -> org.xbill.DNS.UDPClient:
    int EPHEMERAL_START -> EPHEMERAL_START
    int EPHEMERAL_STOP -> EPHEMERAL_STOP
    int EPHEMERAL_RANGE -> EPHEMERAL_RANGE
    java.security.SecureRandom prng -> prng
    boolean prng_initializing -> prng_initializing
    boolean bound -> bound
    void bind_random(java.net.InetSocketAddress) -> bind_random
    void bind(java.net.SocketAddress) -> bind
    void connect(java.net.SocketAddress) -> connect
    void send(byte[]) -> send
    byte[] recv(int) -> recv
    byte[] sendrecv(java.net.SocketAddress,java.net.SocketAddress,byte[],int,long) -> sendrecv
    byte[] sendrecv(java.net.SocketAddress,byte[],int,long) -> sendrecv
    java.security.SecureRandom access$000() -> access$000
    boolean access$102(boolean) -> access$102
org.xbill.DNS.UDPClient$1 -> org.xbill.DNS.UDPClient$1:
    void run() -> run
org.xbill.DNS.UNKRecord -> org.xbill.DNS.UNKRecord:
    long serialVersionUID -> serialVersionUID
    byte[] data -> data
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    byte[] getData() -> getData
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.Update -> org.xbill.DNS.Update:
    org.xbill.DNS.Name origin -> origin
    int dclass -> dclass
    void newPrereq(org.xbill.DNS.Record) -> newPrereq
    void newUpdate(org.xbill.DNS.Record) -> newUpdate
    void present(org.xbill.DNS.Name) -> present
    void present(org.xbill.DNS.Name,int) -> present
    void present(org.xbill.DNS.Name,int,java.lang.String) -> present
    void present(org.xbill.DNS.Name,int,org.xbill.DNS.Tokenizer) -> present
    void present(org.xbill.DNS.Record) -> present
    void absent(org.xbill.DNS.Name) -> absent
    void absent(org.xbill.DNS.Name,int) -> absent
    void add(org.xbill.DNS.Name,int,long,java.lang.String) -> add
    void add(org.xbill.DNS.Name,int,long,org.xbill.DNS.Tokenizer) -> add
    void add(org.xbill.DNS.Record) -> add
    void add(org.xbill.DNS.Record[]) -> add
    void add(org.xbill.DNS.RRset) -> add
    void delete(org.xbill.DNS.Name) -> delete
    void delete(org.xbill.DNS.Name,int) -> delete
    void delete(org.xbill.DNS.Name,int,java.lang.String) -> delete
    void delete(org.xbill.DNS.Name,int,org.xbill.DNS.Tokenizer) -> delete
    void delete(org.xbill.DNS.Record) -> delete
    void delete(org.xbill.DNS.Record[]) -> delete
    void delete(org.xbill.DNS.RRset) -> delete
    void replace(org.xbill.DNS.Name,int,long,java.lang.String) -> replace
    void replace(org.xbill.DNS.Name,int,long,org.xbill.DNS.Tokenizer) -> replace
    void replace(org.xbill.DNS.Record) -> replace
    void replace(org.xbill.DNS.Record[]) -> replace
    void replace(org.xbill.DNS.RRset) -> replace
org.xbill.DNS.WKSRecord -> org.xbill.DNS.WKSRecord:
    long serialVersionUID -> serialVersionUID
    byte[] address -> address
    int protocol -> protocol
    int[] services -> services
    org.xbill.DNS.Record getObject() -> getObject
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String rrToString() -> rrToString
    java.net.InetAddress getAddress() -> getAddress
    int getProtocol() -> getProtocol
    int[] getServices() -> getServices
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
org.xbill.DNS.WKSRecord$Protocol -> org.xbill.DNS.WKSRecord$Protocol:
    int ICMP -> ICMP
    int IGMP -> IGMP
    int GGP -> GGP
    int ST -> ST
    int TCP -> TCP
    int UCL -> UCL
    int EGP -> EGP
    int IGP -> IGP
    int BBN_RCC_MON -> BBN_RCC_MON
    int NVP_II -> NVP_II
    int PUP -> PUP
    int ARGUS -> ARGUS
    int EMCON -> EMCON
    int XNET -> XNET
    int CHAOS -> CHAOS
    int UDP -> UDP
    int MUX -> MUX
    int DCN_MEAS -> DCN_MEAS
    int HMP -> HMP
    int PRM -> PRM
    int XNS_IDP -> XNS_IDP
    int TRUNK_1 -> TRUNK_1
    int TRUNK_2 -> TRUNK_2
    int LEAF_1 -> LEAF_1
    int LEAF_2 -> LEAF_2
    int RDP -> RDP
    int IRTP -> IRTP
    int ISO_TP4 -> ISO_TP4
    int NETBLT -> NETBLT
    int MFE_NSP -> MFE_NSP
    int MERIT_INP -> MERIT_INP
    int SEP -> SEP
    int CFTP -> CFTP
    int SAT_EXPAK -> SAT_EXPAK
    int MIT_SUBNET -> MIT_SUBNET
    int RVD -> RVD
    int IPPC -> IPPC
    int SAT_MON -> SAT_MON
    int IPCV -> IPCV
    int BR_SAT_MON -> BR_SAT_MON
    int WB_MON -> WB_MON
    int WB_EXPAK -> WB_EXPAK
    org.xbill.DNS.Mnemonic protocols -> protocols
    java.lang.String string(int) -> string
    int value(java.lang.String) -> value
org.xbill.DNS.WKSRecord$Service -> org.xbill.DNS.WKSRecord$Service:
    int RJE -> RJE
    int ECHO -> ECHO
    int DISCARD -> DISCARD
    int USERS -> USERS
    int DAYTIME -> DAYTIME
    int QUOTE -> QUOTE
    int CHARGEN -> CHARGEN
    int FTP_DATA -> FTP_DATA
    int FTP -> FTP
    int TELNET -> TELNET
    int SMTP -> SMTP
    int NSW_FE -> NSW_FE
    int MSG_ICP -> MSG_ICP
    int MSG_AUTH -> MSG_AUTH
    int DSP -> DSP
    int TIME -> TIME
    int RLP -> RLP
    int GRAPHICS -> GRAPHICS
    int NAMESERVER -> NAMESERVER
    int NICNAME -> NICNAME
    int MPM_FLAGS -> MPM_FLAGS
    int MPM -> MPM
    int MPM_SND -> MPM_SND
    int NI_FTP -> NI_FTP
    int LOGIN -> LOGIN
    int LA_MAINT -> LA_MAINT
    int DOMAIN -> DOMAIN
    int ISI_GL -> ISI_GL
    int NI_MAIL -> NI_MAIL
    int VIA_FTP -> VIA_FTP
    int TACACS_DS -> TACACS_DS
    int BOOTPS -> BOOTPS
    int BOOTPC -> BOOTPC
    int TFTP -> TFTP
    int NETRJS_1 -> NETRJS_1
    int NETRJS_2 -> NETRJS_2
    int NETRJS_3 -> NETRJS_3
    int NETRJS_4 -> NETRJS_4
    int FINGER -> FINGER
    int HOSTS2_NS -> HOSTS2_NS
    int SU_MIT_TG -> SU_MIT_TG
    int MIT_DOV -> MIT_DOV
    int DCP -> DCP
    int SUPDUP -> SUPDUP
    int SWIFT_RVF -> SWIFT_RVF
    int TACNEWS -> TACNEWS
    int METAGRAM -> METAGRAM
    int HOSTNAME -> HOSTNAME
    int ISO_TSAP -> ISO_TSAP
    int X400 -> X400
    int X400_SND -> X400_SND
    int CSNET_NS -> CSNET_NS
    int RTELNET -> RTELNET
    int POP_2 -> POP_2
    int SUNRPC -> SUNRPC
    int AUTH -> AUTH
    int SFTP -> SFTP
    int UUCP_PATH -> UUCP_PATH
    int NNTP -> NNTP
    int ERPC -> ERPC
    int NTP -> NTP
    int LOCUS_MAP -> LOCUS_MAP
    int LOCUS_CON -> LOCUS_CON
    int PWDGEN -> PWDGEN
    int CISCO_FNA -> CISCO_FNA
    int CISCO_TNA -> CISCO_TNA
    int CISCO_SYS -> CISCO_SYS
    int STATSRV -> STATSRV
    int INGRES_NET -> INGRES_NET
    int LOC_SRV -> LOC_SRV
    int PROFILE -> PROFILE
    int NETBIOS_NS -> NETBIOS_NS
    int NETBIOS_DGM -> NETBIOS_DGM
    int NETBIOS_SSN -> NETBIOS_SSN
    int EMFIS_DATA -> EMFIS_DATA
    int EMFIS_CNTL -> EMFIS_CNTL
    int BL_IDM -> BL_IDM
    int SUR_MEAS -> SUR_MEAS
    int LINK -> LINK
    org.xbill.DNS.Mnemonic services -> services
    java.lang.String string(int) -> string
    int value(java.lang.String) -> value
org.xbill.DNS.WireParseException -> org.xbill.DNS.WireParseException:
org.xbill.DNS.X25Record -> org.xbill.DNS.X25Record:
    long serialVersionUID -> serialVersionUID
    byte[] address -> address
    org.xbill.DNS.Record getObject() -> getObject
    byte[] checkAndConvertAddress(java.lang.String) -> checkAndConvertAddress
    void rrFromWire(org.xbill.DNS.DNSInput) -> rrFromWire
    void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name) -> rdataFromString
    java.lang.String getAddress() -> getAddress
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> rrToWire
    java.lang.String rrToString() -> rrToString
org.xbill.DNS.Zone -> org.xbill.DNS.Zone:
    long serialVersionUID -> serialVersionUID
    int PRIMARY -> PRIMARY
    int SECONDARY -> SECONDARY
    java.util.Map data -> data
    org.xbill.DNS.Name origin -> origin
    java.lang.Object originNode -> originNode
    int dclass -> dclass
    org.xbill.DNS.RRset NS -> NS
    org.xbill.DNS.SOARecord SOA -> SOA
    boolean hasWild -> hasWild
    void validate() -> validate
    void maybeAddRecord(org.xbill.DNS.Record) -> maybeAddRecord
    void fromXFR(org.xbill.DNS.ZoneTransferIn) -> fromXFR
    org.xbill.DNS.Name getOrigin() -> getOrigin
    org.xbill.DNS.RRset getNS() -> getNS
    org.xbill.DNS.SOARecord getSOA() -> getSOA
    int getDClass() -> getDClass
    java.lang.Object exactName(org.xbill.DNS.Name) -> exactName
    org.xbill.DNS.RRset[] allRRsets(java.lang.Object) -> allRRsets
    org.xbill.DNS.RRset oneRRset(java.lang.Object,int) -> oneRRset
    org.xbill.DNS.RRset findRRset(org.xbill.DNS.Name,int) -> findRRset
    void addRRset(org.xbill.DNS.Name,org.xbill.DNS.RRset) -> addRRset
    void removeRRset(org.xbill.DNS.Name,int) -> removeRRset
    org.xbill.DNS.SetResponse lookup(org.xbill.DNS.Name,int) -> lookup
    org.xbill.DNS.SetResponse findRecords(org.xbill.DNS.Name,int) -> findRecords
    org.xbill.DNS.RRset findExactMatch(org.xbill.DNS.Name,int) -> findExactMatch
    void addRRset(org.xbill.DNS.RRset) -> addRRset
    void addRecord(org.xbill.DNS.Record) -> addRecord
    void removeRecord(org.xbill.DNS.Record) -> removeRecord
    java.util.Iterator iterator() -> iterator
    java.util.Iterator AXFR() -> AXFR
    void nodeToString(java.lang.StringBuffer,java.lang.Object) -> nodeToString
    java.lang.String toMasterFile() -> toMasterFile
    java.lang.String toString() -> toString
    java.util.Map access$000(org.xbill.DNS.Zone) -> access$000
    java.lang.Object access$100(org.xbill.DNS.Zone) -> access$100
    org.xbill.DNS.RRset[] access$200(org.xbill.DNS.Zone,java.lang.Object) -> access$200
    org.xbill.DNS.RRset access$300(org.xbill.DNS.Zone,java.lang.Object,int) -> access$300
    org.xbill.DNS.Name access$400(org.xbill.DNS.Zone) -> access$400
org.xbill.DNS.Zone$ZoneIterator -> org.xbill.DNS.Zone$ZoneIterator:
    java.util.Iterator zentries -> zentries
    org.xbill.DNS.RRset[] current -> current
    int count -> count
    boolean wantLastSOA -> wantLastSOA
    org.xbill.DNS.Zone this$0 -> this$0
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.xbill.DNS.ZoneTransferException -> org.xbill.DNS.ZoneTransferException:
org.xbill.DNS.ZoneTransferIn -> org.xbill.DNS.ZoneTransferIn:
    int INITIALSOA -> INITIALSOA
    int FIRSTDATA -> FIRSTDATA
    int IXFR_DELSOA -> IXFR_DELSOA
    int IXFR_DEL -> IXFR_DEL
    int IXFR_ADDSOA -> IXFR_ADDSOA
    int IXFR_ADD -> IXFR_ADD
    int AXFR -> AXFR
    int END -> END
    org.xbill.DNS.Name zname -> zname
    int qtype -> qtype
    int dclass -> dclass
    long ixfr_serial -> ixfr_serial
    boolean want_fallback -> want_fallback
    java.net.SocketAddress localAddress -> localAddress
    java.net.SocketAddress address -> address
    org.xbill.DNS.TCPClient client -> client
    org.xbill.DNS.TSIG tsig -> tsig
    org.xbill.DNS.TSIG$StreamVerifier verifier -> verifier
    long timeout -> timeout
    int state -> state
    long end_serial -> end_serial
    long current_serial -> current_serial
    org.xbill.DNS.Record initialsoa -> initialsoa
    int rtype -> rtype
    java.util.List axfr -> axfr
    java.util.List ixfr -> ixfr
    org.xbill.DNS.ZoneTransferIn newAXFR(org.xbill.DNS.Name,java.net.SocketAddress,org.xbill.DNS.TSIG) -> newAXFR
    org.xbill.DNS.ZoneTransferIn newAXFR(org.xbill.DNS.Name,java.lang.String,int,org.xbill.DNS.TSIG) -> newAXFR
    org.xbill.DNS.ZoneTransferIn newAXFR(org.xbill.DNS.Name,java.lang.String,org.xbill.DNS.TSIG) -> newAXFR
    org.xbill.DNS.ZoneTransferIn newIXFR(org.xbill.DNS.Name,long,boolean,java.net.SocketAddress,org.xbill.DNS.TSIG) -> newIXFR
    org.xbill.DNS.ZoneTransferIn newIXFR(org.xbill.DNS.Name,long,boolean,java.lang.String,int,org.xbill.DNS.TSIG) -> newIXFR
    org.xbill.DNS.ZoneTransferIn newIXFR(org.xbill.DNS.Name,long,boolean,java.lang.String,org.xbill.DNS.TSIG) -> newIXFR
    org.xbill.DNS.Name getName() -> getName
    int getType() -> getType
    void setTimeout(int) -> setTimeout
    void setDClass(int) -> setDClass
    void setLocalAddress(java.net.SocketAddress) -> setLocalAddress
    void openConnection() -> openConnection
    void sendQuery() -> sendQuery
    long getSOASerial(org.xbill.DNS.Record) -> getSOASerial
    void logxfr(java.lang.String) -> logxfr
    void fail(java.lang.String) -> fail
    void fallback() -> fallback
    void parseRR(org.xbill.DNS.Record) -> parseRR
    void closeConnection() -> closeConnection
    org.xbill.DNS.Message parseMessage(byte[]) -> parseMessage
    void doxfr() -> doxfr
    java.util.List run() -> run
    boolean isAXFR() -> isAXFR
    java.util.List getAXFR() -> getAXFR
    boolean isIXFR() -> isIXFR
    java.util.List getIXFR() -> getIXFR
    boolean isCurrent() -> isCurrent
org.xbill.DNS.ZoneTransferIn$1 -> org.xbill.DNS.ZoneTransferIn$1:
org.xbill.DNS.ZoneTransferIn$Delta -> org.xbill.DNS.ZoneTransferIn$Delta:
    long start -> start
    long end -> end
    java.util.List adds -> adds
    java.util.List deletes -> deletes
org.xbill.DNS.spi.DNSJavaNameService -> org.xbill.DNS.spi.DNSJavaNameService:
    java.lang.String nsProperty -> nsProperty
    java.lang.String domainProperty -> domainProperty
    java.lang.String v6Property -> v6Property
    boolean preferV6 -> preferV6
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    java.net.InetAddress[] lookupAllHostAddr(java.lang.String) -> lookupAllHostAddr
    java.lang.String getHostByAddr(byte[]) -> getHostByAddr
org.xbill.DNS.tests.primary -> org.xbill.DNS.tests.primary:
    void usage() -> usage
    void main(java.lang.String[]) -> main
org.xbill.DNS.tests.xfrin -> org.xbill.DNS.tests.xfrin:
    void usage(java.lang.String) -> usage
    void main(java.lang.String[]) -> main
org.xbill.DNS.utils.HMAC -> org.xbill.DNS.utils.HMAC:
    java.security.MessageDigest digest -> digest
    byte[] ipad -> ipad
    byte[] opad -> opad
    byte IPAD -> IPAD
    byte OPAD -> OPAD
    byte PADLEN -> PADLEN
    void init(byte[]) -> init
    void update(byte[],int,int) -> update
    void update(byte[]) -> update
    byte[] sign() -> sign
    boolean verify(byte[]) -> verify
    void clear() -> clear
org.xbill.DNS.utils.base16 -> org.xbill.DNS.utils.base16:
    java.lang.String Base16 -> Base16
    java.lang.String toString(byte[]) -> toString
    byte[] fromString(java.lang.String) -> fromString
org.xbill.DNS.utils.base32 -> org.xbill.DNS.utils.base32:
    java.lang.String alphabet -> alphabet
    boolean padding -> padding
    boolean lowercase -> lowercase
    int blockLenToPadding(int) -> blockLenToPadding
    int paddingToBlockLen(int) -> paddingToBlockLen
    java.lang.String toString(byte[]) -> toString
    byte[] fromString(java.lang.String) -> fromString
org.xbill.DNS.utils.base32$Alphabet -> org.xbill.DNS.utils.base32$Alphabet:
    java.lang.String BASE32 -> BASE32
    java.lang.String BASE32HEX -> BASE32HEX
org.xbill.DNS.utils.base64 -> org.xbill.DNS.utils.base64:
    java.lang.String Base64 -> Base64
    java.lang.String toString(byte[]) -> toString
    java.lang.String formatString(byte[],int,java.lang.String,boolean) -> formatString
    byte[] fromString(java.lang.String) -> fromString
org.xbill.DNS.utils.hexdump -> org.xbill.DNS.utils.hexdump:
    char[] hex -> hex
    java.lang.String dump(java.lang.String,byte[],int,int) -> dump
    java.lang.String dump(java.lang.String,byte[]) -> dump
